输入关键词，空格分隔:
['anchor', 'curve', 'line']
./node_modules/source-map-support/browser-source-map-support.js 58 null}function m(k,u){var d=k;"string"===typeof k&&(d=f.parseSourceMapInput(k));var g=f.getArg(d,"version");d=f.getArg(d,"sections");if(g!=this._version)throw Error("Unsupported version: "+g);this._sources=new l;this._names=new l;var n={line:-1,column:0};this._sections=d.map(function(v){if(v.url)throw Error("Support for url field in sections not implemented.");var z=f.getArg(v,"offset"),G=f.getArg(z,"line"),D=f.getArg(z,"column");if(G<n.line||G===n.line&&D<n.column)throw Error("Section offsets must be ordered and non-overlapping.");

./node_modules/source-map-support/browser-source-map-support.js 62 originalLine:n.originalLine,originalColumn:n.originalColumn,name:null===n.name?null:this._names.at(n.name)}},this).forEach(k,u)};e.prototype.allGeneratedPositionsFor=function(k){var u=f.getArg(k,"line"),d={source:f.getArg(k,"source"),originalLine:u,originalColumn:f.getArg(k,"column",0)};null!=this.sourceRoot&&(d.source=f.relative(this.sourceRoot,d.source));if(!this._sources.has(d.source))return[];d.source=this._sources.indexOf(d.source);var g=[];d=this._findMapping(d,this._originalMappings,"originalLine",

./node_modules/source-map-support/browser-source-map-support.js 63 "originalColumn",f.compareByOriginalPositions,c.LEAST_UPPER_BOUND);if(0<=d){var n=this._originalMappings[d];if(void 0===k.column)for(u=n.originalLine;n&&n.originalLine===u;)g.push({line:f.getArg(n,"generatedLine",null),column:f.getArg(n,"generatedColumn",null),lastColumn:f.getArg(n,"lastGeneratedColumn",null)}),n=this._originalMappings[++d];else for(k=n.originalColumn;n&&n.originalLine===u&&n.originalColumn==k;)g.push({line:f.getArg(n,"generatedLine",null),column:f.getArg(n,"generatedColumn",null),

./node_modules/source-map-support/browser-source-map-support.js 66 k,this._sourceMapURL)},this)}});p.prototype._parseMappings=function(k,u){for(var d=1,g=0,n=0,v=0,z=0,G=0,D=k.length,L=0,a={},b={},h=[],w=[],y,I,K,N,P;L<D;)if(";"===k.charAt(L))d++,L++,g=0;else if(","===k.charAt(L))L++;else{y=new t;y.generatedLine=d;for(N=L;N<D&&!this._charIsMappingSeparator(k,N);N++);I=k.slice(L,N);if(K=a[I])L+=I.length;else{for(K=[];L<N;)q.decode(k,L,b),P=b.value,L=b.rest,K.push(P);if(2===K.length)throw Error("Found a source, but no line and column");if(3===K.length)throw Error("Found a source and line, but no column");

./node_modules/source-map-support/browser-source-map-support.js 69 "line"),generatedColumn:f.getArg(k,"column")};k=this._findMapping(u,this._generatedMappings,"generatedLine","generatedColumn",f.compareByGeneratedPositionsDeflated,f.getArg(k,"bias",e.GREATEST_LOWER_BOUND));if(0<=k&&(k=this._generatedMappings[k],k.generatedLine===u.generatedLine)){u=f.getArg(k,"source",null);null!==u&&(u=this._sources.at(u),u=f.computeSourceURL(this.sourceRoot,u,this._sourceMapURL));var d=f.getArg(k,"name",null);null!==d&&(d=this._names.at(d));return{source:u,line:f.getArg(k,"originalLine",

./node_modules/source-map-support/browser-source-map-support.js 70 null),column:f.getArg(k,"originalColumn",null),name:d}}return{source:null,line:null,column:null,name:null}};p.prototype.hasContentsOfAllSources=function(){return this.sourcesContent?this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some(function(k){return null==k}):!1};p.prototype.sourceContentFor=function(k,u){if(!this.sourcesContent)return null;var d=k;null!=this.sourceRoot&&(d=f.relative(this.sourceRoot,d));if(this._sources.has(d))return this.sourcesContent[this._sources.indexOf(d)];

./node_modules/source-map-support/browser-source-map-support.js 72 f.getArg(k,"source");null!=this.sourceRoot&&(u=f.relative(this.sourceRoot,u));if(!this._sources.has(u))return{line:null,column:null,lastColumn:null};u=this._sources.indexOf(u);u={source:u,originalLine:f.getArg(k,"line"),originalColumn:f.getArg(k,"column")};k=this._findMapping(u,this._originalMappings,"originalLine","originalColumn",f.compareByOriginalPositions,f.getArg(k,"bias",e.GREATEST_LOWER_BOUND));return 0<=k&&(k=this._originalMappings[k],k.source===u.source)?{line:f.getArg(k,"generatedLine",

./node_modules/source-map-support/browser-source-map-support.js 73 null),column:f.getArg(k,"generatedColumn",null),lastColumn:f.getArg(k,"lastGeneratedColumn",null)}:{line:null,column:null,lastColumn:null}};A.BasicSourceMapConsumer=p;m.prototype=Object.create(e.prototype);m.prototype.constructor=e;m.prototype._version=3;Object.defineProperty(m.prototype,"sources",{get:function(){for(var k=[],u=0;u<this._sections.length;u++)for(var d=0;d<this._sections[u].consumer.sources.length;d++)k.push(this._sections[u].consumer.sources[d]);return k}});m.prototype.originalPositionFor=

./node_modules/source-map-support/browser-source-map-support.js 74 function(k){var u={generatedLine:f.getArg(k,"line"),generatedColumn:f.getArg(k,"column")},d=c.search(u,this._sections,function(g,n){var v=g.generatedLine-n.generatedOffset.generatedLine;return v?v:g.generatedColumn-n.generatedOffset.generatedColumn});return(d=this._sections[d])?d.consumer.originalPositionFor({line:u.generatedLine-(d.generatedOffset.generatedLine-1),column:u.generatedColumn-(d.generatedOffset.generatedLine===u.generatedLine?d.generatedOffset.generatedColumn-1:0),bias:k.bias}):{source:null,

./node_modules/source-map-support/browser-source-map-support.js 75 line:null,column:null,name:null}};m.prototype.hasContentsOfAllSources=function(){return this._sections.every(function(k){return k.consumer.hasContentsOfAllSources()})};m.prototype.sourceContentFor=function(k,u){for(var d=0;d<this._sections.length;d++){var g=this._sections[d].consumer.sourceContentFor(k,!0);if(g)return g}if(u)return null;throw Error('"'+k+'" is not in the SourceMap.');};m.prototype.generatedPositionFor=function(k){for(var u=0;u<this._sections.length;u++){var d=this._sections[u];if(-1!==

./node_modules/source-map-support/browser-source-map-support.js 76 d.consumer.sources.indexOf(f.getArg(k,"source"))){var g=d.consumer.generatedPositionFor(k);if(g)return{line:g.line+(d.generatedOffset.generatedLine-1),column:g.column+(d.generatedOffset.generatedLine===g.line?d.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}};m.prototype._parseMappings=function(k,u){this.__generatedMappings=[];this.__originalMappings=[];for(var d=0;d<this._sections.length;d++)for(var g=this._sections[d],n=g.consumer._generatedMappings,v=0;v<n.length;v++){var z=

./node_modules/source-map-support/browser-source-map-support.js 79 "skipValidation",!1);this._sources=new m;this._names=new m;this._mappings=new f;this._sourcesContents=null}var p=C("./base64-vlq"),t=C("./util"),m=C("./array-set").ArraySet,f=C("./mapping-list").MappingList;e.prototype._version=3;e.fromSourceMap=function(c){var l=c.sourceRoot,q=new e({file:c.file,sourceRoot:l});c.eachMapping(function(r){var k={generated:{line:r.generatedLine,column:r.generatedColumn}};null!=r.source&&(k.source=r.source,null!=l&&(k.source=t.relative(l,k.source)),k.original={line:r.originalLine,

./node_modules/source-map-support/browser-source-map-support.js 81 null!=c&&(c=String(c),this._names.has(c)||this._names.add(c));this._mappings.add({generatedLine:l.line,generatedColumn:l.column,originalLine:null!=q&&q.line,originalColumn:null!=q&&q.column,source:r,name:c})};e.prototype.setSourceContent=function(c,l){var q=c;null!=this._sourceRoot&&(q=t.relative(this._sourceRoot,q));null!=l?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[t.toSetString(q)]=l):this._sourcesContents&&(delete this._sourcesContents[t.toSetString(q)],

./node_modules/source-map-support/browser-source-map-support.js 82 0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))};e.prototype.applySourceMap=function(c,l,q){var r=l;if(null==l){if(null==c.file)throw Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=c.file}var k=this._sourceRoot;null!=k&&(r=t.relative(k,r));var u=new m,d=new m;this._mappings.unsortedForEach(function(g){if(g.source===r&&null!=g.originalLine){var n=c.originalPositionFor({line:g.originalLine,

./node_modules/source-map-support/browser-source-map-support.js 83 column:g.originalColumn});null!=n.source&&(g.source=n.source,null!=q&&(g.source=t.join(q,g.source)),null!=k&&(g.source=t.relative(k,g.source)),g.originalLine=n.line,g.originalColumn=n.column,null!=n.name&&(g.name=n.name))}n=g.source;null==n||u.has(n)||u.add(n);g=g.name;null==g||d.has(g)||d.add(g)},this);this._sources=u;this._names=d;c.sources.forEach(function(g){var n=c.sourceContentFor(g);null!=n&&(null!=q&&(g=t.join(q,g)),null!=k&&(g=t.relative(k,g)),this.setSourceContent(g,n))},this)};e.prototype._validateMapping=

./node_modules/source-map-support/browser-source-map-support.js 84 function(c,l,q,r){if(l&&"number"!==typeof l.line&&"number"!==typeof l.column)throw Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if(!(c&&"line"in c&&"column"in c&&0<c.line&&0<=c.column&&!l&&!q&&!r||c&&"line"in c&&"column"in c&&l&&"line"in l&&"column"in l&&0<c.line&&0<=c.column&&0<l.line&&0<=l.column&&

./node_modules/source-map-support/browser-source-map-support.js 88 [];this.sourceContents={};this.line=null==f?null:f;this.column=null==c?null:c;this.source=null==l?null:l;this.name=null==r?null:r;this.$$$isSourceNode$$$=!0;null!=q&&this.add(q)}var p=C("./source-map-generator").SourceMapGenerator,t=C("./util"),m=/(\r?\n)/;e.fromStringWithSourceMap=function(f,c,l){function q(z,G){if(null===z||void 0===z.source)r.add(G);else{var D=l?t.join(l,z.source):z.source;r.add(new e(z.originalLine,z.originalColumn,D,G,z.name))}}var r=new e,k=f.split(m),u=0,d=function(){var z=

./node_modules/source-map-support/browser-source-map-support.js 91 else if(f.$$$isSourceNode$$$||"string"===typeof f)this.children.unshift(f);else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+f);return this};e.prototype.walk=function(f){for(var c,l=0,q=this.children.length;l<q;l++)c=this.children[l],c.$$$isSourceNode$$$?c.walk(f):""!==c&&f(c,{source:this.source,line:this.line,column:this.column,name:this.name})};e.prototype.join=function(f){var c,l=this.children.length;if(0<l){var q=[];for(c=0;c<l-1;c++)q.push(this.children[c]),

./node_modules/source-map-support/browser-source-map-support.js 93 this.children[c].walkSourceContents(f);var q=Object.keys(this.sourceContents);c=0;for(l=q.length;c<l;c++)f(t.fromSetString(q[c]),this.sourceContents[q[c]])};e.prototype.toString=function(){var f="";this.walk(function(c){f+=c});return f};e.prototype.toStringWithSourceMap=function(f){var c="",l=1,q=0,r=new p(f),k=!1,u=null,d=null,g=null,n=null;this.walk(function(v,z){c+=v;null!==z.source&&null!==z.line&&null!==z.column?(u===z.source&&d===z.line&&g===z.column&&n===z.name||r.addMapping({source:z.source,

./node_modules/source-map-support/browser-source-map-support.js 94 original:{line:z.line,column:z.column},generated:{line:l,column:q},name:z.name}),u=z.source,d=z.line,g=z.column,n=z.name,k=!0):k&&(r.addMapping({generated:{line:l,column:q}}),u=null,k=!1);for(var G=0,D=v.length;G<D;G++)10===v.charCodeAt(G)?(l++,q=0,G+1===D?(u=null,k=!1):k&&r.addMapping({source:z.source,original:{line:z.line,column:z.column},generated:{line:l,column:q},name:z.name})):q++});this.walkSourceContents(function(v,z){r.setSourceContent(v,z)});return{code:c,map:r}};A.SourceNode=e},{"./source-map-generator":17,

./node_modules/source-map-support/browser-source-map-support.js 104 m(B.url,F.source),F):x}function c(x){var B=/^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(x);return B?(x=f({source:B[2],line:+B[3],column:B[4]-1}),"eval at "+B[1]+" ("+x.source+":"+x.line+":"+(x.column+1)+")"):(B=/^eval at ([^(]+) \((.+)\)$/.exec(x))?"eval at "+B[1]+" ("+c(B[2])+")":x}function l(){var x="";if(this.isNative())x="native";else{var B=this.getScriptNameOrSourceURL();!B&&this.isEval()&&(x=this.getEvalOrigin(),x+=", ");x=B?x+B:x+"<anonymous>";B=this.getLineNumber();null!=B&&(x+=":"+B,(B=

./node_modules/source-map-support/browser-source-map-support.js 107 f({source:F,line:E,column:H});B.curPosition=O;x=q(x);var T=x.getFunctionName;x.getFunctionName=function(){return null==B.nextPosition?T():B.nextPosition.name||T()};x.getFileName=function(){return O.source};x.getLineNumber=function(){return O.line};x.getColumnNumber=function(){return O.column+1};x.getScriptNameOrSourceURL=function(){return O.source};return x}var Q=x.isEval()&&x.getEvalOrigin();Q&&(Q=c(Q),x=q(x),x.getEvalOrigin=function(){return Q});return x}function k(x,B){L&&(b={},h={});for(var F=

./node_modules/source-map-support/source-map-support.js 223       // Load all sources stored inline with the source map into the file cache

./node_modules/source-map-support/source-map-support.js 246     // Only return the original position if a matching line was found. If no

./node_modules/source-map-support/source-map-support.js 247     // matching line is found then we return position instead, which will cause

./node_modules/source-map-support/source-map-support.js 248     // the stack trace to print the path and line for the compiled file. It is

./node_modules/source-map-support/source-map-support.js 269       line: +match[3],

./node_modules/source-map-support/source-map-support.js 273       position.line + ':' + (position.column + 1) + ')';

./node_modules/source-map-support/source-map-support.js 312     var lineNumber = this.getLineNumber();

./node_modules/source-map-support/source-map-support.js 313     if (lineNumber != null) {

./node_modules/source-map-support/source-map-support.js 314       fileLocation += ":" + lineNumber;

./node_modules/source-map-support/source-map-support.js 322   var line = "";

./node_modules/source-map-support/source-map-support.js 336         line += typeName + ".";

./node_modules/source-map-support/source-map-support.js 338       line += functionName;

./node_modules/source-map-support/source-map-support.js 340         line += " [as " + methodName + "]";

./node_modules/source-map-support/source-map-support.js 343       line += typeName + "." + (methodName || "<anonymous>");

./node_modules/source-map-support/source-map-support.js 346     line += "new " + (functionName || "<anonymous>");

./node_modules/source-map-support/source-map-support.js 348     line += functionName;

./node_modules/source-map-support/source-map-support.js 350     line += fileLocation;

./node_modules/source-map-support/source-map-support.js 354     line += " (" + fileLocation + ")";

./node_modules/source-map-support/source-map-support.js 356   return line;

./node_modules/source-map-support/source-map-support.js 383     var line = frame.getLineNumber();

./node_modules/source-map-support/source-map-support.js 393     if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {

./node_modules/source-map-support/source-map-support.js 399       line: line,

./node_modules/source-map-support/source-map-support.js 412     frame.getLineNumber = function() { return position.line; };

./node_modules/source-map-support/source-map-support.js 458     var line = +match[2];

./node_modules/source-map-support/source-map-support.js 461     // Support the inline sourceContents inside the source map

./node_modules/source-map-support/source-map-support.js 473     // Format the line from the original source code like node does

./node_modules/source-map-support/source-map-support.js 475       var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];

./node_modules/source-map-support/source-map-support.js 477         return source + ':' + line + '\n' + code + '\n' +

./node_modules/source-map-support/source-map-support.js 558   // Support runtime transpilers that include inline source maps

./node_modules/object-keys/implementation.js 8 	var isArgs = require('./isArguments'); // eslint-disable-line global-require

./node_modules/object-keys/index.js 19 			Object.keys = function keys(object) { // eslint-disable-line func-name-matching

./node_modules/strip-final-newline/package.json 2 	"name": "strip-final-newline",

./node_modules/strip-final-newline/package.json 4 	"description": "Strip the final newline character from a string/buffer",

./node_modules/strip-final-newline/package.json 6 	"repository": "sindresorhus/strip-final-newline",

./node_modules/strip-final-newline/package.json 30 		"newline",

./node_modules/strip-final-newline/package.json 31 		"linebreak",

./node_modules/has-tostringtag/test/tests.js 3 // eslint-disable-next-line consistent-return

./node_modules/depd/index.js 253   var line = callSite.getLineNumber()

./node_modules/depd/index.js 260   var site = [file, line, colm]

./node_modules/depd/index.js 403   var deprecate = this // eslint-disable-line no-unused-vars

./node_modules/depd/index.js 409    // eslint-disable-next-line no-eval

./node_modules/depd/lib/compat/callsite-tostring.js 37     var lineNumber = callSite.getLineNumber()

./node_modules/depd/lib/compat/callsite-tostring.js 38     if (lineNumber != null) {

./node_modules/depd/lib/compat/callsite-tostring.js 39       fileLocation += ':' + lineNumber

./node_modules/depd/lib/compat/callsite-tostring.js 61   var line = ''

./node_modules/depd/lib/compat/callsite-tostring.js 69         line += typeName + '.'

./node_modules/depd/lib/compat/callsite-tostring.js 72       line += functionName

./node_modules/depd/lib/compat/callsite-tostring.js 75         line += ' [as ' + methodName + ']'

./node_modules/depd/lib/compat/callsite-tostring.js 78       line += typeName + '.' + (methodName || '<anonymous>')

./node_modules/depd/lib/compat/callsite-tostring.js 81     line += 'new ' + (functionName || '<anonymous>')

./node_modules/depd/lib/compat/callsite-tostring.js 83     line += functionName

./node_modules/depd/lib/compat/callsite-tostring.js 86     line += fileLocation

./node_modules/depd/lib/compat/callsite-tostring.js 90     line += ' (' + fileLocation + ')'

./node_modules/depd/lib/compat/callsite-tostring.js 93   return line

./node_modules/globals/globals.json 239 		"AnimationTimeline": false,

./node_modules/globals/globals.json 469 		"IdleDeadline": false,

./node_modules/globals/globals.json 545 		"OfflineAudioCompletionEvent": false,

./node_modules/globals/globals.json 546 		"OfflineAudioContext": false,

./node_modules/globals/globals.json 607 		"onoffline": true,

./node_modules/globals/globals.json 608 		"ononline": true,

./node_modules/globals/globals.json 849 		"SVGPolylineElement": false,

./node_modules/globals/globals.json 976 		"onoffline": true,

./node_modules/globals/globals.json 977 		"ononline": true,

./node_modules/globals/globals.json 1422 		"onoffline": true,

./node_modules/globals/globals.json 1423 		"ononline": true,

./node_modules/schema-utils/dist/ValidationError.js 720           // eslint-disable-next-line no-param-reassign

./node_modules/schema-utils/dist/ValidationError.js 729       // eslint-disable-next-line no-param-reassign

./node_modules/schema-utils/dist/ValidationError.js 757       // eslint-disable-next-line no-param-reassign

./node_modules/schema-utils/dist/ValidationError.js 792           } = error; // eslint-disable-next-line default-case

./node_modules/schema-utils/dist/validate.js 86         // eslint-disable-next-line no-param-reassign

./node_modules/schema-utils/dist/validate.js 144         } // eslint-disable-next-line no-undefined, no-param-reassign

./node_modules/schema-utils/dist/keywords/absolutePath.js 23     // eslint-disable-next-line no-undefined

./node_modules/schema-utils/dist/keywords/absolutePath.js 26     // eslint-disable-next-line no-undefined

./node_modules/requires-port/package.json 7     "100%": "istanbul check-coverage --statements 100 --functions 100 --lines 100 --branches 100",

./node_modules/buffer/index.js 14   (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation

./node_modules/buffer/index.js 15     ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation

./node_modules/buffer/index.js 335   if (+length != length) { // eslint-disable-line eqeqeq

./node_modules/buffer/index.js 1802   return obj !== obj // eslint-disable-line no-self-compare

./node_modules/minimatch/minimatch.js 626     // the string, which is of course impossible, except in multi-line

./node_modules/react/cjs/react-jsx-runtime.development.js 115     // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react/cjs/react-jsx-runtime.development.js 329       // Extract the VM specific prefix used by each line.

./node_modules/react/cjs/react-jsx-runtime.development.js 336     } // We use the prefix to ensure our stacks line up with native stack frames.

./node_modules/react/cjs/react-jsx-runtime.development.js 425     // This is inlined manually because closure doesn't do it for us.

./node_modules/react/cjs/react-jsx-runtime.development.js 448           // In V8, the first line is describing the message but other VMs don't.

./node_modules/react/cjs/react-jsx-runtime.development.js 449           // If we're about to return the first line, and the control is also on the same

./node_modules/react/cjs/react-jsx-runtime.development.js 450           // line, that's a pretty good indicator that our sample threw at same line as

./node_modules/react/cjs/react-jsx-runtime.development.js 467                 } // Return the line we found.

./node_modules/react/cjs/react-jsx-runtime.development.js 739  * indicating filename, line number, and/or other information.

./node_modules/react/cjs/react-jsx-runtime.development.js 916       var lineNumber = source.lineNumber;

./node_modules/react/cjs/react-jsx-runtime.development.js 917       return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';

./node_modules/react/cjs/react-jsx-dev-runtime.development.js 115     // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react/cjs/react-jsx-dev-runtime.development.js 329       // Extract the VM specific prefix used by each line.

./node_modules/react/cjs/react-jsx-dev-runtime.development.js 336     } // We use the prefix to ensure our stacks line up with native stack frames.

./node_modules/react/cjs/react-jsx-dev-runtime.development.js 425     // This is inlined manually because closure doesn't do it for us.

./node_modules/react/cjs/react-jsx-dev-runtime.development.js 448           // In V8, the first line is describing the message but other VMs don't.

./node_modules/react/cjs/react-jsx-dev-runtime.development.js 449           // If we're about to return the first line, and the control is also on the same

./node_modules/react/cjs/react-jsx-dev-runtime.development.js 450           // line, that's a pretty good indicator that our sample threw at same line as

./node_modules/react/cjs/react-jsx-dev-runtime.development.js 467                 } // Return the line we found.

./node_modules/react/cjs/react-jsx-dev-runtime.development.js 739  * indicating filename, line number, and/or other information.

./node_modules/react/cjs/react-jsx-dev-runtime.development.js 916       var lineNumber = source.lineNumber;

./node_modules/react/cjs/react-jsx-dev-runtime.development.js 917       return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';

./node_modules/react/cjs/react.development.js 218     // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react/cjs/react.development.js 644  * indicating filename, line number, and/or other information.

./node_modules/react/cjs/react.development.js 1644       // Extract the VM specific prefix used by each line.

./node_modules/react/cjs/react.development.js 1651     } // We use the prefix to ensure our stacks line up with native stack frames.

./node_modules/react/cjs/react.development.js 1740     // This is inlined manually because closure doesn't do it for us.

./node_modules/react/cjs/react.development.js 1763           // In V8, the first line is describing the message but other VMs don't.

./node_modules/react/cjs/react.development.js 1764           // If we're about to return the first line, and the control is also on the same

./node_modules/react/cjs/react.development.js 1765           // line, that's a pretty good indicator that our sample threw at same line as

./node_modules/react/cjs/react.development.js 1782                 } // Return the line we found.

./node_modules/react/cjs/react.development.js 1977     var lineNumber = source.lineNumber;

./node_modules/react/cjs/react.development.js 1978     return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';

./node_modules/react/umd/react.development.js 243       // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react/umd/react.development.js 669    * indicating filename, line number, and/or other information.

./node_modules/react/umd/react.development.js 1669         // Extract the VM specific prefix used by each line.

./node_modules/react/umd/react.development.js 1676       } // We use the prefix to ensure our stacks line up with native stack frames.

./node_modules/react/umd/react.development.js 1765       // This is inlined manually because closure doesn't do it for us.

./node_modules/react/umd/react.development.js 1788             // In V8, the first line is describing the message but other VMs don't.

./node_modules/react/umd/react.development.js 1789             // If we're about to return the first line, and the control is also on the same

./node_modules/react/umd/react.development.js 1790             // line, that's a pretty good indicator that our sample threw at same line as

./node_modules/react/umd/react.development.js 1807                   } // Return the line we found.

./node_modules/react/umd/react.development.js 2002       var lineNumber = source.lineNumber;

./node_modules/react/umd/react.development.js 2003       return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';

./node_modules/react/umd/react.development.js 2415     var deadline = 0; // TODO: Make this configurable

./node_modules/react/umd/react.development.js 2421         return getCurrentTime() >= deadline;

./node_modules/react/umd/react.development.js 2443     var performWorkUntilDeadline = function () {

./node_modules/react/umd/react.development.js 2449         deadline = currentTime + yieldInterval;

./node_modules/react/umd/react.development.js 2476     channel.port1.onmessage = performWorkUntilDeadline;

./node_modules/react/umd/react.development.js 2702         // This currentTask hasn't expired, and we've reached the deadline.

./node_modules/react/umd/react.development.js 2800       // This is a fork of runWithPriority, inlined for performance.

./node_modules/serve-index/node_modules/debug/src/node.js 82  * Map %o to `util.inspect()`, all on a single line.

./node_modules/serve-index/node_modules/debug/src/node.js 94  * Map %o to `util.inspect()`, allowing multiple lines if needed.

./node_modules/serve-index/node_modules/debug/src/debug.js 103         // now we need to remove `args[index]` since it's inlined in the `format`

./node_modules/@xtuc/long/src/long.js 297 // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be

./node_modules/domutils/lib/stringify.js 33  * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags.

./node_modules/cross-spawn/lib/enoent.js 34         return originalEmit.apply(cp, arguments); // eslint-disable-line prefer-rest-params

./node_modules/convert-source-map/index.js 67   return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;

./node_modules/convert-source-map/index.js 135   return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;

./node_modules/convert-source-map/package.json 18     "inline-source-map": "~0.6.2",

./node_modules/define-properties/index.js 18 		// eslint-disable-next-line no-unused-vars, no-restricted-syntax

./node_modules/define-properties/.jscs.json 111 		"lineBreakAfterOpeningBraces": true,

./node_modules/define-properties/.jscs.json 112 		"lineBreakBeforeClosingBraces": true

./node_modules/define-properties/.jscs.json 117 	"validateNewlineAfterArrayElements": {

./node_modules/define-properties/.jscs.json 134 	"requireAlignedMultilineParams": false,

./node_modules/define-properties/.jscs.json 167 	"requireNewlineBeforeSingleStatementsInIf": false,

./node_modules/micromatch/package.json 17     "Olsten Larck (https://i.am.charlike.online)",

./node_modules/serialize-javascript/index.js 23 // Mapping of unsafe HTML and invalid JavaScript line terminator chars to their

./node_modules/serialize-javascript/index.js 206     // Replace unsafe HTML and invalid JavaScript line terminator chars with

./node_modules/express/node_modules/debug/src/node.js 82  * Map %o to `util.inspect()`, all on a single line.

./node_modules/express/node_modules/debug/src/node.js 94  * Map %o to `util.inspect()`, allowing multiple lines if needed.

./node_modules/express/node_modules/debug/src/debug.js 103         // now we need to remove `args[index]` since it's inlined in the `format`

./node_modules/express/lib/application.js 150  * Dispatch a req, res pair into the application. Starts pipeline processing.

./node_modules/call-bind/test/index.js 20 		// eslint-disable-next-line no-invalid-this

./node_modules/fastest-levenshtein/.eslintrc.js 17     "max-lines-per-function": "off",

./node_modules/fastest-levenshtein/.eslintrc.js 19     "multiline-comment-style": "off",

./node_modules/unicode-match-property-value-ecmascript/data/mappings.js 92 		['Bali', 'Balinese'],

./node_modules/unicode-match-property-value-ecmascript/data/mappings.js 256 		['Balinese', 'Balinese'],

./node_modules/unicode-match-property-value-ecmascript/data/mappings.js 415 		['Bali', 'Balinese'],

./node_modules/unicode-match-property-value-ecmascript/data/mappings.js 579 		['Balinese', 'Balinese'],

./node_modules/css-select/lib/general.js 38             // eslint-disable-next-line no-case-declarations

./node_modules/events/events.js 137       // Note: The comments on the `throw` lines are intentional, they show

./node_modules/events/events.js 210       // eslint-disable-next-line no-restricted-syntax

./node_modules/dom-serializer/lib/foreignNames.js 39     ["lineargradient", "linearGradient"],

./node_modules/dom-serializer/lib/foreignNames.js 60     ["keysplines", "keySplines"],

./node_modules/spdy-transport/lib/spdy-transport/utils.js 8   ? Object.assign // eslint-disable-next-line

./node_modules/@discoveryjs/json-ext/dist/json-ext.js 671                         // eslint-disable-next-line curly

./node_modules/@discoveryjs/json-ext/src/parse-chunked.js 201                     // eslint-disable-next-line curly

./node_modules/send/node_modules/debug/src/node.js 82  * Map %o to `util.inspect()`, all on a single line.

./node_modules/send/node_modules/debug/src/node.js 94  * Map %o to `util.inspect()`, allowing multiple lines if needed.

./node_modules/send/node_modules/debug/src/debug.js 103         // now we need to remove `args[index]` since it's inlined in the `format`

./node_modules/postcss-selector-parser/dist/tokenTypes.js 4 exports.combinator = exports.word = exports.comment = exports.str = exports.tab = exports.newline = exports.feed = exports.cr = exports.backslash = exports.bang = exports.slash = exports.doubleQuote = exports.singleQuote = exports.space = exports.greaterThan = exports.pipe = exports.equals = exports.plus = exports.caret = exports.tilde = exports.dollar = exports.closeSquare = exports.openSquare = exports.closeParenthesis = exports.openParenthesis = exports.semicolon = exports.colon = exports.comma = exports.at = exports.asterisk = exports.ampersand = void 0;

./node_modules/postcss-selector-parser/dist/tokenTypes.js 80 var newline = 10; // '\n'.charCodeAt(0);

./node_modules/postcss-selector-parser/dist/tokenTypes.js 82 exports.newline = newline;

./node_modules/postcss-selector-parser/dist/parser.js 52 var WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);

./node_modules/postcss-selector-parser/dist/parser.js 57     line: token[_tokenize.FIELDS.START_LINE],

./node_modules/postcss-selector-parser/dist/parser.js 64     line: token[_tokenize.FIELDS.END_LINE],

./node_modules/postcss-selector-parser/dist/parser.js 72       line: startLine,

./node_modules/postcss-selector-parser/dist/parser.js 76       line: endLine,

./node_modules/postcss-selector-parser/dist/parser.js 157           line: 1,

./node_modules/postcss-selector-parser/dist/tokenize.js 15 var unescapable = (_unescapable = {}, _unescapable[t.tab] = true, _unescapable[t.newline] = true, _unescapable[t.cr] = true, _unescapable[t.feed] = true, _unescapable);

./node_modules/postcss-selector-parser/dist/tokenize.js 16 var wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t.space] = true, _wordDelimiters[t.tab] = true, _wordDelimiters[t.newline] = true, _wordDelimiters[t.cr] = true, _wordDelimiters[t.feed] = true, _wordDelimiters[t.ampersand] = true, _wordDelimiters[t.asterisk] = true, _wordDelimiters[t.bang] = true, _wordDelimiters[t.comma] = true, _wordDelimiters[t.colon] = true, _wordDelimiters[t.semicolon] = true, _wordDelimiters[t.openParenthesis] = true, _wordDelimiters[t.closeParenthesis] = true, _wordDelimiters[t.openSquare] = true, _wordDelimiters[t.closeSquare] = true, _wordDelimiters[t.singleQuote] = true, _wordDelimiters[t.doubleQuote] = true, _wordDelimiters[t.plus] = true, _wordDelimiters[t.pipe] = true, _wordDelimiters[t.tilde] = true, _wordDelimiters[t.greaterThan] = true, _wordDelimiters[t.equals] = true, _wordDelimiters[t.dollar] = true, _wordDelimiters[t.caret] = true, _wordDelimiters[t.slash] = true, _wordDelimiters);

./node_modules/postcss-selector-parser/dist/tokenize.js 99   var line = 1;

./node_modules/postcss-selector-parser/dist/tokenize.js 102   var code, content, endColumn, endLine, escaped, escapePos, last, lines, next, nextLine, nextOffset, quote, tokenType;

./node_modules/postcss-selector-parser/dist/tokenize.js 110       throw input.error('Unclosed ' + what, line, start - offset, start);

./node_modules/postcss-selector-parser/dist/tokenize.js 117     if (code === t.newline) {

./node_modules/postcss-selector-parser/dist/tokenize.js 119       line += 1;

./node_modules/postcss-selector-parser/dist/tokenize.js 125       case t.newline:

./node_modules/postcss-selector-parser/dist/tokenize.js 134           if (code === t.newline) {

./node_modules/postcss-selector-parser/dist/tokenize.js 136             line += 1;

./node_modules/postcss-selector-parser/dist/tokenize.js 138         } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);

./node_modules/postcss-selector-parser/dist/tokenize.js 141         endLine = line;

./node_modules/postcss-selector-parser/dist/tokenize.js 158         endLine = line;

./node_modules/postcss-selector-parser/dist/tokenize.js 179         endLine = line;

./node_modules/postcss-selector-parser/dist/tokenize.js 206         endLine = line;

./node_modules/postcss-selector-parser/dist/tokenize.js 220           lines = content.split('\n');

./node_modules/postcss-selector-parser/dist/tokenize.js 221           last = lines.length - 1;

./node_modules/postcss-selector-parser/dist/tokenize.js 224             nextLine = line + last;

./node_modules/postcss-selector-parser/dist/tokenize.js 225             nextOffset = next - lines[last].length;

./node_modules/postcss-selector-parser/dist/tokenize.js 227             nextLine = line;

./node_modules/postcss-selector-parser/dist/tokenize.js 232           line = nextLine;

./node_modules/postcss-selector-parser/dist/tokenize.js 238           endLine = line;

./node_modules/postcss-selector-parser/dist/tokenize.js 244           endLine = line;

./node_modules/postcss-selector-parser/dist/tokenize.js 254     line, // [1] Starting line

./node_modules/postcss-selector-parser/dist/tokenize.js 256     endLine, // [3] Ending line

./node_modules/postcss-selector-parser/dist/selectors/container.js 138   _proto._findChildAtPosition = function _findChildAtPosition(line, col) {

./node_modules/postcss-selector-parser/dist/selectors/container.js 142         var foundChild = node.atPosition(line, col);

./node_modules/postcss-selector-parser/dist/selectors/container.js 148       } else if (node.isAtPosition(line, col)) {

./node_modules/postcss-selector-parser/dist/selectors/container.js 156    * Return the most specific node at the line and column number given.

./node_modules/postcss-selector-parser/dist/selectors/container.js 165    * @param {number} line The line number of the node to find. (1-based index)

./node_modules/postcss-selector-parser/dist/selectors/container.js 170   _proto.atPosition = function atPosition(line, col) {

./node_modules/postcss-selector-parser/dist/selectors/container.js 171     if (this.isAtPosition(line, col)) {

./node_modules/postcss-selector-parser/dist/selectors/container.js 172       return this._findChildAtPosition(line, col) || this;

./node_modules/postcss-selector-parser/dist/selectors/node.js 162    * @param {number} line The number (starting with 1)

./node_modules/postcss-selector-parser/dist/selectors/node.js 167   _proto.isAtPosition = function isAtPosition(line, column) {

./node_modules/postcss-selector-parser/dist/selectors/node.js 169       if (this.source.start.line > line) {

./node_modules/postcss-selector-parser/dist/selectors/node.js 173       if (this.source.end.line < line) {

./node_modules/postcss-selector-parser/dist/selectors/node.js 177       if (this.source.start.line === line && this.source.start.column > column) {

./node_modules/postcss-selector-parser/dist/selectors/node.js 181       if (this.source.end.line === line && this.source.end.column < column) {

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 88   t.deepEqual(tree.nodes[0].nodes[0].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 94   t.deepEqual(tree.nodes[0].nodes[0].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 96   t.deepEqual(tree.nodes[0].nodes[0].source.end.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 99   t.deepEqual(tree.nodes[0].nodes[1].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 101   t.deepEqual(tree.nodes[0].nodes[1].source.end.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 104   t.deepEqual(tree.nodes[1].nodes[0].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 106   t.deepEqual(tree.nodes[1].nodes[0].source.end.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 109   t.deepEqual(tree.nodes[1].nodes[1].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 111   t.deepEqual(tree.nodes[1].nodes[1].source.end.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 116   t.deepEqual(tree.nodes[0].nodes[1].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 122   t.deepEqual(tree.nodes[0].nodes[1].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 128   t.deepEqual(tree.nodes[0].nodes[1].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 134   t.deepEqual(tree.nodes[0].nodes[1].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 138   t.deepEqual(tree.nodes[0].nodes[2].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 142   t.deepEqual(tree.nodes[1].nodes[1].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 148   t.deepEqual(tree.nodes[0].nodes[1].source.start.line, 1, "> start line");

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 152   t.deepEqual(tree.nodes[0].nodes[3].source.start.line, 1, "' ' start line");

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 158   t.deepEqual(tree.nodes[0].nodes[1].source.start.line, 1, "> start line");

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 162   t.deepEqual(tree.nodes[0].nodes[3].source.start.line, 1, "~ start line");

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 166   t.deepEqual(tree.nodes[0].nodes[5].source.start.line, 1, "' ' start line");

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 171 (0, _helpers.test)('multiple id selectors on different lines', '#one,\n#two', function (t, tree) {

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 172   t.deepEqual(tree.nodes[0].nodes[0].source.start.line, 1);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 176   t.deepEqual(tree.nodes[1].nodes[0].source.start.line, 2);

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 181 (0, _helpers.test)('multiple id selectors on different CRLF lines', '#one,\r\n#two,\r\n#three', function (t, tree) {

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 182   t.deepEqual(tree.nodes[0].nodes[0].source.start.line, 1, '#one start line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 186   t.deepEqual(tree.nodes[1].nodes[0].source.start.line, 2, '#two start line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 190   t.deepEqual(tree.nodes[2].nodes[0].source.start.line, 3, '#three start line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 195 (0, _helpers.test)('id, tag, pseudo, and class selectors on different lines with indentation', '\t#one,\n\th1:after,\n\t\t.two', function (t, tree) {

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 196   t.deepEqual(tree.nodes[0].nodes[0].source.start.line, 1, '#one start line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 200   t.deepEqual(tree.nodes[1].nodes[0].source.start.line, 2, 'h1 start line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 204   t.deepEqual(tree.nodes[1].nodes[1].source.start.line, 2, ':after start line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 208   t.deepEqual(tree.nodes[2].nodes[0].source.start.line, 3, '.two start line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 213 (0, _helpers.test)('pseudo with arguments spanning multiple lines', 'h1:not(\n\t.one,\n\t.two\n)', function (t, tree) {

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 214   t.deepEqual(tree.nodes[0].nodes[1].source.start.line, 1, ':not start line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 216   t.deepEqual(tree.nodes[0].nodes[1].source.end.line, 4, ':not end line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 219   t.deepEqual(tree.nodes[0].nodes[1].nodes[0].nodes[0].source.start.line, 2, '.one start line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 221   t.deepEqual(tree.nodes[0].nodes[1].nodes[0].nodes[0].source.end.line, 2, '.one end line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 224   t.deepEqual(tree.nodes[0].nodes[1].nodes[1].nodes[0].source.start.line, 3, '.two start line');

./node_modules/postcss-selector-parser/dist/__tests__/sourceIndex.js 226   t.deepEqual(tree.nodes[0].nodes[1].nodes[1].nodes[0].source.end.line, 3, '.two end line');

./node_modules/postcss-selector-parser/dist/__tests__/attributes.js 332 (0, _helpers.test)('newline in attribute selector', '[class="woop \\\nwoop woop"]', function (t, tree) {

./node_modules/postcss-selector-parser/dist/__tests__/guards.js 75 (0, _helpers.test)('pseudo element guard', '::first-line', function (t, tree) {

./node_modules/find-up/index.js 26 	// eslint-disable-next-line no-constant-condition

./node_modules/find-up/index.js 28 		// eslint-disable-next-line no-await-in-loop

./node_modules/find-up/index.js 65 	// eslint-disable-next-line no-constant-condition

./node_modules/memfs/lib/volume.js 388     // tslint:disable-next-line triple-equals

./node_modules/memfs/lib/volume.js 461         var self = this; // tslint:disable-line no-this-assignment

./node_modules/memfs/lib/volume.js 1827         // tslint:disable-next-line prefer-const

./node_modules/memfs/lib/volume.js 1950     var self = this; // tslint:disable-line no-this-assignment

./node_modules/memfs/lib/volume.js 1991     var self = this; // tslint:disable-line no-this-assignment

./node_modules/memfs/lib/volume.js 2101     var self = this; // tslint:disable-line no-this-assignment

./node_modules/memfs/lib/volume.js 2121     var self = this; // tslint:disable-line no-this-assignment

./node_modules/memfs/lib/process.js 38             // tslint:disable-next-line:no-console

./node_modules/memfs/lib/internal/errors.js 242         // tslint:disable-next-line

./node_modules/@webassemblyjs/ast/esm/transform/denormalize-type-references/index.js 1 var t = require("../../index"); // func and call_indirect instructions can either define a signature inline, or

./node_modules/@webassemblyjs/ast/esm/transform/denormalize-type-references/index.js 4 // ;; inline signature

./node_modules/@webassemblyjs/ast/esm/transform/denormalize-type-references/index.js 15 // inline.

./node_modules/@webassemblyjs/ast/esm/transform/ast-module-to-module-context/index.js 148       // eslint-disable-next-line prefer-const

./node_modules/@webassemblyjs/ast/esm/transform/ast-module-to-module-context/index.js 171         // eslint-disable-next-line prefer-const

./node_modules/@webassemblyjs/ast/lib/transform/denormalize-type-references/index.js 8 var t = require("../../index"); // func and call_indirect instructions can either define a signature inline, or

./node_modules/@webassemblyjs/ast/lib/transform/denormalize-type-references/index.js 11 // ;; inline signature

./node_modules/@webassemblyjs/ast/lib/transform/denormalize-type-references/index.js 22 // inline.

./node_modules/@webassemblyjs/ast/lib/transform/ast-module-to-module-context/index.js 157       // eslint-disable-next-line prefer-const

./node_modules/@webassemblyjs/ast/lib/transform/ast-module-to-module-context/index.js 180         // eslint-disable-next-line prefer-const

./node_modules/@webassemblyjs/helper-buffer/esm/index.js 48   var lines = str.split("\n"); // remove any leading left whitespace

./node_modules/@webassemblyjs/helper-buffer/esm/index.js 50   lines = lines.map(function (line) {

./node_modules/@webassemblyjs/helper-buffer/esm/index.js 51     return line.trim();

./node_modules/@webassemblyjs/helper-buffer/esm/index.js 53   var bytes = lines.reduce(function (acc, line) {

./node_modules/@webassemblyjs/helper-buffer/esm/index.js 54     var cols = line.split(" "); // remove the offset, left column

./node_modules/@webassemblyjs/helper-buffer/lib/index.js 59   var lines = str.split("\n"); // remove any leading left whitespace

./node_modules/@webassemblyjs/helper-buffer/lib/index.js 61   lines = lines.map(function (line) {

./node_modules/@webassemblyjs/helper-buffer/lib/index.js 62     return line.trim();

./node_modules/@webassemblyjs/helper-buffer/lib/index.js 64   var bytes = lines.reduce(function (acc, line) {

./node_modules/@webassemblyjs/helper-buffer/lib/index.js 65     var cols = line.split(" "); // remove the offset, left column

./node_modules/@webassemblyjs/helper-wasm-section/esm/create.js 56     line: -1,

./node_modules/@webassemblyjs/helper-wasm-section/esm/create.js 60     line: -1,

./node_modules/@webassemblyjs/helper-wasm-section/esm/create.js 66     line: -1,

./node_modules/@webassemblyjs/helper-wasm-section/esm/create.js 70     line: -1,

./node_modules/@webassemblyjs/helper-wasm-section/lib/create.js 70     line: -1,

./node_modules/@webassemblyjs/helper-wasm-section/lib/create.js 74     line: -1,

./node_modules/@webassemblyjs/helper-wasm-section/lib/create.js 80     line: -1,

./node_modules/@webassemblyjs/helper-wasm-section/lib/create.js 84     line: -1,

./node_modules/@webassemblyjs/wasm-edit/esm/apply.js 78       line: -1,

./node_modules/@webassemblyjs/wasm-edit/esm/apply.js 82       line: -1,

./node_modules/@webassemblyjs/wasm-edit/esm/apply.js 194       line: -1,

./node_modules/@webassemblyjs/wasm-edit/esm/apply.js 198       line: -1,

./node_modules/@webassemblyjs/wasm-edit/lib/apply.js 90       line: -1,

./node_modules/@webassemblyjs/wasm-edit/lib/apply.js 94       line: -1,

./node_modules/@webassemblyjs/wasm-edit/lib/apply.js 206       line: -1,

./node_modules/@webassemblyjs/wasm-edit/lib/apply.js 210       line: -1,

./node_modules/@webassemblyjs/wasm-parser/esm/decoder.js 35       line: -1,

./node_modules/@webassemblyjs/wasm-parser/lib/decoder.js 51       line: -1,

./node_modules/source-map-js/dist/source-map.js 121 	          line: mapping.generatedLine,

./node_modules/source-map-js/dist/source-map.js 133 	          line: mapping.originalLine,

./node_modules/source-map-js/dist/source-map.js 163 	 * Add a single mapping from original source line and column to the generated

./node_modules/source-map-js/dist/source-map.js 164 	 * source's line and column for this source map being created. The mapping

./node_modules/source-map-js/dist/source-map.js 167 	 *   - generated: An object with the generated line and column positions.

./node_modules/source-map-js/dist/source-map.js 168 	 *   - original: An object with the original line and column positions.

./node_modules/source-map-js/dist/source-map.js 198 	      generatedLine: generated.line,

./node_modules/source-map-js/dist/source-map.js 200 	      originalLine: original != null && original.line,

./node_modules/source-map-js/dist/source-map.js 278 	          line: mapping.originalLine,

./node_modules/source-map-js/dist/source-map.js 290 	          mapping.originalLine = original.line;

./node_modules/source-map-js/dist/source-map.js 341 	    // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/source-map-js/dist/source-map.js 345 	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/source-map-js/dist/source-map.js 347 	            'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/source-map-js/dist/source-map.js 353 	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map-js/dist/source-map.js 354 	        && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map-js/dist/source-map.js 359 	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map-js/dist/source-map.js 360 	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/source-map-js/dist/source-map.js 361 	             && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map-js/dist/source-map.js 362 	             && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/source-map-js/dist/source-map.js 425 	        // lines are stored 0-based in SourceMap spec version 3

./node_modules/source-map-js/dist/source-map.js 796 	 * memoization is a dumb-simple, linear least-recently-used cache.

./node_modules/source-map-js/dist/source-map.js 1074 	 * mappings with the same original source/line/column, but different generated

./node_modules/source-map-js/dist/source-map.js 1075 	 * line and column the same. Useful when searching for a mapping with a

./node_modules/source-map-js/dist/source-map.js 1140 	 * mappings with the same generated line and column, but different

./node_modules/source-map-js/dist/source-map.js 1141 	 * source/name/original line and column the same. Useful when searching for a

./node_modules/source-map-js/dist/source-map.js 1287 	  // can implement the source URL resolution algorithm as outlined in

./node_modules/source-map-js/dist/source-map.js 1463 	  var lineA = mappingA.generatedLine;

./node_modules/source-map-js/dist/source-map.js 1464 	  var lineB = mappingB.generatedLine;

./node_modules/source-map-js/dist/source-map.js 1467 	  return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/source-map-js/dist/source-map.js 1577 	//       generatedLine: The line number in the generated code,

./node_modules/source-map-js/dist/source-map.js 1581 	//       originalLine: The line number in the original source that

./node_modules/source-map-js/dist/source-map.js 1645 	 * Iterate over each mapping between an original source/line/column and a

./node_modules/source-map-js/dist/source-map.js 1646 	 * generated line/column in this source map.

./node_modules/source-map-js/dist/source-map.js 1656 	 *        iterate over the mappings sorted by the generated file's line/column

./node_modules/source-map-js/dist/source-map.js 1657 	 *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/source-map-js/dist/source-map.js 1693 	 * Returns all generated line and column information for the original source,

./node_modules/source-map-js/dist/source-map.js 1694 	 * line, and column provided. If no column is provided, returns all mappings

./node_modules/source-map-js/dist/source-map.js 1695 	 * corresponding to a either the line we are searching for or the next

./node_modules/source-map-js/dist/source-map.js 1696 	 * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/source-map-js/dist/source-map.js 1697 	 * corresponding to the given line and either the column we are searching for

./node_modules/source-map-js/dist/source-map.js 1703 	 *   - line: The line number in the original source.  The line number is 1-based.

./node_modules/source-map-js/dist/source-map.js 1709 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/dist/source-map.js 1710 	 *    line number is 1-based.

./node_modules/source-map-js/dist/source-map.js 1716 	    var line = util.getArg(aArgs, 'line');

./node_modules/source-map-js/dist/source-map.js 1721 	    // the given line, provided such a mapping exists.

./node_modules/source-map-js/dist/source-map.js 1724 	      originalLine: line,

./node_modules/source-map-js/dist/source-map.js 1748 	        // a mapping for a different line than the one we found. Since

./node_modules/source-map-js/dist/source-map.js 1750 	        // the line we found.

./node_modules/source-map-js/dist/source-map.js 1753 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/dist/source-map.js 1764 	        // a mapping for a different line than the one we were searching for.

./node_modules/source-map-js/dist/source-map.js 1766 	        // the line we are searching for.

./node_modules/source-map-js/dist/source-map.js 1768 	               mapping.originalLine === line &&

./node_modules/source-map-js/dist/source-map.js 1771 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/dist/source-map.js 2078 	          throw new Error('Found a source, but no line and column');

./node_modules/source-map-js/dist/source-map.js 2082 	          throw new Error('Found a source and line, but no column');

./node_modules/source-map-js/dist/source-map.js 2094 	          // Original line.

./node_modules/source-map-js/dist/source-map.js 2182 	      // The last mapping for each line spans the entire line.

./node_modules/source-map-js/dist/source-map.js 2188 	 * Returns the original source, line, and column information for the generated

./node_modules/source-map-js/dist/source-map.js 2189 	 * source's line and column positions provided. The only argument is an object

./node_modules/source-map-js/dist/source-map.js 2192 	 *   - line: The line number in the generated source.  The line number

./node_modules/source-map-js/dist/source-map.js 2205 	 *   - line: The line number in the original source, or null.  The

./node_modules/source-map-js/dist/source-map.js 2206 	 *     line number is 1-based.

./node_modules/source-map-js/dist/source-map.js 2214 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/dist/source-map.js 2242 	          line: util.getArg(mapping, 'originalLine', null),

./node_modules/source-map-js/dist/source-map.js 2251 	      line: null,

./node_modules/source-map-js/dist/source-map.js 2323 	 * Returns the generated line and column information for the original source,

./node_modules/source-map-js/dist/source-map.js 2324 	 * line, and column positions provided. The only argument is an object with

./node_modules/source-map-js/dist/source-map.js 2328 	 *   - line: The line number in the original source.  The line number

./node_modules/source-map-js/dist/source-map.js 2340 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/dist/source-map.js 2341 	 *     line number is 1-based.

./node_modules/source-map-js/dist/source-map.js 2351 	        line: null,

./node_modules/source-map-js/dist/source-map.js 2359 	      originalLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/dist/source-map.js 2377 	          line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/dist/source-map.js 2385 	      line: null,

./node_modules/source-map-js/dist/source-map.js 2409 	 *       begins to apply, defined as an object with a "line" and "column"

./node_modules/source-map-js/dist/source-map.js 2425 	 *      offset: {line:100, column:10},

./node_modules/source-map-js/dist/source-map.js 2459 	    line: -1,

./node_modules/source-map-js/dist/source-map.js 2469 	    var offsetLine = util.getArg(offset, 'line');

./node_modules/source-map-js/dist/source-map.js 2472 	    if (offsetLine < lastOffset.line ||

./node_modules/source-map-js/dist/source-map.js 2473 	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/source-map-js/dist/source-map.js 2514 	 * Returns the original source, line, and column information for the generated

./node_modules/source-map-js/dist/source-map.js 2515 	 * source's line and column positions provided. The only argument is an object

./node_modules/source-map-js/dist/source-map.js 2518 	 *   - line: The line number in the generated source.  The line number

./node_modules/source-map-js/dist/source-map.js 2526 	 *   - line: The line number in the original source, or null.  The

./node_modules/source-map-js/dist/source-map.js 2527 	 *     line number is 1-based.

./node_modules/source-map-js/dist/source-map.js 2535 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/dist/source-map.js 2556 	        line: null,

./node_modules/source-map-js/dist/source-map.js 2563 	      line: needle.generatedLine -

./node_modules/source-map-js/dist/source-map.js 2608 	 * Returns the generated line and column information for the original source,

./node_modules/source-map-js/dist/source-map.js 2609 	 * line, and column positions provided. The only argument is an object with

./node_modules/source-map-js/dist/source-map.js 2613 	 *   - line: The line number in the original source.  The line number

./node_modules/source-map-js/dist/source-map.js 2620 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/dist/source-map.js 2621 	 *     line number is 1-based. 

./node_modules/source-map-js/dist/source-map.js 2638 	          line: generatedPosition.line +

./node_modules/source-map-js/dist/source-map.js 2641 	            (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/source-map-js/dist/source-map.js 2650 	      line: null,

./node_modules/source-map-js/dist/source-map.js 2790 	 * mappings between original and generated line/col pairs are single points,

./node_modules/source-map-js/dist/source-map.js 2982 	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/source-map-js/dist/source-map.js 2986 	// Newline character code for charCodeAt() comparisons

./node_modules/source-map-js/dist/source-map.js 2996 	 * snippets of generated JavaScript source code while maintaining the line and

./node_modules/source-map-js/dist/source-map.js 2999 	 * @param aLine The original line number.

./node_modules/source-map-js/dist/source-map.js 3009 	  this.line = aLine == null ? null : aLine;

./node_modules/source-map-js/dist/source-map.js 3031 	    // All even indices of this array are one line of the generated code,

./node_modules/source-map-js/dist/source-map.js 3032 	    // while all odd indices are the newlines between two adjacent lines

./node_modules/source-map-js/dist/source-map.js 3038 	      var lineContents = getNextLine();

./node_modules/source-map-js/dist/source-map.js 3039 	      // The last line of a file might not have a newline.

./node_modules/source-map-js/dist/source-map.js 3041 	      return lineContents + newLine;

./node_modules/source-map-js/dist/source-map.js 3060 	        // First check if there is a new line in between.

./node_modules/source-map-js/dist/source-map.js 3062 	          // Associate first line with "lastMapping"

./node_modules/source-map-js/dist/source-map.js 3068 	          // There is no new line in between.

./node_modules/source-map-js/dist/source-map.js 3085 	      // Each line is added as separate string.

./node_modules/source-map-js/dist/source-map.js 3101 	        // Associate the remaining code in the current line with "lastMapping"

./node_modules/source-map-js/dist/source-map.js 3104 	      // and add the remaining lines without any mapping

./node_modules/source-map-js/dist/source-map.js 3188 	 * snippet and the its original associated source's line/column location.

./node_modules/source-map-js/dist/source-map.js 3202 	                     line: this.line,

./node_modules/source-map-js/dist/source-map.js 3304 	    line: 1,

./node_modules/source-map-js/dist/source-map.js 3316 	        && original.line !== null

./node_modules/source-map-js/dist/source-map.js 3319 	         || lastOriginalLine !== original.line

./node_modules/source-map-js/dist/source-map.js 3325 	            line: original.line,

./node_modules/source-map-js/dist/source-map.js 3329 	            line: generated.line,

./node_modules/source-map-js/dist/source-map.js 3336 	      lastOriginalLine = original.line;

./node_modules/source-map-js/dist/source-map.js 3343 	          line: generated.line,

./node_modules/source-map-js/dist/source-map.js 3352 	        generated.line++;

./node_modules/source-map-js/dist/source-map.js 3362 	              line: original.line,

./node_modules/source-map-js/dist/source-map.js 3366 	              line: generated.line,

./node_modules/source-map-js/dist/source-map.min.js 121 	          line: mapping.generatedLine,

./node_modules/source-map-js/dist/source-map.min.js 133 	          line: mapping.originalLine,

./node_modules/source-map-js/dist/source-map.min.js 163 	 * Add a single mapping from original source line and column to the generated

./node_modules/source-map-js/dist/source-map.min.js 164 	 * source's line and column for this source map being created. The mapping

./node_modules/source-map-js/dist/source-map.min.js 167 	 *   - generated: An object with the generated line and column positions.

./node_modules/source-map-js/dist/source-map.min.js 168 	 *   - original: An object with the original line and column positions.

./node_modules/source-map-js/dist/source-map.min.js 198 	      generatedLine: generated.line,

./node_modules/source-map-js/dist/source-map.min.js 200 	      originalLine: original != null && original.line,

./node_modules/source-map-js/dist/source-map.min.js 278 	          line: mapping.originalLine,

./node_modules/source-map-js/dist/source-map.min.js 290 	          mapping.originalLine = original.line;

./node_modules/source-map-js/dist/source-map.min.js 341 	    // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/source-map-js/dist/source-map.min.js 345 	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/source-map-js/dist/source-map.min.js 347 	            'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/source-map-js/dist/source-map.min.js 353 	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map-js/dist/source-map.min.js 354 	        && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map-js/dist/source-map.min.js 359 	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map-js/dist/source-map.min.js 360 	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/source-map-js/dist/source-map.min.js 361 	             && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map-js/dist/source-map.min.js 362 	             && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/source-map-js/dist/source-map.min.js 425 	        // lines are stored 0-based in SourceMap spec version 3

./node_modules/source-map-js/dist/source-map.min.js 796 	 * memoization is a dumb-simple, linear least-recently-used cache.

./node_modules/source-map-js/dist/source-map.min.js 1074 	 * mappings with the same original source/line/column, but different generated

./node_modules/source-map-js/dist/source-map.min.js 1075 	 * line and column the same. Useful when searching for a mapping with a

./node_modules/source-map-js/dist/source-map.min.js 1140 	 * mappings with the same generated line and column, but different

./node_modules/source-map-js/dist/source-map.min.js 1141 	 * source/name/original line and column the same. Useful when searching for a

./node_modules/source-map-js/dist/source-map.min.js 1287 	  // can implement the source URL resolution algorithm as outlined in

./node_modules/source-map-js/dist/source-map.min.js 1463 	  var lineA = mappingA.generatedLine;

./node_modules/source-map-js/dist/source-map.min.js 1464 	  var lineB = mappingB.generatedLine;

./node_modules/source-map-js/dist/source-map.min.js 1467 	  return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/source-map-js/dist/source-map.min.js 1577 	//       generatedLine: The line number in the generated code,

./node_modules/source-map-js/dist/source-map.min.js 1581 	//       originalLine: The line number in the original source that

./node_modules/source-map-js/dist/source-map.min.js 1645 	 * Iterate over each mapping between an original source/line/column and a

./node_modules/source-map-js/dist/source-map.min.js 1646 	 * generated line/column in this source map.

./node_modules/source-map-js/dist/source-map.min.js 1656 	 *        iterate over the mappings sorted by the generated file's line/column

./node_modules/source-map-js/dist/source-map.min.js 1657 	 *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/source-map-js/dist/source-map.min.js 1693 	 * Returns all generated line and column information for the original source,

./node_modules/source-map-js/dist/source-map.min.js 1694 	 * line, and column provided. If no column is provided, returns all mappings

./node_modules/source-map-js/dist/source-map.min.js 1695 	 * corresponding to a either the line we are searching for or the next

./node_modules/source-map-js/dist/source-map.min.js 1696 	 * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/source-map-js/dist/source-map.min.js 1697 	 * corresponding to the given line and either the column we are searching for

./node_modules/source-map-js/dist/source-map.min.js 1703 	 *   - line: The line number in the original source.  The line number is 1-based.

./node_modules/source-map-js/dist/source-map.min.js 1709 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/dist/source-map.min.js 1710 	 *    line number is 1-based.

./node_modules/source-map-js/dist/source-map.min.js 1716 	    var line = util.getArg(aArgs, 'line');

./node_modules/source-map-js/dist/source-map.min.js 1721 	    // the given line, provided such a mapping exists.

./node_modules/source-map-js/dist/source-map.min.js 1724 	      originalLine: line,

./node_modules/source-map-js/dist/source-map.min.js 1748 	        // a mapping for a different line than the one we found. Since

./node_modules/source-map-js/dist/source-map.min.js 1750 	        // the line we found.

./node_modules/source-map-js/dist/source-map.min.js 1753 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/dist/source-map.min.js 1764 	        // a mapping for a different line than the one we were searching for.

./node_modules/source-map-js/dist/source-map.min.js 1766 	        // the line we are searching for.

./node_modules/source-map-js/dist/source-map.min.js 1768 	               mapping.originalLine === line &&

./node_modules/source-map-js/dist/source-map.min.js 1771 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/dist/source-map.min.js 2078 	          throw new Error('Found a source, but no line and column');

./node_modules/source-map-js/dist/source-map.min.js 2082 	          throw new Error('Found a source and line, but no column');

./node_modules/source-map-js/dist/source-map.min.js 2094 	          // Original line.

./node_modules/source-map-js/dist/source-map.min.js 2182 	      // The last mapping for each line spans the entire line.

./node_modules/source-map-js/dist/source-map.min.js 2188 	 * Returns the original source, line, and column information for the generated

./node_modules/source-map-js/dist/source-map.min.js 2189 	 * source's line and column positions provided. The only argument is an object

./node_modules/source-map-js/dist/source-map.min.js 2192 	 *   - line: The line number in the generated source.  The line number

./node_modules/source-map-js/dist/source-map.min.js 2205 	 *   - line: The line number in the original source, or null.  The

./node_modules/source-map-js/dist/source-map.min.js 2206 	 *     line number is 1-based.

./node_modules/source-map-js/dist/source-map.min.js 2214 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/dist/source-map.min.js 2242 	          line: util.getArg(mapping, 'originalLine', null),

./node_modules/source-map-js/dist/source-map.min.js 2251 	      line: null,

./node_modules/source-map-js/dist/source-map.min.js 2323 	 * Returns the generated line and column information for the original source,

./node_modules/source-map-js/dist/source-map.min.js 2324 	 * line, and column positions provided. The only argument is an object with

./node_modules/source-map-js/dist/source-map.min.js 2328 	 *   - line: The line number in the original source.  The line number

./node_modules/source-map-js/dist/source-map.min.js 2340 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/dist/source-map.min.js 2341 	 *     line number is 1-based.

./node_modules/source-map-js/dist/source-map.min.js 2351 	        line: null,

./node_modules/source-map-js/dist/source-map.min.js 2359 	      originalLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/dist/source-map.min.js 2377 	          line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/dist/source-map.min.js 2385 	      line: null,

./node_modules/source-map-js/dist/source-map.min.js 2409 	 *       begins to apply, defined as an object with a "line" and "column"

./node_modules/source-map-js/dist/source-map.min.js 2425 	 *      offset: {line:100, column:10},

./node_modules/source-map-js/dist/source-map.min.js 2459 	    line: -1,

./node_modules/source-map-js/dist/source-map.min.js 2469 	    var offsetLine = util.getArg(offset, 'line');

./node_modules/source-map-js/dist/source-map.min.js 2472 	    if (offsetLine < lastOffset.line ||

./node_modules/source-map-js/dist/source-map.min.js 2473 	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/source-map-js/dist/source-map.min.js 2514 	 * Returns the original source, line, and column information for the generated

./node_modules/source-map-js/dist/source-map.min.js 2515 	 * source's line and column positions provided. The only argument is an object

./node_modules/source-map-js/dist/source-map.min.js 2518 	 *   - line: The line number in the generated source.  The line number

./node_modules/source-map-js/dist/source-map.min.js 2526 	 *   - line: The line number in the original source, or null.  The

./node_modules/source-map-js/dist/source-map.min.js 2527 	 *     line number is 1-based.

./node_modules/source-map-js/dist/source-map.min.js 2535 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/dist/source-map.min.js 2556 	        line: null,

./node_modules/source-map-js/dist/source-map.min.js 2563 	      line: needle.generatedLine -

./node_modules/source-map-js/dist/source-map.min.js 2608 	 * Returns the generated line and column information for the original source,

./node_modules/source-map-js/dist/source-map.min.js 2609 	 * line, and column positions provided. The only argument is an object with

./node_modules/source-map-js/dist/source-map.min.js 2613 	 *   - line: The line number in the original source.  The line number

./node_modules/source-map-js/dist/source-map.min.js 2620 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/dist/source-map.min.js 2621 	 *     line number is 1-based. 

./node_modules/source-map-js/dist/source-map.min.js 2638 	          line: generatedPosition.line +

./node_modules/source-map-js/dist/source-map.min.js 2641 	            (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/source-map-js/dist/source-map.min.js 2650 	      line: null,

./node_modules/source-map-js/dist/source-map.min.js 2790 	 * mappings between original and generated line/col pairs are single points,

./node_modules/source-map-js/dist/source-map.min.js 2982 	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/source-map-js/dist/source-map.min.js 2986 	// Newline character code for charCodeAt() comparisons

./node_modules/source-map-js/dist/source-map.min.js 2996 	 * snippets of generated JavaScript source code while maintaining the line and

./node_modules/source-map-js/dist/source-map.min.js 2999 	 * @param aLine The original line number.

./node_modules/source-map-js/dist/source-map.min.js 3009 	  this.line = aLine == null ? null : aLine;

./node_modules/source-map-js/dist/source-map.min.js 3031 	    // All even indices of this array are one line of the generated code,

./node_modules/source-map-js/dist/source-map.min.js 3032 	    // while all odd indices are the newlines between two adjacent lines

./node_modules/source-map-js/dist/source-map.min.js 3038 	      var lineContents = getNextLine();

./node_modules/source-map-js/dist/source-map.min.js 3039 	      // The last line of a file might not have a newline.

./node_modules/source-map-js/dist/source-map.min.js 3041 	      return lineContents + newLine;

./node_modules/source-map-js/dist/source-map.min.js 3060 	        // First check if there is a new line in between.

./node_modules/source-map-js/dist/source-map.min.js 3062 	          // Associate first line with "lastMapping"

./node_modules/source-map-js/dist/source-map.min.js 3068 	          // There is no new line in between.

./node_modules/source-map-js/dist/source-map.min.js 3085 	      // Each line is added as separate string.

./node_modules/source-map-js/dist/source-map.min.js 3101 	        // Associate the remaining code in the current line with "lastMapping"

./node_modules/source-map-js/dist/source-map.min.js 3104 	      // and add the remaining lines without any mapping

./node_modules/source-map-js/dist/source-map.min.js 3188 	 * snippet and the its original associated source's line/column location.

./node_modules/source-map-js/dist/source-map.min.js 3202 	                     line: this.line,

./node_modules/source-map-js/dist/source-map.min.js 3304 	    line: 1,

./node_modules/source-map-js/dist/source-map.min.js 3316 	        && original.line !== null

./node_modules/source-map-js/dist/source-map.min.js 3319 	         || lastOriginalLine !== original.line

./node_modules/source-map-js/dist/source-map.min.js 3325 	            line: original.line,

./node_modules/source-map-js/dist/source-map.min.js 3329 	            line: generated.line,

./node_modules/source-map-js/dist/source-map.min.js 3336 	      lastOriginalLine = original.line;

./node_modules/source-map-js/dist/source-map.min.js 3343 	          line: generated.line,

./node_modules/source-map-js/dist/source-map.min.js 3352 	        generated.line++;

./node_modules/source-map-js/dist/source-map.min.js 3362 	              line: original.line,

./node_modules/source-map-js/dist/source-map.min.js 3366 	              line: generated.line,

./node_modules/source-map-js/dist/source-map.debug.js 121 	          line: mapping.generatedLine,

./node_modules/source-map-js/dist/source-map.debug.js 133 	          line: mapping.originalLine,

./node_modules/source-map-js/dist/source-map.debug.js 163 	 * Add a single mapping from original source line and column to the generated

./node_modules/source-map-js/dist/source-map.debug.js 164 	 * source's line and column for this source map being created. The mapping

./node_modules/source-map-js/dist/source-map.debug.js 167 	 *   - generated: An object with the generated line and column positions.

./node_modules/source-map-js/dist/source-map.debug.js 168 	 *   - original: An object with the original line and column positions.

./node_modules/source-map-js/dist/source-map.debug.js 198 	      generatedLine: generated.line,

./node_modules/source-map-js/dist/source-map.debug.js 200 	      originalLine: original != null && original.line,

./node_modules/source-map-js/dist/source-map.debug.js 278 	          line: mapping.originalLine,

./node_modules/source-map-js/dist/source-map.debug.js 290 	          mapping.originalLine = original.line;

./node_modules/source-map-js/dist/source-map.debug.js 341 	    // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/source-map-js/dist/source-map.debug.js 345 	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/source-map-js/dist/source-map.debug.js 347 	            'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/source-map-js/dist/source-map.debug.js 353 	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map-js/dist/source-map.debug.js 354 	        && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map-js/dist/source-map.debug.js 359 	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map-js/dist/source-map.debug.js 360 	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/source-map-js/dist/source-map.debug.js 361 	             && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map-js/dist/source-map.debug.js 362 	             && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/source-map-js/dist/source-map.debug.js 425 	        // lines are stored 0-based in SourceMap spec version 3

./node_modules/source-map-js/dist/source-map.debug.js 796 	 * memoization is a dumb-simple, linear least-recently-used cache.

./node_modules/source-map-js/dist/source-map.debug.js 1074 	 * mappings with the same original source/line/column, but different generated

./node_modules/source-map-js/dist/source-map.debug.js 1075 	 * line and column the same. Useful when searching for a mapping with a

./node_modules/source-map-js/dist/source-map.debug.js 1140 	 * mappings with the same generated line and column, but different

./node_modules/source-map-js/dist/source-map.debug.js 1141 	 * source/name/original line and column the same. Useful when searching for a

./node_modules/source-map-js/dist/source-map.debug.js 1287 	  // can implement the source URL resolution algorithm as outlined in

./node_modules/source-map-js/dist/source-map.debug.js 1463 	  var lineA = mappingA.generatedLine;

./node_modules/source-map-js/dist/source-map.debug.js 1464 	  var lineB = mappingB.generatedLine;

./node_modules/source-map-js/dist/source-map.debug.js 1467 	  return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/source-map-js/dist/source-map.debug.js 1577 	//       generatedLine: The line number in the generated code,

./node_modules/source-map-js/dist/source-map.debug.js 1581 	//       originalLine: The line number in the original source that

./node_modules/source-map-js/dist/source-map.debug.js 1645 	 * Iterate over each mapping between an original source/line/column and a

./node_modules/source-map-js/dist/source-map.debug.js 1646 	 * generated line/column in this source map.

./node_modules/source-map-js/dist/source-map.debug.js 1656 	 *        iterate over the mappings sorted by the generated file's line/column

./node_modules/source-map-js/dist/source-map.debug.js 1657 	 *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/source-map-js/dist/source-map.debug.js 1693 	 * Returns all generated line and column information for the original source,

./node_modules/source-map-js/dist/source-map.debug.js 1694 	 * line, and column provided. If no column is provided, returns all mappings

./node_modules/source-map-js/dist/source-map.debug.js 1695 	 * corresponding to a either the line we are searching for or the next

./node_modules/source-map-js/dist/source-map.debug.js 1696 	 * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/source-map-js/dist/source-map.debug.js 1697 	 * corresponding to the given line and either the column we are searching for

./node_modules/source-map-js/dist/source-map.debug.js 1703 	 *   - line: The line number in the original source.  The line number is 1-based.

./node_modules/source-map-js/dist/source-map.debug.js 1709 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/dist/source-map.debug.js 1710 	 *    line number is 1-based.

./node_modules/source-map-js/dist/source-map.debug.js 1716 	    var line = util.getArg(aArgs, 'line');

./node_modules/source-map-js/dist/source-map.debug.js 1721 	    // the given line, provided such a mapping exists.

./node_modules/source-map-js/dist/source-map.debug.js 1724 	      originalLine: line,

./node_modules/source-map-js/dist/source-map.debug.js 1748 	        // a mapping for a different line than the one we found. Since

./node_modules/source-map-js/dist/source-map.debug.js 1750 	        // the line we found.

./node_modules/source-map-js/dist/source-map.debug.js 1753 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/dist/source-map.debug.js 1764 	        // a mapping for a different line than the one we were searching for.

./node_modules/source-map-js/dist/source-map.debug.js 1766 	        // the line we are searching for.

./node_modules/source-map-js/dist/source-map.debug.js 1768 	               mapping.originalLine === line &&

./node_modules/source-map-js/dist/source-map.debug.js 1771 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/dist/source-map.debug.js 2078 	          throw new Error('Found a source, but no line and column');

./node_modules/source-map-js/dist/source-map.debug.js 2082 	          throw new Error('Found a source and line, but no column');

./node_modules/source-map-js/dist/source-map.debug.js 2094 	          // Original line.

./node_modules/source-map-js/dist/source-map.debug.js 2182 	      // The last mapping for each line spans the entire line.

./node_modules/source-map-js/dist/source-map.debug.js 2188 	 * Returns the original source, line, and column information for the generated

./node_modules/source-map-js/dist/source-map.debug.js 2189 	 * source's line and column positions provided. The only argument is an object

./node_modules/source-map-js/dist/source-map.debug.js 2192 	 *   - line: The line number in the generated source.  The line number

./node_modules/source-map-js/dist/source-map.debug.js 2205 	 *   - line: The line number in the original source, or null.  The

./node_modules/source-map-js/dist/source-map.debug.js 2206 	 *     line number is 1-based.

./node_modules/source-map-js/dist/source-map.debug.js 2214 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/dist/source-map.debug.js 2242 	          line: util.getArg(mapping, 'originalLine', null),

./node_modules/source-map-js/dist/source-map.debug.js 2251 	      line: null,

./node_modules/source-map-js/dist/source-map.debug.js 2323 	 * Returns the generated line and column information for the original source,

./node_modules/source-map-js/dist/source-map.debug.js 2324 	 * line, and column positions provided. The only argument is an object with

./node_modules/source-map-js/dist/source-map.debug.js 2328 	 *   - line: The line number in the original source.  The line number

./node_modules/source-map-js/dist/source-map.debug.js 2340 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/dist/source-map.debug.js 2341 	 *     line number is 1-based.

./node_modules/source-map-js/dist/source-map.debug.js 2351 	        line: null,

./node_modules/source-map-js/dist/source-map.debug.js 2359 	      originalLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/dist/source-map.debug.js 2377 	          line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/dist/source-map.debug.js 2385 	      line: null,

./node_modules/source-map-js/dist/source-map.debug.js 2409 	 *       begins to apply, defined as an object with a "line" and "column"

./node_modules/source-map-js/dist/source-map.debug.js 2425 	 *      offset: {line:100, column:10},

./node_modules/source-map-js/dist/source-map.debug.js 2459 	    line: -1,

./node_modules/source-map-js/dist/source-map.debug.js 2469 	    var offsetLine = util.getArg(offset, 'line');

./node_modules/source-map-js/dist/source-map.debug.js 2472 	    if (offsetLine < lastOffset.line ||

./node_modules/source-map-js/dist/source-map.debug.js 2473 	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/source-map-js/dist/source-map.debug.js 2514 	 * Returns the original source, line, and column information for the generated

./node_modules/source-map-js/dist/source-map.debug.js 2515 	 * source's line and column positions provided. The only argument is an object

./node_modules/source-map-js/dist/source-map.debug.js 2518 	 *   - line: The line number in the generated source.  The line number

./node_modules/source-map-js/dist/source-map.debug.js 2526 	 *   - line: The line number in the original source, or null.  The

./node_modules/source-map-js/dist/source-map.debug.js 2527 	 *     line number is 1-based.

./node_modules/source-map-js/dist/source-map.debug.js 2535 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/dist/source-map.debug.js 2556 	        line: null,

./node_modules/source-map-js/dist/source-map.debug.js 2563 	      line: needle.generatedLine -

./node_modules/source-map-js/dist/source-map.debug.js 2608 	 * Returns the generated line and column information for the original source,

./node_modules/source-map-js/dist/source-map.debug.js 2609 	 * line, and column positions provided. The only argument is an object with

./node_modules/source-map-js/dist/source-map.debug.js 2613 	 *   - line: The line number in the original source.  The line number

./node_modules/source-map-js/dist/source-map.debug.js 2620 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/dist/source-map.debug.js 2621 	 *     line number is 1-based. 

./node_modules/source-map-js/dist/source-map.debug.js 2638 	          line: generatedPosition.line +

./node_modules/source-map-js/dist/source-map.debug.js 2641 	            (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/source-map-js/dist/source-map.debug.js 2650 	      line: null,

./node_modules/source-map-js/dist/source-map.debug.js 2790 	 * mappings between original and generated line/col pairs are single points,

./node_modules/source-map-js/dist/source-map.debug.js 2982 	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/source-map-js/dist/source-map.debug.js 2986 	// Newline character code for charCodeAt() comparisons

./node_modules/source-map-js/dist/source-map.debug.js 2996 	 * snippets of generated JavaScript source code while maintaining the line and

./node_modules/source-map-js/dist/source-map.debug.js 2999 	 * @param aLine The original line number.

./node_modules/source-map-js/dist/source-map.debug.js 3009 	  this.line = aLine == null ? null : aLine;

./node_modules/source-map-js/dist/source-map.debug.js 3031 	    // All even indices of this array are one line of the generated code,

./node_modules/source-map-js/dist/source-map.debug.js 3032 	    // while all odd indices are the newlines between two adjacent lines

./node_modules/source-map-js/dist/source-map.debug.js 3038 	      var lineContents = getNextLine();

./node_modules/source-map-js/dist/source-map.debug.js 3039 	      // The last line of a file might not have a newline.

./node_modules/source-map-js/dist/source-map.debug.js 3041 	      return lineContents + newLine;

./node_modules/source-map-js/dist/source-map.debug.js 3060 	        // First check if there is a new line in between.

./node_modules/source-map-js/dist/source-map.debug.js 3062 	          // Associate first line with "lastMapping"

./node_modules/source-map-js/dist/source-map.debug.js 3068 	          // There is no new line in between.

./node_modules/source-map-js/dist/source-map.debug.js 3085 	      // Each line is added as separate string.

./node_modules/source-map-js/dist/source-map.debug.js 3101 	        // Associate the remaining code in the current line with "lastMapping"

./node_modules/source-map-js/dist/source-map.debug.js 3104 	      // and add the remaining lines without any mapping

./node_modules/source-map-js/dist/source-map.debug.js 3188 	 * snippet and the its original associated source's line/column location.

./node_modules/source-map-js/dist/source-map.debug.js 3202 	                     line: this.line,

./node_modules/source-map-js/dist/source-map.debug.js 3304 	    line: 1,

./node_modules/source-map-js/dist/source-map.debug.js 3316 	        && original.line !== null

./node_modules/source-map-js/dist/source-map.debug.js 3319 	         || lastOriginalLine !== original.line

./node_modules/source-map-js/dist/source-map.debug.js 3325 	            line: original.line,

./node_modules/source-map-js/dist/source-map.debug.js 3329 	            line: generated.line,

./node_modules/source-map-js/dist/source-map.debug.js 3336 	      lastOriginalLine = original.line;

./node_modules/source-map-js/dist/source-map.debug.js 3343 	          line: generated.line,

./node_modules/source-map-js/dist/source-map.debug.js 3352 	        generated.line++;

./node_modules/source-map-js/dist/source-map.debug.js 3362 	              line: original.line,

./node_modules/source-map-js/dist/source-map.debug.js 3366 	              line: generated.line,

./node_modules/source-map-js/lib/mapping-list.js 16   var lineA = mappingA.generatedLine;

./node_modules/source-map-js/lib/mapping-list.js 17   var lineB = mappingB.generatedLine;

./node_modules/source-map-js/lib/mapping-list.js 20   return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/source-map-js/lib/source-map-consumer.js 45 //       generatedLine: The line number in the generated code,

./node_modules/source-map-js/lib/source-map-consumer.js 49 //       originalLine: The line number in the original source that

./node_modules/source-map-js/lib/source-map-consumer.js 113  * Iterate over each mapping between an original source/line/column and a

./node_modules/source-map-js/lib/source-map-consumer.js 114  * generated line/column in this source map.

./node_modules/source-map-js/lib/source-map-consumer.js 124  *        iterate over the mappings sorted by the generated file's line/column

./node_modules/source-map-js/lib/source-map-consumer.js 125  *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/source-map-js/lib/source-map-consumer.js 161  * Returns all generated line and column information for the original source,

./node_modules/source-map-js/lib/source-map-consumer.js 162  * line, and column provided. If no column is provided, returns all mappings

./node_modules/source-map-js/lib/source-map-consumer.js 163  * corresponding to a either the line we are searching for or the next

./node_modules/source-map-js/lib/source-map-consumer.js 164  * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/source-map-js/lib/source-map-consumer.js 165  * corresponding to the given line and either the column we are searching for

./node_modules/source-map-js/lib/source-map-consumer.js 171  *   - line: The line number in the original source.  The line number is 1-based.

./node_modules/source-map-js/lib/source-map-consumer.js 177  *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/lib/source-map-consumer.js 178  *    line number is 1-based.

./node_modules/source-map-js/lib/source-map-consumer.js 184     var line = util.getArg(aArgs, 'line');

./node_modules/source-map-js/lib/source-map-consumer.js 189     // the given line, provided such a mapping exists.

./node_modules/source-map-js/lib/source-map-consumer.js 192       originalLine: line,

./node_modules/source-map-js/lib/source-map-consumer.js 216         // a mapping for a different line than the one we found. Since

./node_modules/source-map-js/lib/source-map-consumer.js 218         // the line we found.

./node_modules/source-map-js/lib/source-map-consumer.js 221             line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/lib/source-map-consumer.js 232         // a mapping for a different line than the one we were searching for.

./node_modules/source-map-js/lib/source-map-consumer.js 234         // the line we are searching for.

./node_modules/source-map-js/lib/source-map-consumer.js 236                mapping.originalLine === line &&

./node_modules/source-map-js/lib/source-map-consumer.js 239             line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/lib/source-map-consumer.js 546           throw new Error('Found a source, but no line and column');

./node_modules/source-map-js/lib/source-map-consumer.js 550           throw new Error('Found a source and line, but no column');

./node_modules/source-map-js/lib/source-map-consumer.js 562           // Original line.

./node_modules/source-map-js/lib/source-map-consumer.js 650       // The last mapping for each line spans the entire line.

./node_modules/source-map-js/lib/source-map-consumer.js 656  * Returns the original source, line, and column information for the generated

./node_modules/source-map-js/lib/source-map-consumer.js 657  * source's line and column positions provided. The only argument is an object

./node_modules/source-map-js/lib/source-map-consumer.js 660  *   - line: The line number in the generated source.  The line number

./node_modules/source-map-js/lib/source-map-consumer.js 673  *   - line: The line number in the original source, or null.  The

./node_modules/source-map-js/lib/source-map-consumer.js 674  *     line number is 1-based.

./node_modules/source-map-js/lib/source-map-consumer.js 682       generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/lib/source-map-consumer.js 710           line: util.getArg(mapping, 'originalLine', null),

./node_modules/source-map-js/lib/source-map-consumer.js 719       line: null,

./node_modules/source-map-js/lib/source-map-consumer.js 791  * Returns the generated line and column information for the original source,

./node_modules/source-map-js/lib/source-map-consumer.js 792  * line, and column positions provided. The only argument is an object with

./node_modules/source-map-js/lib/source-map-consumer.js 796  *   - line: The line number in the original source.  The line number

./node_modules/source-map-js/lib/source-map-consumer.js 808  *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/lib/source-map-consumer.js 809  *     line number is 1-based.

./node_modules/source-map-js/lib/source-map-consumer.js 819         line: null,

./node_modules/source-map-js/lib/source-map-consumer.js 827       originalLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/lib/source-map-consumer.js 845           line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map-js/lib/source-map-consumer.js 853       line: null,

./node_modules/source-map-js/lib/source-map-consumer.js 877  *       begins to apply, defined as an object with a "line" and "column"

./node_modules/source-map-js/lib/source-map-consumer.js 893  *      offset: {line:100, column:10},

./node_modules/source-map-js/lib/source-map-consumer.js 927     line: -1,

./node_modules/source-map-js/lib/source-map-consumer.js 937     var offsetLine = util.getArg(offset, 'line');

./node_modules/source-map-js/lib/source-map-consumer.js 940     if (offsetLine < lastOffset.line ||

./node_modules/source-map-js/lib/source-map-consumer.js 941         (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/source-map-js/lib/source-map-consumer.js 982  * Returns the original source, line, and column information for the generated

./node_modules/source-map-js/lib/source-map-consumer.js 983  * source's line and column positions provided. The only argument is an object

./node_modules/source-map-js/lib/source-map-consumer.js 986  *   - line: The line number in the generated source.  The line number

./node_modules/source-map-js/lib/source-map-consumer.js 994  *   - line: The line number in the original source, or null.  The

./node_modules/source-map-js/lib/source-map-consumer.js 995  *     line number is 1-based.

./node_modules/source-map-js/lib/source-map-consumer.js 1003       generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map-js/lib/source-map-consumer.js 1024         line: null,

./node_modules/source-map-js/lib/source-map-consumer.js 1031       line: needle.generatedLine -

./node_modules/source-map-js/lib/source-map-consumer.js 1076  * Returns the generated line and column information for the original source,

./node_modules/source-map-js/lib/source-map-consumer.js 1077  * line, and column positions provided. The only argument is an object with

./node_modules/source-map-js/lib/source-map-consumer.js 1081  *   - line: The line number in the original source.  The line number

./node_modules/source-map-js/lib/source-map-consumer.js 1088  *   - line: The line number in the generated source, or null.  The

./node_modules/source-map-js/lib/source-map-consumer.js 1089  *     line number is 1-based. 

./node_modules/source-map-js/lib/source-map-consumer.js 1106           line: generatedPosition.line +

./node_modules/source-map-js/lib/source-map-consumer.js 1109             (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/source-map-js/lib/source-map-consumer.js 1118       line: null,

./node_modules/source-map-js/lib/source-map-generator.js 51           line: mapping.generatedLine,

./node_modules/source-map-js/lib/source-map-generator.js 63           line: mapping.originalLine,

./node_modules/source-map-js/lib/source-map-generator.js 93  * Add a single mapping from original source line and column to the generated

./node_modules/source-map-js/lib/source-map-generator.js 94  * source's line and column for this source map being created. The mapping

./node_modules/source-map-js/lib/source-map-generator.js 97  *   - generated: An object with the generated line and column positions.

./node_modules/source-map-js/lib/source-map-generator.js 98  *   - original: An object with the original line and column positions.

./node_modules/source-map-js/lib/source-map-generator.js 128       generatedLine: generated.line,

./node_modules/source-map-js/lib/source-map-generator.js 130       originalLine: original != null && original.line,

./node_modules/source-map-js/lib/source-map-generator.js 208           line: mapping.originalLine,

./node_modules/source-map-js/lib/source-map-generator.js 220           mapping.originalLine = original.line;

./node_modules/source-map-js/lib/source-map-generator.js 271     // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/source-map-js/lib/source-map-generator.js 275     if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/source-map-js/lib/source-map-generator.js 277             'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/source-map-js/lib/source-map-generator.js 283     if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map-js/lib/source-map-generator.js 284         && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map-js/lib/source-map-generator.js 289     else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map-js/lib/source-map-generator.js 290              && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/source-map-js/lib/source-map-generator.js 291              && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map-js/lib/source-map-generator.js 292              && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/source-map-js/lib/source-map-generator.js 355         // lines are stored 0-based in SourceMap spec version 3

./node_modules/source-map-js/lib/binary-search.js 74  * mappings between original and generated line/col pairs are single points,

./node_modules/source-map-js/lib/util.js 76  * memoization is a dumb-simple, linear least-recently-used cache.

./node_modules/source-map-js/lib/util.js 354  * mappings with the same original source/line/column, but different generated

./node_modules/source-map-js/lib/util.js 355  * line and column the same. Useful when searching for a mapping with a

./node_modules/source-map-js/lib/util.js 420  * mappings with the same generated line and column, but different

./node_modules/source-map-js/lib/util.js 421  * source/name/original line and column the same. Useful when searching for a

./node_modules/source-map-js/lib/util.js 567   // can implement the source URL resolution algorithm as outlined in

./node_modules/source-map-js/lib/source-node.js 11 // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/source-map-js/lib/source-node.js 15 // Newline character code for charCodeAt() comparisons

./node_modules/source-map-js/lib/source-node.js 25  * snippets of generated JavaScript source code while maintaining the line and

./node_modules/source-map-js/lib/source-node.js 28  * @param aLine The original line number.

./node_modules/source-map-js/lib/source-node.js 38   this.line = aLine == null ? null : aLine;

./node_modules/source-map-js/lib/source-node.js 60     // All even indices of this array are one line of the generated code,

./node_modules/source-map-js/lib/source-node.js 61     // while all odd indices are the newlines between two adjacent lines

./node_modules/source-map-js/lib/source-node.js 67       var lineContents = getNextLine();

./node_modules/source-map-js/lib/source-node.js 68       // The last line of a file might not have a newline.

./node_modules/source-map-js/lib/source-node.js 70       return lineContents + newLine;

./node_modules/source-map-js/lib/source-node.js 89         // First check if there is a new line in between.

./node_modules/source-map-js/lib/source-node.js 91           // Associate first line with "lastMapping"

./node_modules/source-map-js/lib/source-node.js 97           // There is no new line in between.

./node_modules/source-map-js/lib/source-node.js 114       // Each line is added as separate string.

./node_modules/source-map-js/lib/source-node.js 130         // Associate the remaining code in the current line with "lastMapping"

./node_modules/source-map-js/lib/source-node.js 133       // and add the remaining lines without any mapping

./node_modules/source-map-js/lib/source-node.js 217  * snippet and the its original associated source's line/column location.

./node_modules/source-map-js/lib/source-node.js 231                      line: this.line,

./node_modules/source-map-js/lib/source-node.js 333     line: 1,

./node_modules/source-map-js/lib/source-node.js 345         && original.line !== null

./node_modules/source-map-js/lib/source-node.js 348          || lastOriginalLine !== original.line

./node_modules/source-map-js/lib/source-node.js 354             line: original.line,

./node_modules/source-map-js/lib/source-node.js 358             line: generated.line,

./node_modules/source-map-js/lib/source-node.js 365       lastOriginalLine = original.line;

./node_modules/source-map-js/lib/source-node.js 372           line: generated.line,

./node_modules/source-map-js/lib/source-node.js 381         generated.line++;

./node_modules/source-map-js/lib/source-node.js 391               line: original.line,

./node_modules/source-map-js/lib/source-node.js 395               line: generated.line,

./node_modules/is-core-module/index.js 15 			continue; // eslint-disable-line no-restricted-syntax, no-continue

./node_modules/is-core-module/core.json 84 	"readline": true,

./node_modules/is-core-module/core.json 85 	"node:readline": [">= 14.18 && < 15", ">= 16"],

./node_modules/is-core-module/test/index.js 31 			var requireFunc = function () { require(mod); }; // eslint-disable-line no-loop-func

./node_modules/is-core-module/test/index.js 43 		var libs = require('repl')._builtinLibs; // eslint-disable-line no-underscore-dangle

./node_modules/is-core-module/test/index.js 51 					function () { require(mod); }, // eslint-disable-line no-loop-func

./node_modules/is-core-module/test/index.js 56 						function () { require('node:' + mod); }, // eslint-disable-line no-loop-func

./node_modules/is-core-module/test/index.js 61 						function () { require('node:' + mod); }, // eslint-disable-line no-loop-func

./node_modules/is-core-module/test/index.js 87 						function () { require(mod); }, // eslint-disable-line no-loop-func

./node_modules/is-core-module/test/index.js 92 							function () { require('node:' + mod); }, // eslint-disable-line no-loop-func

./node_modules/is-core-module/test/index.js 97 							function () { require('node:' + mod); }, // eslint-disable-line no-loop-func

./node_modules/split2/index.js 26   if (this.overflow) { // Line buffer is full. Skip to start of next line.

./node_modules/split2/index.js 32     // Line ending found. Discard trailing fragment of previous line and reset overflow state.

./node_modules/split2/package.json 8     "unit": "nyc --lines 100 --branches 100 --functions 100 --check-coverage --reporter=text tape test.js",

./node_modules/split2/test.js 10 test('split two lines on end', function (t) {

./node_modules/split2/test.js 23 test('split two lines on two writes', function (t) {

./node_modules/split2/test.js 38 test('split four lines on three writes', function (t) {

./node_modules/split2/test.js 126 test('split lines windows-style', function (t) {

./node_modules/split2/test.js 155   var input = split(function (line) { })

./node_modules/split2/test.js 168   var input = split(function (line) { })

./node_modules/split2/test.js 273 test('split lines when the \n comes at the end of a chunk', function (t) {

./node_modules/css-loader/dist/index.js 79       }) : // eslint-disable-next-line no-undefined

./node_modules/css-loader/dist/index.js 109       // eslint-disable-next-line no-param-reassign

./node_modules/css-loader/dist/index.js 126         inline: false,

./node_modules/css-loader/dist/utils.js 117 } // eslint-disable-next-line no-useless-escape

./node_modules/css-loader/dist/utils.js 178     // eslint-disable-next-line no-plusplus

./node_modules/css-loader/dist/utils.js 180     let value; // eslint-disable-next-line no-control-regex

./node_modules/css-loader/dist/utils.js 220   let spaceTerminated = false; // eslint-disable-next-line no-undefined

./node_modules/css-loader/dist/utils.js 237     // eslint-disable-next-line no-undefined

./node_modules/css-loader/dist/utils.js 266       const gobbled = gobbleHex(str.slice(i + 1, i + 7)); // eslint-disable-next-line no-undefined

./node_modules/css-loader/dist/utils.js 270         i += gobbled[1]; // eslint-disable-next-line no-continue

./node_modules/css-loader/dist/utils.js 279         i += 1; // eslint-disable-next-line no-continue

./node_modules/css-loader/dist/utils.js 288       } // eslint-disable-next-line no-continue

./node_modules/css-loader/dist/utils.js 302 } // eslint-disable-next-line no-control-regex

./node_modules/css-loader/dist/utils.js 305 const filenameReservedRegex = /[<>:"/\\|?*]/g; // eslint-disable-next-line no-control-regex

./node_modules/css-loader/dist/utils.js 323   const relativeResourcePath = normalizePath(_path.default.relative(context, resourcePath)); // eslint-disable-next-line no-param-reassign

./node_modules/css-loader/dist/utils.js 339     // eslint-disable-next-line no-param-reassign

./node_modules/css-loader/dist/utils.js 347     // eslint-disable-next-line no-underscore-dangle

./node_modules/css-loader/dist/utils.js 378   }; // eslint-disable-next-line no-underscore-dangle

./node_modules/css-loader/dist/utils.js 498   const resourcePath = // eslint-disable-next-line no-underscore-dangle

./node_modules/css-loader/dist/utils.js 517   } // eslint-disable-next-line no-underscore-dangle

./node_modules/css-loader/dist/utils.js 534     // eslint-disable-next-line no-undefined

./node_modules/css-loader/dist/utils.js 536     // eslint-disable-next-line no-undefined

./node_modules/css-loader/dist/utils.js 919       // eslint-disable-next-line no-undefined

./node_modules/css-loader/dist/CssSyntaxError.js 13       line,

./node_modules/css-loader/dist/CssSyntaxError.js 22     if (typeof line !== "undefined") {

./node_modules/css-loader/dist/CssSyntaxError.js 23       this.message += `(${line}:${column}) `;

./node_modules/css-loader/dist/CssSyntaxError.js 32     } // We don't need stack https://github.com/postcss/postcss/blob/master/docs/guidelines/runner.md#31-dont-show-js-stack-for-csssyntaxerror

./node_modules/css-loader/dist/Warning.js 13       line,

./node_modules/css-loader/dist/Warning.js 21     if (typeof line !== "undefined") {

./node_modules/css-loader/dist/Warning.js 22       this.message += `(${line}:${column}) `;

./node_modules/css-loader/dist/Warning.js 25     this.message += `${text}`; // We don't need stack https://github.com/postcss/postcss/blob/master/docs/guidelines/runner.md#31-dont-show-js-stack-for-csssyntaxerror

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 30     // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 36       // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 44     // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 117           // eslint-disable-next-line no-undefined

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 132         // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 151       }); // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 166               // eslint-disable-next-line no-undefined

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 168             } // eslint-disable-next-line no-continue

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 182             // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 207               // eslint-disable-next-line no-undefined

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 209             } // eslint-disable-next-line no-continue

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 218             // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 240       // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 245   }); // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 284                 // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 290               // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 305               // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 319               // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 321             } // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 337               // eslint-disable-next-line no-continue

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 389             } // eslint-disable-next-line no-param-reassign

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 392             item.node.type = "word"; // eslint-disable-next-line no-param-reassign

./node_modules/css-loader/dist/plugins/postcss-url-parser.js 394             item.node.value = replacementName; // eslint-disable-next-line no-param-reassign

./node_modules/css-loader/dist/plugins/postcss-import-parser.js 132   } // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-import-parser.js 227               atRule.remove(); // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-import-parser.js 239             atRule.remove(); // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-import-parser.js 256               // eslint-disable-next-line no-continue

./node_modules/css-loader/dist/plugins/postcss-import-parser.js 275               }); // eslint-disable-next-line no-continue

./node_modules/css-loader/dist/plugins/postcss-icss-parser.js 34       }); // eslint-disable-next-line guard-for-in

./node_modules/css-loader/dist/plugins/postcss-icss-parser.js 40           // eslint-disable-next-line no-continue

./node_modules/css-loader/dist/plugins/postcss-icss-parser.js 60           } // eslint-disable-next-line consistent-return

./node_modules/css-loader/dist/plugins/postcss-icss-parser.js 79           // eslint-disable-next-line no-continue

./node_modules/picomatch/lib/parse.js 31     /* eslint-disable-next-line no-new */

./node_modules/react-dom/cjs/react-dom-test-utils.development.js 65     // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react-dom/cjs/react-dom-test-utils.development.js 1056         //eslint-disable-next-line no-undef

./node_modules/react-dom/cjs/react-dom-test-utils.development.js 1348         if (error === null && event.colno === 0 && event.lineno === 0) {

./node_modules/react-dom/cjs/react-dom-test-utils.development.js 1802 } // Start of inline: the below functions were inlined from

./node_modules/react-dom/cjs/react-dom-test-utils.development.js 2029 } // End of inline

./node_modules/react-dom/cjs/react-dom.production.min.js 18 ["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){D[a]=new B(a,2,!1,a,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){D[a]=new B(a,3,!1,a.toLowerCase(),null,!1,!1)});

./node_modules/react-dom/cjs/react-dom.production.min.js 43 var qb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,

./node_modules/react-dom/cjs/react-dom.production.min.js 94 function Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Oe(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Je(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}

./node_modules/react-dom/cjs/react-dom.production.min.js 253 Cj&&0===(d&24)&&Cj.has(a)&&Cj.delete(a);a===U&&(Y=U=null,W=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,d=c.firstEffect):d=c:d=c.firstEffect;if(null!==d){e=X;X|=32;pj.current=null;kf=fd;g=Ne();if(Oe(g)){if("selectionStart"in g)h={start:g.selectionStart,end:g.selectionEnd};else a:if(h=(h=g.ownerDocument)&&h.defaultView||window,(l=h.getSelection&&h.getSelection())&&0!==l.rangeCount){h=l.anchorNode;f=l.anchorOffset;k=l.focusNode;l=l.focusOffset;try{h.nodeType,k.nodeType}catch(va){h=null;

./node_modules/react-dom/cjs/react-dom.production.min.js 257 g.end?J:Math.min(g.end,h),!v.extend&&J>g&&(h=g,g=J,J=h),h=Le(t,J),f=Le(t,g),h&&f&&(1!==v.rangeCount||v.anchorNode!==h.node||v.anchorOffset!==h.offset||v.focusNode!==f.node||v.focusOffset!==f.offset)&&(q=q.createRange(),q.setStart(h.node,h.offset),v.removeAllRanges(),J>g?(v.addRange(q),v.extend(f.node,f.offset)):(q.setEnd(f.node,f.offset),v.addRange(q))))));q=[];for(v=t;v=v.parentNode;)1===v.nodeType&&q.push({element:v,left:v.scrollLeft,top:v.scrollTop});"function"===typeof t.focus&&t.focus();for(t=

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 79     // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 324       // Extract the VM specific prefix used by each line.

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 331     } // We use the prefix to ensure our stacks line up with native stack frames.

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 420     // This is inlined manually because closure doesn't do it for us.

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 443           // In V8, the first line is describing the message but other VMs don't.

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 444           // If we're about to return the first line, and the control is also on the same

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 445           // line, that's a pretty good indicator that our sample threw at same line as

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 462                 } // Return the line we found.

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 863       // eslint-disable-line

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 982 'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 1099 // and any newline or tab are filtered out as if they're not part of the URL.

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 1101 // Tab or newline are defined as \r\n\t:

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 1102 // https://infra.spec.whatwg.org/#ascii-tab-or-newline

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 1282  * inlined Object.is polyfill to avoid requiring consumers ship their own

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 1286   return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 1335     // passed inline.

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 1873   lineClamp: true,

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 1874   lineHeight: true,

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2109   'aria-multiline': 0,

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2365   playsinline: 'playsInline',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2412   alignmentbaseline: 'alignmentBaseline',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2413   'alignment-baseline': 'alignmentBaseline',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2425   baselineshift: 'baselineShift',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2426   'baseline-shift': 'baselineShift',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2463   dominantbaseline: 'dominantBaseline',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2464   'dominant-baseline': 'dominantBaseline',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2538   keysplines: 'keySplines',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2570   overlineposition: 'overlinePosition',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2571   'overline-position': 'overlinePosition',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2572   overlinethickness: 'overlineThickness',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2573   'overline-thickness': 'overlineThickness',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2640   strokelinecap: 'strokeLinecap',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2641   'stroke-linecap': 'strokeLinecap',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2642   strokelinejoin: 'strokeLinejoin',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2643   'stroke-linejoin': 'strokeLinejoin',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2657   textanchor: 'textAnchor',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2658   'text-anchor': 'textAnchor',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2669   underlineposition: 'underlinePosition',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2670   'underline-position': 'underlinePosition',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2671   underlinethickness: 'underlineThickness',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 2672   'underline-thickness': 'underlineThickness',

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 3039 var newlineEatingTags = {

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 3847         // eslint-disable-next-line-no-fallthrough

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 3988           // eslint-disable-next-line-no-fallthrough

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 3999           // eslint-disable-next-line-no-fallthrough

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 4246       if (newlineEatingTags.hasOwnProperty(tag) && innerMarkup.charAt(0) === '\n') {

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 4247         // text/html ignores the first character in these tags if it's a newline

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 4249         // a newline specifically to get eaten by the parser. (Alternately for

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 4252         // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>

./node_modules/react-dom/cjs/react-dom-server.browser.development.js 4254         // See: <http://www.w3.org/TR/html5/syntax.html#newlines>

./node_modules/react-dom/cjs/react-dom.development.js 65     // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react-dom/cjs/react-dom.development.js 242       // eslint-disable-line

./node_modules/react-dom/cjs/react-dom.development.js 361 'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata

./node_modules/react-dom/cjs/react-dom.development.js 478 // and any newline or tab are filtered out as if they're not part of the URL.

./node_modules/react-dom/cjs/react-dom.development.js 480 // Tab or newline are defined as \r\n\t:

./node_modules/react-dom/cjs/react-dom.development.js 481 // https://infra.spec.whatwg.org/#ascii-tab-or-newline

./node_modules/react-dom/cjs/react-dom.development.js 852       // Extract the VM specific prefix used by each line.

./node_modules/react-dom/cjs/react-dom.development.js 859     } // We use the prefix to ensure our stacks line up with native stack frames.

./node_modules/react-dom/cjs/react-dom.development.js 948     // This is inlined manually because closure doesn't do it for us.

./node_modules/react-dom/cjs/react-dom.development.js 971           // In V8, the first line is describing the message but other VMs don't.

./node_modules/react-dom/cjs/react-dom.development.js 972           // If we're about to return the first line, and the control is also on the same

./node_modules/react-dom/cjs/react-dom.development.js 973           // line, that's a pretty good indicator that our sample threw at same line as

./node_modules/react-dom/cjs/react-dom.development.js 990                 } // Return the line we found.

./node_modules/react-dom/cjs/react-dom.development.js 1551       // eslint-disable-next-line

./node_modules/react-dom/cjs/react-dom.development.js 2250   borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],

./node_modules/react-dom/cjs/react-dom.development.js 2251   borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],

./node_modules/react-dom/cjs/react-dom.development.js 2262   font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],

./node_modules/react-dom/cjs/react-dom.development.js 2278   outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],

./node_modules/react-dom/cjs/react-dom.development.js 2319   lineClamp: true,

./node_modules/react-dom/cjs/react-dom.development.js 2320   lineHeight: true,

./node_modules/react-dom/cjs/react-dom.development.js 2859   playsinline: 'playsInline',

./node_modules/react-dom/cjs/react-dom.development.js 2906   alignmentbaseline: 'alignmentBaseline',

./node_modules/react-dom/cjs/react-dom.development.js 2907   'alignment-baseline': 'alignmentBaseline',

./node_modules/react-dom/cjs/react-dom.development.js 2919   baselineshift: 'baselineShift',

./node_modules/react-dom/cjs/react-dom.development.js 2920   'baseline-shift': 'baselineShift',

./node_modules/react-dom/cjs/react-dom.development.js 2957   dominantbaseline: 'dominantBaseline',

./node_modules/react-dom/cjs/react-dom.development.js 2958   'dominant-baseline': 'dominantBaseline',

./node_modules/react-dom/cjs/react-dom.development.js 3032   keysplines: 'keySplines',

./node_modules/react-dom/cjs/react-dom.development.js 3064   overlineposition: 'overlinePosition',

./node_modules/react-dom/cjs/react-dom.development.js 3065   'overline-position': 'overlinePosition',

./node_modules/react-dom/cjs/react-dom.development.js 3066   overlinethickness: 'overlineThickness',

./node_modules/react-dom/cjs/react-dom.development.js 3067   'overline-thickness': 'overlineThickness',

./node_modules/react-dom/cjs/react-dom.development.js 3134   strokelinecap: 'strokeLinecap',

./node_modules/react-dom/cjs/react-dom.development.js 3135   'stroke-linecap': 'strokeLinecap',

./node_modules/react-dom/cjs/react-dom.development.js 3136   strokelinejoin: 'strokeLinejoin',

./node_modules/react-dom/cjs/react-dom.development.js 3137   'stroke-linejoin': 'strokeLinejoin',

./node_modules/react-dom/cjs/react-dom.development.js 3151   textanchor: 'textAnchor',

./node_modules/react-dom/cjs/react-dom.development.js 3152   'text-anchor': 'textAnchor',

./node_modules/react-dom/cjs/react-dom.development.js 3163   underlineposition: 'underlinePosition',

./node_modules/react-dom/cjs/react-dom.development.js 3164   'underline-position': 'underlinePosition',

./node_modules/react-dom/cjs/react-dom.development.js 3165   underlinethickness: 'underlineThickness',

./node_modules/react-dom/cjs/react-dom.development.js 3166   'underline-thickness': 'underlineThickness',

./node_modules/react-dom/cjs/react-dom.development.js 3259   'aria-multiline': 0,

./node_modules/react-dom/cjs/react-dom.development.js 3968         if (error === null && event.colno === 0 && event.lineno === 0) {

./node_modules/react-dom/cjs/react-dom.development.js 4497   // eslint-disable-next-line no-unreachable

./node_modules/react-dom/cjs/react-dom.development.js 4536   // eslint-disable-next-line no-unreachable

./node_modules/react-dom/cjs/react-dom.development.js 5702   // This wrapper function gets inlined. Only exists so to communicate that it

./node_modules/react-dom/cjs/react-dom.development.js 7439  * inlined Object.is polyfill to avoid requiring consumers ship their own

./node_modules/react-dom/cjs/react-dom.development.js 7443   return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare

./node_modules/react-dom/cjs/react-dom.development.js 7560   var anchorNode = selection.anchorNode,

./node_modules/react-dom/cjs/react-dom.development.js 7561       anchorOffset = selection.anchorOffset,

./node_modules/react-dom/cjs/react-dom.development.js 7563       focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the

./node_modules/react-dom/cjs/react-dom.development.js 7573     anchorNode.nodeType;

./node_modules/react-dom/cjs/react-dom.development.js 7580   return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);

./node_modules/react-dom/cjs/react-dom.development.js 7584  * (anchorNode, anchorOffset) within the textContent of `outerNode`, and

./node_modules/react-dom/cjs/react-dom.development.js 7592 function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {

./node_modules/react-dom/cjs/react-dom.development.js 7605       if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {

./node_modules/react-dom/cjs/react-dom.development.js 7606         start = length + anchorOffset;

./node_modules/react-dom/cjs/react-dom.development.js 7630         // valid selection is anchorNode and focusNode both equal to this node

./node_modules/react-dom/cjs/react-dom.development.js 7635       if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {

./node_modules/react-dom/cjs/react-dom.development.js 7656     // This should never happen. (Would happen if the anchor/focus nodes aren't

./node_modules/react-dom/cjs/react-dom.development.js 7705     if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {

./node_modules/react-dom/cjs/react-dom.development.js 7922       anchorNode: selection.anchorNode,

./node_modules/react-dom/cjs/react-dom.development.js 7923       anchorOffset: selection.anchorOffset,

./node_modules/react-dom/cjs/react-dom.development.js 8202   // should probably be inlined somewhere and have its logic

./node_modules/react-dom/cjs/react-dom.development.js 8980       div.innerHTML = '<script><' + '/script>'; // eslint-disable-line

./node_modules/react-dom/cjs/react-dom.development.js 10067         whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';

./node_modules/react-dom/cjs/react-dom.development.js 10276   // This is why we ensure that non React root containers have inline onclick

./node_modules/react-dom/cjs/react-dom.development.js 12708         new ctor(props, context); // eslint-disable-line no-new

./node_modules/react-dom/cjs/react-dom.development.js 13380       if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:

./node_modules/react-dom/cjs/react-dom.development.js 14011           // eslint-disable-next-lined no-fallthrough

./node_modules/react-dom/cjs/react-dom.development.js 14015               if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:

./node_modules/react-dom/cjs/react-dom.development.js 14159         // eslint-disable-next-lined no-fallthrough

./node_modules/react-dom/cjs/react-dom.development.js 14865       // It's unlikely their type would change as usually you define them inline.

./node_modules/react-dom/cjs/react-dom.development.js 14885           var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up

./node_modules/react-dom/cjs/react-dom.development.js 14928     // passed inline.

./node_modules/react-dom/cjs/react-dom.development.js 15483   var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const

./node_modules/react-dom/cjs/react-dom.development.js 17919         warningKey = debugSource.fileName + ':' + debugSource.lineNumber;

./node_modules/react-dom/cjs/react-dom.development.js 17966 } // TODO: Probably should inline this back

./node_modules/react-dom/cjs/react-dom.development.js 19697               // We have already passed our CPU deadline but we still have rows

./node_modules/react-dom/cjs/react-dom.development.js 19758               // We have now passed our CPU deadline and we'll just give up further

./node_modules/react-dom/cjs/react-dom.development.js 21158     // eslint-disable-next-line-no-fallthrough

./node_modules/react-dom/cjs/react-dom.development.js 22139     // if I do. eslint-disable-next-line no-fallthrough

./node_modules/react-dom/cjs/react-dom.development.js 22528       resetCurrentFiber(); // TODO: I found and added this missing line while investigating a

./node_modules/react-dom/cjs/react-dom.development.js 22698 } // The work loop is an extremely hot path. Tell Closure not to inline it.

./node_modules/react-dom/cjs/react-dom.development.js 22700 /** @noinline */

./node_modules/react-dom/cjs/react-dom.development.js 22755 /** @noinline */

./node_modules/react-dom/cjs/react-dom.development.js 24735 //    never inlined properly in static compilers.

./node_modules/react-dom/cjs/react-dom.development.js 25002       // eslint-disable-next-line no-fallthrough

./node_modules/react-dom/cjs/react-dom.development.js 26242         // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react-dom/cjs/react-dom-server.node.production.min.js 18 ["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){N[a]=new M(a,2,!1,a,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){N[a]=new M(a,3,!1,a.toLowerCase(),null,!1,!1)});

./node_modules/react-dom/cjs/react-dom-server.node.production.min.js 30 gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Qa=["Webkit","ms","Moz","O"];Object.keys(Y).forEach(function(a){Qa.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);Y[b]=Y[a]})});

./node_modules/react-dom/cjs/react-dom-server.browser.production.min.js 18 ["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){N[a]=new M(a,2,!1,a,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){N[a]=new M(a,3,!1,a.toLowerCase(),null,!1,!1)});

./node_modules/react-dom/cjs/react-dom-server.browser.production.min.js 30 gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Pa=["Webkit","ms","Moz","O"];Object.keys(Y).forEach(function(a){Pa.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);Y[b]=Y[a]})});

./node_modules/react-dom/cjs/react-dom.profiling.min.js 18 ["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){G[a]=new F(a,2,!1,a,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){G[a]=new F(a,3,!1,a.toLowerCase(),null,!1,!1)});

./node_modules/react-dom/cjs/react-dom.profiling.min.js 43 var sb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,

./node_modules/react-dom/cjs/react-dom.profiling.min.js 94 function We(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Ve||null==Se||Se!==Ya(d)||(d=Se,"selectionStart"in d&&Qe(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Ue&&Le(Ue,d)||(Ue=d,d=qe(Te,"onSelect"),0<d.length&&(b=new vd("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Se)))}

./node_modules/react-dom/cjs/react-dom.profiling.min.js 261 k[l]=-1;g&=~p}null!==Nj&&0===(e&24)&&Nj.has(a)&&Nj.delete(a);a===U&&(Y=U=null,W=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){f=X;X|=32;h=fk(a);zj.current=null;mf=hd;k=Pe();if(Qe(k)){if("selectionStart"in k)g={start:k.selectionStart,end:k.selectionEnd};else a:{g=(g=k.ownerDocument)&&g.defaultView||window;var y=g.getSelection&&g.getSelection();if(y&&0!==y.rangeCount){g=y.anchorNode;l=y.anchorOffset;p=y.focusNode;y=y.focusOffset;try{g.nodeType,

./node_modules/react-dom/cjs/react-dom.profiling.min.js 265 g=w.textContent.length,J=Math.min(k.start,g),k=void 0===k.end?J:Math.min(k.end,g),!m.extend&&J>k&&(g=k,k=J,J=g),g=Ne(w,J),l=Ne(w,k),g&&l&&(1!==m.rangeCount||m.anchorNode!==g.node||m.anchorOffset!==g.offset||m.focusNode!==l.node||m.focusOffset!==l.offset)&&(A=A.createRange(),A.setStart(g.node,g.offset),m.removeAllRanges(),J>k?(m.addRange(A),m.extend(l.node,l.offset)):(A.setEnd(l.node,l.offset),m.addRange(A))))));A=[];for(m=w;m=m.parentNode;)1===m.nodeType&&A.push({element:m,left:m.scrollLeft,top:m.scrollTop});

./node_modules/react-dom/cjs/react-dom-server.node.development.js 80     // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react-dom/cjs/react-dom-server.node.development.js 325       // Extract the VM specific prefix used by each line.

./node_modules/react-dom/cjs/react-dom-server.node.development.js 332     } // We use the prefix to ensure our stacks line up with native stack frames.

./node_modules/react-dom/cjs/react-dom-server.node.development.js 421     // This is inlined manually because closure doesn't do it for us.

./node_modules/react-dom/cjs/react-dom-server.node.development.js 444           // In V8, the first line is describing the message but other VMs don't.

./node_modules/react-dom/cjs/react-dom-server.node.development.js 445           // If we're about to return the first line, and the control is also on the same

./node_modules/react-dom/cjs/react-dom-server.node.development.js 446           // line, that's a pretty good indicator that our sample threw at same line as

./node_modules/react-dom/cjs/react-dom-server.node.development.js 463                 } // Return the line we found.

./node_modules/react-dom/cjs/react-dom-server.node.development.js 864       // eslint-disable-line

./node_modules/react-dom/cjs/react-dom-server.node.development.js 983 'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata

./node_modules/react-dom/cjs/react-dom-server.node.development.js 1100 // and any newline or tab are filtered out as if they're not part of the URL.

./node_modules/react-dom/cjs/react-dom-server.node.development.js 1102 // Tab or newline are defined as \r\n\t:

./node_modules/react-dom/cjs/react-dom-server.node.development.js 1103 // https://infra.spec.whatwg.org/#ascii-tab-or-newline

./node_modules/react-dom/cjs/react-dom-server.node.development.js 1283  * inlined Object.is polyfill to avoid requiring consumers ship their own

./node_modules/react-dom/cjs/react-dom-server.node.development.js 1287   return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare

./node_modules/react-dom/cjs/react-dom-server.node.development.js 1336     // passed inline.

./node_modules/react-dom/cjs/react-dom-server.node.development.js 1874   lineClamp: true,

./node_modules/react-dom/cjs/react-dom-server.node.development.js 1875   lineHeight: true,

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2110   'aria-multiline': 0,

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2366   playsinline: 'playsInline',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2413   alignmentbaseline: 'alignmentBaseline',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2414   'alignment-baseline': 'alignmentBaseline',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2426   baselineshift: 'baselineShift',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2427   'baseline-shift': 'baselineShift',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2464   dominantbaseline: 'dominantBaseline',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2465   'dominant-baseline': 'dominantBaseline',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2539   keysplines: 'keySplines',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2571   overlineposition: 'overlinePosition',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2572   'overline-position': 'overlinePosition',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2573   overlinethickness: 'overlineThickness',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2574   'overline-thickness': 'overlineThickness',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2641   strokelinecap: 'strokeLinecap',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2642   'stroke-linecap': 'strokeLinecap',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2643   strokelinejoin: 'strokeLinejoin',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2644   'stroke-linejoin': 'strokeLinejoin',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2658   textanchor: 'textAnchor',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2659   'text-anchor': 'textAnchor',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2670   underlineposition: 'underlinePosition',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2671   'underline-position': 'underlinePosition',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2672   underlinethickness: 'underlineThickness',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 2673   'underline-thickness': 'underlineThickness',

./node_modules/react-dom/cjs/react-dom-server.node.development.js 3040 var newlineEatingTags = {

./node_modules/react-dom/cjs/react-dom-server.node.development.js 3848         // eslint-disable-next-line-no-fallthrough

./node_modules/react-dom/cjs/react-dom-server.node.development.js 3989           // eslint-disable-next-line-no-fallthrough

./node_modules/react-dom/cjs/react-dom-server.node.development.js 4000           // eslint-disable-next-line-no-fallthrough

./node_modules/react-dom/cjs/react-dom-server.node.development.js 4247       if (newlineEatingTags.hasOwnProperty(tag) && innerMarkup.charAt(0) === '\n') {

./node_modules/react-dom/cjs/react-dom-server.node.development.js 4248         // text/html ignores the first character in these tags if it's a newline

./node_modules/react-dom/cjs/react-dom-server.node.development.js 4250         // a newline specifically to get eaten by the parser. (Alternately for

./node_modules/react-dom/cjs/react-dom-server.node.development.js 4253         // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>

./node_modules/react-dom/cjs/react-dom-server.node.development.js 4255         // See: <http://www.w3.org/TR/html5/syntax.html#newlines>

./node_modules/react-dom/umd/react-dom-test-utils.development.js 62       // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react-dom/umd/react-dom-test-utils.development.js 1074           //eslint-disable-next-line no-undef

./node_modules/react-dom/umd/react-dom-test-utils.development.js 1366           if (error === null && event.colno === 0 && event.lineno === 0) {

./node_modules/react-dom/umd/react-dom-test-utils.development.js 1820   } // Start of inline: the below functions were inlined from

./node_modules/react-dom/umd/react-dom-test-utils.development.js 2047   } // End of inline

./node_modules/react-dom/umd/react-dom.production.min.js 55 end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),$b&&Zb($b,d)||($b=d,d=Tc(pe,"onSelect"),0<d.length&&(b=new le("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=qb)))}function zg(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;xi(d,b,void 0,a);a.currentTarget=null}function rg(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=

./node_modules/react-dom/umd/react-dom.production.min.js 172 (h=g.ownerDocument)&&h.defaultView||window,(v=h.getSelection&&h.getSelection())&&0!==v.rangeCount){h=v.anchorNode;f=v.anchorOffset;k=v.focusNode;v=v.focusOffset;try{h.nodeType,k.nodeType}catch(qa){h=null;break a}var t=0,w=-1,r=-1,z=0,B=0,y=g,C=null;b:for(;;){for(var x;;){y!==h||0!==f&&3!==y.nodeType||(w=t+f);y!==k||0!==v&&3!==y.nodeType||(r=t+v);3===y.nodeType&&(t+=y.nodeValue.length);if(null===(x=y.firstChild))break;C=y;y=x}for(;;){if(y===g)break b;C===h&&++z===f&&(w=t);C===k&&++B===v&&(r=t);if(null!==

./node_modules/react-dom/umd/react-dom.production.min.js 175 p?(p.selectionStart=q,p.selectionEnd=Math.min(u,p.value.length)):(u=(q=p.ownerDocument||document)&&q.defaultView||window,u.getSelection&&(u=u.getSelection(),h=p.textContent.length,A=Math.min(g.start,h),g=void 0===g.end?A:Math.min(g.end,h),!u.extend&&A>g&&(h=g,g=A,A=h),h=vg(p,A),f=vg(p,g),h&&f&&(1!==u.rangeCount||u.anchorNode!==h.node||u.anchorOffset!==h.offset||u.focusNode!==f.node||u.focusOffset!==f.offset)&&(q=q.createRange(),q.setStart(h.node,h.offset),u.removeAllRanges(),A>g?(u.addRange(q),u.extend(f.node,

./node_modules/react-dom/umd/react-dom.production.min.js 194 new Q(a,2,!1,a.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){I[a]=new Q(a,2,!1,a,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){I[a]=new Q(a,3,!1,a.toLowerCase(),null,!1,!1)});["checked","multiple",

./node_modules/react-dom/umd/react-dom.production.min.js 199 b;return}}a.textContent=b},Nb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,

./node_modules/react-dom/umd/react-dom-server.browser.development.js 75       // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react-dom/umd/react-dom-server.browser.development.js 323         // Extract the VM specific prefix used by each line.

./node_modules/react-dom/umd/react-dom-server.browser.development.js 330       } // We use the prefix to ensure our stacks line up with native stack frames.

./node_modules/react-dom/umd/react-dom-server.browser.development.js 419       // This is inlined manually because closure doesn't do it for us.

./node_modules/react-dom/umd/react-dom-server.browser.development.js 442             // In V8, the first line is describing the message but other VMs don't.

./node_modules/react-dom/umd/react-dom-server.browser.development.js 443             // If we're about to return the first line, and the control is also on the same

./node_modules/react-dom/umd/react-dom-server.browser.development.js 444             // line, that's a pretty good indicator that our sample threw at same line as

./node_modules/react-dom/umd/react-dom-server.browser.development.js 461                   } // Return the line we found.

./node_modules/react-dom/umd/react-dom-server.browser.development.js 862         // eslint-disable-line

./node_modules/react-dom/umd/react-dom-server.browser.development.js 981   'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata

./node_modules/react-dom/umd/react-dom-server.browser.development.js 1098   // and any newline or tab are filtered out as if they're not part of the URL.

./node_modules/react-dom/umd/react-dom-server.browser.development.js 1100   // Tab or newline are defined as \r\n\t:

./node_modules/react-dom/umd/react-dom-server.browser.development.js 1101   // https://infra.spec.whatwg.org/#ascii-tab-or-newline

./node_modules/react-dom/umd/react-dom-server.browser.development.js 1281    * inlined Object.is polyfill to avoid requiring consumers ship their own

./node_modules/react-dom/umd/react-dom-server.browser.development.js 1285     return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare

./node_modules/react-dom/umd/react-dom-server.browser.development.js 1334       // passed inline.

./node_modules/react-dom/umd/react-dom-server.browser.development.js 1872     lineClamp: true,

./node_modules/react-dom/umd/react-dom-server.browser.development.js 1873     lineHeight: true,

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2108     'aria-multiline': 0,

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2364     playsinline: 'playsInline',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2411     alignmentbaseline: 'alignmentBaseline',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2412     'alignment-baseline': 'alignmentBaseline',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2424     baselineshift: 'baselineShift',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2425     'baseline-shift': 'baselineShift',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2462     dominantbaseline: 'dominantBaseline',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2463     'dominant-baseline': 'dominantBaseline',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2537     keysplines: 'keySplines',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2569     overlineposition: 'overlinePosition',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2570     'overline-position': 'overlinePosition',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2571     overlinethickness: 'overlineThickness',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2572     'overline-thickness': 'overlineThickness',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2639     strokelinecap: 'strokeLinecap',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2640     'stroke-linecap': 'strokeLinecap',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2641     strokelinejoin: 'strokeLinejoin',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2642     'stroke-linejoin': 'strokeLinejoin',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2656     textanchor: 'textAnchor',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2657     'text-anchor': 'textAnchor',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2668     underlineposition: 'underlinePosition',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2669     'underline-position': 'underlinePosition',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2670     underlinethickness: 'underlineThickness',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 2671     'underline-thickness': 'underlineThickness',

./node_modules/react-dom/umd/react-dom-server.browser.development.js 3038   var newlineEatingTags = {

./node_modules/react-dom/umd/react-dom-server.browser.development.js 3846           // eslint-disable-next-line-no-fallthrough

./node_modules/react-dom/umd/react-dom-server.browser.development.js 3987             // eslint-disable-next-line-no-fallthrough

./node_modules/react-dom/umd/react-dom-server.browser.development.js 3998             // eslint-disable-next-line-no-fallthrough

./node_modules/react-dom/umd/react-dom-server.browser.development.js 4245         if (newlineEatingTags.hasOwnProperty(tag) && innerMarkup.charAt(0) === '\n') {

./node_modules/react-dom/umd/react-dom-server.browser.development.js 4246           // text/html ignores the first character in these tags if it's a newline

./node_modules/react-dom/umd/react-dom-server.browser.development.js 4248           // a newline specifically to get eaten by the parser. (Alternately for

./node_modules/react-dom/umd/react-dom-server.browser.development.js 4251           // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>

./node_modules/react-dom/umd/react-dom-server.browser.development.js 4253           // See: <http://www.w3.org/TR/html5/syntax.html#newlines>

./node_modules/react-dom/umd/react-dom.development.js 59       // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react-dom/umd/react-dom.development.js 236         // eslint-disable-line

./node_modules/react-dom/umd/react-dom.development.js 355   'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata

./node_modules/react-dom/umd/react-dom.development.js 472   // and any newline or tab are filtered out as if they're not part of the URL.

./node_modules/react-dom/umd/react-dom.development.js 474   // Tab or newline are defined as \r\n\t:

./node_modules/react-dom/umd/react-dom.development.js 475   // https://infra.spec.whatwg.org/#ascii-tab-or-newline

./node_modules/react-dom/umd/react-dom.development.js 849         // Extract the VM specific prefix used by each line.

./node_modules/react-dom/umd/react-dom.development.js 856       } // We use the prefix to ensure our stacks line up with native stack frames.

./node_modules/react-dom/umd/react-dom.development.js 945       // This is inlined manually because closure doesn't do it for us.

./node_modules/react-dom/umd/react-dom.development.js 968             // In V8, the first line is describing the message but other VMs don't.

./node_modules/react-dom/umd/react-dom.development.js 969             // If we're about to return the first line, and the control is also on the same

./node_modules/react-dom/umd/react-dom.development.js 970             // line, that's a pretty good indicator that our sample threw at same line as

./node_modules/react-dom/umd/react-dom.development.js 987                   } // Return the line we found.

./node_modules/react-dom/umd/react-dom.development.js 1548         // eslint-disable-next-line

./node_modules/react-dom/umd/react-dom.development.js 2247     borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],

./node_modules/react-dom/umd/react-dom.development.js 2248     borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],

./node_modules/react-dom/umd/react-dom.development.js 2259     font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],

./node_modules/react-dom/umd/react-dom.development.js 2275     outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],

./node_modules/react-dom/umd/react-dom.development.js 2316     lineClamp: true,

./node_modules/react-dom/umd/react-dom.development.js 2317     lineHeight: true,

./node_modules/react-dom/umd/react-dom.development.js 2856     playsinline: 'playsInline',

./node_modules/react-dom/umd/react-dom.development.js 2903     alignmentbaseline: 'alignmentBaseline',

./node_modules/react-dom/umd/react-dom.development.js 2904     'alignment-baseline': 'alignmentBaseline',

./node_modules/react-dom/umd/react-dom.development.js 2916     baselineshift: 'baselineShift',

./node_modules/react-dom/umd/react-dom.development.js 2917     'baseline-shift': 'baselineShift',

./node_modules/react-dom/umd/react-dom.development.js 2954     dominantbaseline: 'dominantBaseline',

./node_modules/react-dom/umd/react-dom.development.js 2955     'dominant-baseline': 'dominantBaseline',

./node_modules/react-dom/umd/react-dom.development.js 3029     keysplines: 'keySplines',

./node_modules/react-dom/umd/react-dom.development.js 3061     overlineposition: 'overlinePosition',

./node_modules/react-dom/umd/react-dom.development.js 3062     'overline-position': 'overlinePosition',

./node_modules/react-dom/umd/react-dom.development.js 3063     overlinethickness: 'overlineThickness',

./node_modules/react-dom/umd/react-dom.development.js 3064     'overline-thickness': 'overlineThickness',

./node_modules/react-dom/umd/react-dom.development.js 3131     strokelinecap: 'strokeLinecap',

./node_modules/react-dom/umd/react-dom.development.js 3132     'stroke-linecap': 'strokeLinecap',

./node_modules/react-dom/umd/react-dom.development.js 3133     strokelinejoin: 'strokeLinejoin',

./node_modules/react-dom/umd/react-dom.development.js 3134     'stroke-linejoin': 'strokeLinejoin',

./node_modules/react-dom/umd/react-dom.development.js 3148     textanchor: 'textAnchor',

./node_modules/react-dom/umd/react-dom.development.js 3149     'text-anchor': 'textAnchor',

./node_modules/react-dom/umd/react-dom.development.js 3160     underlineposition: 'underlinePosition',

./node_modules/react-dom/umd/react-dom.development.js 3161     'underline-position': 'underlinePosition',

./node_modules/react-dom/umd/react-dom.development.js 3162     underlinethickness: 'underlineThickness',

./node_modules/react-dom/umd/react-dom.development.js 3163     'underline-thickness': 'underlineThickness',

./node_modules/react-dom/umd/react-dom.development.js 3256     'aria-multiline': 0,

./node_modules/react-dom/umd/react-dom.development.js 3965           if (error === null && event.colno === 0 && event.lineno === 0) {

./node_modules/react-dom/umd/react-dom.development.js 4515     // eslint-disable-next-line no-unreachable

./node_modules/react-dom/umd/react-dom.development.js 4554     // eslint-disable-next-line no-unreachable

./node_modules/react-dom/umd/react-dom.development.js 5732     // This wrapper function gets inlined. Only exists so to communicate that it

./node_modules/react-dom/umd/react-dom.development.js 7469    * inlined Object.is polyfill to avoid requiring consumers ship their own

./node_modules/react-dom/umd/react-dom.development.js 7473     return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare

./node_modules/react-dom/umd/react-dom.development.js 7590     var anchorNode = selection.anchorNode,

./node_modules/react-dom/umd/react-dom.development.js 7591         anchorOffset = selection.anchorOffset,

./node_modules/react-dom/umd/react-dom.development.js 7593         focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the

./node_modules/react-dom/umd/react-dom.development.js 7603       anchorNode.nodeType;

./node_modules/react-dom/umd/react-dom.development.js 7610     return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);

./node_modules/react-dom/umd/react-dom.development.js 7614    * (anchorNode, anchorOffset) within the textContent of `outerNode`, and

./node_modules/react-dom/umd/react-dom.development.js 7622   function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {

./node_modules/react-dom/umd/react-dom.development.js 7635         if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {

./node_modules/react-dom/umd/react-dom.development.js 7636           start = length + anchorOffset;

./node_modules/react-dom/umd/react-dom.development.js 7660           // valid selection is anchorNode and focusNode both equal to this node

./node_modules/react-dom/umd/react-dom.development.js 7665         if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {

./node_modules/react-dom/umd/react-dom.development.js 7686       // This should never happen. (Would happen if the anchor/focus nodes aren't

./node_modules/react-dom/umd/react-dom.development.js 7735       if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {

./node_modules/react-dom/umd/react-dom.development.js 7952         anchorNode: selection.anchorNode,

./node_modules/react-dom/umd/react-dom.development.js 7953         anchorOffset: selection.anchorOffset,

./node_modules/react-dom/umd/react-dom.development.js 8232     // should probably be inlined somewhere and have its logic

./node_modules/react-dom/umd/react-dom.development.js 9010         div.innerHTML = '<script><' + '/script>'; // eslint-disable-line

./node_modules/react-dom/umd/react-dom.development.js 10097           whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';

./node_modules/react-dom/umd/react-dom.development.js 10306     // This is why we ensure that non React root containers have inline onclick

./node_modules/react-dom/umd/react-dom.development.js 12738           new ctor(props, context); // eslint-disable-line no-new

./node_modules/react-dom/umd/react-dom.development.js 13410         if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:

./node_modules/react-dom/umd/react-dom.development.js 14041             // eslint-disable-next-lined no-fallthrough

./node_modules/react-dom/umd/react-dom.development.js 14045                 if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:

./node_modules/react-dom/umd/react-dom.development.js 14189           // eslint-disable-next-lined no-fallthrough

./node_modules/react-dom/umd/react-dom.development.js 14895         // It's unlikely their type would change as usually you define them inline.

./node_modules/react-dom/umd/react-dom.development.js 14915             var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up

./node_modules/react-dom/umd/react-dom.development.js 14958       // passed inline.

./node_modules/react-dom/umd/react-dom.development.js 15513     var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const

./node_modules/react-dom/umd/react-dom.development.js 17949           warningKey = debugSource.fileName + ':' + debugSource.lineNumber;

./node_modules/react-dom/umd/react-dom.development.js 17996   } // TODO: Probably should inline this back

./node_modules/react-dom/umd/react-dom.development.js 19727                 // We have already passed our CPU deadline but we still have rows

./node_modules/react-dom/umd/react-dom.development.js 19788                 // We have now passed our CPU deadline and we'll just give up further

./node_modules/react-dom/umd/react-dom.development.js 21188       // eslint-disable-next-line-no-fallthrough

./node_modules/react-dom/umd/react-dom.development.js 22169       // if I do. eslint-disable-next-line no-fallthrough

./node_modules/react-dom/umd/react-dom.development.js 22558         resetCurrentFiber(); // TODO: I found and added this missing line while investigating a

./node_modules/react-dom/umd/react-dom.development.js 22728   } // The work loop is an extremely hot path. Tell Closure not to inline it.

./node_modules/react-dom/umd/react-dom.development.js 22730   /** @noinline */

./node_modules/react-dom/umd/react-dom.development.js 22785   /** @noinline */

./node_modules/react-dom/umd/react-dom.development.js 24765   //    never inlined properly in static compilers.

./node_modules/react-dom/umd/react-dom.development.js 25032         // eslint-disable-next-line no-fallthrough

./node_modules/react-dom/umd/react-dom.development.js 26272           // eslint-disable-next-line react-internal/no-production-logging

./node_modules/react-dom/umd/react-dom-server.browser.production.min.js 24 new q(a,2,!1,a.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){m[a]=new q(a,2,!1,a,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){m[a]=new q(a,3,!1,a.toLowerCase(),null,!1,!1)});["checked","multiple",

./node_modules/react-dom/umd/react-dom-server.browser.production.min.js 28 hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},Ma=z({menuitem:!0},xa),H={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,

./node_modules/react-dom/umd/react-dom-server.browser.production.min.js 29 lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Na=["Webkit","ms","Moz","O"];Object.keys(H).forEach(function(a){Na.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);H[b]=H[a]})});var Oa=/([A-Z])/g,Pa=/^ms-/,B=r.Children.toArray,ca=l.ReactCurrentDispatcher,Qa={listing:!0,pre:!0,textarea:!0},Ra=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,

./node_modules/react-dom/umd/react-dom.profiling.min.js 55 end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),fc&&ec(fc,d)||(fc=d,d=Zc(ye,"onSelect"),0<d.length&&(b=new ue("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=wb)))}function Mg(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Pi(d,b,void 0,a);a.currentTarget=null}function Eg(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=

./node_modules/react-dom/umd/react-dom.profiling.min.js 175 k)g={start:k.selectionStart,end:k.selectionEnd};else a:{g=(g=k.ownerDocument)&&g.defaultView||window;var v=g.getSelection&&g.getSelection();if(v&&0!==v.rangeCount){g=v.anchorNode;q=v.anchorOffset;t=v.focusNode;v=v.focusOffset;try{g.nodeType,t.nodeType}catch(bb){g=null;break a}var p=0,z=-1,C=-1,F=0,H=0,r=k,x=null;b:for(;;){for(var u;;){r!==g||0!==q&&3!==r.nodeType||(z=p+q);r!==t||0!==v&&3!==r.nodeType||(C=p+v);3===r.nodeType&&(p+=r.nodeValue.length);if(null===(u=r.firstChild))break;x=r;r=u}for(;;){if(r===

./node_modules/react-dom/umd/react-dom.profiling.min.js 178 y)){null!==k&&we(y)&&(A=k.start,w=k.end,void 0===w&&(w=A),"selectionStart"in y?(y.selectionStart=A,y.selectionEnd=Math.min(w,y.value.length)):(w=(A=y.ownerDocument||document)&&A.defaultView||window,w.getSelection&&(w=w.getSelection(),g=y.textContent.length,B=Math.min(k.start,g),k=void 0===k.end?B:Math.min(k.end,g),!w.extend&&B>k&&(g=k,k=B,B=g),g=Ig(y,B),q=Ig(y,k),g&&q&&(1!==w.rangeCount||w.anchorNode!==g.node||w.anchorOffset!==g.offset||w.focusNode!==q.node||w.focusOffset!==q.offset)&&(A=A.createRange(),

./node_modules/react-dom/umd/react-dom.profiling.min.js 200 new R(a,0,!1,a,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];J[b]=new R(b,1,!1,a[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){J[a]=new R(a,2,!1,a.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){J[a]=new R(a,2,!1,a,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){J[a]=

./node_modules/react-dom/umd/react-dom.profiling.min.js 205 b;return}}a.textContent=b},Tb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,

./node_modules/qs/test/utils.js 48             observed[0] = observed[0]; // eslint-disable-line no-self-assign

./node_modules/qs/dist/qs.js 286     brackets: function brackets(prefix) { // eslint-disable-line func-name-matching

./node_modules/qs/dist/qs.js 290     indices: function indices(prefix, key) { // eslint-disable-line func-name-matching

./node_modules/qs/dist/qs.js 293     repeat: function repeat(prefix) { // eslint-disable-line func-name-matching

./node_modules/qs/dist/qs.js 318     serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching

./node_modules/qs/dist/qs.js 325 var stringify = function stringify( // eslint-disable-line func-name-matching

./node_modules/qs/lib/stringify.js 8     brackets: function brackets(prefix) { // eslint-disable-line func-name-matching

./node_modules/qs/lib/stringify.js 12     indices: function indices(prefix, key) { // eslint-disable-line func-name-matching

./node_modules/qs/lib/stringify.js 15     repeat: function repeat(prefix) { // eslint-disable-line func-name-matching

./node_modules/qs/lib/stringify.js 40     serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching

./node_modules/qs/lib/stringify.js 47 var stringify = function stringify( // eslint-disable-line func-name-matching

./node_modules/picocolors/picocolors.js 35 		underline: enabled ? formatter("\x1b[4m", "\x1b[24m") : String,

./node_modules/picocolors/picocolors.browser.js 2 var create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x}};

./node_modules/glob-parent/package.json 24     "azure-pipelines": "nyc mocha --async-only --reporter xunit -O output=test.xunit",

./node_modules/shebang-regex/package.json 4 	"description": "Regular expression for matching a shebang line",

./node_modules/shebang-regex/package.json 28 		"line"

./node_modules/webpack-dev-middleware/dist/index.js 57   }; // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/middleware.js 35     // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/middleware.js 53           // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/middleware.js 81         // eslint-disable-next-line guard-for-in

./node_modules/webpack-dev-middleware/dist/utils/getFilenameFromUrl.js 69       // eslint-disable-next-line no-continue

./node_modules/webpack-dev-middleware/dist/utils/getFilenameFromUrl.js 88         // eslint-disable-next-line no-continue

./node_modules/webpack-dev-middleware/dist/utils/getFilenameFromUrl.js 102           // eslint-disable-next-line no-continue

./node_modules/webpack-dev-middleware/dist/utils/getFilenameFromUrl.js 112   } // eslint-disable-next-line consistent-return

./node_modules/webpack-dev-middleware/dist/utils/ready.js 8 // eslint-disable-next-line consistent-return

./node_modules/webpack-dev-middleware/dist/utils/compatibleAPI.js 4   return typeof res.getHeaderNames !== "function" ? // eslint-disable-next-line no-underscore-dangle

./node_modules/webpack-dev-middleware/dist/utils/compatibleAPI.js 43   } // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupOutputFileSystem.js 18     // eslint-disable-next-line no-shadow

./node_modules/webpack-dev-middleware/dist/utils/setupOutputFileSystem.js 42     // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupOutputFileSystem.js 44   } // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 19     // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 22     context.state = false; // eslint-disable-next-line no-param-reassign, no-undefined

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 32         // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 35         // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 43       // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 48       // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 55       // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 66     // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 67     context.state = true; // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 100           // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 104             // eslint-disable-next-line no-param-reassign

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 123       const printedStats = stats.toString(statsOptions); // Avoid extra empty line when `stats: 'none'`

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 126         // eslint-disable-next-line no-console

./node_modules/webpack-dev-middleware/dist/utils/setupHooks.js 128       } // eslint-disable-next-line no-param-reassign

./node_modules/querystring/.package.json.un~ failed
./node_modules/querystring/test/.index.js.un~ failed
./node_modules/get-intrinsic/index.js 9 // eslint-disable-next-line consistent-return

./node_modules/get-intrinsic/index.js 31 			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties

./node_modules/get-intrinsic/index.js 47 var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

./node_modules/get-intrinsic/index.js 73 	'%eval%': eval, // eslint-disable-line no-eval

./node_modules/get-intrinsic/test/GetIntrinsic.js 147 			// eslint-disable-next-line no-extend-native

./node_modules/get-intrinsic/test/GetIntrinsic.js 154 		// eslint-disable-next-line no-extend-native

./node_modules/source-map/dist/source-map.js 121 	          line: mapping.generatedLine,

./node_modules/source-map/dist/source-map.js 133 	          line: mapping.originalLine,

./node_modules/source-map/dist/source-map.js 163 	 * Add a single mapping from original source line and column to the generated

./node_modules/source-map/dist/source-map.js 164 	 * source's line and column for this source map being created. The mapping

./node_modules/source-map/dist/source-map.js 167 	 *   - generated: An object with the generated line and column positions.

./node_modules/source-map/dist/source-map.js 168 	 *   - original: An object with the original line and column positions.

./node_modules/source-map/dist/source-map.js 198 	      generatedLine: generated.line,

./node_modules/source-map/dist/source-map.js 200 	      originalLine: original != null && original.line,

./node_modules/source-map/dist/source-map.js 278 	          line: mapping.originalLine,

./node_modules/source-map/dist/source-map.js 290 	          mapping.originalLine = original.line;

./node_modules/source-map/dist/source-map.js 341 	    // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/source-map/dist/source-map.js 345 	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/source-map/dist/source-map.js 347 	            'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/source-map/dist/source-map.js 353 	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map/dist/source-map.js 354 	        && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map/dist/source-map.js 359 	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map/dist/source-map.js 360 	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/source-map/dist/source-map.js 361 	             && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map/dist/source-map.js 362 	             && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/source-map/dist/source-map.js 425 	        // lines are stored 0-based in SourceMap spec version 3

./node_modules/source-map/dist/source-map.js 1020 	 * mappings with the same original source/line/column, but different generated

./node_modules/source-map/dist/source-map.js 1021 	 * line and column the same. Useful when searching for a mapping with a

./node_modules/source-map/dist/source-map.js 1059 	 * mappings with the same generated line and column, but different

./node_modules/source-map/dist/source-map.js 1060 	 * source/name/original line and column the same. Useful when searching for a

./node_modules/source-map/dist/source-map.js 1181 	  // can implement the source URL resolution algorithm as outlined in

./node_modules/source-map/dist/source-map.js 1357 	  var lineA = mappingA.generatedLine;

./node_modules/source-map/dist/source-map.js 1358 	  var lineB = mappingB.generatedLine;

./node_modules/source-map/dist/source-map.js 1361 	  return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/source-map/dist/source-map.js 1471 	//       generatedLine: The line number in the generated code,

./node_modules/source-map/dist/source-map.js 1475 	//       originalLine: The line number in the original source that

./node_modules/source-map/dist/source-map.js 1539 	 * Iterate over each mapping between an original source/line/column and a

./node_modules/source-map/dist/source-map.js 1540 	 * generated line/column in this source map.

./node_modules/source-map/dist/source-map.js 1550 	 *        iterate over the mappings sorted by the generated file's line/column

./node_modules/source-map/dist/source-map.js 1551 	 *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/source-map/dist/source-map.js 1587 	 * Returns all generated line and column information for the original source,

./node_modules/source-map/dist/source-map.js 1588 	 * line, and column provided. If no column is provided, returns all mappings

./node_modules/source-map/dist/source-map.js 1589 	 * corresponding to a either the line we are searching for or the next

./node_modules/source-map/dist/source-map.js 1590 	 * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/source-map/dist/source-map.js 1591 	 * corresponding to the given line and either the column we are searching for

./node_modules/source-map/dist/source-map.js 1597 	 *   - line: The line number in the original source.  The line number is 1-based.

./node_modules/source-map/dist/source-map.js 1603 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map/dist/source-map.js 1604 	 *    line number is 1-based.

./node_modules/source-map/dist/source-map.js 1610 	    var line = util.getArg(aArgs, 'line');

./node_modules/source-map/dist/source-map.js 1615 	    // the given line, provided such a mapping exists.

./node_modules/source-map/dist/source-map.js 1618 	      originalLine: line,

./node_modules/source-map/dist/source-map.js 1642 	        // a mapping for a different line than the one we found. Since

./node_modules/source-map/dist/source-map.js 1644 	        // the line we found.

./node_modules/source-map/dist/source-map.js 1647 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map/dist/source-map.js 1658 	        // a mapping for a different line than the one we were searching for.

./node_modules/source-map/dist/source-map.js 1660 	        // the line we are searching for.

./node_modules/source-map/dist/source-map.js 1662 	               mapping.originalLine === line &&

./node_modules/source-map/dist/source-map.js 1665 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map/dist/source-map.js 1947 	            throw new Error('Found a source, but no line and column');

./node_modules/source-map/dist/source-map.js 1951 	            throw new Error('Found a source and line, but no column');

./node_modules/source-map/dist/source-map.js 1966 	          // Original line.

./node_modules/source-map/dist/source-map.js 2043 	      // The last mapping for each line spans the entire line.

./node_modules/source-map/dist/source-map.js 2049 	 * Returns the original source, line, and column information for the generated

./node_modules/source-map/dist/source-map.js 2050 	 * source's line and column positions provided. The only argument is an object

./node_modules/source-map/dist/source-map.js 2053 	 *   - line: The line number in the generated source.  The line number

./node_modules/source-map/dist/source-map.js 2066 	 *   - line: The line number in the original source, or null.  The

./node_modules/source-map/dist/source-map.js 2067 	 *     line number is 1-based.

./node_modules/source-map/dist/source-map.js 2075 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map/dist/source-map.js 2103 	          line: util.getArg(mapping, 'originalLine', null),

./node_modules/source-map/dist/source-map.js 2112 	      line: null,

./node_modules/source-map/dist/source-map.js 2184 	 * Returns the generated line and column information for the original source,

./node_modules/source-map/dist/source-map.js 2185 	 * line, and column positions provided. The only argument is an object with

./node_modules/source-map/dist/source-map.js 2189 	 *   - line: The line number in the original source.  The line number

./node_modules/source-map/dist/source-map.js 2201 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map/dist/source-map.js 2202 	 *     line number is 1-based.

./node_modules/source-map/dist/source-map.js 2212 	        line: null,

./node_modules/source-map/dist/source-map.js 2220 	      originalLine: util.getArg(aArgs, 'line'),

./node_modules/source-map/dist/source-map.js 2238 	          line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map/dist/source-map.js 2246 	      line: null,

./node_modules/source-map/dist/source-map.js 2270 	 *       begins to apply, defined as an object with a "line" and "column"

./node_modules/source-map/dist/source-map.js 2286 	 *      offset: {line:100, column:10},

./node_modules/source-map/dist/source-map.js 2320 	    line: -1,

./node_modules/source-map/dist/source-map.js 2330 	    var offsetLine = util.getArg(offset, 'line');

./node_modules/source-map/dist/source-map.js 2333 	    if (offsetLine < lastOffset.line ||

./node_modules/source-map/dist/source-map.js 2334 	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/source-map/dist/source-map.js 2375 	 * Returns the original source, line, and column information for the generated

./node_modules/source-map/dist/source-map.js 2376 	 * source's line and column positions provided. The only argument is an object

./node_modules/source-map/dist/source-map.js 2379 	 *   - line: The line number in the generated source.  The line number

./node_modules/source-map/dist/source-map.js 2387 	 *   - line: The line number in the original source, or null.  The

./node_modules/source-map/dist/source-map.js 2388 	 *     line number is 1-based.

./node_modules/source-map/dist/source-map.js 2396 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map/dist/source-map.js 2417 	        line: null,

./node_modules/source-map/dist/source-map.js 2424 	      line: needle.generatedLine -

./node_modules/source-map/dist/source-map.js 2469 	 * Returns the generated line and column information for the original source,

./node_modules/source-map/dist/source-map.js 2470 	 * line, and column positions provided. The only argument is an object with

./node_modules/source-map/dist/source-map.js 2474 	 *   - line: The line number in the original source.  The line number

./node_modules/source-map/dist/source-map.js 2481 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map/dist/source-map.js 2482 	 *     line number is 1-based. 

./node_modules/source-map/dist/source-map.js 2499 	          line: generatedPosition.line +

./node_modules/source-map/dist/source-map.js 2502 	            (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/source-map/dist/source-map.js 2511 	      line: null,

./node_modules/source-map/dist/source-map.js 2651 	 * mappings between original and generated line/col pairs are single points,

./node_modules/source-map/dist/source-map.js 2825 	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/source-map/dist/source-map.js 2829 	// Newline character code for charCodeAt() comparisons

./node_modules/source-map/dist/source-map.js 2839 	 * snippets of generated JavaScript source code while maintaining the line and

./node_modules/source-map/dist/source-map.js 2842 	 * @param aLine The original line number.

./node_modules/source-map/dist/source-map.js 2852 	  this.line = aLine == null ? null : aLine;

./node_modules/source-map/dist/source-map.js 2874 	    // All even indices of this array are one line of the generated code,

./node_modules/source-map/dist/source-map.js 2875 	    // while all odd indices are the newlines between two adjacent lines

./node_modules/source-map/dist/source-map.js 2881 	      var lineContents = getNextLine();

./node_modules/source-map/dist/source-map.js 2882 	      // The last line of a file might not have a newline.

./node_modules/source-map/dist/source-map.js 2884 	      return lineContents + newLine;

./node_modules/source-map/dist/source-map.js 2903 	        // First check if there is a new line in between.

./node_modules/source-map/dist/source-map.js 2905 	          // Associate first line with "lastMapping"

./node_modules/source-map/dist/source-map.js 2911 	          // There is no new line in between.

./node_modules/source-map/dist/source-map.js 2928 	      // Each line is added as separate string.

./node_modules/source-map/dist/source-map.js 2944 	        // Associate the remaining code in the current line with "lastMapping"

./node_modules/source-map/dist/source-map.js 2947 	      // and add the remaining lines without any mapping

./node_modules/source-map/dist/source-map.js 3031 	 * snippet and the its original associated source's line/column location.

./node_modules/source-map/dist/source-map.js 3045 	                     line: this.line,

./node_modules/source-map/dist/source-map.js 3147 	    line: 1,

./node_modules/source-map/dist/source-map.js 3159 	        && original.line !== null

./node_modules/source-map/dist/source-map.js 3162 	         || lastOriginalLine !== original.line

./node_modules/source-map/dist/source-map.js 3168 	            line: original.line,

./node_modules/source-map/dist/source-map.js 3172 	            line: generated.line,

./node_modules/source-map/dist/source-map.js 3179 	      lastOriginalLine = original.line;

./node_modules/source-map/dist/source-map.js 3186 	          line: generated.line,

./node_modules/source-map/dist/source-map.js 3195 	        generated.line++;

./node_modules/source-map/dist/source-map.js 3205 	              line: original.line,

./node_modules/source-map/dist/source-map.js 3209 	              line: generated.line,

./node_modules/source-map/dist/source-map.debug.js 121 	          line: mapping.generatedLine,

./node_modules/source-map/dist/source-map.debug.js 133 	          line: mapping.originalLine,

./node_modules/source-map/dist/source-map.debug.js 163 	 * Add a single mapping from original source line and column to the generated

./node_modules/source-map/dist/source-map.debug.js 164 	 * source's line and column for this source map being created. The mapping

./node_modules/source-map/dist/source-map.debug.js 167 	 *   - generated: An object with the generated line and column positions.

./node_modules/source-map/dist/source-map.debug.js 168 	 *   - original: An object with the original line and column positions.

./node_modules/source-map/dist/source-map.debug.js 198 	      generatedLine: generated.line,

./node_modules/source-map/dist/source-map.debug.js 200 	      originalLine: original != null && original.line,

./node_modules/source-map/dist/source-map.debug.js 278 	          line: mapping.originalLine,

./node_modules/source-map/dist/source-map.debug.js 290 	          mapping.originalLine = original.line;

./node_modules/source-map/dist/source-map.debug.js 341 	    // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/source-map/dist/source-map.debug.js 345 	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/source-map/dist/source-map.debug.js 347 	            'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/source-map/dist/source-map.debug.js 353 	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map/dist/source-map.debug.js 354 	        && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map/dist/source-map.debug.js 359 	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map/dist/source-map.debug.js 360 	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/source-map/dist/source-map.debug.js 361 	             && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map/dist/source-map.debug.js 362 	             && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/source-map/dist/source-map.debug.js 425 	        // lines are stored 0-based in SourceMap spec version 3

./node_modules/source-map/dist/source-map.debug.js 1020 	 * mappings with the same original source/line/column, but different generated

./node_modules/source-map/dist/source-map.debug.js 1021 	 * line and column the same. Useful when searching for a mapping with a

./node_modules/source-map/dist/source-map.debug.js 1059 	 * mappings with the same generated line and column, but different

./node_modules/source-map/dist/source-map.debug.js 1060 	 * source/name/original line and column the same. Useful when searching for a

./node_modules/source-map/dist/source-map.debug.js 1181 	  // can implement the source URL resolution algorithm as outlined in

./node_modules/source-map/dist/source-map.debug.js 1357 	  var lineA = mappingA.generatedLine;

./node_modules/source-map/dist/source-map.debug.js 1358 	  var lineB = mappingB.generatedLine;

./node_modules/source-map/dist/source-map.debug.js 1361 	  return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/source-map/dist/source-map.debug.js 1471 	//       generatedLine: The line number in the generated code,

./node_modules/source-map/dist/source-map.debug.js 1475 	//       originalLine: The line number in the original source that

./node_modules/source-map/dist/source-map.debug.js 1539 	 * Iterate over each mapping between an original source/line/column and a

./node_modules/source-map/dist/source-map.debug.js 1540 	 * generated line/column in this source map.

./node_modules/source-map/dist/source-map.debug.js 1550 	 *        iterate over the mappings sorted by the generated file's line/column

./node_modules/source-map/dist/source-map.debug.js 1551 	 *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/source-map/dist/source-map.debug.js 1587 	 * Returns all generated line and column information for the original source,

./node_modules/source-map/dist/source-map.debug.js 1588 	 * line, and column provided. If no column is provided, returns all mappings

./node_modules/source-map/dist/source-map.debug.js 1589 	 * corresponding to a either the line we are searching for or the next

./node_modules/source-map/dist/source-map.debug.js 1590 	 * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/source-map/dist/source-map.debug.js 1591 	 * corresponding to the given line and either the column we are searching for

./node_modules/source-map/dist/source-map.debug.js 1597 	 *   - line: The line number in the original source.  The line number is 1-based.

./node_modules/source-map/dist/source-map.debug.js 1603 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map/dist/source-map.debug.js 1604 	 *    line number is 1-based.

./node_modules/source-map/dist/source-map.debug.js 1610 	    var line = util.getArg(aArgs, 'line');

./node_modules/source-map/dist/source-map.debug.js 1615 	    // the given line, provided such a mapping exists.

./node_modules/source-map/dist/source-map.debug.js 1618 	      originalLine: line,

./node_modules/source-map/dist/source-map.debug.js 1642 	        // a mapping for a different line than the one we found. Since

./node_modules/source-map/dist/source-map.debug.js 1644 	        // the line we found.

./node_modules/source-map/dist/source-map.debug.js 1647 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map/dist/source-map.debug.js 1658 	        // a mapping for a different line than the one we were searching for.

./node_modules/source-map/dist/source-map.debug.js 1660 	        // the line we are searching for.

./node_modules/source-map/dist/source-map.debug.js 1662 	               mapping.originalLine === line &&

./node_modules/source-map/dist/source-map.debug.js 1665 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map/dist/source-map.debug.js 1947 	            throw new Error('Found a source, but no line and column');

./node_modules/source-map/dist/source-map.debug.js 1951 	            throw new Error('Found a source and line, but no column');

./node_modules/source-map/dist/source-map.debug.js 1966 	          // Original line.

./node_modules/source-map/dist/source-map.debug.js 2043 	      // The last mapping for each line spans the entire line.

./node_modules/source-map/dist/source-map.debug.js 2049 	 * Returns the original source, line, and column information for the generated

./node_modules/source-map/dist/source-map.debug.js 2050 	 * source's line and column positions provided. The only argument is an object

./node_modules/source-map/dist/source-map.debug.js 2053 	 *   - line: The line number in the generated source.  The line number

./node_modules/source-map/dist/source-map.debug.js 2066 	 *   - line: The line number in the original source, or null.  The

./node_modules/source-map/dist/source-map.debug.js 2067 	 *     line number is 1-based.

./node_modules/source-map/dist/source-map.debug.js 2075 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map/dist/source-map.debug.js 2103 	          line: util.getArg(mapping, 'originalLine', null),

./node_modules/source-map/dist/source-map.debug.js 2112 	      line: null,

./node_modules/source-map/dist/source-map.debug.js 2184 	 * Returns the generated line and column information for the original source,

./node_modules/source-map/dist/source-map.debug.js 2185 	 * line, and column positions provided. The only argument is an object with

./node_modules/source-map/dist/source-map.debug.js 2189 	 *   - line: The line number in the original source.  The line number

./node_modules/source-map/dist/source-map.debug.js 2201 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map/dist/source-map.debug.js 2202 	 *     line number is 1-based.

./node_modules/source-map/dist/source-map.debug.js 2212 	        line: null,

./node_modules/source-map/dist/source-map.debug.js 2220 	      originalLine: util.getArg(aArgs, 'line'),

./node_modules/source-map/dist/source-map.debug.js 2238 	          line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map/dist/source-map.debug.js 2246 	      line: null,

./node_modules/source-map/dist/source-map.debug.js 2270 	 *       begins to apply, defined as an object with a "line" and "column"

./node_modules/source-map/dist/source-map.debug.js 2286 	 *      offset: {line:100, column:10},

./node_modules/source-map/dist/source-map.debug.js 2320 	    line: -1,

./node_modules/source-map/dist/source-map.debug.js 2330 	    var offsetLine = util.getArg(offset, 'line');

./node_modules/source-map/dist/source-map.debug.js 2333 	    if (offsetLine < lastOffset.line ||

./node_modules/source-map/dist/source-map.debug.js 2334 	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/source-map/dist/source-map.debug.js 2375 	 * Returns the original source, line, and column information for the generated

./node_modules/source-map/dist/source-map.debug.js 2376 	 * source's line and column positions provided. The only argument is an object

./node_modules/source-map/dist/source-map.debug.js 2379 	 *   - line: The line number in the generated source.  The line number

./node_modules/source-map/dist/source-map.debug.js 2387 	 *   - line: The line number in the original source, or null.  The

./node_modules/source-map/dist/source-map.debug.js 2388 	 *     line number is 1-based.

./node_modules/source-map/dist/source-map.debug.js 2396 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map/dist/source-map.debug.js 2417 	        line: null,

./node_modules/source-map/dist/source-map.debug.js 2424 	      line: needle.generatedLine -

./node_modules/source-map/dist/source-map.debug.js 2469 	 * Returns the generated line and column information for the original source,

./node_modules/source-map/dist/source-map.debug.js 2470 	 * line, and column positions provided. The only argument is an object with

./node_modules/source-map/dist/source-map.debug.js 2474 	 *   - line: The line number in the original source.  The line number

./node_modules/source-map/dist/source-map.debug.js 2481 	 *   - line: The line number in the generated source, or null.  The

./node_modules/source-map/dist/source-map.debug.js 2482 	 *     line number is 1-based. 

./node_modules/source-map/dist/source-map.debug.js 2499 	          line: generatedPosition.line +

./node_modules/source-map/dist/source-map.debug.js 2502 	            (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/source-map/dist/source-map.debug.js 2511 	      line: null,

./node_modules/source-map/dist/source-map.debug.js 2651 	 * mappings between original and generated line/col pairs are single points,

./node_modules/source-map/dist/source-map.debug.js 2825 	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/source-map/dist/source-map.debug.js 2829 	// Newline character code for charCodeAt() comparisons

./node_modules/source-map/dist/source-map.debug.js 2839 	 * snippets of generated JavaScript source code while maintaining the line and

./node_modules/source-map/dist/source-map.debug.js 2842 	 * @param aLine The original line number.

./node_modules/source-map/dist/source-map.debug.js 2852 	  this.line = aLine == null ? null : aLine;

./node_modules/source-map/dist/source-map.debug.js 2874 	    // All even indices of this array are one line of the generated code,

./node_modules/source-map/dist/source-map.debug.js 2875 	    // while all odd indices are the newlines between two adjacent lines

./node_modules/source-map/dist/source-map.debug.js 2881 	      var lineContents = getNextLine();

./node_modules/source-map/dist/source-map.debug.js 2882 	      // The last line of a file might not have a newline.

./node_modules/source-map/dist/source-map.debug.js 2884 	      return lineContents + newLine;

./node_modules/source-map/dist/source-map.debug.js 2903 	        // First check if there is a new line in between.

./node_modules/source-map/dist/source-map.debug.js 2905 	          // Associate first line with "lastMapping"

./node_modules/source-map/dist/source-map.debug.js 2911 	          // There is no new line in between.

./node_modules/source-map/dist/source-map.debug.js 2928 	      // Each line is added as separate string.

./node_modules/source-map/dist/source-map.debug.js 2944 	        // Associate the remaining code in the current line with "lastMapping"

./node_modules/source-map/dist/source-map.debug.js 2947 	      // and add the remaining lines without any mapping

./node_modules/source-map/dist/source-map.debug.js 3031 	 * snippet and the its original associated source's line/column location.

./node_modules/source-map/dist/source-map.debug.js 3045 	                     line: this.line,

./node_modules/source-map/dist/source-map.debug.js 3147 	    line: 1,

./node_modules/source-map/dist/source-map.debug.js 3159 	        && original.line !== null

./node_modules/source-map/dist/source-map.debug.js 3162 	         || lastOriginalLine !== original.line

./node_modules/source-map/dist/source-map.debug.js 3168 	            line: original.line,

./node_modules/source-map/dist/source-map.debug.js 3172 	            line: generated.line,

./node_modules/source-map/dist/source-map.debug.js 3179 	      lastOriginalLine = original.line;

./node_modules/source-map/dist/source-map.debug.js 3186 	          line: generated.line,

./node_modules/source-map/dist/source-map.debug.js 3195 	        generated.line++;

./node_modules/source-map/dist/source-map.debug.js 3205 	              line: original.line,

./node_modules/source-map/dist/source-map.debug.js 3209 	              line: generated.line,

./node_modules/source-map/lib/mapping-list.js 16   var lineA = mappingA.generatedLine;

./node_modules/source-map/lib/mapping-list.js 17   var lineB = mappingB.generatedLine;

./node_modules/source-map/lib/mapping-list.js 20   return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/source-map/lib/source-map-consumer.js 45 //       generatedLine: The line number in the generated code,

./node_modules/source-map/lib/source-map-consumer.js 49 //       originalLine: The line number in the original source that

./node_modules/source-map/lib/source-map-consumer.js 113  * Iterate over each mapping between an original source/line/column and a

./node_modules/source-map/lib/source-map-consumer.js 114  * generated line/column in this source map.

./node_modules/source-map/lib/source-map-consumer.js 124  *        iterate over the mappings sorted by the generated file's line/column

./node_modules/source-map/lib/source-map-consumer.js 125  *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/source-map/lib/source-map-consumer.js 161  * Returns all generated line and column information for the original source,

./node_modules/source-map/lib/source-map-consumer.js 162  * line, and column provided. If no column is provided, returns all mappings

./node_modules/source-map/lib/source-map-consumer.js 163  * corresponding to a either the line we are searching for or the next

./node_modules/source-map/lib/source-map-consumer.js 164  * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/source-map/lib/source-map-consumer.js 165  * corresponding to the given line and either the column we are searching for

./node_modules/source-map/lib/source-map-consumer.js 171  *   - line: The line number in the original source.  The line number is 1-based.

./node_modules/source-map/lib/source-map-consumer.js 177  *   - line: The line number in the generated source, or null.  The

./node_modules/source-map/lib/source-map-consumer.js 178  *    line number is 1-based.

./node_modules/source-map/lib/source-map-consumer.js 184     var line = util.getArg(aArgs, 'line');

./node_modules/source-map/lib/source-map-consumer.js 189     // the given line, provided such a mapping exists.

./node_modules/source-map/lib/source-map-consumer.js 192       originalLine: line,

./node_modules/source-map/lib/source-map-consumer.js 216         // a mapping for a different line than the one we found. Since

./node_modules/source-map/lib/source-map-consumer.js 218         // the line we found.

./node_modules/source-map/lib/source-map-consumer.js 221             line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map/lib/source-map-consumer.js 232         // a mapping for a different line than the one we were searching for.

./node_modules/source-map/lib/source-map-consumer.js 234         // the line we are searching for.

./node_modules/source-map/lib/source-map-consumer.js 236                mapping.originalLine === line &&

./node_modules/source-map/lib/source-map-consumer.js 239             line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map/lib/source-map-consumer.js 521             throw new Error('Found a source, but no line and column');

./node_modules/source-map/lib/source-map-consumer.js 525             throw new Error('Found a source and line, but no column');

./node_modules/source-map/lib/source-map-consumer.js 540           // Original line.

./node_modules/source-map/lib/source-map-consumer.js 617       // The last mapping for each line spans the entire line.

./node_modules/source-map/lib/source-map-consumer.js 623  * Returns the original source, line, and column information for the generated

./node_modules/source-map/lib/source-map-consumer.js 624  * source's line and column positions provided. The only argument is an object

./node_modules/source-map/lib/source-map-consumer.js 627  *   - line: The line number in the generated source.  The line number

./node_modules/source-map/lib/source-map-consumer.js 640  *   - line: The line number in the original source, or null.  The

./node_modules/source-map/lib/source-map-consumer.js 641  *     line number is 1-based.

./node_modules/source-map/lib/source-map-consumer.js 649       generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map/lib/source-map-consumer.js 677           line: util.getArg(mapping, 'originalLine', null),

./node_modules/source-map/lib/source-map-consumer.js 686       line: null,

./node_modules/source-map/lib/source-map-consumer.js 758  * Returns the generated line and column information for the original source,

./node_modules/source-map/lib/source-map-consumer.js 759  * line, and column positions provided. The only argument is an object with

./node_modules/source-map/lib/source-map-consumer.js 763  *   - line: The line number in the original source.  The line number

./node_modules/source-map/lib/source-map-consumer.js 775  *   - line: The line number in the generated source, or null.  The

./node_modules/source-map/lib/source-map-consumer.js 776  *     line number is 1-based.

./node_modules/source-map/lib/source-map-consumer.js 786         line: null,

./node_modules/source-map/lib/source-map-consumer.js 794       originalLine: util.getArg(aArgs, 'line'),

./node_modules/source-map/lib/source-map-consumer.js 812           line: util.getArg(mapping, 'generatedLine', null),

./node_modules/source-map/lib/source-map-consumer.js 820       line: null,

./node_modules/source-map/lib/source-map-consumer.js 844  *       begins to apply, defined as an object with a "line" and "column"

./node_modules/source-map/lib/source-map-consumer.js 860  *      offset: {line:100, column:10},

./node_modules/source-map/lib/source-map-consumer.js 894     line: -1,

./node_modules/source-map/lib/source-map-consumer.js 904     var offsetLine = util.getArg(offset, 'line');

./node_modules/source-map/lib/source-map-consumer.js 907     if (offsetLine < lastOffset.line ||

./node_modules/source-map/lib/source-map-consumer.js 908         (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/source-map/lib/source-map-consumer.js 949  * Returns the original source, line, and column information for the generated

./node_modules/source-map/lib/source-map-consumer.js 950  * source's line and column positions provided. The only argument is an object

./node_modules/source-map/lib/source-map-consumer.js 953  *   - line: The line number in the generated source.  The line number

./node_modules/source-map/lib/source-map-consumer.js 961  *   - line: The line number in the original source, or null.  The

./node_modules/source-map/lib/source-map-consumer.js 962  *     line number is 1-based.

./node_modules/source-map/lib/source-map-consumer.js 970       generatedLine: util.getArg(aArgs, 'line'),

./node_modules/source-map/lib/source-map-consumer.js 991         line: null,

./node_modules/source-map/lib/source-map-consumer.js 998       line: needle.generatedLine -

./node_modules/source-map/lib/source-map-consumer.js 1043  * Returns the generated line and column information for the original source,

./node_modules/source-map/lib/source-map-consumer.js 1044  * line, and column positions provided. The only argument is an object with

./node_modules/source-map/lib/source-map-consumer.js 1048  *   - line: The line number in the original source.  The line number

./node_modules/source-map/lib/source-map-consumer.js 1055  *   - line: The line number in the generated source, or null.  The

./node_modules/source-map/lib/source-map-consumer.js 1056  *     line number is 1-based. 

./node_modules/source-map/lib/source-map-consumer.js 1073           line: generatedPosition.line +

./node_modules/source-map/lib/source-map-consumer.js 1076             (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/source-map/lib/source-map-consumer.js 1085       line: null,

./node_modules/source-map/lib/source-map-generator.js 51           line: mapping.generatedLine,

./node_modules/source-map/lib/source-map-generator.js 63           line: mapping.originalLine,

./node_modules/source-map/lib/source-map-generator.js 93  * Add a single mapping from original source line and column to the generated

./node_modules/source-map/lib/source-map-generator.js 94  * source's line and column for this source map being created. The mapping

./node_modules/source-map/lib/source-map-generator.js 97  *   - generated: An object with the generated line and column positions.

./node_modules/source-map/lib/source-map-generator.js 98  *   - original: An object with the original line and column positions.

./node_modules/source-map/lib/source-map-generator.js 128       generatedLine: generated.line,

./node_modules/source-map/lib/source-map-generator.js 130       originalLine: original != null && original.line,

./node_modules/source-map/lib/source-map-generator.js 208           line: mapping.originalLine,

./node_modules/source-map/lib/source-map-generator.js 220           mapping.originalLine = original.line;

./node_modules/source-map/lib/source-map-generator.js 271     // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/source-map/lib/source-map-generator.js 275     if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/source-map/lib/source-map-generator.js 277             'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/source-map/lib/source-map-generator.js 283     if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map/lib/source-map-generator.js 284         && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map/lib/source-map-generator.js 289     else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/source-map/lib/source-map-generator.js 290              && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/source-map/lib/source-map-generator.js 291              && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/source-map/lib/source-map-generator.js 292              && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/source-map/lib/source-map-generator.js 355         // lines are stored 0-based in SourceMap spec version 3

./node_modules/source-map/lib/binary-search.js 74  * mappings between original and generated line/col pairs are single points,

./node_modules/source-map/lib/util.js 300  * mappings with the same original source/line/column, but different generated

./node_modules/source-map/lib/util.js 301  * line and column the same. Useful when searching for a mapping with a

./node_modules/source-map/lib/util.js 339  * mappings with the same generated line and column, but different

./node_modules/source-map/lib/util.js 340  * source/name/original line and column the same. Useful when searching for a

./node_modules/source-map/lib/util.js 461   // can implement the source URL resolution algorithm as outlined in

./node_modules/source-map/lib/source-node.js 11 // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/source-map/lib/source-node.js 15 // Newline character code for charCodeAt() comparisons

./node_modules/source-map/lib/source-node.js 25  * snippets of generated JavaScript source code while maintaining the line and

./node_modules/source-map/lib/source-node.js 28  * @param aLine The original line number.

./node_modules/source-map/lib/source-node.js 38   this.line = aLine == null ? null : aLine;

./node_modules/source-map/lib/source-node.js 60     // All even indices of this array are one line of the generated code,

./node_modules/source-map/lib/source-node.js 61     // while all odd indices are the newlines between two adjacent lines

./node_modules/source-map/lib/source-node.js 67       var lineContents = getNextLine();

./node_modules/source-map/lib/source-node.js 68       // The last line of a file might not have a newline.

./node_modules/source-map/lib/source-node.js 70       return lineContents + newLine;

./node_modules/source-map/lib/source-node.js 89         // First check if there is a new line in between.

./node_modules/source-map/lib/source-node.js 91           // Associate first line with "lastMapping"

./node_modules/source-map/lib/source-node.js 97           // There is no new line in between.

./node_modules/source-map/lib/source-node.js 114       // Each line is added as separate string.

./node_modules/source-map/lib/source-node.js 130         // Associate the remaining code in the current line with "lastMapping"

./node_modules/source-map/lib/source-node.js 133       // and add the remaining lines without any mapping

./node_modules/source-map/lib/source-node.js 217  * snippet and the its original associated source's line/column location.

./node_modules/source-map/lib/source-node.js 231                      line: this.line,

./node_modules/source-map/lib/source-node.js 333     line: 1,

./node_modules/source-map/lib/source-node.js 345         && original.line !== null

./node_modules/source-map/lib/source-node.js 348          || lastOriginalLine !== original.line

./node_modules/source-map/lib/source-node.js 354             line: original.line,

./node_modules/source-map/lib/source-node.js 358             line: generated.line,

./node_modules/source-map/lib/source-node.js 365       lastOriginalLine = original.line;

./node_modules/source-map/lib/source-node.js 372           line: generated.line,

./node_modules/source-map/lib/source-node.js 381         generated.line++;

./node_modules/source-map/lib/source-node.js 391               line: original.line,

./node_modules/source-map/lib/source-node.js 395               line: generated.line,

./node_modules/browserslist/update-db.js 64     .map(function (line) {

./node_modules/browserslist/update-db.js 65       return line.trim().split(' ')

./node_modules/browserslist/update-db.js 134   blocks.forEach(function (lines) {

./node_modules/browserslist/update-db.js 135     if (lines[0].indexOf('caniuse-lite@') !== -1) {

./node_modules/browserslist/update-db.js 136       var match = yarnVersionRe.exec(lines[1])

./node_modules/browserslist/update-db.js 139         lines[1] = lines[1].replace(

./node_modules/browserslist/update-db.js 142         lines[2] = lines[2].replace(

./node_modules/browserslist/update-db.js 145         lines[3] = latest.dist.integrity ? lines[3].replace(

./node_modules/browserslist/update-db.js 151   var content = blocks.map(function (lines) {

./node_modules/browserslist/update-db.js 152     return lines.join('\n')

./node_modules/browserslist/update-db.js 159   var lines = lock.content.split('\n')

./node_modules/browserslist/update-db.js 162   var lineParts

./node_modules/browserslist/update-db.js 164   for (i = 0; i < lines.length; i++) {

./node_modules/browserslist/update-db.js 165     if (lines[i].indexOf('caniuse-lite:') >= 0) {

./node_modules/browserslist/update-db.js 166       lineParts = lines[i].split(/:\s?/, 2)

./node_modules/browserslist/update-db.js 167       versions[lineParts[1]] = true

./node_modules/browserslist/update-db.js 168       lines[i] = lineParts[0] + ': ' + latest.version

./node_modules/browserslist/update-db.js 169     } else if (lines[i].indexOf('/caniuse-lite') >= 0) {

./node_modules/browserslist/update-db.js 170       lineParts = lines[i].split(/([/:])/)

./node_modules/browserslist/update-db.js 171       for (j = 0; j < lineParts.length; j++) {

./node_modules/browserslist/update-db.js 172         if (lineParts[j].indexOf('caniuse-lite') >= 0) {

./node_modules/browserslist/update-db.js 173           versions[lineParts[j + 2]] = true

./node_modules/browserslist/update-db.js 174           lineParts[j + 2] = latest.version

./node_modules/browserslist/update-db.js 178       lines[i] = lineParts.join('')

./node_modules/browserslist/update-db.js 179       for (i = i + 1; i < lines.length; i++) {

./node_modules/browserslist/update-db.js 180         if (lines[i].indexOf('integrity: ') !== -1) {

./node_modules/browserslist/update-db.js 181           lines[i] = lines[i].replace(

./node_modules/browserslist/update-db.js 184         } else if (lines[i].indexOf(' /') !== -1) {

./node_modules/browserslist/update-db.js 190   return { content: lines.join('\n'), versions: versions }

./node_modules/browserslist/node.js 147     // eslint-disable-next-line max-len

./node_modules/browserslist/node.js 163     // eslint-disable-next-line security/detect-non-literal-require

./node_modules/browserslist/node.js 183     // eslint-disable-next-line security/detect-non-literal-require

./node_modules/browserslist/node.js 235       // eslint-disable-next-line security/detect-non-literal-require

./node_modules/browserslist/node.js 252     // eslint-disable-next-line security/detect-non-literal-require

./node_modules/browserslist/node.js 270       .map(function (line) {

./node_modules/browserslist/node.js 271         return line.trim()

./node_modules/browserslist/node.js 273       .filter(function (line) {

./node_modules/browserslist/node.js 274         return line !== ''

./node_modules/browserslist/node.js 276       .forEach(function (line) {

./node_modules/browserslist/node.js 277         if (IS_SECTION.test(line)) {

./node_modules/browserslist/node.js 278           sections = line.match(IS_SECTION)[1].trim().split(' ')

./node_modules/browserslist/node.js 289             result[section].push(line)

./node_modules/enhanced-resolve/lib/PnpPlugin.js 68 							for (const line of error.message.split("\n").filter(Boolean))

./node_modules/enhanced-resolve/lib/PnpPlugin.js 69 								resolveContext.log(`  ${line}`);

./node_modules/enhanced-resolve/lib/ResolverFactory.js 121 		return require("pnpapi"); // eslint-disable-line node/no-missing-require

./node_modules/enhanced-resolve/lib/ResolverFactory.js 279 	//// pipeline ////

./node_modules/media-typer/index.js 24  * LF            = <US-ASCII LF, linefeed (10)>

./node_modules/portfinder/node_modules/debug/src/common.js 104           match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

./node_modules/portfinder/node_modules/debug/src/browser.js 28 // eslint-disable-next-line complexity

./node_modules/portfinder/node_modules/debug/src/node.js 28   // eslint-disable-next-line import/no-extraneous-dependencies

./node_modules/portfinder/node_modules/debug/src/node.js 158  * Map %o to `util.inspect()`, all on a single line.

./node_modules/portfinder/node_modules/debug/src/node.js 169  * Map %O to `util.inspect()`, allowing multiple lines if needed.

./node_modules/he/he.js 26 	// All BMP symbols that are not ASCII newlines, printable ASCII symbols, or

./node_modules/chalk/index.js 154 	builder.__proto__ = proto; // eslint-disable-line no-proto

./node_modules/chalk/index.js 194 		// Close the styling before a linebreak and reopen

./node_modules/chalk/index.js 195 		// after next line to fix a bleed issue on macOS

./node_modules/chalk/index.js 226 module.exports = Chalk(); // eslint-disable-line new-cap

./node_modules/chalk/templates.js 98 	// eslint-disable-next-line max-params

./node_modules/chalk/package.json 41 		"command-line",

./node_modules/chalk/index.js.flow 47 	+underline: Chalk,

./node_modules/chalk/node_modules/has-flag/package.json 29     "command-line",

./node_modules/chalk/node_modules/supports-color/package.json 36 		"command-line",

./node_modules/lodash/template.js 147  * // Use the `source` property to inline compiled templates for meaningful

./node_modules/lodash/template.js 148  * // line numbers in error messages and stack traces.

./node_modules/lodash/template.js 187   // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in

./node_modules/lodash/lodash.js 14830      * // Use the `source` property to inline compiled templates for meaningful

./node_modules/lodash/lodash.js 14831      * // line numbers in error messages and stack traces.

./node_modules/lodash/lodash.js 14870       // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in

./node_modules/dir-glob/index.js 59 	return [].concat.apply([], globs); // eslint-disable-line prefer-spread

./node_modules/dir-glob/index.js 74 	return [].concat.apply([], globs); // eslint-disable-line prefer-spread

./node_modules/uuid/lib/rng-browser.js 13   var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

./node_modules/sockjs/lib/webjs.js 163     GenericApp.prototype.log = function(severity, line) {

./node_modules/sockjs/lib/webjs.js 164       return console.log(line);

./node_modules/sockjs/lib/sockjs.js 81     App.prototype.log = function(severity, line) {

./node_modules/sockjs/lib/sockjs.js 82       return this.options.log(severity, line);

./node_modules/sockjs/lib/sockjs.js 178         log: function(severity, line) {

./node_modules/sockjs/lib/sockjs.js 179           return console.log(line);

./node_modules/node-forge/lib/pki.js 74  * @param maxline the maximum characters per line, defaults to 64.

./node_modules/node-forge/lib/pki.js 78 pki.privateKeyToPem = function(key, maxline) {

./node_modules/node-forge/lib/pki.js 84   return forge.pem.encode(msg, {maxline: maxline});

./node_modules/node-forge/lib/pki.js 91  * @param maxline the maximum characters per line, defaults to 64.

./node_modules/node-forge/lib/pki.js 95 pki.privateKeyInfoToPem = function(pki, maxline) {

./node_modules/node-forge/lib/pki.js 101   return forge.pem.encode(msg, {maxline: maxline});

./node_modules/node-forge/lib/x509.js 734  * @param maxline the maximum characters per line, defaults to 64.

./node_modules/node-forge/lib/x509.js 738 pki.certificateToPem = function(cert, maxline) {

./node_modules/node-forge/lib/x509.js 744   return forge.pem.encode(msg, {maxline: maxline});

./node_modules/node-forge/lib/x509.js 777  * @param maxline the maximum characters per line, defaults to 64.

./node_modules/node-forge/lib/x509.js 781 pki.publicKeyToPem = function(key, maxline) {

./node_modules/node-forge/lib/x509.js 787   return forge.pem.encode(msg, {maxline: maxline});

./node_modules/node-forge/lib/x509.js 794  * @param maxline the maximum characters per line, defaults to 64.

./node_modules/node-forge/lib/x509.js 798 pki.publicKeyToRSAPublicKeyPem = function(key, maxline) {

./node_modules/node-forge/lib/x509.js 804   return forge.pem.encode(msg, {maxline: maxline});

./node_modules/node-forge/lib/x509.js 895  * @param maxline the maximum characters per line, defaults to 64.

./node_modules/node-forge/lib/x509.js 899 pki.certificationRequestToPem = function(csr, maxline) {

./node_modules/node-forge/lib/x509.js 905   return forge.pem.encode(msg, {maxline: maxline});

./node_modules/node-forge/lib/x509.js 2976     See inline parentheticals related to this particular implementation.

./node_modules/node-forge/lib/x509.js 2981     public key of the trust anchor. This requires obtaining a sequence of

./node_modules/node-forge/lib/x509.js 2983     in the passed 'chain'. The trust anchor should be in the given CA

./node_modules/node-forge/lib/x509.js 2994     (b) certificate 1 is issued by the trust anchor;

./node_modules/node-forge/lib/x509.js 3029     (d) trust anchor information, describing a CA that serves as a trust

./node_modules/node-forge/lib/x509.js 3030           anchor for the certification path. The trust anchor information

./node_modules/node-forge/lib/x509.js 3039       (Trust anchors are provided via certificates in the CA store).

./node_modules/node-forge/lib/x509.js 3041       The trust anchor information may be provided to the path processing

./node_modules/node-forge/lib/x509.js 3042       procedure in the form of a self-signed certificate. The trusted anchor

./node_modules/node-forge/lib/oids.js 37 // Edwards-curve Digital Signature Algorithm (EdDSA) Ed25519

./node_modules/node-forge/lib/pkcs7.js 66  * @param maxline The maximum characters per line, defaults to 64.

./node_modules/node-forge/lib/pkcs7.js 70 p7.messageToPem = function(msg, maxline) {

./node_modules/node-forge/lib/pkcs7.js 76   return forge.pem.encode(pemObj, {maxline: maxline});

./node_modules/node-forge/lib/aes.js 272 var sbox;         // non-linear substitution table used in key expansion

./node_modules/node-forge/lib/aes.js 650  * key schedule consists of a linear array of 4-byte words, denoted [wi ],

./node_modules/node-forge/lib/aes.js 751      done. These changes are done inline with the other substitution

./node_modules/node-forge/lib/aes.js 915       We can make these substitutions inline with our column mixing to

./node_modules/node-forge/lib/aes.js 1020   // Note: rows are shifted inline

./node_modules/node-forge/lib/asn1.js 1237   // start new line for deep levels

./node_modules/node-forge/lib/des.js 320       // order of lines will be according to how the S selection functions will

./node_modules/node-forge/lib/util.js 1575  * @param maxline the maximum number of encoded characters per line to use,

./node_modules/node-forge/lib/util.js 1580 util.encode64 = function(input, maxline) {

./node_modules/node-forge/lib/util.js 1582   var line = '';

./node_modules/node-forge/lib/util.js 1592     line += _base64.charAt(chr1 >> 2);

./node_modules/node-forge/lib/util.js 1593     line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));

./node_modules/node-forge/lib/util.js 1595       line += '==';

./node_modules/node-forge/lib/util.js 1597       line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));

./node_modules/node-forge/lib/util.js 1598       line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);

./node_modules/node-forge/lib/util.js 1601     if(maxline && line.length > maxline) {

./node_modules/node-forge/lib/util.js 1602       output += line.substr(0, maxline) + '\r\n';

./node_modules/node-forge/lib/util.js 1603       line = line.substr(maxline);

./node_modules/node-forge/lib/util.js 1606   output += line;

./node_modules/node-forge/lib/util.js 1766  * @param maxline the maximum number of encoded characters per line to use,

./node_modules/node-forge/lib/util.js 1771 util.binary.base64.encode = function(input, maxline) {

./node_modules/node-forge/lib/util.js 1772   var line = '';

./node_modules/node-forge/lib/util.js 1782     line += _base64.charAt(chr1 >> 2);

./node_modules/node-forge/lib/util.js 1783     line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));

./node_modules/node-forge/lib/util.js 1785       line += '==';

./node_modules/node-forge/lib/util.js 1787       line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));

./node_modules/node-forge/lib/util.js 1788       line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);

./node_modules/node-forge/lib/util.js 1791     if(maxline && line.length > maxline) {

./node_modules/node-forge/lib/util.js 1792       output += line.substr(0, maxline) + '\r\n';

./node_modules/node-forge/lib/util.js 1793       line = line.substr(maxline);

./node_modules/node-forge/lib/util.js 1796   output += line;

./node_modules/node-forge/lib/util.js 1845 util.binary.base58.encode = function(input, maxline) {

./node_modules/node-forge/lib/util.js 1846   return util.binary.baseN.encode(input, _base58, maxline);

./node_modules/node-forge/lib/util.js 1848 util.binary.base58.decode = function(input, maxline) {

./node_modules/node-forge/lib/util.js 1849   return util.binary.baseN.decode(input, _base58, maxline);

./node_modules/node-forge/lib/http.js 960     // build start line

./node_modules/node-forge/lib/http.js 1003    * Reads a line that ends in CRLF from a byte buffer.

./node_modules/node-forge/lib/http.js 1007    * @return the line or null if none was found.

./node_modules/node-forge/lib/http.js 1010     var line = null;

./node_modules/node-forge/lib/http.js 1013       // read line, skip CRLF

./node_modules/node-forge/lib/http.js 1014       line = b.getBytes(i - b.read);

./node_modules/node-forge/lib/http.js 1017     return line;

./node_modules/node-forge/lib/http.js 1023    * @param line the header field line.

./node_modules/node-forge/lib/http.js 1025   var _parseHeader = function(line) {

./node_modules/node-forge/lib/http.js 1026     var tmp = line.indexOf(':');

./node_modules/node-forge/lib/http.js 1027     var name = line.substring(0, tmp++);

./node_modules/node-forge/lib/http.js 1029       name, (tmp < line.length) ? line.substring(tmp) : '');

./node_modules/node-forge/lib/http.js 1040     // read header lines (each ends in CRLF)

./node_modules/node-forge/lib/http.js 1041     var line = '';

./node_modules/node-forge/lib/http.js 1042     while(!response.headerReceived && line !== null) {

./node_modules/node-forge/lib/http.js 1043       line = _readCrlf(b);

./node_modules/node-forge/lib/http.js 1044       if(line !== null) {

./node_modules/node-forge/lib/http.js 1045         // parse first line

./node_modules/node-forge/lib/http.js 1048           var tmp = line.split(' ');

./node_modules/node-forge/lib/http.js 1056             error.details = {'line': line};

./node_modules/node-forge/lib/http.js 1059         } else if(line.length === 0) {

./node_modules/node-forge/lib/http.js 1060           // handle final line, end of header

./node_modules/node-forge/lib/http.js 1063           _parseHeader(line);

./node_modules/node-forge/lib/http.js 1089       blank line + CRLF (terminates the trailers)

./node_modules/node-forge/lib/http.js 1092       there is still a single CRLF (indicating the blank line + CRLF

./node_modules/node-forge/lib/http.js 1094       the trailers with blank line + CRLF, regardless of 0-N trailers. */

./node_modules/node-forge/lib/http.js 1116     var line = '';

./node_modules/node-forge/lib/http.js 1117     while(line !== null && b.length() > 0) {

./node_modules/node-forge/lib/http.js 1131         // more chunks, read next chunk-size line

./node_modules/node-forge/lib/http.js 1132         line = _readCrlf(b);

./node_modules/node-forge/lib/http.js 1133         if(line !== null) {

./node_modules/node-forge/lib/http.js 1135           _chunkSize = parseInt(line.split(';', 1)[0], 16);

./node_modules/node-forge/lib/http.js 1140         line = _readCrlf(b);

./node_modules/node-forge/lib/http.js 1141         while(line !== null) {

./node_modules/node-forge/lib/http.js 1142           if(line.length > 0) {

./node_modules/node-forge/lib/http.js 1144             _parseHeader(line);

./node_modules/node-forge/lib/http.js 1146             line = _readCrlf(b);

./node_modules/node-forge/lib/http.js 1150             line = null;

./node_modules/node-forge/lib/http.js 1301     // build start line

./node_modules/node-forge/lib/pem.js 40  *          maxline the maximum characters per line for the body, (default: 64).

./node_modules/node-forge/lib/pem.js 82   rval += forge.util.encode64(msg.body, options.maxline || 64) + '\r\n';

./node_modules/node-forge/lib/pem.js 98   // split string into PEM messages (be lenient w/EOF on BEGIN line)

./node_modules/node-forge/lib/pem.js 125     var lines = match[2].split(rCRLF);

./node_modules/node-forge/lib/pem.js 127     while(match && li < lines.length) {

./node_modules/node-forge/lib/pem.js 128       // get line, trim any rhs whitespace

./node_modules/node-forge/lib/pem.js 129       var line = lines[li].replace(/\s+$/, '');

./node_modules/node-forge/lib/pem.js 131       // RFC2822 unfold any following folded lines

./node_modules/node-forge/lib/pem.js 132       for(var nl = li + 1; nl < lines.length; ++nl) {

./node_modules/node-forge/lib/pem.js 133         var next = lines[nl];

./node_modules/node-forge/lib/pem.js 137         line += next;

./node_modules/node-forge/lib/pem.js 142       match = line.match(rHeader);

./node_modules/node-forge/lib/baseN.js 41  * @param maxline the maximum number of encoded characters per line to use,

./node_modules/node-forge/lib/baseN.js 46 api.encode = function(input, alphabet, maxline) {

./node_modules/node-forge/lib/baseN.js 50   if(maxline !== undefined && typeof maxline !== 'number') {

./node_modules/node-forge/lib/baseN.js 51     throw new TypeError('"maxline" must be a number.');

./node_modules/node-forge/lib/baseN.js 87   if(maxline) {

./node_modules/node-forge/lib/baseN.js 88     var regex = new RegExp('.{1,' + maxline + '}', 'g');

./node_modules/node-forge/lib/pbe.js 389  * @param maxline the maximum characters per line, defaults to 64.

./node_modules/node-forge/lib/pbe.js 393 pki.encryptedPrivateKeyToPem = function(epki, maxline) {

./node_modules/node-forge/lib/pbe.js 399   return forge.pem.encode(msg, {maxline: maxline});

./node_modules/path-to-regexp/index.js 116         name: name++, // Unnamed matching groups must be consistently linear.

./node_modules/object.assign/implementation.js 15 // eslint-disable-next-line no-unused-vars

./node_modules/object.assign/index.js 11 // eslint-disable-next-line no-unused-vars

./node_modules/object.assign/hasSymbols.js 26 	for (sym in obj) { return false; } // eslint-disable-line no-unreachable-loop

./node_modules/object.assign/dist/browser.js 28 // eslint-disable-next-line no-unused-vars

./node_modules/object.assign/dist/browser.js 68 // eslint-disable-next-line no-unused-vars

./node_modules/object.assign/dist/browser.js 151 		// eslint-disable-next-line no-unused-vars, no-restricted-syntax

./node_modules/object.assign/dist/browser.js 271 // eslint-disable-next-line consistent-return

./node_modules/object.assign/dist/browser.js 274 		// eslint-disable-next-line no-new-func

./node_modules/object.assign/dist/browser.js 294 			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties

./node_modules/object.assign/dist/browser.js 310 var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

./node_modules/object.assign/dist/browser.js 338 	'%eval%': eval, // eslint-disable-line no-eval

./node_modules/object.assign/dist/browser.js 590 	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax

./node_modules/object.assign/dist/browser.js 623 	var isArgs = require('./isArguments'); // eslint-disable-line global-require

./node_modules/object.assign/dist/browser.js 758 			Object.keys = function keys(object) { // eslint-disable-line func-name-matching

./node_modules/html-minifier-terser/cli.js 103   collapseInlineTagWhitespace: 'Collapse white space around inline tag',

./node_modules/html-minifier-terser/cli.js 108   customAttrCollapse: ['Regex that specifies custom attribute to strip newlines from (e.g. /ng-class/)', parseRegExp],

./node_modules/html-minifier-terser/cli.js 117   maxLineLength: ['Max line length', parseInt],

./node_modules/html-minifier-terser/cli.js 121   preserveLineBreaks: 'Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a line break.',

./node_modules/html-minifier-terser/cli.js 300 // Minifying one or more files specified on the CMD line

./node_modules/html-minifier-terser/node_modules/commander/index.js 48   this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.

./node_modules/html-minifier-terser/node_modules/commander/index.js 300     // Expecting this line is not reached.

./node_modules/html-minifier-terser/node_modules/commander/index.js 522  * the option must be specified on the command line. (Otherwise the same as .option().)

./node_modules/html-minifier-terser/node_modules/commander/index.js 539  * Allow unknown options on the command line.

./node_modules/html-minifier-terser/node_modules/commander/index.js 1515  * Wraps the given string with line breaks at the specified width while breaking

./node_modules/html-minifier-terser/node_modules/commander/index.js 1516  * words and indenting every but the first line on the left.

./node_modules/html-minifier-terser/node_modules/commander/index.js 1526   var lines = str.match(regex) || [];

./node_modules/html-minifier-terser/node_modules/commander/index.js 1527   return lines.map(function(line, i) {

./node_modules/html-minifier-terser/node_modules/commander/index.js 1528     if (line.slice(-1) === '\n') {

./node_modules/html-minifier-terser/node_modules/commander/index.js 1529       line = line.slice(0, line.length - 1);

./node_modules/html-minifier-terser/node_modules/commander/index.js 1531     return ((i > 0 && indent) ? Array(indent + 1).join(' ') : '') + line.trimRight();

./node_modules/html-minifier-terser/node_modules/commander/index.js 1536  * Optionally wrap the given str to a max width of width characters per line

./node_modules/html-minifier-terser/node_modules/commander/index.js 1547   // Detect manually wrapped and indented strings by searching for line breaks

./node_modules/html-minifier-terser/node_modules/commander/index.js 1550   // Do not wrap to narrow columns (or can end up with a word per line).

./node_modules/html-minifier-terser/node_modules/commander/package.json 4   "description": "the complete solution for node.js command-line programs",

./node_modules/html-minifier-terser/src/htmlminifier.js 23   var lineBreakBefore = '', lineBreakAfter = '';

./node_modules/html-minifier-terser/src/htmlminifier.js 27       lineBreakBefore = '\n';

./node_modules/html-minifier-terser/src/htmlminifier.js 30       lineBreakAfter = '\n';

./node_modules/html-minifier-terser/src/htmlminifier.js 38       var conservative = !lineBreakBefore && options.conservativeCollapse;

./node_modules/html-minifier-terser/src/htmlminifier.js 49       var conservative = !lineBreakAfter && options.conservativeCollapse;

./node_modules/html-minifier-terser/src/htmlminifier.js 62   return lineBreakBefore + str + lineBreakAfter;

./node_modules/html-minifier-terser/src/htmlminifier.js 67 var inlineTags = createMapFromString('a,abbr,acronym,b,bdi,bdo,big,button,cite,code,del,dfn,em,font,i,ins,kbd,label,mark,math,nobr,object,q,rp,rt,rtc,ruby,s,samp,select,small,span,strike,strong,sub,sup,svg,textarea,time,tt,u,var');

./node_modules/html-minifier-terser/src/htmlminifier.js 69 var inlineTextTags = createMapFromString('a,abbr,acronym,b,big,del,em,font,i,ins,kbd,mark,nobr,rp,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var');

./node_modules/html-minifier-terser/src/htmlminifier.js 71 var selfClosingInlineTags = createMapFromString('comment,img,input,wbr');

./node_modules/html-minifier-terser/src/htmlminifier.js 74   var trimLeft = prevTag && !selfClosingInlineTags(prevTag);

./node_modules/html-minifier-terser/src/htmlminifier.js 75   if (trimLeft && !options.collapseInlineTagWhitespace) {

./node_modules/html-minifier-terser/src/htmlminifier.js 76     trimLeft = prevTag.charAt(0) === '/' ? !inlineTags(prevTag.slice(1)) : !inlineTextTags(prevTag);

./node_modules/html-minifier-terser/src/htmlminifier.js 78   var trimRight = nextTag && !selfClosingInlineTags(nextTag);

./node_modules/html-minifier-terser/src/htmlminifier.js 79   if (trimRight && !options.collapseInlineTagWhitespace) {

./node_modules/html-minifier-terser/src/htmlminifier.js 80     trimRight = nextTag.charAt(0) === '/' ? !inlineTextTags(nextTag.slice(1)) : !inlineTags(nextTag);

./node_modules/html-minifier-terser/src/htmlminifier.js 295       attrValue = options.minifyCSS(attrValue, 'inline');

./node_modules/html-minifier-terser/src/htmlminifier.js 370     case 'inline':

./node_modules/html-minifier-terser/src/htmlminifier.js 382     case 'inline':

./node_modules/html-minifier-terser/src/htmlminifier.js 418 var pInlineTags = createMapFromString('a,audio,del,ins,map,noscript,video');

./node_modules/html-minifier-terser/src/htmlminifier.js 710       options.minifyJS = function(text, inline) {

./node_modules/html-minifier-terser/src/htmlminifier.js 713         value.parse.bare_returns = inline;

./node_modules/html-minifier-terser/src/htmlminifier.js 965   // look for trailing whitespaces, bypass any inline tags

./node_modules/html-minifier-terser/src/htmlminifier.js 1010       if (!inlineTextTags(tag)) {

./node_modules/html-minifier-terser/src/htmlminifier.js 1124         if (htmlTags(tag) && optionalEndTag && !trailingTags(optionalEndTag) && (optionalEndTag !== 'p' || !pInlineTags(tag))) {

./node_modules/html-minifier-terser/src/htmlminifier.js 1144         if (!inlineTags(tag)) {

./node_modules/html-minifier-terser/src/htmlminifier.js 1185             else if (inlineTextTags(prevTag.charAt(0) === '/' ? prevTag.slice(1) : prevTag)) {

./node_modules/html-minifier-terser/src/htmlminifier.js 1320     var line = '', lines = [];

./node_modules/html-minifier-terser/src/htmlminifier.js 1322       var len = line.length;

./node_modules/html-minifier-terser/src/htmlminifier.js 1325         line += restoreIgnore(restoreCustom(results.shift()));

./node_modules/html-minifier-terser/src/htmlminifier.js 1328         line += restoreIgnore(restoreCustom(results[0].slice(0, end)));

./node_modules/html-minifier-terser/src/htmlminifier.js 1331       if (len > 0 && line.length > maxLineLength) {

./node_modules/html-minifier-terser/src/htmlminifier.js 1332         lines.push(line.slice(0, len));

./node_modules/html-minifier-terser/src/htmlminifier.js 1333         line = line.slice(len);

./node_modules/html-minifier-terser/src/htmlminifier.js 1336         lines.push(line);

./node_modules/html-minifier-terser/src/htmlminifier.js 1337         line = '';

./node_modules/html-minifier-terser/src/htmlminifier.js 1340     if (line) {

./node_modules/html-minifier-terser/src/htmlminifier.js 1341       lines.push(line);

./node_modules/html-minifier-terser/src/htmlminifier.js 1343     str = lines.join('\n');

./node_modules/html-minifier-terser/src/htmlparser.js 71 // Inline Elements

./node_modules/html-minifier-terser/src/htmlparser.js 72 var inline = makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,noscript,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,svg,textarea,tt,u,var');

./node_modules/html-minifier-terser/src/htmlparser.js 304     if (!handler.html5 && !inline(tagName)) {

./node_modules/html-minifier-terser/src/htmlparser.js 305       while (lastTag && inline(lastTag)) {

./node_modules/thunky/index.js 37 function isError (err) { // inlined from util so this works in the browser

./node_modules/has-flag/package.json 30 		"command-line",

./node_modules/webpack-sources/lib/ConcatSource.js 115 				// eslint-disable-next-line no-loop-func

./node_modules/webpack-sources/lib/ConcatSource.js 125 					const line = generatedLine + currentLineOffset;

./node_modules/webpack-sources/lib/ConcatSource.js 158 								line,

./node_modules/webpack-sources/lib/ConcatSource.js 168 							onChunk(chunk, line, column, -1, -1, -1, -1);

./node_modules/webpack-sources/lib/ConcatSource.js 172 								line,

./node_modules/webpack-sources/lib/ReplaceSource.js 158 		const checkOriginalContent = (sourceIndex, line, column, expectedChunk) => {

./node_modules/webpack-sources/lib/ReplaceSource.js 168 			const contentLine = line <= content.length ? content[line - 1] : null;

./node_modules/webpack-sources/lib/ReplaceSource.js 194 						const line = generatedLine + generatedLineOffset;

./node_modules/webpack-sources/lib/ReplaceSource.js 197 							if (generatedColumnOffsetLine === line) {

./node_modules/webpack-sources/lib/ReplaceSource.js 198 								// undo exiting corrections form the current line

./node_modules/webpack-sources/lib/ReplaceSource.js 201 						} else if (generatedColumnOffsetLine === line) {

./node_modules/webpack-sources/lib/ReplaceSource.js 205 							generatedColumnOffsetLine = line;

./node_modules/webpack-sources/lib/ReplaceSource.js 224 					const line = generatedLine + generatedLineOffset;

./node_modules/webpack-sources/lib/ReplaceSource.js 225 					if (generatedColumnOffsetLine === line) {

./node_modules/webpack-sources/lib/ReplaceSource.js 229 						generatedColumnOffsetLine = line;

./node_modules/webpack-sources/lib/ReplaceSource.js 237 						let line = generatedLine + generatedLineOffset;

./node_modules/webpack-sources/lib/ReplaceSource.js 244 								line,

./node_modules/webpack-sources/lib/ReplaceSource.js 246 									(line === generatedColumnOffsetLine

./node_modules/webpack-sources/lib/ReplaceSource.js 271 						// Insert replacement content splitted into chunks by lines

./node_modules/webpack-sources/lib/ReplaceSource.js 289 								line,

./node_modules/webpack-sources/lib/ReplaceSource.js 291 									(line === generatedColumnOffsetLine

./node_modules/webpack-sources/lib/ReplaceSource.js 305 								if (generatedColumnOffsetLine === line) {

./node_modules/webpack-sources/lib/ReplaceSource.js 309 									generatedColumnOffsetLine = line;

./node_modules/webpack-sources/lib/ReplaceSource.js 313 								line++;

./node_modules/webpack-sources/lib/ReplaceSource.js 315 								generatedColumnOffsetLine = line;

./node_modules/webpack-sources/lib/ReplaceSource.js 337 								let line = generatedLine + generatedLineOffset;

./node_modules/webpack-sources/lib/ReplaceSource.js 340 									if (generatedColumnOffsetLine === line) {

./node_modules/webpack-sources/lib/ReplaceSource.js 341 										// undo exiting corrections form the current line

./node_modules/webpack-sources/lib/ReplaceSource.js 344 								} else if (generatedColumnOffsetLine === line) {

./node_modules/webpack-sources/lib/ReplaceSource.js 348 									generatedColumnOffsetLine = line;

./node_modules/webpack-sources/lib/ReplaceSource.js 355 							const line = generatedLine + generatedLineOffset;

./node_modules/webpack-sources/lib/ReplaceSource.js 368 							if (generatedColumnOffsetLine === line) {

./node_modules/webpack-sources/lib/ReplaceSource.js 372 								generatedColumnOffsetLine = line;

./node_modules/webpack-sources/lib/ReplaceSource.js 382 					const line = generatedLine + generatedLineOffset;

./node_modules/webpack-sources/lib/ReplaceSource.js 385 						line,

./node_modules/webpack-sources/lib/ReplaceSource.js 387 							(line === generatedColumnOffsetLine ? generatedColumnOffset : 0),

./node_modules/webpack-sources/lib/ReplaceSource.js 419 		// Insert remaining replacements content splitted into chunks by lines

./node_modules/webpack-sources/lib/ReplaceSource.js 420 		let line = generatedLine + generatedLineOffset;

./node_modules/webpack-sources/lib/ReplaceSource.js 427 				line,

./node_modules/webpack-sources/lib/ReplaceSource.js 429 					(line === generatedColumnOffsetLine ? generatedColumnOffset : 0),

./node_modules/webpack-sources/lib/ReplaceSource.js 438 				if (generatedColumnOffsetLine === line) {

./node_modules/webpack-sources/lib/ReplaceSource.js 442 					generatedColumnOffsetLine = line;

./node_modules/webpack-sources/lib/ReplaceSource.js 446 				line++;

./node_modules/webpack-sources/lib/ReplaceSource.js 448 				generatedColumnOffsetLine = line;

./node_modules/webpack-sources/lib/ReplaceSource.js 453 			generatedLine: line,

./node_modules/webpack-sources/lib/ReplaceSource.js 456 				(line === generatedColumnOffsetLine ? generatedColumnOffset : 0)

./node_modules/webpack-sources/lib/OriginalSource.js 63 			// With column info we need to read all lines and split them

./node_modules/webpack-sources/lib/OriginalSource.js 65 			let line = 1;

./node_modules/webpack-sources/lib/OriginalSource.js 71 						if (!finalSource) onChunk(match, line, column, -1, -1, -1, -1);

./node_modules/webpack-sources/lib/OriginalSource.js 74 						onChunk(chunk, line, column, 0, line, column, -1);

./node_modules/webpack-sources/lib/OriginalSource.js 77 						line++;

./node_modules/webpack-sources/lib/OriginalSource.js 85 				generatedLine: line,

./node_modules/webpack-sources/lib/OriginalSource.js 95 				for (let line = 1; line < generatedLine; line++)

./node_modules/webpack-sources/lib/OriginalSource.js 96 					onChunk(undefined, line, 0, 0, line, 0, -1);

./node_modules/webpack-sources/lib/OriginalSource.js 98 				for (let line = 1; line <= generatedLine; line++)

./node_modules/webpack-sources/lib/OriginalSource.js 99 					onChunk(undefined, line, 0, 0, line, 0, -1);

./node_modules/webpack-sources/lib/OriginalSource.js 104 			// we need to split source by lines

./node_modules/webpack-sources/lib/OriginalSource.js 105 			let line = 1;

./node_modules/webpack-sources/lib/OriginalSource.js 109 				onChunk(finalSource ? undefined : match, line, 0, 0, line, 0, -1);

./node_modules/webpack-sources/lib/OriginalSource.js 110 				line++;

./node_modules/webpack-sources/lib/PrefixSource.js 51 		const linesOnly = !!(options && options.columns === false);

./node_modules/webpack-sources/lib/PrefixSource.js 65 					// In the middle of the line, we just adject the column

./node_modules/webpack-sources/lib/PrefixSource.js 68 					// At the start of the line, when we have source content

./node_modules/webpack-sources/lib/PrefixSource.js 70 					// (in lines only mode we just add it to the original mapping

./node_modules/webpack-sources/lib/PrefixSource.js 72 					if (linesOnly || sourceIndex < 0) {

./node_modules/webpack-sources/lib/PrefixSource.js 78 				} else if (!linesOnly) {

./node_modules/webpack-sources/lib/PrefixSource.js 80 					// expect in lines only mode where prefix is added to original mapping

./node_modules/webpack-sources/lib/helpers/readMappings.js 74 				// Start new line

./node_modules/webpack-sources/lib/helpers/createMappingsSerializer.js 15 	const linesOnly = options && options.columns === false;

./node_modules/webpack-sources/lib/helpers/createMappingsSerializer.js 16 	return linesOnly

./node_modules/webpack-sources/lib/helpers/createMappingsSerializer.js 138 			// avoid writing multiple original mappings per line

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 20 	const lines = splitIntoLines(source);

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 21 	if (lines.length === 0) {

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 41 	const lastLine = lines[lines.length - 1];

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 43 	const finalLine = lastNewLine ? lines.length + 1 : lines.length;

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 63 		if (mappingActive && currentGeneratedLine <= lines.length) {

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 67 			const line = lines[currentGeneratedLine - 1];

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 69 				chunk = line.slice(currentGeneratedColumn);

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 73 				chunk = line.slice(currentGeneratedColumn, generatedColumn);

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 90 			if (currentGeneratedLine <= lines.length) {

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 91 				const chunk = lines[currentGeneratedLine - 1].slice(

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 108 			if (currentGeneratedLine <= lines.length) {

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 110 					lines[currentGeneratedLine - 1],

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 122 			if (currentGeneratedLine <= lines.length) {

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 123 				const chunk = lines[currentGeneratedLine - 1].slice(

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 166 	const lines = splitIntoLines(source);

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 167 	if (lines.length === 0) {

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 195 			generatedLine > lines.length

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 200 			if (currentGeneratedLine <= lines.length) {

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 202 					lines[currentGeneratedLine - 1],

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 213 		if (generatedLine <= lines.length) {

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 215 				lines[generatedLine - 1],

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 227 	for (; currentGeneratedLine <= lines.length; currentGeneratedLine++) {

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 229 			lines[currentGeneratedLine - 1],

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 239 	const lastLine = lines[lines.length - 1];

./node_modules/webpack-sources/lib/helpers/streamChunksOfSourceMap.js 242 	const finalLine = lastNewLine ? lines.length + 1 : lines.length;

./node_modules/webpack-sources/lib/helpers/streamChunksOfRawSource.js 12 	let line = 1;

./node_modules/webpack-sources/lib/helpers/streamChunksOfRawSource.js 16 		onChunk(match, line, 0, -1, -1, -1, -1);

./node_modules/webpack-sources/lib/helpers/streamChunksOfRawSource.js 17 		line++;

./node_modules/webpack-sources/lib/helpers/streamChunksOfCombinedSourceMap.js 37 	const findInnerMapping = (line, column) => {

./node_modules/webpack-sources/lib/helpers/streamChunksOfCombinedSourceMap.js 38 		if (line > innerSourceMapLineData.length) return -1;

./node_modules/webpack-sources/lib/helpers/streamChunksOfCombinedSourceMap.js 39 		const { mappingsData } = innerSourceMapLineData[line - 1];

./node_modules/fastq/package.json 8     "unit": "nyc --lines 100 --branches 100 --functions 100 --check-coverage --reporter=text tape test/test.js test/promise.js",

./node_modules/spdy/test/client-test.js 13   ? Object.assign // eslint-disable-next-line

./node_modules/spdy/lib/spdy/server.js 16   ? Object.assign // eslint-disable-next-line

./node_modules/spdy/lib/spdy/server.js 215     // eslint-disable-next-line

./node_modules/spdy/lib/spdy/agent.js 13   ? Object.assign // eslint-disable-next-line

./node_modules/spdy/lib/spdy/response.js 38     // terminated by the first empty line after the header fields.

./node_modules/spdy/lib/spdy/response.js 41     // terminated by the first empty line after the header fields.

./node_modules/spdy/lib/spdy/response.js 45     // terminated by an empty line.

./node_modules/content-disposition/index.js 30 var ENCODE_URL_ATTR_CHAR_REGEXP = /[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g // eslint-disable-line no-control-regex

./node_modules/content-disposition/index.js 55 var QESC_REGEXP = /\\([\u0000-\u007f])/g // eslint-disable-line no-control-regex

./node_modules/content-disposition/index.js 81  * LF            = <US-ASCII LF, linefeed (10)>

./node_modules/content-disposition/index.js 89 var PARAM_REGEXP = /;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g // eslint-disable-line no-control-regex

./node_modules/content-disposition/index.js 120  * disposition-type = "inline" | "attachment" | disp-ext-type

./node_modules/content-disposition/index.js 131 var DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/ // eslint-disable-line no-control-regex

./node_modules/finalhandler/node_modules/debug/src/node.js 82  * Map %o to `util.inspect()`, all on a single line.

./node_modules/finalhandler/node_modules/debug/src/node.js 94  * Map %o to `util.inspect()`, allowing multiple lines if needed.

./node_modules/finalhandler/node_modules/debug/src/debug.js 103         // now we need to remove `args[index]` since it's inlined in the `format`

./node_modules/ip/.jshintrc 35     "maxlen"        : false,    // {int} Max number of characters per line

./node_modules/ip/.jshintrc 51     "lastsemic"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block

./node_modules/ip/.jshintrc 52     "laxbreak"      : false,     // true: Tolerate possibly unsafe line breakings

./node_modules/ip/.jshintrc 55     "multistr"      : false,     // true: Tolerate multi-line strings

./node_modules/ip/.jscsrc 6   "disallowNewlineBeforeBlockStatements": true,

./node_modules/fast-glob/out/index.js 15 // eslint-disable-next-line no-redeclare

./node_modules/fast-glob/out/utils/path.js 24     // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with

./node_modules/leven/index.js 32 	// We can linearly drop suffix common to both strings since they

./node_modules/leven/index.js 45 	// We can linearly drop prefix common to both strings since they

./node_modules/kind-of/index.js 92     && typeof val.multiline === 'boolean'

./node_modules/kind-of/package.json 15     "tunnckoCore (https://i.am.charlike.online)"

./node_modules/hpack.js/tools/gen-huffman.js 263 table = table.split('\n').filter(function(line) {

./node_modules/hpack.js/tools/gen-huffman.js 264   return line.length > 0;

./node_modules/hpack.js/tools/gen-huffman.js 284 table.forEach(function(line) {

./node_modules/hpack.js/tools/gen-huffman.js 285   var match = line.match(/\(\s*([\d]+)\)\s+\|([^\s]+)\s+([^\s]+)/);

./node_modules/hpack.js/tools/gen-huffman.js 304 // Wrap lines after 79 chars

./node_modules/hpack.js/tools/gen-static-table.js 68 table.split('\n').filter(function(line) {

./node_modules/hpack.js/tools/gen-static-table.js 69   return line;

./node_modules/hpack.js/tools/gen-static-table.js 70 }).forEach(function(line) {

./node_modules/hpack.js/tools/gen-static-table.js 71   var columns = line.split(/\t/g);

./node_modules/hpack.js/tools/gen-static-table.js 87 table.split('\n').filter(function(line) {

./node_modules/hpack.js/tools/gen-static-table.js 88   return line;

./node_modules/hpack.js/tools/gen-static-table.js 89 }).forEach(function(line) {

./node_modules/hpack.js/tools/gen-static-table.js 90   var columns = line.split(/\t/g);

./node_modules/hpack.js/tools/utils.js 1 // Wrap lines after 79 chars

./node_modules/hpack.js/tools/utils.js 5   var line = pad;

./node_modules/hpack.js/tools/utils.js 13     if (line.length + append.length > 79) {

./node_modules/hpack.js/tools/utils.js 14       out.push(line);

./node_modules/hpack.js/tools/utils.js 15       line = pad;

./node_modules/hpack.js/tools/utils.js 17     line += append;

./node_modules/hpack.js/tools/utils.js 19   if (line !== pad)

./node_modules/hpack.js/tools/utils.js 20     out.push(line);

./node_modules/signal-exit/index.js 1 // Note: since nyc uses this module to output coverage, any lines

./node_modules/jsesc/jsesc.js 96 		'__inline1__': false,

./node_modules/jsesc/jsesc.js 97 		'__inline2__': false

./node_modules/jsesc/jsesc.js 122 	const inline1 = options.__inline1__;

./node_modules/jsesc/jsesc.js 123 	const inline2 = options.__inline2__;

./node_modules/jsesc/jsesc.js 142 				options.__inline1__ = true;

./node_modules/jsesc/jsesc.js 143 				options.__inline2__ = false;

./node_modules/jsesc/jsesc.js 162 			if (inline1) {

./node_modules/jsesc/jsesc.js 163 				options.__inline1__ = false;

./node_modules/jsesc/jsesc.js 164 				options.__inline2__ = true;

./node_modules/jsesc/jsesc.js 166 			if (!inline2) {

./node_modules/jsesc/jsesc.js 171 				if (inline2) {

./node_modules/jsesc/jsesc.js 172 					options.__inline2__ = false;

./node_modules/jsesc/jsesc.js 175 					(compact || inline2 ? '' : indent) +

./node_modules/jsesc/jsesc.js 182 			if (inline2) {

./node_modules/entities/lib/decode_codepoint.js 9 // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition

./node_modules/entities/lib/decode.js 50         // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing

./node_modules/entities/lib/encode.js 83 // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition

./node_modules/entities/lib/encode.js 85     ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

./node_modules/has-symbols/shams.js 26 	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop

./node_modules/has-symbols/test/tests.js 3 // eslint-disable-next-line consistent-return

./node_modules/has-symbols/test/tests.js 43 	// eslint-disable-next-line no-restricted-syntax

./node_modules/color-convert/package.json 35       "no-inline-comments": 0,

./node_modules/color-convert/package.json 36       "operator-linebreak": 0

./node_modules/color-convert/conversions.js 393 	n = wh + f * (v - wh); // linear interpolation

./node_modules/readable-stream/readable.js 15   exports.pipeline = require('./lib/internal/streams/pipeline.js');

./node_modules/readable-stream/readable-browser.js 9 exports.pipeline = require('./lib/internal/streams/pipeline.js');

./node_modules/readable-stream/lib/_stream_readable.js 810     // a few lines down. This is needed to support once('readable').

./node_modules/readable-stream/lib/internal/streams/pipeline.js 70 function pipeline() {

./node_modules/readable-stream/lib/internal/streams/pipeline.js 97 module.exports = pipeline;
./node_modules/v8-compile-cache/v8-compile-cache.js 212           // Find end of shebang line and slice it off

./node_modules/v8-compile-cache/v8-compile-cache.js 221             // Note that this actually includes the newline character(s) in the

./node_modules/v8-compile-cache/v8-compile-cache.js 223             // expression that was previously used to replace the shebang line

./node_modules/v8-compile-cache/v8-compile-cache.js 242       lineOffset: 0,

./node_modules/v8-compile-cache/v8-compile-cache.js 256       lineOffset: 0,

./node_modules/v8-compile-cache/v8-compile-cache.js 302   const ESCAPE_REGEX = /[\\:/\x00z]/g; // eslint-disable-line no-control-regex

./node_modules/compression/node_modules/debug/src/node.js 82  * Map %o to `util.inspect()`, all on a single line.

./node_modules/compression/node_modules/debug/src/node.js 94  * Map %o to `util.inspect()`, allowing multiple lines if needed.

./node_modules/compression/node_modules/debug/src/debug.js 103         // now we need to remove `args[index]` since it's inlined in the `format`

./node_modules/strip-ansi/package.json 46 		"command-line",

./node_modules/ajv-keywords/keywords/_formatLimit.js 32       inline: require('./dotjs/_formatLimit'),

./node_modules/ajv-keywords/keywords/switch.js 11     inline: require('./dotjs/switch'),

./node_modules/ajv-keywords/keywords/regexp.js 6     inline: function (it, keyword, schema) {

./node_modules/ajv-keywords/keywords/deepRequired.js 6     inline: function (it, keyword, schema) {

./node_modules/ajv-keywords/keywords/patternRequired.js 6     inline: require('./dotjs/patternRequired'),

./node_modules/ajv-keywords/keywords/typeof.js 7     inline: function (it, keyword, schema) {

./node_modules/globby/gitignore.js 32 		.filter(line => !line.startsWith('#'))

./node_modules/typescript/lib/typesMap.json 352         "offline": "offline-js",

./node_modules/typescript/lib/typesMap.json 451         "timeline": "timelinejs",

./node_modules/typescript/lib/typescriptServices.js 294     // The following is baselined as a literal template type without intervention

./node_modules/typescript/lib/typescriptServices.js 296     // eslint-disable-next-line @typescript-eslint/no-inferrable-types

./node_modules/typescript/lib/typescriptServices.js 313             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typescriptServices.js 322             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typescriptServices.js 2421      * Removes the leading and trailing white space and line terminator characters from a string.

./node_modules/typescript/lib/typescriptServices.js 2589             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 2601          * @deprecated Use `checkDefined` to check whether a value is defined inline. Use `assertIsDefined` to check whether

./node_modules/typescript/lib/typescriptServices.js 2618          * @deprecated Use `checkEachDefined` to check whether the elements of an array are defined inline. Use `assertEachIsDefined` to check whether

./node_modules/typescript/lib/typescriptServices.js 2790             if (!("__debugFlowFlags" in flowNode)) { // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typescriptServices.js 2836             if (!("__tsDebuggerDisplay" in array)) { // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typescriptServices.js 3467     // eslint-disable-next-line @typescript-eslint/naming-convention

./node_modules/typescript/lib/typescriptServices.js 3784                 + [__assign({ name: "process_name", args: { name: "tsc" } }, meta), __assign({ name: "thread_name", args: { name: "Main" } }, meta), __assign(__assign({ name: "TracingStartedInBrowser" }, meta), { cat: "disabled-by-default-devtools.timeline" })]

./node_modules/typescript/lib/typescriptServices.js 3892                     line: lc.line + 1,

./node_modules/typescript/lib/typescriptServices.js 3903             // Cleverness: no line break here so that the type ID will match the line number

./node_modules/typescript/lib/typescriptServices.js 4017         // We detect and preserve #! on the first line

./node_modules/typescript/lib/typescriptServices.js 4677         NodeBuilderFlags[NodeBuilderFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";

./node_modules/typescript/lib/typescriptServices.js 4718         TypeFormatFlags[TypeFormatFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";

./node_modules/typescript/lib/typescriptServices.js 5397         CharacterCodes[CharacterCodes["lineFeed"] = 10] = "lineFeed";

./node_modules/typescript/lib/typescriptServices.js 5399         CharacterCodes[CharacterCodes["lineSeparator"] = 8232] = "lineSeparator";

./node_modules/typescript/lib/typescriptServices.js 5644         /*@internal*/ EmitFlags[EmitFlags["IgnoreSourceNewlines"] = 134217728] = "IgnoreSourceNewlines";

./node_modules/typescript/lib/typescriptServices.js 5816          * Single line comment of the form

./node_modules/typescript/lib/typescriptServices.js 5823          * Multiline non-jsdoc pragma of the form

./node_modules/typescript/lib/typescriptServices.js 6590      * Called for command-line and server use cases.

./node_modules/typescript/lib/typescriptServices.js 6969     ts.sysLog = ts.noop; // eslint-disable-line prefer-const

./node_modules/typescript/lib/typescriptServices.js 7396     // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/typescriptServices.js 8964         Option_project_cannot_be_mixed_with_source_files_on_a_command_line: diag(5042, ts.DiagnosticCategory.Error, "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042", "Option 'project' cannot be mixed with source files on a command line."),

./node_modules/typescript/lib/typescriptServices.js 8967         Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: diag(5051, ts.DiagnosticCategory.Error, "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051", "Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided."),

./node_modules/typescript/lib/typescriptServices.js 9036         Insert_command_line_options_and_files_from_a_file: diag(6030, ts.DiagnosticCategory.Message, "Insert_command_line_options_and_files_from_a_file_6030", "Insert command line options and files from a file."),

./node_modules/typescript/lib/typescriptServices.js 9061         Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: diag(6060, ts.DiagnosticCategory.Message, "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060", "Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)."),

./node_modules/typescript/lib/typescriptServices.js 9063         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line: diag(6064, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'null' on command line."),

./node_modules/typescript/lib/typescriptServices.js 9148         Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap_to_be_set: diag(6152, ts.DiagnosticCategory.Message, "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152", "Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set."),

./node_modules/typescript/lib/typescriptServices.js 9167         Command_line_Options: diag(6171, ts.DiagnosticCategory.Message, "Command_line_Options_6171", "Command-line Options"),

./node_modules/typescript/lib/typescriptServices.js 9216         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line: diag(6230, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'false' or 'null' on command line."),

./node_modules/typescript/lib/typescriptServices.js 9270         Option_build_must_be_the_first_command_line_argument: diag(6369, ts.DiagnosticCategory.Error, "Option_build_must_be_the_first_command_line_argument_6369", "Option '--build' must be the first command line argument."),

./node_modules/typescript/lib/typescriptServices.js 9362         Set_the_newline_character_for_emitting_files: diag(6659, ts.DiagnosticCategory.Message, "Set_the_newline_character_for_emitting_files_6659", "Set the newline character for emitting files."),

./node_modules/typescript/lib/typescriptServices.js 9953      * Test for whether a single line comment with leading whitespace trimmed's text contains a directive.

./node_modules/typescript/lib/typescriptServices.js 9957      * Test for whether a multi-line comment with leading whitespace trimmed's last line contains a directive.

./node_modules/typescript/lib/typescriptServices.js 10019         var lineStart = 0;

./node_modules/typescript/lib/typescriptServices.js 10025                     if (text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescriptServices.js 10029                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typescriptServices.js 10030                     result.push(lineStart);

./node_modules/typescript/lib/typescriptServices.js 10031                     lineStart = pos;

./node_modules/typescript/lib/typescriptServices.js 10035                         result.push(lineStart);

./node_modules/typescript/lib/typescriptServices.js 10036                         lineStart = pos;

./node_modules/typescript/lib/typescriptServices.js 10041         result.push(lineStart);

./node_modules/typescript/lib/typescriptServices.js 10045     function getPositionOfLineAndCharacter(sourceFile, line, character, allowEdits) {

./node_modules/typescript/lib/typescriptServices.js 10047             sourceFile.getPositionOfLineAndCharacter(line, character, allowEdits) :

./node_modules/typescript/lib/typescriptServices.js 10048             computePositionOfLineAndCharacter(getLineStarts(sourceFile), line, character, sourceFile.text, allowEdits);

./node_modules/typescript/lib/typescriptServices.js 10052     function computePositionOfLineAndCharacter(lineStarts, line, character, debugText, allowEdits) {

./node_modules/typescript/lib/typescriptServices.js 10053         if (line < 0 || line >= lineStarts.length) {

./node_modules/typescript/lib/typescriptServices.js 10055                 // Clamp line to nearest allowable value

./node_modules/typescript/lib/typescriptServices.js 10056                 line = line < 0 ? 0 : line >= lineStarts.length ? lineStarts.length - 1 : line;

./node_modules/typescript/lib/typescriptServices.js 10059                 ts.Debug.fail("Bad line number. Line: " + line + ", lineStarts.length: " + lineStarts.length + " , line map is correct? " + (debugText !== undefined ? ts.arraysEqual(lineStarts, computeLineStarts(debugText)) : "unknown"));

./node_modules/typescript/lib/typescriptServices.js 10062         var res = lineStarts[line] + character;

./node_modules/typescript/lib/typescriptServices.js 10067             return res > lineStarts[line + 1] ? lineStarts[line + 1] : typeof debugText === "string" && res > debugText.length ? debugText.length : res;

./node_modules/typescript/lib/typescriptServices.js 10069         if (line < lineStarts.length - 1) {

./node_modules/typescript/lib/typescriptServices.js 10070             ts.Debug.assert(res < lineStarts[line + 1]);

./node_modules/typescript/lib/typescriptServices.js 10073             ts.Debug.assert(res <= debugText.length); // Allow single character overflow for trailing newline

./node_modules/typescript/lib/typescriptServices.js 10080         return sourceFile.lineMap || (sourceFile.lineMap = computeLineStarts(sourceFile.text));

./node_modules/typescript/lib/typescriptServices.js 10084     function computeLineAndCharacterOfPosition(lineStarts, position) {

./node_modules/typescript/lib/typescriptServices.js 10085         var lineNumber = computeLineOfPosition(lineStarts, position);

./node_modules/typescript/lib/typescriptServices.js 10087             line: lineNumber,

./node_modules/typescript/lib/typescriptServices.js 10088             character: position - lineStarts[lineNumber]

./node_modules/typescript/lib/typescriptServices.js 10094      * We assume the first line starts at position 0 and 'position' is non-negative.

./node_modules/typescript/lib/typescriptServices.js 10096     function computeLineOfPosition(lineStarts, position, lowerBound) {

./node_modules/typescript/lib/typescriptServices.js 10097         var lineNumber = ts.binarySearch(lineStarts, position, ts.identity, ts.compareValues, lowerBound);

./node_modules/typescript/lib/typescriptServices.js 10098         if (lineNumber < 0) {

./node_modules/typescript/lib/typescriptServices.js 10100             // the binary search returns the 2's-complement of the next line start

./node_modules/typescript/lib/typescriptServices.js 10101             // e.g. if the line starts at [5, 10, 23, 80] and the position requested was 20

./node_modules/typescript/lib/typescriptServices.js 10104             // We want the index of the previous line start, so we subtract 1.

./node_modules/typescript/lib/typescriptServices.js 10106             lineNumber = ~lineNumber - 1;

./node_modules/typescript/lib/typescriptServices.js 10107             ts.Debug.assert(lineNumber !== -1, "position cannot precede the beginning of the file");

./node_modules/typescript/lib/typescriptServices.js 10109         return lineNumber;

./node_modules/typescript/lib/typescriptServices.js 10116         var lineStarts = getLineStarts(sourceFile);

./node_modules/typescript/lib/typescriptServices.js 10120         var lowerLine = computeLineOfPosition(lineStarts, lower);

./node_modules/typescript/lib/typescriptServices.js 10121         var upperLine = computeLineOfPosition(lineStarts, upper, lowerLine);

./node_modules/typescript/lib/typescriptServices.js 10133     /** Does not include line breaks. For that, see isWhiteSpaceLike. */

./node_modules/typescript/lib/typescriptServices.js 10136         // It is explicitly not a line-break as it isn't in the exact set specified by EcmaScript.

./node_modules/typescript/lib/typescriptServices.js 10153         // The ECMAScript line terminator characters are listed in Table 3.

./node_modules/typescript/lib/typescriptServices.js 10160         // Only the characters in Table 3 are treated as line terminators. Other new line or line

./node_modules/typescript/lib/typescriptServices.js 10161         // breaking characters are treated as white space but not as line terminators.

./node_modules/typescript/lib/typescriptServices.js 10162         return ch === 10 /* lineFeed */ ||

./node_modules/typescript/lib/typescriptServices.js 10164             ch === 8232 /* lineSeparator */ ||

./node_modules/typescript/lib/typescriptServices.js 10187             case 10 /* lineFeed */:

./node_modules/typescript/lib/typescriptServices.js 10220                     if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescriptServices.js 10224                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typescriptServices.js 10305         // Conflict markers must be at the start of a line.

./node_modules/typescript/lib/typescriptServices.js 10363      * Single-line comment ranges include the leading double-slash characters but not the ending

./node_modules/typescript/lib/typescriptServices.js 10364      * line break. Multi-line comment ranges include the leading slash-asterisk and trailing

./node_modules/typescript/lib/typescriptServices.js 10371      * @param trailing If false, whitespace is skipped until the first line break and comments

./node_modules/typescript/lib/typescriptServices.js 10373      *      between the given position and the next line break are returned.

./node_modules/typescript/lib/typescriptServices.js 10399                     if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescriptServices.js 10403                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typescriptServices.js 10876                     if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescriptServices.js 10975                 // when encountering a LineContinuation (i.e. a backslash and a line terminator sequence),

./node_modules/typescript/lib/typescriptServices.js 10976                 // the line terminator is interpreted to be "the empty code unit sequence".

./node_modules/typescript/lib/typescriptServices.js 10978                     if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescriptServices.js 10982                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typescriptServices.js 10983                 case 8232 /* lineSeparator */:

./node_modules/typescript/lib/typescriptServices.js 11183                     case 10 /* lineFeed */:

./node_modules/typescript/lib/typescriptServices.js 11191                             if (ch === 13 /* carriageReturn */ && pos + 1 < end && text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescriptServices.js 11283                             // decoration at the start of a JSDoc comment line

./node_modules/typescript/lib/typescriptServices.js 11320                         // Single-line comment

./node_modules/typescript/lib/typescriptServices.js 11337                         // Multi-line comment

./node_modules/typescript/lib/typescriptServices.js 11666                     // If we reach the end of a file, or hit a newline, then this is an unterminated

./node_modules/typescript/lib/typescriptServices.js 11710         function appendIfCommentDirective(commentDirectives, text, commentDirectiveRegEx, lineStart) {

./node_modules/typescript/lib/typescriptServices.js 11716                 range: { pos: lineStart, end: pos },

./node_modules/typescript/lib/typescriptServices.js 11745         function reScanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/typescriptServices.js 11746             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/typescriptServices.js 11748             return token = scanJsxToken(allowMultilineJsxText);

./node_modules/typescript/lib/typescriptServices.js 11769         function scanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/typescriptServices.js 11770             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/typescriptServices.js 11788             // First non-whitespace character on this line.

./node_modules/typescript/lib/typescriptServices.js 11790             // These initial values are special because the first line is:

./node_modules/typescript/lib/typescriptServices.js 11810                 // FirstNonWhitespace is 0, then we only see whitespaces so far. If we see a linebreak, we want to ignore that whitespaces.

./node_modules/typescript/lib/typescriptServices.js 11819                 else if (!allowMultilineJsxText && isLineBreak(char) && firstNonWhitespace > 0) {

./node_modules/typescript/lib/typescriptServices.js 11820                     // Stop JsxText on each line during formatting. This allows the formatter to

./node_modules/typescript/lib/typescriptServices.js 11821                     // indent each line correctly.

./node_modules/typescript/lib/typescriptServices.js 11905                     if (text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescriptServices.js 11909                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typescriptServices.js 12214     ts.unchangedTextChangeRange = createTextChangeRange(createTextSpan(0, 0), 0); // eslint-disable-line prefer-const

./node_modules/typescript/lib/typescriptServices.js 12279             // which if the two $'s precedes the other, and we move that one forward until they line up.  in this case that

./node_modules/typescript/lib/typescriptServices.js 13963     function guessIndentation(lines) {

./node_modules/typescript/lib/typescriptServices.js 13965         for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {

./node_modules/typescript/lib/typescriptServices.js 13966             var line = lines_1[_i];

./node_modules/typescript/lib/typescriptServices.js 13967             if (!line.length) {

./node_modules/typescript/lib/typescriptServices.js 13971             for (; i < line.length && i < indentation; i++) {

./node_modules/typescript/lib/typescriptServices.js 13972                 if (!ts.isWhiteSpaceLike(line.charCodeAt(i))) {

./node_modules/typescript/lib/typescriptServices.js 14072             // Completely ignore indentation for string writers.  And map newlines to

./node_modules/typescript/lib/typescriptServices.js 14275     function getStartPositionOfLine(line, sourceFile) {

./node_modules/typescript/lib/typescriptServices.js 14276         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/typescriptServices.js 14277         return ts.getLineStarts(sourceFile)[line];

./node_modules/typescript/lib/typescriptServices.js 14284         return file.fileName + "(" + (loc.line + 1) + "," + (loc.character + 1) + ")";

./node_modules/typescript/lib/typescriptServices.js 14287     function getEndLinePosition(line, sourceFile) {

./node_modules/typescript/lib/typescriptServices.js 14288         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/typescriptServices.js 14289         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/typescriptServices.js 14290         var lineIndex = line;

./node_modules/typescript/lib/typescriptServices.js 14292         if (lineIndex + 1 === lineStarts.length) {

./node_modules/typescript/lib/typescriptServices.js 14293             // last line - return EOF

./node_modules/typescript/lib/typescriptServices.js 14297             // current line start

./node_modules/typescript/lib/typescriptServices.js 14298             var start = lineStarts[lineIndex];

./node_modules/typescript/lib/typescriptServices.js 14299             // take the start position of the next line - 1 = it should be some line break

./node_modules/typescript/lib/typescriptServices.js 14300             var pos = lineStarts[lineIndex + 1] - 1;

./node_modules/typescript/lib/typescriptServices.js 14302             // walk backwards skipping line breaks, stop the the beginning of current line.

./node_modules/typescript/lib/typescriptServices.js 14305             // $ <- end of line for this position should match the start position

./node_modules/typescript/lib/typescriptServices.js 14423             "" + ts.getLineAndCharacterOfPosition(sourceFile, commentDirective.range.end).line,

./node_modules/typescript/lib/typescriptServices.js 14431                 var line = _a[0], directive = _a[1];

./node_modules/typescript/lib/typescriptServices.js 14432                 return directive.type === 0 /* ExpectError */ && !usedLines.get(line);

./node_modules/typescript/lib/typescriptServices.js 14439         function markUsed(line) {

./node_modules/typescript/lib/typescriptServices.js 14440             if (!directivesByLine.has("" + line)) {

./node_modules/typescript/lib/typescriptServices.js 14443             usedLines.set("" + line, true);

./node_modules/typescript/lib/typescriptServices.js 14499             // strip space + asterisk at line start

./node_modules/typescript/lib/typescriptServices.js 14500             text = text.split(/\r\n|\n|\r/).map(function (line) { return ts.trimStringStart(line.replace(/^\s*\*/, "")); }).join("\n");

./node_modules/typescript/lib/typescriptServices.js 14549                 String: ["codePointAt", "includes", "endsWith", "normalize", "repeat", "startsWith", "anchor", "big", "blink", "bold", "fixed", "fontcolor", "fontsize", "italics", "link", "small", "strike", "sub", "sup"],

./node_modules/typescript/lib/typescriptServices.js 15041             var startLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.pos).line;

./node_modules/typescript/lib/typescriptServices.js 15042             var endLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.end).line;

./node_modules/typescript/lib/typescriptServices.js 15044                 // The arrow function spans multiple lines,

./node_modules/typescript/lib/typescriptServices.js 15045                 // make the error span be the first line, inclusive.

./node_modules/typescript/lib/typescriptServices.js 17665     // This consists of the first 19 unprintable ASCII characters, canonical escapes, lineSeparator,

./node_modules/typescript/lib/typescriptServices.js 17666     // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in

./node_modules/typescript/lib/typescriptServices.js 17672     // Template strings preserve simple LF newlines, still encode CRLF (or CR)

./node_modules/typescript/lib/typescriptServices.js 17709      * but augmented for a few select characters (e.g. lineSeparator, paragraphSeparator, nextLine)

./node_modules/typescript/lib/typescriptServices.js 17729     // This consists of the first 19 unprintable ASCII characters, JSX canonical escapes, lineSeparator,

./node_modules/typescript/lib/typescriptServices.js 17730     // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in

./node_modules/typescript/lib/typescriptServices.js 17795         var lineStart;

./node_modules/typescript/lib/typescriptServices.js 17796         var lineCount;

./node_modules/typescript/lib/typescriptServices.js 17797         var linePos;

./node_modules/typescript/lib/typescriptServices.js 17800             var lineStartsOfS = ts.computeLineStarts(s);

./node_modules/typescript/lib/typescriptServices.js 17801             if (lineStartsOfS.length > 1) {

./node_modules/typescript/lib/typescriptServices.js 17802                 lineCount = lineCount + lineStartsOfS.length - 1;

./node_modules/typescript/lib/typescriptServices.js 17803                 linePos = output.length - s.length + ts.last(lineStartsOfS);

./node_modules/typescript/lib/typescriptServices.js 17804                 lineStart = (linePos - output.length) === 0;

./node_modules/typescript/lib/typescriptServices.js 17807                 lineStart = false;

./node_modules/typescript/lib/typescriptServices.js 17812                 if (lineStart) {

./node_modules/typescript/lib/typescriptServices.js 17814                     lineStart = false;

./node_modules/typescript/lib/typescriptServices.js 17833             lineStart = true;

./node_modules/typescript/lib/typescriptServices.js 17834             lineCount = 0;

./node_modules/typescript/lib/typescriptServices.js 17835             linePos = 0;

./node_modules/typescript/lib/typescriptServices.js 17851             if (!lineStart || force) {

./node_modules/typescript/lib/typescriptServices.js 17853                 lineCount++;

./node_modules/typescript/lib/typescriptServices.js 17854                 linePos = output.length;

./node_modules/typescript/lib/typescriptServices.js 17855                 lineStart = true;

./node_modules/typescript/lib/typescriptServices.js 17860             return lineStart ? output.length : (output.length + newLine.length);

./node_modules/typescript/lib/typescriptServices.js 17872             getLine: function () { return lineCount; },

./node_modules/typescript/lib/typescriptServices.js 17873             getColumn: function () { return lineStart ? indent * getIndentSize() : output.length - linePos; },

./node_modules/typescript/lib/typescriptServices.js 17875             isAtStartOfLine: function () { return lineStart; },

./node_modules/typescript/lib/typescriptServices.js 18099         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/typescriptServices.js 18100         return ts.computeLineOfPosition(lineStarts, pos);

./node_modules/typescript/lib/typescriptServices.js 18103     function getLineOfLocalPositionFromLineMap(lineMap, pos) {

./node_modules/typescript/lib/typescriptServices.js 18104         return ts.computeLineOfPosition(lineMap, pos);

./node_modules/typescript/lib/typescriptServices.js 18250     function emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments) {

./node_modules/typescript/lib/typescriptServices.js 18251         emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, node.pos, leadingComments);

./node_modules/typescript/lib/typescriptServices.js 18254     function emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, pos, leadingComments) {

./node_modules/typescript/lib/typescriptServices.js 18255         // If the leading comments start on different line than the start of node, write new line

./node_modules/typescript/lib/typescriptServices.js 18257             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, leadingComments[0].pos)) {

./node_modules/typescript/lib/typescriptServices.js 18262     function emitNewLineBeforeLeadingCommentOfPosition(lineMap, writer, pos, commentPos) {

./node_modules/typescript/lib/typescriptServices.js 18263         // If the leading comments start on different line than the start of node, write new line

./node_modules/typescript/lib/typescriptServices.js 18265             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, commentPos)) {

./node_modules/typescript/lib/typescriptServices.js 18270     function emitComments(text, lineMap, writer, comments, leadingSeparator, trailingSeparator, newLine, writeComment) {

./node_modules/typescript/lib/typescriptServices.js 18282                 writeComment(text, lineMap, writer, comment.pos, comment.end, newLine);

./node_modules/typescript/lib/typescriptServices.js 18300     function emitDetachedComments(text, lineMap, writer, writeComment, node, newLine, removeComments) {

./node_modules/typescript/lib/typescriptServices.js 18323                     var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, lastComment.end);

./node_modules/typescript/lib/typescriptServices.js 18324                     var commentLine = getLineOfLocalPositionFromLineMap(lineMap, comment.pos);

./node_modules/typescript/lib/typescriptServices.js 18326                         // There was a blank line between the last comment and this comment.  This

./node_modules/typescript/lib/typescriptServices.js 18337                 // sure there is at least one blank line between it and the node.  If not, it's not

./node_modules/typescript/lib/typescriptServices.js 18339                 var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, ts.last(detachedComments).end);

./node_modules/typescript/lib/typescriptServices.js 18340                 var nodeLine = getLineOfLocalPositionFromLineMap(lineMap, ts.skipTrivia(text, node.pos));

./node_modules/typescript/lib/typescriptServices.js 18343                     emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments);

./node_modules/typescript/lib/typescriptServices.js 18344                     emitComments(text, lineMap, writer, detachedComments, /*leadingSeparator*/ false, /*trailingSeparator*/ true, newLine, writeComment);

./node_modules/typescript/lib/typescriptServices.js 18355     function writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/typescriptServices.js 18357             var firstCommentLineAndCharacter = ts.computeLineAndCharacterOfPosition(lineMap, commentPos);

./node_modules/typescript/lib/typescriptServices.js 18358             var lineCount = lineMap.length;

./node_modules/typescript/lib/typescriptServices.js 18360             for (var pos = commentPos, currentLine = firstCommentLineAndCharacter.line; pos < commentEnd; currentLine++) {

./node_modules/typescript/lib/typescriptServices.js 18361                 var nextLineStart = (currentLine + 1) === lineCount

./node_modules/typescript/lib/typescriptServices.js 18363                     : lineMap[currentLine + 1];

./node_modules/typescript/lib/typescriptServices.js 18365                     // If we are not emitting first line, we need to write the spaces to adjust the alignment

./node_modules/typescript/lib/typescriptServices.js 18367                         firstCommentLineIndent = calculateIndent(text, lineMap[firstCommentLineAndCharacter.line], commentPos);

./node_modules/typescript/lib/typescriptServices.js 18374                     //         /* starts at character 9 this is line 1

./node_modules/typescript/lib/typescriptServices.js 18375                     //    * starts at character pos 4 line                        --1  = 8 - 8 + 3

./node_modules/typescript/lib/typescriptServices.js 18380                     //     /* this is line 1 -- Assume current writer indent 8

./node_modules/typescript/lib/typescriptServices.js 18381                     //      * line                                                --3 = 8 - 4 + 5

./node_modules/typescript/lib/typescriptServices.js 18402                 // Write the comment line text

./node_modules/typescript/lib/typescriptServices.js 18408             // Single line comment of style //....

./node_modules/typescript/lib/typescriptServices.js 18424             // Empty string - make sure we write empty line

./node_modules/typescript/lib/typescriptServices.js 18917     var lineFeed = "\n";

./node_modules/typescript/lib/typescriptServices.js 18923                 return lineFeed;

./node_modules/typescript/lib/typescriptServices.js 19461     // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/typescriptServices.js 20495         // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 21905             inlineExpressions: inlineExpressions,

./node_modules/typescript/lib/typescriptServices.js 23701             // eslint-disable-next-line no-undef-init

./node_modules/typescript/lib/typescriptServices.js 25972         function inlineExpressions(expressions) {

./node_modules/typescript/lib/typescriptServices.js 26352                 // tslint:disable-next-line no-invalid-template-strings

./node_modules/typescript/lib/typescriptServices.js 26356                 // tslint:disable-next-line no-invalid-template-strings

./node_modules/typescript/lib/typescriptServices.js 26705     // tslint:disable-next-line variable-name

./node_modules/typescript/lib/typescriptServices.js 27034     function ignoreSourceNewlines(node) {

./node_modules/typescript/lib/typescriptServices.js 27035         getOrCreateEmitNode(node).flags |= 134217728 /* IgnoreSourceNewlines */;

./node_modules/typescript/lib/typescriptServices.js 27038     ts.ignoreSourceNewlines = ignoreSourceNewlines;

./node_modules/typescript/lib/typescriptServices.js 29593     function createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState) {

./node_modules/typescript/lib/typescriptServices.js 29595         return trampoline;

./node_modules/typescript/lib/typescriptServices.js 29596         function trampoline(node, outerState) {

./node_modules/typescript/lib/typescriptServices.js 29609     ts.createBinaryExpressionTrampoline = createBinaryExpressionTrampoline;

./node_modules/typescript/lib/typescriptServices.js 30765             // code from createNode is inlined here so createNode won't have to deal with special case of creating source files

./node_modules/typescript/lib/typescriptServices.js 30913         // reason about this side effect).  Mainstream VMs inline simple functions like this, so

./node_modules/typescript/lib/typescriptServices.js 32064             // Note: the newlines are important here.  For example, if that above code

./node_modules/typescript/lib/typescriptServices.js 32073             // line terminator after the identifier or keyword.

./node_modules/typescript/lib/typescriptServices.js 33351                 // if the next token is not on the same line as yield.  or we don't have an '*' or

./node_modules/typescript/lib/typescriptServices.js 34917             // directly as that might consume an expression on the following line.

./node_modules/typescript/lib/typescriptServices.js 35019                     // however, an identifier cannot be followed by another identifier on the same line. This is what we

./node_modules/typescript/lib/typescriptServices.js 35029                     // as the identifier 'namespace' on one line followed by the identifier 'n' on another.

./node_modules/typescript/lib/typescriptServices.js 35637                 // We need to ensure that any subsequent modifiers appear on the same line

./node_modules/typescript/lib/typescriptServices.js 36316                     // + 1 because the last index of \n is always one index before the first character in the line and coincidentally, if there is no \n before start, it is -1, which is also one index before the first character

./node_modules/typescript/lib/typescriptServices.js 36340                                     // NOTE: According to usejsdoc.org, a tag goes to end of line, except the last tag.

./node_modules/typescript/lib/typescriptServices.js 36341                                     // Real-world comments may break this rule, so "BeginningOfLine" will not be a real line beginning

./node_modules/typescript/lib/typescriptServices.js 36358                                     // If we've already seen an asterisk, then we can no longer parse a tag on this line

./node_modules/typescript/lib/typescriptServices.js 36363                                     // Ignore the first asterisk on a line

./node_modules/typescript/lib/typescriptServices.js 36388                                         removeLeadingNewlines(comments);

./node_modules/typescript/lib/typescriptServices.js 36399                                 // wasn't a tag, we can no longer parse a tag on this line until we hit the next

./node_modules/typescript/lib/typescriptServices.js 36400                                 // line break.

./node_modules/typescript/lib/typescriptServices.js 36416                 function removeLeadingNewlines(comments) {

./node_modules/typescript/lib/typescriptServices.js 36427                     // We must use infinite lookahead, as there could be any number of newlines :(

./node_modules/typescript/lib/typescriptServices.js 36653                     removeLeadingNewlines(comments);

./node_modules/typescript/lib/typescriptServices.js 37095                     //   > Multiple bounded generics cannot be declared on the same line. For the sake of clarity, if multiple templates share the same

./node_modules/typescript/lib/typescriptServices.js 37096                     //   > type bound they must be declared on separate lines.

./node_modules/typescript/lib/typescriptServices.js 37828             var multiLinePragmaRegEx = /@(\S+)(\s+.*)?$/gim; // Defined inline since it uses the "g" flag, which keeps a persistent index (for iterating)

./node_modules/typescript/lib/typescriptServices.js 37979      * A map of lib names to lib files. This map is used both for parsing the "lib" command line

./node_modules/typescript/lib/typescriptServices.js 38060             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 38074             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 38172             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 38210             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 38218             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 38225             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 38234             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 38243             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 38250             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 38257             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 38743             name: "inlineSourceMap",

./node_modules/typescript/lib/typescriptServices.js 38751             name: "inlineSources",

./node_modules/typescript/lib/typescriptServices.js 38857             description: ts.Diagnostics.Set_the_newline_character_for_emitting_files,

./node_modules/typescript/lib/typescriptServices.js 39088             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 39095             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 39102             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 39108             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescriptServices.js 39335                     errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line, opt.name));

./node_modules/typescript/lib/typescriptServices.js 39339                 errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line, opt.name));

./node_modules/typescript/lib/typescriptServices.js 39345             // Check to see if no argument was provided (e.g. "--locale" is the last command-line argument).

./node_modules/typescript/lib/typescriptServices.js 39761                     return validateValue(/*value*/ null); // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 39920         // There is a typeMap associated with this command-line option so use it to map value back to its name

./node_modules/typescript/lib/typescriptServices.js 39939                 // tsconfig only options cannot be specified via command line,

./node_modules/typescript/lib/typescriptServices.js 39941                 if (optionsNameMap.has(name) && (optionsNameMap.get(name).category === ts.Diagnostics.Command_line_Options || optionsNameMap.get(name).category === ts.Diagnostics.Output_Formatting)) {

./node_modules/typescript/lib/typescriptServices.js 39963                             // There is a typeMap associated with this command-line option so use it to map value back to its name

./node_modules/typescript/lib/typescriptServices.js 39976      * Generate tsconfig configuration when running command line "--init"

./node_modules/typescript/lib/typescriptServices.js 39977      * @param options commandlineOptions to be generated into tsconfig.json

./node_modules/typescript/lib/typescriptServices.js 40010             var categoriesToSkip = [ts.Diagnostics.Command_line_Options, ts.Diagnostics.Editor_Support, ts.Diagnostics.Compiler_Diagnostics, ts.Diagnostics.Backwards_Compatibility, ts.Diagnostics.Watch_and_Build_Modes, ts.Diagnostics.Output_Formatting];

./node_modules/typescript/lib/typescriptServices.js 40136         return x === undefined || x === null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 40638      * NOTE: used \ in place of / above to avoid issues with multiline comments.

./node_modules/typescript/lib/typescriptServices.js 40650      * NOTE: used \ in place of / above to avoid issues with multiline comments.

./node_modules/typescript/lib/typescriptServices.js 41045         if (typeof value !== typeOfTag || value === null) { // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 41047                 // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 41329                             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 42231                 // When baseUrl is not specified, the command line parser resolves relative paths to the config file location.

./node_modules/typescript/lib/typescriptServices.js 43758             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, /*foldState*/ undefined);

./node_modules/typescript/lib/typescriptServices.js 44327                     // typedef anchored to an A.B.C assignment - we need to bind into B's namespace under name C

./node_modules/typescript/lib/typescriptServices.js 45645                 //  but be sure to bail on recuring into the type if accept declines the symbol.

./node_modules/typescript/lib/typescriptServices.js 46784                 addErrorOrSuggestion(isError, "message" in message ? ts.createFileDiagnostic(file, 0, 0, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForFileFromMessageChain(file, message)); // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typescriptServices.js 46787             addErrorOrSuggestion(isError, "message" in message ? ts.createDiagnosticForNode(location, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForNodeFromMessageChain(location, message)); // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typescriptServices.js 47823             // generator functions and async functions are not inlined in control flow when immediately invoked

./node_modules/typescript/lib/typescriptServices.js 50399                     ts.setEmitFlags(typeLiteralNode, (context.flags & 1024 /* MultilineObjectLiterals */) ? 0 : 1 /* SingleLine */);

./node_modules/typescript/lib/typescriptServices.js 51067                     return ts.getSourceFileOfNode(ts.getNonAugmentationDeclaration(symbol)).fileName; // A resolver may not be provided for baselines and errors - in those cases we use the fileName in full

./node_modules/typescript/lib/typescriptServices.js 51525                     if (file && ts.isTupleTypeNode(node) && (ts.getLineAndCharacterOfPosition(file, node.pos).line === ts.getLineAndCharacterOfPosition(file, node.end).line)) {

./node_modules/typescript/lib/typescriptServices.js 51685                 function inlineExportModifiers(statements) {

./node_modules/typescript/lib/typescriptServices.js 51719                     statements = inlineExportModifiers(statements);

./node_modules/typescript/lib/typescriptServices.js 52485                             // Inlined JSON types exported with [module.]exports= will already emit an export=, so should use `declare`.

./node_modules/typescript/lib/typescriptServices.js 62462                             // We can't simply assume invariance, because `Unmeasurable` marks nonlinear relations, for example, a relation tained by

./node_modules/typescript/lib/typescriptServices.js 67097             var inlineLevel = 0;

./node_modules/typescript/lib/typescriptServices.js 68089                         // When narrowing a reference to a const variable, non-assigned parameter, or readonly property, we inline

./node_modules/typescript/lib/typescriptServices.js 68091                         if (!isMatchingReference(reference, expr) && inlineLevel < 5) {

./node_modules/typescript/lib/typescriptServices.js 68096                                     inlineLevel++;

./node_modules/typescript/lib/typescriptServices.js 68098                                     inlineLevel--;

./node_modules/typescript/lib/typescriptServices.js 68265                     // (because the const enum value will not be inlined), or if (2) the alias is an export

./node_modules/typescript/lib/typescriptServices.js 71253             //   1. if 'isolatedModules' is enabled, because the const enum value will not be inlined, and

./node_modules/typescript/lib/typescriptServices.js 75249             var trampoline = ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState);

./node_modules/typescript/lib/typescriptServices.js 75251                 var result = trampoline(node, checkMode);

./node_modules/typescript/lib/typescriptServices.js 78252                         //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag

./node_modules/typescript/lib/typescriptServices.js 78259                     //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag

./node_modules/typescript/lib/typescriptServices.js 81427                     // If not a value, we're interpreting the identifier as a type export, along the lines of (`export { Id as default }`)

./node_modules/typescript/lib/typescriptServices.js 82939                 // inline property\index accesses only for const enums

./node_modules/typescript/lib/typescriptServices.js 83041             return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/typescriptServices.js 83049             return nodeBuilder.typeToTypeNode(getReturnTypeOfSignature(signature), enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/typescriptServices.js 83057             return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/typescriptServices.js 83984             var startLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.pos).line;

./node_modules/typescript/lib/typescriptServices.js 83985             var endLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.end).line;

./node_modules/typescript/lib/typescriptServices.js 84187                     // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion

./node_modules/typescript/lib/typescriptServices.js 85943                 if (end && (raw.generatedLine > end.line ||

./node_modules/typescript/lib/typescriptServices.js 85944                     (raw.generatedLine === end.line && raw.generatedCharacter > end.character))) {

./node_modules/typescript/lib/typescriptServices.js 85947                 if (start && (raw.generatedLine < start.line ||

./node_modules/typescript/lib/typescriptServices.js 85948                     (start.line === raw.generatedLine && raw.generatedCharacter < start.character))) {

./node_modules/typescript/lib/typescriptServices.js 85979                 var rawGeneratedLine = raw.generatedLine - (start ? start.line : 0);

./node_modules/typescript/lib/typescriptServices.js 85981                 var rawGeneratedCharacter = start && start.line === raw.generatedLine ? raw.generatedCharacter - start.character : raw.generatedCharacter;

./node_modules/typescript/lib/typescriptServices.js 86011                 // Emit line delimiters

./node_modules/typescript/lib/typescriptServices.js 86033                 // 3. Relative source line

./node_modules/typescript/lib/typescriptServices.js 86092     // Sometimes tools can see the following line as a source mapping url comment, so we mangle it a bit (the [M])

./node_modules/typescript/lib/typescriptServices.js 86095     function getLineInfo(text, lineStarts) {

./node_modules/typescript/lib/typescriptServices.js 86097             getLineCount: function () { return lineStarts.length; },

./node_modules/typescript/lib/typescriptServices.js 86098             getLineText: function (line) { return text.substring(lineStarts[line], lineStarts[line + 1]); }

./node_modules/typescript/lib/typescriptServices.js 86105     function tryGetSourceMappingURL(lineInfo) {

./node_modules/typescript/lib/typescriptServices.js 86106         for (var index = lineInfo.getLineCount() - 1; index >= 0; index--) {

./node_modules/typescript/lib/typescriptServices.js 86107             var line = lineInfo.getLineText(index);

./node_modules/typescript/lib/typescriptServices.js 86108             var comment = sourceMapCommentRegExp.exec(line);

./node_modules/typescript/lib/typescriptServices.js 86112             // If we see a non-whitespace/map comment-like line, break, to avoid scanning up the entire file

./node_modules/typescript/lib/typescriptServices.js 86113             else if (!line.match(whitespaceOrMapCommentRegExp)) {

./node_modules/typescript/lib/typescriptServices.js 86167                         // new line

./node_modules/typescript/lib/typescriptServices.js 86174                         // Next entry is on same line - no action needed

./node_modules/typescript/lib/typescriptServices.js 86707     function isSimpleInlineableExpression(expression) {

./node_modules/typescript/lib/typescriptServices.js 86710     ts.isSimpleInlineableExpression = isSimpleInlineableExpression;

./node_modules/typescript/lib/typescriptServices.js 86892         return context.factory.inlineExpressions(expressions) || context.factory.createOmittedExpression();

./node_modules/typescript/lib/typescriptServices.js 86945      * @param hoistTempVariables Indicates whether temporary variables should not be recorded in-line.

./node_modules/typescript/lib/typescriptServices.js 86979                 var value = context.factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/typescriptServices.js 86995             /*type*/ undefined, pendingExpressions_1 ? context.factory.inlineExpressions(ts.append(pendingExpressions_1, value)) : value);

./node_modules/typescript/lib/typescriptServices.js 87007                 value = context.factory.inlineExpressions(ts.append(pendingExpressions, value));

./node_modules/typescript/lib/typescriptServices.js 87033                     if (!ts.isSimpleInlineableExpression(initializer) && ts.isBindingOrAssignmentPattern(bindingTarget)) {

./node_modules/typescript/lib/typescriptServices.js 87193         if (initializer && !ts.isSimpleInlineableExpression(initializer))

./node_modules/typescript/lib/typescriptServices.js 87344         // Examples: `\n` is converted to "\\n", a template string with a newline to "\n".

./node_modules/typescript/lib/typescriptServices.js 87356         // Newline normalization:

./node_modules/typescript/lib/typescriptServices.js 88898                 return generateNameForComputedPropertyName && !ts.isSimpleInlineableExpression(name.expression)

./node_modules/typescript/lib/typescriptServices.js 88925                 if (!ts.isSimpleInlineableExpression(innerExpression)) {

./node_modules/typescript/lib/typescriptServices.js 89155                 return ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/typescriptServices.js 90119          * Tracks what computed name expressions originating from elided names must be inlined

./node_modules/typescript/lib/typescriptServices.js 90273                 node = factory.updateComputedPropertyName(node, factory.inlineExpressions(expressions));

./node_modules/typescript/lib/typescriptServices.js 90332             // If it's not inlineable, then we emit an expression after the class which assigns

./node_modules/typescript/lib/typescriptServices.js 90335             if (expr && !ts.isSimpleInlineableExpression(expr)) {

./node_modules/typescript/lib/typescriptServices.js 90449                             if (ts.isSimpleInlineableExpression(node.operand.argumentExpression)) {

./node_modules/typescript/lib/typescriptServices.js 90484             if (ts.isSimpleInlineableExpression(receiver)) {

./node_modules/typescript/lib/typescriptServices.js 90560                     factory.inlineExpressions(ts.compact(__spreadArray(__spreadArray([], pendingExpressions, true), [node], false))) :

./node_modules/typescript/lib/typescriptServices.js 90592                                 if (!ts.isSimpleInlineableExpression(setterName)) {

./node_modules/typescript/lib/typescriptServices.js 90743                 statements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/typescriptServices.js 90764             // then we want to output the pendingExpressions as statements, not as inlined

./node_modules/typescript/lib/typescriptServices.js 90794                         pendingStatements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/typescriptServices.js 90800                         return factory.inlineExpressions([factory.createAssignment(temp, classExpression), temp]);

./node_modules/typescript/lib/typescriptServices.js 90822                     return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/typescriptServices.js 91014             var propertyName = ts.isComputedPropertyName(property.name) && !ts.isSimpleInlineableExpression(property.name.expression)

./node_modules/typescript/lib/typescriptServices.js 91229          * value of the result or the expression itself if the value is either unused or safe to inline into multiple locations

./node_modules/typescript/lib/typescriptServices.js 91236                 var inlinable = ts.isSimpleInlineableExpression(innerExpression);

./node_modules/typescript/lib/typescriptServices.js 91883             return factory.inlineExpressions(ts.map(variables, transformInitializedVariable));

./node_modules/typescript/lib/typescriptServices.js 92169                 factory.createObjectLiteralExpression(accessors, /* multiline */ true)

./node_modules/typescript/lib/typescriptServices.js 92664                 factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), callValues]) :

./node_modules/typescript/lib/typescriptServices.js 93488                     var lineCol = ts.getLineAndCharacterOfPosition(originalFile, location.pos);

./node_modules/typescript/lib/typescriptServices.js 93491                         factory.createPropertyAssignment("lineNumber", factory.createNumericLiteral(lineCol.line + 1)),

./node_modules/typescript/lib/typescriptServices.js 93492                         factory.createPropertyAssignment("columnNumber", factory.createNumericLiteral(lineCol.character + 1))

./node_modules/typescript/lib/typescriptServices.js 93583                 // Always recreate the literal to escape any escape sequences or newlines which may be in the original jsx string and which

./node_modules/typescript/lib/typescriptServices.js 93604          * JSX trims whitespace at the end and beginning of lines, except that the

./node_modules/typescript/lib/typescriptServices.js 93605          * start/end of a tag is considered a start/end of a line only if that line is

./node_modules/typescript/lib/typescriptServices.js 93606          * on the same line as the closing tag. See examples in

./node_modules/typescript/lib/typescriptServices.js 93611          * - If there is only one line, return it.

./node_modules/typescript/lib/typescriptServices.js 93612          * - If there is only whitespace (but multiple lines), return `undefined`.

./node_modules/typescript/lib/typescriptServices.js 93613          * - Split the text into lines.

./node_modules/typescript/lib/typescriptServices.js 93614          * - 'trimRight' the first line, 'trimLeft' the last line, 'trim' middle lines.

./node_modules/typescript/lib/typescriptServices.js 93615          * - Decode entities on each line (individually).

./node_modules/typescript/lib/typescriptServices.js 93616          * - Remove empty lines and join the rest with " ".

./node_modules/typescript/lib/typescriptServices.js 93620             // First non-whitespace character on this line.

./node_modules/typescript/lib/typescriptServices.js 93622             // Last non-whitespace character on this line.

./node_modules/typescript/lib/typescriptServices.js 93624             // These initial values are special because the first line is:

./node_modules/typescript/lib/typescriptServices.js 93626             // but lastNonWhitespace = -1 as a special flag to indicate that we *don't* include the line if it's all whitespace.

./node_modules/typescript/lib/typescriptServices.js 93630                     // If we've seen any non-whitespace characters on this line, add the 'trim' of the line.

./node_modules/typescript/lib/typescriptServices.js 93631                     // (lastNonWhitespace === -1 is a special flag to detect whether the first line is all whitespace.)

./node_modules/typescript/lib/typescriptServices.js 93635                     // Reset firstNonWhitespace for the next line.

./node_modules/typescript/lib/typescriptServices.js 93647                 // Last line had a non-whitespace character. Emit the 'trimLeft', meaning keep trailing whitespace.

./node_modules/typescript/lib/typescriptServices.js 93649                 // Last line was all whitespace, so ignore it

./node_modules/typescript/lib/typescriptServices.js 93902         oline: 0x203E,

./node_modules/typescript/lib/typescriptServices.js 94752             // The assumption is that no prior step in the pipeline has added any prologue directives.

./node_modules/typescript/lib/typescriptServices.js 95383             var multiLine = false; // indicates whether the block *must* be emitted as multiple lines

./node_modules/typescript/lib/typescriptServices.js 95384             var singleLine = false; // indicates whether the block *may* be emitted as a single line

./node_modules/typescript/lib/typescriptServices.js 95406                 // If the original body was a multi-line block, this must be a multi-line block.

./node_modules/typescript/lib/typescriptServices.js 95440             // If we added any final generated statements, this must be a multi-line block

./node_modules/typescript/lib/typescriptServices.js 95554                     updated = ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(assignments)), node);

./node_modules/typescript/lib/typescriptServices.js 95870                 ? factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), values])

./node_modules/typescript/lib/typescriptServices.js 95932             // new line

./node_modules/typescript/lib/typescriptServices.js 95934             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/typescriptServices.js 96844          * @param multiLine A value indicating whether the result should be emitted on multiple lines.

./node_modules/typescript/lib/typescriptServices.js 97908                 return ts.setSourceMapRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/typescriptServices.js 98016             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/typescriptServices.js 98024                         emitWorker(1 /* Statement */, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/typescriptServices.js 98046                         emitWorker(1 /* Statement */, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/typescriptServices.js 98052             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/typescriptServices.js 98181          * @param multiLine Whether array literals created should be emitted on multiple lines.

./node_modules/typescript/lib/typescriptServices.js 98248             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/typescriptServices.js 98251                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(expressions)));

./node_modules/typescript/lib/typescriptServices.js 98411                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/typescriptServices.js 98593                     ? factory.inlineExpressions(ts.map(variables, transformInitializedVariable))

./node_modules/typescript/lib/typescriptServices.js 98710                     return createInlineBreak(label, /*location*/ node);

./node_modules/typescript/lib/typescriptServices.js 98729                     return createInlineBreak(label, /*location*/ node);

./node_modules/typescript/lib/typescriptServices.js 98739             return createInlineReturn(ts.visitNode(node.expression, visitor, ts.isExpression), 

./node_modules/typescript/lib/typescriptServices.js 98822                                 createInlineBreak(clauseLabels[i], /*location*/ clause.expression)

./node_modules/typescript/lib/typescriptServices.js 99413         function createInlineBreak(label, location) {

./node_modules/typescript/lib/typescriptServices.js 99426         function createInlineReturn(expression, location) {

./node_modules/typescript/lib/typescriptServices.js 100914                     var statement = ts.setOriginalNode(ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node), node);

./node_modules/typescript/lib/typescriptServices.js 101705                 /*type*/ undefined, factory.createObjectLiteralExpression(exportedNames, /*multiline*/ true))

./node_modules/typescript/lib/typescriptServices.js 101747             ], /*multiline*/ true));

./node_modules/typescript/lib/typescriptServices.js 101797                                     /*typeArguments*/ undefined, [factory.createObjectLiteralExpression(properties, /*multiline*/ true)])));

./node_modules/typescript/lib/typescriptServices.js 101986                 statements = ts.append(statements, ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node));

./node_modules/typescript/lib/typescriptServices.js 102436                 return expressions ? factory.inlineExpressions(expressions) : factory.createOmittedExpression();

./node_modules/typescript/lib/typescriptServices.js 103531     var declarationEmitNodeBuilderFlags = 1024 /* MultilineObjectLiterals */ |

./node_modules/typescript/lib/typescriptServices.js 104354             if (ts.isTupleTypeNode(input) && (ts.getLineAndCharacterOfPosition(currentSourceFile, input.pos).line === ts.getLineAndCharacterOfPosition(currentSourceFile, input.end).line)) {

./node_modules/typescript/lib/typescriptServices.js 105512         return (options.sourceMap && !options.inlineSourceMap) ? jsFilePath + ".map" : undefined;

./node_modules/typescript/lib/typescriptServices.js 105648         ts.Debug.assert(ts.contains(commandLine.fileNames, inputFileName), "Expected fileName to be present in command line");

./node_modules/typescript/lib/typescriptServices.js 105690         var sourceMapDataList = (compilerOptions.sourceMap || compilerOptions.inlineSourceMap || ts.getAreDeclarationMapsEnabled(compilerOptions)) ? [] : undefined;

./node_modules/typescript/lib/typescriptServices.js 105782                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/typescriptServices.js 105783                 inlineSources: compilerOptions.inlineSources,

./node_modules/typescript/lib/typescriptServices.js 105835                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/typescriptServices.js 105859                     // Explicitly do not passthru either `inline` option

./node_modules/typescript/lib/typescriptServices.js 105908                     writer.writeComment("//# " + "sourceMappingURL" + "=" + sourceMappingURL); // Tools can sometimes see this line as a source mapping url comment

./node_modules/typescript/lib/typescriptServices.js 105925             return (mapOptions.sourceMap || mapOptions.inlineSourceMap)

./node_modules/typescript/lib/typescriptServices.js 105953             if (mapOptions.inlineSourceMap) {

./node_modules/typescript/lib/typescriptServices.js 106071         // error if no source map or for now if inline sourcemap

./node_modules/typescript/lib/typescriptServices.js 106072         if ((sourceMapFilePath && !sourceMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/typescriptServices.js 106073             return sourceMapFilePath || "inline sourcemap decoding";

./node_modules/typescript/lib/typescriptServices.js 106079         // error if no source map or for now if inline sourcemap

./node_modules/typescript/lib/typescriptServices.js 106080         if ((declarationMapPath && !declarationMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/typescriptServices.js 106081             return declarationMapPath || "inline sourcemap decoding";

./node_modules/typescript/lib/typescriptServices.js 106155     var PipelinePhase;

./node_modules/typescript/lib/typescriptServices.js 106156     (function (PipelinePhase) {

./node_modules/typescript/lib/typescriptServices.js 106157         PipelinePhase[PipelinePhase["Notification"] = 0] = "Notification";

./node_modules/typescript/lib/typescriptServices.js 106158         PipelinePhase[PipelinePhase["Substitution"] = 1] = "Substitution";

./node_modules/typescript/lib/typescriptServices.js 106159         PipelinePhase[PipelinePhase["Comments"] = 2] = "Comments";

./node_modules/typescript/lib/typescriptServices.js 106160         PipelinePhase[PipelinePhase["SourceMaps"] = 3] = "SourceMaps";

./node_modules/typescript/lib/typescriptServices.js 106161         PipelinePhase[PipelinePhase["Emit"] = 4] = "Emit";

./node_modules/typescript/lib/typescriptServices.js 106162     })(PipelinePhase || (PipelinePhase = {}));

./node_modules/typescript/lib/typescriptServices.js 106179         var preserveSourceNewlines = printerOptions.preserveSourceNewlines; // Can be overridden inside nodes with the `IgnoreSourceNewlines` emit flag.

./node_modules/typescript/lib/typescriptServices.js 106408             pipelineEmit(hint, node, /*parenthesizerRule*/ undefined);

./node_modules/typescript/lib/typescriptServices.js 106445             pipelineEmit(4 /* Unspecified */, node, parenthesizerRule);

./node_modules/typescript/lib/typescriptServices.js 106451             pipelineEmit(2 /* IdentifierName */, node, /*parenthesizerRule*/ undefined);

./node_modules/typescript/lib/typescriptServices.js 106456             pipelineEmit(1 /* Expression */, node, parenthesizerRule);

./node_modules/typescript/lib/typescriptServices.js 106459             pipelineEmit(ts.isStringLiteral(node) ? 6 /* JsxAttributeValue */ : 4 /* Unspecified */, node);

./node_modules/typescript/lib/typescriptServices.js 106462             if (preserveSourceNewlines && (ts.getEmitFlags(node) & 134217728 /* IgnoreSourceNewlines */)) {

./node_modules/typescript/lib/typescriptServices.js 106463                 preserveSourceNewlines = false;

./node_modules/typescript/lib/typescriptServices.js 106466         function afterEmitNode(savedPreserveSourceNewlines) {

./node_modules/typescript/lib/typescriptServices.js 106467             preserveSourceNewlines = savedPreserveSourceNewlines;

./node_modules/typescript/lib/typescriptServices.js 106469         function pipelineEmit(emitHint, node, parenthesizerRule) {

./node_modules/typescript/lib/typescriptServices.js 106471             var pipelinePhase = getPipelinePhase(0 /* Notification */, emitHint, node);

./node_modules/typescript/lib/typescriptServices.js 106472             pipelinePhase(emitHint, node);

./node_modules/typescript/lib/typescriptServices.js 106485         function getPipelinePhase(phase, emitHint, node) {

./node_modules/typescript/lib/typescriptServices.js 106489                         return pipelineEmitWithNotification;

./node_modules/typescript/lib/typescriptServices.js 106497                         return pipelineEmitWithSubstitution;

./node_modules/typescript/lib/typescriptServices.js 106502                         return pipelineEmitWithComments;

./node_modules/typescript/lib/typescriptServices.js 106507                         return pipelineEmitWithSourceMaps;

./node_modules/typescript/lib/typescriptServices.js 106511                     return pipelineEmitWithHint;

./node_modules/typescript/lib/typescriptServices.js 106516         function getNextPipelinePhase(currentPhase, emitHint, node) {

./node_modules/typescript/lib/typescriptServices.js 106517             return getPipelinePhase(currentPhase + 1, emitHint, node);

./node_modules/typescript/lib/typescriptServices.js 106519         function pipelineEmitWithNotification(hint, node) {

./node_modules/typescript/lib/typescriptServices.js 106520             var pipelinePhase = getNextPipelinePhase(0 /* Notification */, hint, node);

./node_modules/typescript/lib/typescriptServices.js 106521             onEmitNode(hint, node, pipelinePhase);

./node_modules/typescript/lib/typescriptServices.js 106523         function pipelineEmitWithHint(hint, node) {

./node_modules/typescript/lib/typescriptServices.js 106525             if (preserveSourceNewlines) {

./node_modules/typescript/lib/typescriptServices.js 106526                 var savedPreserveSourceNewlines = preserveSourceNewlines;

./node_modules/typescript/lib/typescriptServices.js 106528                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/typescriptServices.js 106529                 afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/typescriptServices.js 106532                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/typescriptServices.js 106538         function pipelineEmitWithHintWorker(hint, node) {

./node_modules/typescript/lib/typescriptServices.js 106993         function pipelineEmitWithSubstitution(hint, node) {

./node_modules/typescript/lib/typescriptServices.js 106994             var pipelinePhase = getNextPipelinePhase(1 /* Substitution */, hint, node);

./node_modules/typescript/lib/typescriptServices.js 106998             pipelinePhase(hint, node);

./node_modules/typescript/lib/typescriptServices.js 107093             if ((printerOptions.sourceMap || printerOptions.inlineSourceMap)

./node_modules/typescript/lib/typescriptServices.js 107468             pipelineEmit(3 /* MappedTypeParameter */, node.typeParameter);

./node_modules/typescript/lib/typescriptServices.js 107564             var linesBeforeDot = getLinesBetweenNodes(node, node.expression, token);

./node_modules/typescript/lib/typescriptServices.js 107565             var linesAfterDot = getLinesBetweenNodes(node, token, node.name);

./node_modules/typescript/lib/typescriptServices.js 107566             writeLinesAndIndent(linesBeforeDot, /*writeSpaceIfNotIndenting*/ false);

./node_modules/typescript/lib/typescriptServices.js 107580             writeLinesAndIndent(linesAfterDot, /*writeSpaceIfNotIndenting*/ false);

./node_modules/typescript/lib/typescriptServices.js 107582             decreaseIndentIf(linesBeforeDot, linesAfterDot);

./node_modules/typescript/lib/typescriptServices.js 107729             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, /*foldState*/ undefined);

./node_modules/typescript/lib/typescriptServices.js 107733                     state.preserveSourceNewlinesStack[state.stackIndex] = preserveSourceNewlines;

./node_modules/typescript/lib/typescriptServices.js 107749                         preserveSourceNewlinesStack: [undefined],

./node_modules/typescript/lib/typescriptServices.js 107764                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, operatorToken);

./node_modules/typescript/lib/typescriptServices.js 107765                 var linesAfterOperator = getLinesBetweenNodes(node, operatorToken, node.right);

./node_modules/typescript/lib/typescriptServices.js 107766                 writeLinesAndIndent(linesBeforeOperator, isCommaOperator);

./node_modules/typescript/lib/typescriptServices.js 107770                 writeLinesAndIndent(linesAfterOperator, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typescriptServices.js 107776                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, node.operatorToken);

./node_modules/typescript/lib/typescriptServices.js 107777                 var linesAfterOperator = getLinesBetweenNodes(node, node.operatorToken, node.right);

./node_modules/typescript/lib/typescriptServices.js 107778                 decreaseIndentIf(linesBeforeOperator, linesAfterOperator);

./node_modules/typescript/lib/typescriptServices.js 107780                     var savedPreserveSourceNewlines = state.preserveSourceNewlinesStack[state.stackIndex];

./node_modules/typescript/lib/typescriptServices.js 107786                     afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/typescriptServices.js 107799                 var pipelinePhase = getPipelinePhase(0 /* Notification */, 1 /* Expression */, next);

./node_modules/typescript/lib/typescriptServices.js 107800                 if (pipelinePhase === pipelineEmitWithSubstitution) {

./node_modules/typescript/lib/typescriptServices.js 107803                     pipelinePhase = getNextPipelinePhase(1 /* Substitution */, 1 /* Expression */, next);

./node_modules/typescript/lib/typescriptServices.js 107806                 if (pipelinePhase === pipelineEmitWithComments ||

./node_modules/typescript/lib/typescriptServices.js 107807                     pipelinePhase === pipelineEmitWithSourceMaps ||

./node_modules/typescript/lib/typescriptServices.js 107808                     pipelinePhase === pipelineEmitWithHint) {

./node_modules/typescript/lib/typescriptServices.js 107814                 pipelinePhase(1 /* Expression */, next);

./node_modules/typescript/lib/typescriptServices.js 107818             var linesBeforeQuestion = getLinesBetweenNodes(node, node.condition, node.questionToken);

./node_modules/typescript/lib/typescriptServices.js 107819             var linesAfterQuestion = getLinesBetweenNodes(node, node.questionToken, node.whenTrue);

./node_modules/typescript/lib/typescriptServices.js 107820             var linesBeforeColon = getLinesBetweenNodes(node, node.whenTrue, node.colonToken);

./node_modules/typescript/lib/typescriptServices.js 107821             var linesAfterColon = getLinesBetweenNodes(node, node.colonToken, node.whenFalse);

./node_modules/typescript/lib/typescriptServices.js 107823             writeLinesAndIndent(linesBeforeQuestion, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typescriptServices.js 107825             writeLinesAndIndent(linesAfterQuestion, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typescriptServices.js 107827             decreaseIndentIf(linesBeforeQuestion, linesAfterQuestion);

./node_modules/typescript/lib/typescriptServices.js 107828             writeLinesAndIndent(linesBeforeColon, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typescriptServices.js 107830             writeLinesAndIndent(linesAfterColon, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typescriptServices.js 107832             decreaseIndentIf(linesBeforeColon, linesAfterColon);

./node_modules/typescript/lib/typescriptServices.js 107944             if (ts.isBlock(node.statement) && !preserveSourceNewlines) {

./node_modules/typescript/lib/typescriptServices.js 108034                 emitTrailingCommentsOfPosition(pos, /*prefixSpace*/ !isJsxExprContext, /*forceNoNewline*/ isJsxExprContext);

./node_modules/typescript/lib/typescriptServices.js 108151             // We must emit a function body as a single-line body in the following case:

./node_modules/typescript/lib/typescriptServices.js 108153             // We must emit a function body as a multi-line body in the following cases:

./node_modules/typescript/lib/typescriptServices.js 108154             // * The body is explicitly marked as multi-line.

./node_modules/typescript/lib/typescriptServices.js 108155             // * A non-synthesized body's start and end position are on different lines.

./node_modules/typescript/lib/typescriptServices.js 108156             // * Any statement in the body starts on a new line.

./node_modules/typescript/lib/typescriptServices.js 108524                 var isMultiline = currentSourceFile && !ts.nodeIsSynthesized(node) && ts.getLineAndCharacterOfPosition(currentSourceFile, node.pos).line !== ts.getLineAndCharacterOfPosition(currentSourceFile, node.end).line;

./node_modules/typescript/lib/typescriptServices.js 108525                 if (isMultiline) {

./node_modules/typescript/lib/typescriptServices.js 108532                 if (isMultiline) {

./node_modules/typescript/lib/typescriptServices.js 108561                 // treat synthesized nodes as located on the same line for emit purposes

./node_modules/typescript/lib/typescriptServices.js 108644                     var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/typescriptServices.js 108645                     for (var _a = 0, lines_2 = lines; _a < lines_2.length; _a++) {

./node_modules/typescript/lib/typescriptServices.js 108646                         var line = lines_2[_a];

./node_modules/typescript/lib/typescriptServices.js 108651                         write(line);

./node_modules/typescript/lib/typescriptServices.js 109074                     pipelineEmit(5 /* EmbeddedStatement */, node);

./node_modules/typescript/lib/typescriptServices.js 109180                 // Write a line terminator if the parent node was multi-line

./node_modules/typescript/lib/typescriptServices.js 109181                 if (format & 1 /* MultiLine */ && !(preserveSourceNewlines && (!parentNode || ts.rangeIsOnSingleLine(parentNode, currentSourceFile)))) {

./node_modules/typescript/lib/typescriptServices.js 109190                 // Write the opening line terminator or leading whitespace.

./node_modules/typescript/lib/typescriptServices.js 109222                         //          /* End of parameter a */ -> this comment isn't considered to be trailing comment of parameter "a" due to newline

./node_modules/typescript/lib/typescriptServices.js 109229                         // Write either a line terminator or whitespace to separate the elements.

./node_modules/typescript/lib/typescriptServices.js 109232                             // If a synthesized node in a single-line list starts on a new

./node_modules/typescript/lib/typescriptServices.js 109233                             // line, we should increase the indent.

./node_modules/typescript/lib/typescriptServices.js 109295                 // Write the closing line terminator or closing whitespace.

./node_modules/typescript/lib/typescriptServices.js 109386             else if (preserveSourceNewlines) {

./node_modules/typescript/lib/typescriptServices.js 109387                 var lines = getLinesBetweenNodes(parentNode, prevChildNode, nextChildNode);

./node_modules/typescript/lib/typescriptServices.js 109388                 if (lines) {

./node_modules/typescript/lib/typescriptServices.js 109389                     writeLine(lines);

./node_modules/typescript/lib/typescriptServices.js 109400             var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/typescriptServices.js 109401             var indentation = ts.guessIndentation(lines);

./node_modules/typescript/lib/typescriptServices.js 109402             for (var _a = 0, lines_3 = lines; _a < lines_3.length; _a++) {

./node_modules/typescript/lib/typescriptServices.js 109403                 var lineText = lines_3[_a];

./node_modules/typescript/lib/typescriptServices.js 109404                 var line = indentation ? lineText.slice(indentation) : lineText;

./node_modules/typescript/lib/typescriptServices.js 109405                 if (line.length) {

./node_modules/typescript/lib/typescriptServices.js 109407                     write(line);

./node_modules/typescript/lib/typescriptServices.js 109411         function writeLinesAndIndent(lineCount, writeSpaceIfNotIndenting) {

./node_modules/typescript/lib/typescriptServices.js 109412             if (lineCount) {

./node_modules/typescript/lib/typescriptServices.js 109414                 writeLine(lineCount);

./node_modules/typescript/lib/typescriptServices.js 109433             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/typescriptServices.js 109443                     // line terminators have already been written as the separating line terminators of the

./node_modules/typescript/lib/typescriptServices.js 109451                     // The outer list is the list of class members, with one line terminator between the

./node_modules/typescript/lib/typescriptServices.js 109452                     // constructor and the method. The constructor is written, the separating line terminator

./node_modules/typescript/lib/typescriptServices.js 109454                     // list, so we look for its leading line terminators. If we didn't know that we had already

./node_modules/typescript/lib/typescriptServices.js 109455                     // written a newline as part of the parent list, it would appear that we need to write a

./node_modules/typescript/lib/typescriptServices.js 109456                     // leading newline to start the modifiers.

./node_modules/typescript/lib/typescriptServices.js 109467                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/typescriptServices.js 109479             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/typescriptServices.js 109488                     if (preserveSourceNewlines && siblingNodePositionsAreComparable(previousNode, nextNode)) {

./node_modules/typescript/lib/typescriptServices.js 109491                     // If `preserveSourceNewlines` is `false` we do not intend to preserve the effective lines between the

./node_modules/typescript/lib/typescriptServices.js 109492                     // previous and next node. Instead we naively check whether nodes are on separate lines within the

./node_modules/typescript/lib/typescriptServices.js 109493                     // same node parent. If so, we intend to preserve a single line terminator. This is less precise and

./node_modules/typescript/lib/typescriptServices.js 109494                     // expensive than checking with `preserveSourceNewlines` as above, but the goal is not to preserve the

./node_modules/typescript/lib/typescriptServices.js 109495                     // effective source lines between two sibling nodes.

./node_modules/typescript/lib/typescriptServices.js 109496                     else if (!preserveSourceNewlines && originalNodesHaveSameParent(previousNode, nextNode)) {

./node_modules/typescript/lib/typescriptServices.js 109499                     // If the two nodes are not comparable, add a line terminator based on the format that can indicate

./node_modules/typescript/lib/typescriptServices.js 109500                     // whether new lines are preferred or not.

./node_modules/typescript/lib/typescriptServices.js 109513             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/typescriptServices.js 109522                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/typescriptServices.js 109538             // If 'preserveSourceNewlines' is disabled, we should never call this function

./node_modules/typescript/lib/typescriptServices.js 109540             ts.Debug.assert(!!preserveSourceNewlines);

./node_modules/typescript/lib/typescriptServices.js 109541             // We start by measuring the line difference from a position to its adjacent comments,

./node_modules/typescript/lib/typescriptServices.js 109542             // so that this is counted as a one-line difference, not two:

./node_modules/typescript/lib/typescriptServices.js 109547             var lines = getLineDifference(/*includeComments*/ true);

./node_modules/typescript/lib/typescriptServices.js 109548             if (lines === 0) {

./node_modules/typescript/lib/typescriptServices.js 109549                 // However, if the line difference considering comments was 0, we might have this:

./node_modules/typescript/lib/typescriptServices.js 109555                 // a one-line difference, not zero.

./node_modules/typescript/lib/typescriptServices.js 109558             return lines;

./node_modules/typescript/lib/typescriptServices.js 109561             var leadingNewlines = preserveSourceNewlines && getLeadingLineTerminatorCount(parent, [node], 0 /* None */);

./node_modules/typescript/lib/typescriptServices.js 109562             if (leadingNewlines) {

./node_modules/typescript/lib/typescriptServices.js 109563                 writeLinesAndIndent(leadingNewlines, /*writeLinesIfNotIndenting*/ false);

./node_modules/typescript/lib/typescriptServices.js 109565             return !!leadingNewlines;

./node_modules/typescript/lib/typescriptServices.js 109568             var trailingNewlines = preserveSourceNewlines && getClosingLineTerminatorCount(parent, [node], 0 /* None */);

./node_modules/typescript/lib/typescriptServices.js 109569             if (trailingNewlines) {

./node_modules/typescript/lib/typescriptServices.js 109570                 writeLine(trailingNewlines);

./node_modules/typescript/lib/typescriptServices.js 109590             // Always use a newline for synthesized code if the synthesizer desires it.

./node_modules/typescript/lib/typescriptServices.js 109595                 if (preserveSourceNewlines) {

./node_modules/typescript/lib/typescriptServices.js 110008         function pipelineEmitWithComments(hint, node) {

./node_modules/typescript/lib/typescriptServices.js 110009             var pipelinePhase = getNextPipelinePhase(2 /* Comments */, hint, node);

./node_modules/typescript/lib/typescriptServices.js 110014             pipelinePhase(hint, node);

./node_modules/typescript/lib/typescriptServices.js 110084             if (comment.hasLeadingNewline || comment.kind === 2 /* SingleLineCommentTrivia */) {

./node_modules/typescript/lib/typescriptServices.js 110106             var lineMap = comment.kind === 3 /* MultiLineCommentTrivia */ ? ts.computeLineStarts(text) : undefined;

./node_modules/typescript/lib/typescriptServices.js 110107             ts.writeCommentRange(text, lineMap, writer, 0, text.length, newLine);

./node_modules/typescript/lib/typescriptServices.js 110240         function emitTrailingCommentsOfPosition(pos, prefixSpace, forceNoNewline) {

./node_modules/typescript/lib/typescriptServices.js 110245             forEachTrailingCommentToEmit(pos, prefixSpace ? emitTrailingComment : forceNoNewline ? emitTrailingCommentOfPositionNoNewline : emitTrailingCommentOfPosition);

./node_modules/typescript/lib/typescriptServices.js 110248         function emitTrailingCommentOfPositionNoNewline(commentPos, commentEnd, kind) {

./node_modules/typescript/lib/typescriptServices.js 110254                 writer.writeLine(); // still write a newline for single-line comments, so closing tokens aren't written on the same line

./node_modules/typescript/lib/typescriptServices.js 110311         function emitComment(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/typescriptServices.js 110315             ts.writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine);

./node_modules/typescript/lib/typescriptServices.js 110333         function pipelineEmitWithSourceMaps(hint, node) {

./node_modules/typescript/lib/typescriptServices.js 110334             var pipelinePhase = getNextPipelinePhase(3 /* SourceMaps */, hint, node);

./node_modules/typescript/lib/typescriptServices.js 110336             pipelinePhase(hint, node);

./node_modules/typescript/lib/typescriptServices.js 110395             var _a = ts.getLineAndCharacterOfPosition(sourceMapSource, pos), sourceLine = _a.line, sourceCharacter = _a.character;

./node_modules/typescript/lib/typescriptServices.js 110454             if (printerOptions.inlineSources) {

./node_modules/typescript/lib/typescriptServices.js 111295             var _a = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start), line = _a.line, character = _a.character; // TODO: GH#18217

./node_modules/typescript/lib/typescriptServices.js 111298             return relativeFileName + "(" + (line + 1) + "," + (character + 1) + "): " + errorMessage;

./node_modules/typescript/lib/typescriptServices.js 111322             case ts.DiagnosticCategory.Suggestion: return ts.Debug.fail("Should never get an Info diagnostic on the command line.");

./node_modules/typescript/lib/typescriptServices.js 111332         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character;

./node_modules/typescript/lib/typescriptServices.js 111333         var _b = ts.getLineAndCharacterOfPosition(file, start + length), lastLine = _b.line, lastLineChar = _b.character;

./node_modules/typescript/lib/typescriptServices.js 111334         var lastLineInFile = ts.getLineAndCharacterOfPosition(file, file.text.length).line;

./node_modules/typescript/lib/typescriptServices.js 111343             // If the error spans over 5 lines, we'll only show the first 2 and last 2 lines,

./node_modules/typescript/lib/typescriptServices.js 111344             // so we'll skip ahead to the second-to-last line.

./node_modules/typescript/lib/typescriptServices.js 111349             var lineStart = ts.getPositionOfLineAndCharacter(file, i, 0);

./node_modules/typescript/lib/typescriptServices.js 111350             var lineEnd = i < lastLineInFile ? ts.getPositionOfLineAndCharacter(file, i + 1, 0) : file.text.length;

./node_modules/typescript/lib/typescriptServices.js 111351             var lineContent = file.text.slice(lineStart, lineEnd);

./node_modules/typescript/lib/typescriptServices.js 111352             lineContent = ts.trimStringEnd(lineContent); // trim from end

./node_modules/typescript/lib/typescriptServices.js 111353             lineContent = lineContent.replace(/\t/g, " "); // convert tabs to single spaces

./node_modules/typescript/lib/typescriptServices.js 111354             // Output the gutter and the actual contents of the line.

./node_modules/typescript/lib/typescriptServices.js 111356             context += lineContent + host.getNewLine();

./node_modules/typescript/lib/typescriptServices.js 111357             // Output the gutter and the error span for the line using tildes.

./node_modules/typescript/lib/typescriptServices.js 111361                 // If we're on the last line, then limit it to the last character of the last line.

./node_modules/typescript/lib/typescriptServices.js 111362                 // Otherwise, we'll just squiggle the rest of the line, giving 'slice' no end position.

./node_modules/typescript/lib/typescriptServices.js 111364                 context += lineContent.slice(0, firstLineChar).replace(/\S/g, " ");

./node_modules/typescript/lib/typescriptServices.js 111365                 context += lineContent.slice(firstLineChar, lastCharForLine).replace(/./g, "~");

./node_modules/typescript/lib/typescriptServices.js 111368                 context += lineContent.slice(0, lastLineChar).replace(/./g, "~");

./node_modules/typescript/lib/typescriptServices.js 111371                 // Squiggle the entire line.

./node_modules/typescript/lib/typescriptServices.js 111372                 context += lineContent.replace(/./g, "~");

./node_modules/typescript/lib/typescriptServices.js 111381         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character; // TODO: GH#18217

./node_modules/typescript/lib/typescriptServices.js 111768         structureIsReused = tryReuseStructureFromOldProgram(); // eslint-disable-line prefer-const

./node_modules/typescript/lib/typescriptServices.js 111870         // Release commandlines that new program does not use

./node_modules/typescript/lib/typescriptServices.js 112684          * @returns The line index marked as preceding the diagnostic, or -1 if none was.

./node_modules/typescript/lib/typescriptServices.js 112691             // Start out with the line just before the text

./node_modules/typescript/lib/typescriptServices.js 112692             var lineStarts = ts.getLineStarts(file);

./node_modules/typescript/lib/typescriptServices.js 112693             var line = ts.computeLineAndCharacterOfPosition(lineStarts, start).line - 1; // TODO: GH#18217

./node_modules/typescript/lib/typescriptServices.js 112694             while (line >= 0) {

./node_modules/typescript/lib/typescriptServices.js 112695                 // As soon as that line is known to have a comment directive, use that

./node_modules/typescript/lib/typescriptServices.js 112696                 if (directives.markUsed(line)) {

./node_modules/typescript/lib/typescriptServices.js 112697                     return line;

./node_modules/typescript/lib/typescriptServices.js 112699                 // Stop searching if the line is not empty and not a comment

./node_modules/typescript/lib/typescriptServices.js 112700                 var lineText = file.text.slice(lineStarts[line], lineStarts[line + 1]).trim();

./node_modules/typescript/lib/typescriptServices.js 112701                 if (lineText !== "" && !/^(\s*)\/\/(.*)$/.test(lineText)) {

./node_modules/typescript/lib/typescriptServices.js 112704                 line--;

./node_modules/typescript/lib/typescriptServices.js 113047                 while (r.exec(file.text) !== null) { // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 113648             if (options.inlineSourceMap) {

./node_modules/typescript/lib/typescriptServices.js 113650                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "sourceMap", "inlineSourceMap");

./node_modules/typescript/lib/typescriptServices.js 113653                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "mapRoot", "inlineSourceMap");

./node_modules/typescript/lib/typescriptServices.js 113719             if (!options.sourceMap && !options.inlineSourceMap) {

./node_modules/typescript/lib/typescriptServices.js 113720                 if (options.inlineSources) {

./node_modules/typescript/lib/typescriptServices.js 113721                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "inlineSources");

./node_modules/typescript/lib/typescriptServices.js 113724                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "sourceRoot");

./node_modules/typescript/lib/typescriptServices.js 115923             // eslint-disable-next-line no-empty

./node_modules/typescript/lib/typescriptServices.js 116909             // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/typescriptServices.js 118073         var parsedConfigs; // Parsed commandline and watching cached for referenced projects

./node_modules/typescript/lib/typescriptServices.js 120392             "readline",

./node_modules/typescript/lib/typescriptServices.js 120808         SymbolDisplayPartKind[SymbolDisplayPartKind["lineBreak"] = 6] = "lineBreak";

./node_modules/typescript/lib/typescriptServices.js 120830         /** Single or multi-line comments */

./node_modules/typescript/lib/typescriptServices.js 121496         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/typescriptServices.js 121497         var line = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/typescriptServices.js 121498         return lineStarts[line];

./node_modules/typescript/lib/typescriptServices.js 122970         var lineStart;

./node_modules/typescript/lib/typescriptServices.js 123019             if (lineStart) {

./node_modules/typescript/lib/typescriptServices.js 123025                 lineStart = false;

./node_modules/typescript/lib/typescriptServices.js 123046             displayParts.push(lineBreakPart());

./node_modules/typescript/lib/typescriptServices.js 123047             lineStart = true;

./node_modules/typescript/lib/typescriptServices.js 123051             lineStart = true;

./node_modules/typescript/lib/typescriptServices.js 123211     function lineBreakPart() {

./node_modules/typescript/lib/typescriptServices.js 123212         return displayPart("\n", ts.SymbolDisplayPartKind.lineBreak);

./node_modules/typescript/lib/typescriptServices.js 123214     ts.lineBreakPart = lineBreakPart;

./node_modules/typescript/lib/typescriptServices.js 123228             typechecker.writeType(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */ | 16384 /* UseAliasDefinedOutsideCurrentScope */, writer);

./node_modules/typescript/lib/typescriptServices.js 123241         flags |= 16384 /* UseAliasDefinedOutsideCurrentScope */ | 1024 /* MultilineObjectLiterals */ | 32 /* WriteTypeArgumentsOfSignature */ | 8192 /* OmitParameterModifiers */;

./node_modules/typescript/lib/typescriptServices.js 123389             if (text.charCodeAt(i) === 10 /* lineFeed */)

./node_modules/typescript/lib/typescriptServices.js 123642         var startLine = sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line;

./node_modules/typescript/lib/typescriptServices.js 123643         var endLine = sourceFile.getLineAndCharacterOfPosition(nextToken.getStart(sourceFile)).line;

./node_modules/typescript/lib/typescriptServices.js 124412             // lines, just as we do with the end-of-line state. However, this is a burden for implementers,

./node_modules/typescript/lib/typescriptServices.js 124414             // flatten any nesting when the template stack is non-empty and encode it in the end-of-line state.

./node_modules/typescript/lib/typescriptServices.js 124416             //  1) When template strings are nested across different lines:

./node_modules/typescript/lib/typescriptServices.js 124420             //     Where on the second line, you will get the closing of a template,

./node_modules/typescript/lib/typescriptServices.js 124423             //  2) When substitution expressions have curly braces and the curly brace falls on the next line:

./node_modules/typescript/lib/typescriptServices.js 124427             //     Where on the second line, you will get the 'return' keyword,

./node_modules/typescript/lib/typescriptServices.js 124582                 // Check to see if we finished up on a multiline string literal.

./node_modules/typescript/lib/typescriptServices.js 124591                 // If we have an odd number of backslashes, then the multiline string is unclosed

./node_modules/typescript/lib/typescriptServices.js 124597                 // Check to see if the multiline comment was unclosed.

./node_modules/typescript/lib/typescriptServices.js 124700         // (and a newline).  That way when we lex we'll think we're still in a string literal.

./node_modules/typescript/lib/typescriptServices.js 124702         // If we're in a multiline comment, then prepend: /*

./node_modules/typescript/lib/typescriptServices.js 124703         // (and a newline).  That way when we lex we'll think we're still in a multiline comment.

./node_modules/typescript/lib/typescriptServices.js 124991                         // Don't bother with newlines/whitespace.

./node_modules/typescript/lib/typescriptServices.js 125011                         // for the ||||||| and ======== markers, add a comment for the first line,

./node_modules/typescript/lib/typescriptServices.js 125012                         // and then lex all subsequent lines up until the end of the conflict marker.

./node_modules/typescript/lib/typescriptServices.js 125149             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typescriptServices.js 125208             // Classify the line that the ||||||| or ======= marker is on as a comment.

./node_modules/typescript/lib/typescriptServices.js 127201                         var lineStart = ts.getLineStartPositionForPosition(position, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 127202                         if (!/[^\*|\s(/)]/.test(sourceFile.text.substring(lineStart, position))) {

./node_modules/typescript/lib/typescriptServices.js 128450                     // If we are sure that the previous property declaration is terminated according to newline or semicolon...

./node_modules/typescript/lib/typescriptServices.js 128911                         if (ts.getLineAndCharacterOfPosition(sourceFile, contextToken.getEnd()).line !== ts.getLineAndCharacterOfPosition(sourceFile, position).line && ts.isObjectTypeDeclaration(location)) {

./node_modules/typescript/lib/typescriptServices.js 129515             // (i.e. the keywords are separated by no comments, no newlines).

./node_modules/typescript/lib/typescriptServices.js 131796                 var _a = "kind" in relatedSymbol ? relatedSymbol : { kind: undefined, symbol: relatedSymbol }, kind = _a.kind, symbol = _a.symbol; // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typescriptServices.js 132515                 // get the text from printing the node on a single line without comments...

./node_modules/typescript/lib/typescriptServices.js 133642             return ts.flatten(ts.intersperse(parts, [ts.lineBreakPart()]));

./node_modules/typescript/lib/typescriptServices.js 133825          * - The line is all whitespace up to 'position' before performing the insertion.

./node_modules/typescript/lib/typescriptServices.js 133858             // * The opening comment line

./node_modules/typescript/lib/typescriptServices.js 133859             // * the first line (without a param) for the object's untagged info (this is also where the caret ends up)

./node_modules/typescript/lib/typescriptServices.js 133860             // * the '@param'-tagged lines

./node_modules/typescript/lib/typescriptServices.js 133863             // * the closing comment line

./node_modules/typescript/lib/typescriptServices.js 133864             // * if the caret was directly in front of the object, then we add an extra line and indentation.

./node_modules/typescript/lib/typescriptServices.js 133878             var lineStart = ts.getLineStartPositionForPosition(position, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 133879             var pos = lineStart;

./node_modules/typescript/lib/typescriptServices.js 133882             return text.slice(lineStart, pos);

./node_modules/typescript/lib/typescriptServices.js 134105          * matches because of the newline, whereas

./node_modules/typescript/lib/typescriptServices.js 134582                 if ((!ts.isClassDeclaration(a.node) && !ts.isClassDeclaration(b.node)) // If neither outline node is a class

./node_modules/typescript/lib/typescriptServices.js 134617                 // We merge if the outline node previous to b (bIndex - 1) is already part of the current class

./node_modules/typescript/lib/typescriptServices.js 134618                 // We do this so that statements between class members that do not generate outline nodes do not split up the class outline:

./node_modules/typescript/lib/typescriptServices.js 134619                 // Ex This should produce one outline node C:

./node_modules/typescript/lib/typescriptServices.js 134621                 // Ex This will produce 3 outline nodes: C, a, C

./node_modules/typescript/lib/typescriptServices.js 134755                     // We may get a string with newlines or other whitespace in the case of an object dereference

./node_modules/typescript/lib/typescriptServices.js 134974             // Replaces ECMAScript line terminators and removes the trailing `\` from each line:

./node_modules/typescript/lib/typescriptServices.js 135470             var lineStarts = sourceFile.getLineStarts();

./node_modules/typescript/lib/typescriptServices.js 135471             for (var _i = 0, lineStarts_1 = lineStarts; _i < lineStarts_1.length; _i++) {

./node_modules/typescript/lib/typescriptServices.js 135472                 var currentLineStart = lineStarts_1[_i];

./node_modules/typescript/lib/typescriptServices.js 135473                 var lineEnd = sourceFile.getLineEndOfPosition(currentLineStart);

./node_modules/typescript/lib/typescriptServices.js 135474                 var lineText = sourceFile.text.substring(currentLineStart, lineEnd);

./node_modules/typescript/lib/typescriptServices.js 135475                 var result = isRegionDelimiter(lineText);

./node_modules/typescript/lib/typescriptServices.js 135480                     var span = ts.createTextSpanFromBounds(sourceFile.text.indexOf("//", currentLineStart), lineEnd);

./node_modules/typescript/lib/typescriptServices.js 135486                         region.textSpan.length = lineEnd - region.textSpan.start;

./node_modules/typescript/lib/typescriptServices.js 135487                         region.hintSpan.length = lineEnd - region.textSpan.start;

./node_modules/typescript/lib/typescriptServices.js 135494         function isRegionDelimiter(lineText) {

./node_modules/typescript/lib/typescriptServices.js 135497             lineText = ts.trimStringStart(lineText);

./node_modules/typescript/lib/typescriptServices.js 135498             if (!ts.startsWith(lineText, "\/\/")) {

./node_modules/typescript/lib/typescriptServices.js 135499                 return null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 135501             lineText = ts.trimString(lineText.slice(2));

./node_modules/typescript/lib/typescriptServices.js 135502             return regionDelimiterRegExp.exec(lineText);

./node_modules/typescript/lib/typescriptServices.js 135517                         // never fold region delimiters into single-line comment regions

./node_modules/typescript/lib/typescriptServices.js 135524                         // For single line comments, combine consecutive ones (2 or more) into

./node_modules/typescript/lib/typescriptServices.js 135543                 // Only outline spans of two or more consecutive single line comments

./node_modules/typescript/lib/typescriptServices.js 135674                 // Otherwise, the collapsed section will include the end of the previous line.

./node_modules/typescript/lib/typescriptServices.js 136718                         // Blocks with braces, brackets, parens, or JSX tags on separate lines should be

./node_modules/typescript/lib/typescriptServices.js 137961         // Dont support sourcemaps that contain inlined sources

./node_modules/typescript/lib/typescriptServices.js 137966     function createSourceFileLike(text, lineMap) {

./node_modules/typescript/lib/typescriptServices.js 137969             lineMap: lineMap,

./node_modules/typescript/lib/typescriptServices.js 138423                                     displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/typescriptServices.js 138602                             displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/typescriptServices.js 138757                     displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/typescriptServices.js 139028                     var startLine = this.sourceFile.getLineAndCharacterOfPosition(this.currentTokenSpan.pos).line;

./node_modules/typescript/lib/typescriptServices.js 139029                     var endLine = this.sourceFile.getLineAndCharacterOfPosition(this.nextTokenSpan.pos).line;

./node_modules/typescript/lib/typescriptServices.js 139047                 var startLine = this.sourceFile.getLineAndCharacterOfPosition(node.getStart(this.sourceFile)).line;

./node_modules/typescript/lib/typescriptServices.js 139048                 var endLine = this.sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line;

./node_modules/typescript/lib/typescriptServices.js 139055                     var startLine = this.sourceFile.getLineAndCharacterOfPosition(openBrace.getEnd()).line;

./node_modules/typescript/lib/typescriptServices.js 139056                     var endLine = this.sourceFile.getLineAndCharacterOfPosition(closeBrace.getStart(this.sourceFile)).line;

./node_modules/typescript/lib/typescriptServices.js 139220                         // move past new line

./node_modules/typescript/lib/typescriptServices.js 139259                         return scanner.reScanJsxToken(/* allowMultilineJsxText */ false);

./node_modules/typescript/lib/typescriptServices.js 139361             var anyTokenIncludingMultilineComments = tokenRangeFrom(__spreadArray(__spreadArray([], allTokens, true), [3 /* MultiLineCommentTrivia */], false));

./node_modules/typescript/lib/typescriptServices.js 139379             var functionOpenBraceLeftTokenRange = anyTokenIncludingMultilineComments;

./node_modules/typescript/lib/typescriptServices.js 139419                 // For functions and control block place } on a new line [multi-line rule]

./node_modules/typescript/lib/typescriptServices.js 139420                 rule("NewLineBeforeCloseBraceInBlockContext", anyTokenIncludingMultilineComments, 19 /* CloseBraceToken */, [isMultilineBlockContext], 8 /* InsertNewLine */),

./node_modules/typescript/lib/typescriptServices.js 139421                 // Space/new line after }.

./node_modules/typescript/lib/typescriptServices.js 139433                 // Insert new line after { and before } in multi-line contexts.

./node_modules/typescript/lib/typescriptServices.js 139434                 rule("NewLineAfterOpenBraceInBlockContext", 18 /* OpenBraceToken */, anyToken, [isMultilineBlockContext], 8 /* InsertNewLine */),

./node_modules/typescript/lib/typescriptServices.js 139556                 // Insert a space after { and before } in single-line contexts, but remove space from empty object literals {}.

./node_modules/typescript/lib/typescriptServices.js 139586                 rule("NewLineBeforeOpenBraceInControl", controlOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForControlBlocks"), isControlDeclContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/typescriptServices.js 139589                 rule("NewLineBeforeOpenBraceInFunction", functionOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForFunctions"), isFunctionDeclContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/typescriptServices.js 139591                 rule("NewLineBeforeOpenBraceInTypeScriptDeclWithBlock", typeScriptOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForFunctions"), isTypeScriptDeclWithBlockContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/typescriptServices.js 139632          * @param flags whether the rule deletes a line or not, defaults to no-op

./node_modules/typescript/lib/typescriptServices.js 139754         function isBeforeMultilineBlockContext(context) {

./node_modules/typescript/lib/typescriptServices.js 139757         function isMultilineBlockContext(context) {

./node_modules/typescript/lib/typescriptServices.js 140022             var startLine = context.sourceFile.getLineAndCharacterOfPosition(context.currentTokenSpan.pos).line;

./node_modules/typescript/lib/typescriptServices.js 140023             var endLine = context.sourceFile.getLineAndCharacterOfPosition(nextTokenStart).line;

./node_modules/typescript/lib/typescriptServices.js 140223             var line = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/typescriptServices.js 140224             if (line === 0) {

./node_modules/typescript/lib/typescriptServices.js 140227             // After the enter key, the cursor is now at a new line. The new line may or may not contain non-whitespace characters.

./node_modules/typescript/lib/typescriptServices.js 140228             // If the new line has only whitespaces, we won't want to format this line, because that would remove the indentation as

./node_modules/typescript/lib/typescriptServices.js 140230             //  1. the end of the previous line

./node_modules/typescript/lib/typescriptServices.js 140231             //  2. the last non-whitespace character in the current line

./node_modules/typescript/lib/typescriptServices.js 140232             var endOfFormatSpan = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 140236             // if the character at the end of the span is a line break, we shouldn't include it, because it indicates we don't want to

./node_modules/typescript/lib/typescriptServices.js 140237             // touch the current line at all. Also, on some OSes the line break consists of two characters (\r\n), we should test if the

./node_modules/typescript/lib/typescriptServices.js 140238             // previous character before the end of format span is line break character as well.

./node_modules/typescript/lib/typescriptServices.js 140243                 // get start position for the previous line

./node_modules/typescript/lib/typescriptServices.js 140244                 pos: ts.getStartPositionOfLine(line - 1, sourceFile),

./node_modules/typescript/lib/typescriptServices.js 140296             // format from the beginning of the line

./node_modules/typescript/lib/typescriptServices.js 140437          * If we hit Enter at $ we want line '    b ||' to be indented.

./node_modules/typescript/lib/typescriptServices.js 140438          * Formatting will be applied to the last two lines.

./node_modules/typescript/lib/typescriptServices.js 140439          * Node that fully encloses these lines is binary expression 'a ||...'.

./node_modules/typescript/lib/typescriptServices.js 140442          * that some parent node on the same line does - like if statement in this case.

./node_modules/typescript/lib/typescriptServices.js 140443          * Note that we are considering parents only from the same line with initial node -

./node_modules/typescript/lib/typescriptServices.js 140444          * if parent is on the different line - its delta was already contributed

./node_modules/typescript/lib/typescriptServices.js 140451                 var line = sourceFile.getLineAndCharacterOfPosition(n.getStart(sourceFile)).line;

./node_modules/typescript/lib/typescriptServices.js 140452                 if (previousLine !== -1 /* Unknown */ && line !== previousLine) {

./node_modules/typescript/lib/typescriptServices.js 140458                 previousLine = line;

./node_modules/typescript/lib/typescriptServices.js 140497                 var startLine = sourceFile.getLineAndCharacterOfPosition(enclosingNode.getStart(sourceFile)).line;

./node_modules/typescript/lib/typescriptServices.js 140500                     undecoratedStartLine = sourceFile.getLineAndCharacterOfPosition(ts.getNonDecoratorTokenPosOfNode(enclosingNode, sourceFile)).line;

./node_modules/typescript/lib/typescriptServices.js 140533                     var startLine = sourceFile.getLineAndCharacterOfPosition(startPos).line;

./node_modules/typescript/lib/typescriptServices.js 140548                     // if node is located on the same line with the parent

./node_modules/typescript/lib/typescriptServices.js 140559                         // - we need to get the indentation on last line and the delta of parent

./node_modules/typescript/lib/typescriptServices.js 140624                     getIndentationForToken: function (line, kind, container, suppressDelta) {

./node_modules/typescript/lib/typescriptServices.js 140625                         return !suppressDelta && shouldAddDelta(line, kind, container) ? indentation + getDelta(container) : indentation;

./node_modules/typescript/lib/typescriptServices.js 140629                     recomputeIndentation: function (lineAdded, parent) {

./node_modules/typescript/lib/typescriptServices.js 140631                             indentation += lineAdded ? options.indentSize : -options.indentSize;

./node_modules/typescript/lib/typescriptServices.js 140636                 function shouldAddDelta(line, kind, container) {

./node_modules/typescript/lib/typescriptServices.js 140663                     // if token line equals to the line of containing node (this is a first token in the node) - use node indentation

./node_modules/typescript/lib/typescriptServices.js 140664                     return nodeStartLine !== line

./node_modules/typescript/lib/typescriptServices.js 140708                         processPair(token, sourceFile.getLineAndCharacterOfPosition(token.pos).line, node, previousRange, previousRangeStartLine, previousParent, contextNode, nodeDynamicIndentation);

./node_modules/typescript/lib/typescriptServices.js 140713                     var childStartLine = sourceFile.getLineAndCharacterOfPosition(childStartPos).line;

./node_modules/typescript/lib/typescriptServices.js 140716                         undecoratedChildStartLine = sourceFile.getLineAndCharacterOfPosition(ts.getNonDecoratorTokenPosOfNode(child, sourceFile)).line;

./node_modules/typescript/lib/typescriptServices.js 140785                                 startLine = sourceFile.getLineAndCharacterOfPosition(tokenInfo.token.pos).line;

./node_modules/typescript/lib/typescriptServices.js 140816                             var commaTokenLine = sourceFile.getLineAndCharacterOfPosition(tokenInfo.token.pos).line;

./node_modules/typescript/lib/typescriptServices.js 140839                     var lineAction = 0 /* None */;

./node_modules/typescript/lib/typescriptServices.js 140846                         lineAction = processRange(currentTokenInfo.token, tokenStart, parent, childContextNode, dynamicIndentation);

./node_modules/typescript/lib/typescriptServices.js 140849                             if (lineAction === 0 /* None */) {

./node_modules/typescript/lib/typescriptServices.js 140850                                 // indent token only if end line of previous range does not match start line of the token

./node_modules/typescript/lib/typescriptServices.js 140851                                 var prevEndLine = savePreviousRange && sourceFile.getLineAndCharacterOfPosition(savePreviousRange.end).line;

./node_modules/typescript/lib/typescriptServices.js 140852                                 indentToken = lastTriviaWasNewLine && tokenStart.line !== prevEndLine;

./node_modules/typescript/lib/typescriptServices.js 140855                                 indentToken = lineAction === 1 /* LineAdded */;

./node_modules/typescript/lib/typescriptServices.js 140864                             dynamicIndentation.getIndentationForToken(tokenStart.line, currentTokenInfo.token.kind, container, !!isListEndToken) :

./node_modules/typescript/lib/typescriptServices.js 140869                             indentNextTokenOrTrivia = indentTriviaItems(currentTokenInfo.leadingTrivia, commentIndentation_1, indentNextTokenOrTrivia, function (item) { return insertIndentation(item.pos, commentIndentation_1, /*lineAdded*/ false); });

./node_modules/typescript/lib/typescriptServices.js 140873                             insertIndentation(currentTokenInfo.token.pos, tokenIndentation, lineAction === 1 /* LineAdded */);

./node_modules/typescript/lib/typescriptServices.js 140874                             lastIndentedLine = tokenStart.line;

./node_modules/typescript/lib/typescriptServices.js 140889                                 indentMultilineComment(triviaItem, commentIndentation, /*firstLineIsIndented*/ !indentNextTokenOrTrivia);

./node_modules/typescript/lib/typescriptServices.js 140917                 var lineAction = 0 /* None */;

./node_modules/typescript/lib/typescriptServices.js 140920                         // trim whitespaces starting from the beginning of the span up to the current line

./node_modules/typescript/lib/typescriptServices.js 140922                         trimTrailingWhitespacesForLines(originalStart.line, rangeStart.line);

./node_modules/typescript/lib/typescriptServices.js 140925                         lineAction =

./node_modules/typescript/lib/typescriptServices.js 140926                             processPair(range, rangeStart.line, parent, previousRange, previousRangeStartLine, previousParent, contextNode, dynamicIndentation);

./node_modules/typescript/lib/typescriptServices.js 140931                 previousRangeStartLine = rangeStart.line;

./node_modules/typescript/lib/typescriptServices.js 140932                 return lineAction;

./node_modules/typescript/lib/typescriptServices.js 140938                 var lineAction = 0 /* None */;

./node_modules/typescript/lib/typescriptServices.js 140943                         lineAction = applyRuleEdits(rule, previousItem, previousStartLine, currentItem, currentStartLine);

./node_modules/typescript/lib/typescriptServices.js 140944                         switch (lineAction) {

./node_modules/typescript/lib/typescriptServices.js 140946                                 // Handle the case where the next line is moved to be the end of this line.

./node_modules/typescript/lib/typescriptServices.js 140947                                 // In this case we don't indent the next line in the next pass.

./node_modules/typescript/lib/typescriptServices.js 140949                                     dynamicIndentation.recomputeIndentation(/*lineAddedByFormatting*/ false, contextNode);

./node_modules/typescript/lib/typescriptServices.js 140953                                 // Handle the case where token2 is moved to the new line.

./node_modules/typescript/lib/typescriptServices.js 140955                                 // sameLineIndent flag to notify the indenter that the indentation is within the line.

./node_modules/typescript/lib/typescriptServices.js 140957                                     dynamicIndentation.recomputeIndentation(/*lineAddedByFormatting*/ true, contextNode);

./node_modules/typescript/lib/typescriptServices.js 140961                                 ts.Debug.assert(lineAction === 0 /* None */);

./node_modules/typescript/lib/typescriptServices.js 140963                         // We need to trim trailing whitespace between the tokens if they were on different lines, and no rule was applied to put them on the same line

./node_modules/typescript/lib/typescriptServices.js 140971                     // We need to trim trailing whitespace between the tokens if they were on different lines, and no rule was applied to put them on the same line

./node_modules/typescript/lib/typescriptServices.js 140974                 return lineAction;

./node_modules/typescript/lib/typescriptServices.js 140976             function insertIndentation(pos, indentation, lineAdded) {

./node_modules/typescript/lib/typescriptServices.js 140978                 if (lineAdded) {

./node_modules/typescript/lib/typescriptServices.js 140979                     // new line is added before the token by the formatting rules

./node_modules/typescript/lib/typescriptServices.js 140985                     var startLinePosition = ts.getStartPositionOfLine(tokenStart.line, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 141006             function indentMultilineComment(commentRange, indentation, firstLineIsIndented, indentFinalLine) {

./node_modules/typescript/lib/typescriptServices.js 141008                 // split comment in lines

./node_modules/typescript/lib/typescriptServices.js 141009                 var startLine = sourceFile.getLineAndCharacterOfPosition(commentRange.pos).line;

./node_modules/typescript/lib/typescriptServices.js 141010                 var endLine = sourceFile.getLineAndCharacterOfPosition(commentRange.end).line;

./node_modules/typescript/lib/typescriptServices.js 141013                         // treat as single line comment

./node_modules/typescript/lib/typescriptServices.js 141014                         insertIndentation(commentRange.pos, indentation, /*lineAdded*/ false);

./node_modules/typescript/lib/typescriptServices.js 141020                 for (var line = startLine; line < endLine; line++) {

./node_modules/typescript/lib/typescriptServices.js 141021                     var endOfLine = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 141023                     startPos = ts.getStartPositionOfLine(line + 1, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 141054             function trimTrailingWhitespacesForLines(line1, line2, range) {

./node_modules/typescript/lib/typescriptServices.js 141055                 for (var line = line1; line < line2; line++) {

./node_modules/typescript/lib/typescriptServices.js 141056                     var lineStartPosition = ts.getStartPositionOfLine(line, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 141057                     var lineEndPosition = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 141059                     if (range && (ts.isComment(range.kind) || ts.isStringOrRegularExpressionOrTemplateLiteral(range.kind)) && range.pos <= lineEndPosition && range.end > lineEndPosition) {

./node_modules/typescript/lib/typescriptServices.js 141062                     var whitespaceStart = getTrailingWhitespaceStartPosition(lineStartPosition, lineEndPosition);

./node_modules/typescript/lib/typescriptServices.js 141064                         ts.Debug.assert(whitespaceStart === lineStartPosition || !ts.isWhiteSpaceSingleLine(sourceFile.text.charCodeAt(whitespaceStart - 1)));

./node_modules/typescript/lib/typescriptServices.js 141065                         recordDelete(whitespaceStart, lineEndPosition + 1 - whitespaceStart);

./node_modules/typescript/lib/typescriptServices.js 141084              * Trimming will be done for lines after the previous range

./node_modules/typescript/lib/typescriptServices.js 141088                 var startLine = sourceFile.getLineAndCharacterOfPosition(startPosition).line;

./node_modules/typescript/lib/typescriptServices.js 141089                 var endLine = sourceFile.getLineAndCharacterOfPosition(originalRange.end).line;

./node_modules/typescript/lib/typescriptServices.js 141124                         // exit early if we on different lines and rule cannot change number of newlines

./node_modules/typescript/lib/typescriptServices.js 141125                         // if line1 and line2 are on subsequent lines then no edits are required - ok to exit

./node_modules/typescript/lib/typescriptServices.js 141126                         // if line1 and line2 are separated with more than one newline - ok to exit since we cannot delete extra new lines

./node_modules/typescript/lib/typescriptServices.js 141130                         // edit should not be applied if we have one line feed between elements

./node_modules/typescript/lib/typescriptServices.js 141131                         var lineDelta = currentStartLine - previousStartLine;

./node_modules/typescript/lib/typescriptServices.js 141132                         if (lineDelta !== 1) {

./node_modules/typescript/lib/typescriptServices.js 141138                         // exit early if we on different lines and rule cannot change number of newlines

./node_modules/typescript/lib/typescriptServices.js 141172             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 141180                 // The end marker of a single-line comment does not include the newline character.

./node_modules/typescript/lib/typescriptServices.js 141185                 // But for closed multi-line comments, we don't want to be inside the comment in the following case:

./node_modules/typescript/lib/typescriptServices.js 141189                 // However, unterminated multi-line comments *do* contain their end.

./node_modules/typescript/lib/typescriptServices.js 141191                 // Internally, we represent the end of the comment at the newline and closing '/', respectively.

./node_modules/typescript/lib/typescriptServices.js 141300              * `true` when we need to assume `position` is on a newline.

./node_modules/typescript/lib/typescriptServices.js 141309              * When inserting some text after an open brace, we would like to get indentation as if a newline was already there.

./node_modules/typescript/lib/typescriptServices.js 141323                 // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 141336                 var lineAtPosition = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/typescriptServices.js 141337                 // indentation is first non-whitespace character in a previous line

./node_modules/typescript/lib/typescriptServices.js 141338                 // for block indentation, we should look for a line which contains something that's not

./node_modules/typescript/lib/typescriptServices.js 141355                 return getSmartIndent(sourceFile, position, precedingToken, lineAtPosition, assumeNewLineBeforeCloseBrace, options);

./node_modules/typescript/lib/typescriptServices.js 141359                 var previousLine = ts.getLineAndCharacterOfPosition(sourceFile, position).line - 1;

./node_modules/typescript/lib/typescriptServices.js 141360                 var commentStartLine = ts.getLineAndCharacterOfPosition(sourceFile, enclosingCommentRange.pos).line;

./node_modules/typescript/lib/typescriptServices.js 141374                 // move backwards until we find a line with a non-whitespace character,

./node_modules/typescript/lib/typescriptServices.js 141375                 // then find the first non-whitespace character for that line.

./node_modules/typescript/lib/typescriptServices.js 141384                 var lineStart = ts.getLineStartPositionForPosition(current, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 141385                 return findFirstNonWhitespaceColumn(lineStart, current, sourceFile, options);

./node_modules/typescript/lib/typescriptServices.js 141387             function getSmartIndent(sourceFile, position, precedingToken, lineAtPosition, assumeNewLineBeforeCloseBrace, options) {

./node_modules/typescript/lib/typescriptServices.js 141395                         var nextTokenKind = nextTokenIsCurlyBraceOnSameLineAsCursor(precedingToken, current, lineAtPosition, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 141399                             : lineAtPosition !== currentStart.line ? options.indentSize : 0;

./node_modules/typescript/lib/typescriptServices.js 141403                     // do not consider parent-child line sharing yet:

./node_modules/typescript/lib/typescriptServices.js 141405                     //    | preceding node 'a' does share line with its parent but indentation is expected

./node_modules/typescript/lib/typescriptServices.js 141429                 // * parent and child nodes start on the same line, or

./node_modules/typescript/lib/typescriptServices.js 141430                 // * parent is an IfStatement and child starts on the same line as an 'else clause'.

./node_modules/typescript/lib/typescriptServices.js 141438                     var parentAndChildShareLine = containingListOrParentStart.line === currentStart.line ||

./node_modules/typescript/lib/typescriptServices.js 141439                         childStartsOnTheSameLineWithElseInIfStatement(parent, current, currentStart.line, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 141443                         // A list indents its children if the children begin on a later line than the list itself:

./node_modules/typescript/lib/typescriptServices.js 141459                         var listIndentsChild = !!firstListChild && getStartLineAndCharacterForNode(firstListChild, sourceFile).line > containingListOrParentStart.line;

./node_modules/typescript/lib/typescriptServices.js 141470                     // increase indentation if parent node wants its content to be indented and parent and child nodes don't start on the same line

./node_modules/typescript/lib/typescriptServices.js 141482                     var useTrueStart = isArgumentAndStartLineOverlapsExpressionBeingCalled(parent, current, currentStart.line, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 141514                 // - parent and child are not on the same line

./node_modules/typescript/lib/typescriptServices.js 141528             function nextTokenIsCurlyBraceOnSameLineAsCursor(precedingToken, current, lineAtPosition, sourceFile) {

./node_modules/typescript/lib/typescriptServices.js 141538                     // close braces are indented at the parent level if they are located on the same line with cursor

./node_modules/typescript/lib/typescriptServices.js 141539                     // this means that if new line will be added at $ position, this case will be indented

./node_modules/typescript/lib/typescriptServices.js 141546                     var nextTokenStartLine = getStartLineAndCharacterForNode(nextToken, sourceFile).line;

./node_modules/typescript/lib/typescriptServices.js 141547                     return lineAtPosition === nextTokenStartLine ? 2 /* CloseBrace */ : 0 /* Unknown */;

./node_modules/typescript/lib/typescriptServices.js 141559                 var expressionOfCallExpressionEndLine = ts.getLineAndCharacterOfPosition(sourceFile, expressionOfCallExpressionEnd).line;

./node_modules/typescript/lib/typescriptServices.js 141567                     var elseKeywordStartLine = getStartLineAndCharacterForNode(elseKeyword, sourceFile).line;

./node_modules/typescript/lib/typescriptServices.js 141573             // A multiline conditional typically increases the indentation of its whenTrue and whenFalse children:

./node_modules/typescript/lib/typescriptServices.js 141579             // However, that indentation does not apply if the subexpressions themselves span multiple lines,

./node_modules/typescript/lib/typescriptServices.js 141585             //   whenTrue: 'multiline object literal'

./node_modules/typescript/lib/typescriptServices.js 141587             //   whenFalse('multiline parenthesized expression')

./node_modules/typescript/lib/typescriptServices.js 141592             // we check for the whenTrue branch beginning on the line that the condition ends, and the whenFalse

./node_modules/typescript/lib/typescriptServices.js 141593             // branch beginning on the line that the whenTrue branch ends.

./node_modules/typescript/lib/typescriptServices.js 141596                     var conditionEndLine = ts.getLineAndCharacterOfPosition(sourceFile, parent.condition.end).line;

./node_modules/typescript/lib/typescriptServices.js 141605                         //   ? 1 : (          L1: whenTrue indented because it's on a new line

./node_modules/typescript/lib/typescriptServices.js 141607                         //   );                   and one because of the parentheses spanning multiple lines

./node_modules/typescript/lib/typescriptServices.js 141608                         var trueStartLine = getStartLineAndCharacterForNode(parent.whenTrue, sourceFile).line;

./node_modules/typescript/lib/typescriptServices.js 141609                         var trueEndLine = ts.getLineAndCharacterOfPosition(sourceFile, parent.whenTrue.end).line;

./node_modules/typescript/lib/typescriptServices.js 141628                     var lineOfPreviousNode = ts.getLineAndCharacterOfPosition(sourceFile, previousNode.getEnd()).line;

./node_modules/typescript/lib/typescriptServices.js 141629                     if (childStartLine === lineOfPreviousNode) {

./node_modules/typescript/lib/typescriptServices.js 141721                 // walk toward the start of the list starting from current node and check if the line is the same for all items.

./node_modules/typescript/lib/typescriptServices.js 141722                 // if end line for item [i - 1] differs from the start line for item [i] - find column of the first non-whitespace character on the line of item [i]

./node_modules/typescript/lib/typescriptServices.js 141723                 var lineAndCharacter = getStartLineAndCharacterForNode(node, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 141728                     // skip list items that ends on the same line with the current list element

./node_modules/typescript/lib/typescriptServices.js 141729                     var prevEndLine = sourceFile.getLineAndCharacterOfPosition(list[i].end).line;

./node_modules/typescript/lib/typescriptServices.js 141730                     if (prevEndLine !== lineAndCharacter.line) {

./node_modules/typescript/lib/typescriptServices.js 141731                         return findColumnForFirstNonWhitespaceCharacterInLine(lineAndCharacter, sourceFile, options);

./node_modules/typescript/lib/typescriptServices.js 141733                     lineAndCharacter = getStartLineAndCharacterForNode(list[i], sourceFile);

./node_modules/typescript/lib/typescriptServices.js 141737             function findColumnForFirstNonWhitespaceCharacterInLine(lineAndCharacter, sourceFile, options) {

./node_modules/typescript/lib/typescriptServices.js 141738                 var lineStart = sourceFile.getPositionOfLineAndCharacter(lineAndCharacter.line, 0);

./node_modules/typescript/lib/typescriptServices.js 141739                 return findFirstNonWhitespaceColumn(lineStart, lineStart + lineAndCharacter.character, sourceFile, options);

./node_modules/typescript/lib/typescriptServices.js 141742              * Character is the actual index of the character since the beginning of the line.

./node_modules/typescript/lib/typescriptServices.js 141890                 var startLine = sourceFile.getLineAndCharacterOfPosition(rangeStart).line;

./node_modules/typescript/lib/typescriptServices.js 141891                 var endLine = sourceFile.getLineAndCharacterOfPosition(range.end).line;

./node_modules/typescript/lib/typescriptServices.js 141929              * if there are no line breaks between the node and the previous token,

./node_modules/typescript/lib/typescriptServices.js 141938              * Only delete trivia on the same line as getStart().

./node_modules/typescript/lib/typescriptServices.js 142007                 // full start and start of the node are on the same line

./node_modules/typescript/lib/typescriptServices.js 142025             // get start position of the line following the line that contains fullstart position

./node_modules/typescript/lib/typescriptServices.js 142029             // skip whitespaces/newlines

./node_modules/typescript/lib/typescriptServices.js 142033         /** Return the end position of a multiline comment of it is on another line; otherwise returns `undefined`; */

./node_modules/typescript/lib/typescriptServices.js 142034         function getEndPositionOfMultilineTrailingComment(sourceFile, node, options) {

./node_modules/typescript/lib/typescriptServices.js 142038                 // If the trailing comment is a multiline comment that extends to the next lines,

./node_modules/typescript/lib/typescriptServices.js 142045                         // Single line can break the loop as trivia will only be this line.

./node_modules/typescript/lib/typescriptServices.js 142046                         // Comments on subsequest lines are also ignored.

./node_modules/typescript/lib/typescriptServices.js 142050                         // Get the end line of the comment and compare against the end line of the node.

./node_modules/typescript/lib/typescriptServices.js 142051                         // If the comment end line position and the multiline comment extends to multiple lines,

./node_modules/typescript/lib/typescriptServices.js 142077             var multilineEndPosition = getEndPositionOfMultilineTrailingComment(sourceFile, node, options);

./node_modules/typescript/lib/typescriptServices.js 142078             if (multilineEndPosition) {

./node_modules/typescript/lib/typescriptServices.js 142079                 return multilineEndPosition;

./node_modules/typescript/lib/typescriptServices.js 142138                 // When deleting multiple nodes we need to track if the end position is including multiline trailing comments.

./node_modules/typescript/lib/typescriptServices.js 142144                     hasTrailingComment = !!getEndPositionOfMultilineTrailingComment(sourceFile, node, options);

./node_modules/typescript/lib/typescriptServices.js 142191                 return !!getEndPositionOfMultilineTrailingComment(sourceFile, oldNode, configurableEnd);

./node_modules/typescript/lib/typescriptServices.js 142249             ChangeTracker.prototype.insertCommentBeforeLine = function (sourceFile, lineNumber, position, commentText) {

./node_modules/typescript/lib/typescriptServices.js 142250                 var lineStartPosition = ts.getStartPositionOfLine(lineNumber, sourceFile);

./node_modules/typescript/lib/typescriptServices.js 142251                 var startPosition = ts.getFirstNonSpaceCharacterPosition(sourceFile.text, lineStartPosition);

./node_modules/typescript/lib/typescriptServices.js 142252                 // First try to see if we can put the comment on the previous line.

./node_modules/typescript/lib/typescriptServices.js 142255                 // Otherwise, add an extra new line immediately before the error span.

./node_modules/typescript/lib/typescriptServices.js 142258                 var indent = sourceFile.text.slice(lineStartPosition, startPosition);

./node_modules/typescript/lib/typescriptServices.js 142380              * new lines and must share the same indentation.

./node_modules/typescript/lib/typescriptServices.js 142388                         // each indented member must be on a new line

./node_modules/typescript/lib/typescriptServices.js 142412                 // - Always insert leading newline.

./node_modules/typescript/lib/typescriptServices.js 142418                 // - Only insert a trailing newline if body is single-line and there are no other insertions for the node.

./node_modules/typescript/lib/typescriptServices.js 142529                     // use next sibling as an anchor

./node_modules/typescript/lib/typescriptServices.js 142538                         // in multiline case it will work as

./node_modules/typescript/lib/typescriptServices.js 142558                     var multilineList = false;

./node_modules/typescript/lib/typescriptServices.js 142562                     // - determine if list is a multiline

./node_modules/typescript/lib/typescriptServices.js 142564                         // if list has only one element then we'll format is as multiline if node has comment in trailing trivia, or as singleline otherwise

./node_modules/typescript/lib/typescriptServices.js 142573                         // determine if list is multiline by checking lines of after element and element that precedes it.

./node_modules/typescript/lib/typescriptServices.js 142575                         multilineList = afterMinusOneStartLinePosition !== afterStartLinePosition;

./node_modules/typescript/lib/typescriptServices.js 142578                         // in this case we'll always treat containing list as multiline

./node_modules/typescript/lib/typescriptServices.js 142579                         multilineList = true;

./node_modules/typescript/lib/typescriptServices.js 142581                     if (multilineList) {

./node_modules/typescript/lib/typescriptServices.js 142586                         // insert element before the line break on the line that contains 'after' element

./node_modules/typescript/lib/typescriptServices.js 142743                 // strip initial indentation (spaces or tabs) if text will be inserted in the middle of the line

./node_modules/typescript/lib/typescriptServices.js 142779                     preserveSourceNewlines: true,

./node_modules/typescript/lib/typescriptServices.js 143019                     // There was a blank line between the last comment and this comment.

./node_modules/typescript/lib/typescriptServices.js 143021                     var commentLine = sourceFile.getLineAndCharacterOfPosition(range.pos).line;

./node_modules/typescript/lib/typescriptServices.js 143022                     var lastCommentEndLine = sourceFile.getLineAndCharacterOfPosition(lastComment.range.end).line;

./node_modules/typescript/lib/typescriptServices.js 143028                         firstNodeLine = sourceFile.getLineAndCharacterOfPosition(sourceFile.statements[0].getStart()).line;

./node_modules/typescript/lib/typescriptServices.js 143029                     var commentEndLine = sourceFile.getLineAndCharacterOfPosition(range.end).line;

./node_modules/typescript/lib/typescriptServices.js 143045                         if (position < text.length && charCode === 13 /* carriageReturn */ && text.charCodeAt(position) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescriptServices.js 144843             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typescriptServices.js 145055                 // useNonAdjustedEndPosition to ensure we don't eat the newline after the statement.

./node_modules/typescript/lib/typescriptServices.js 145245                             // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion

./node_modules/typescript/lib/typescriptServices.js 148504             // If label is on a separate line, just delete the rest of that line, but not the indentation of the labeled statement.

./node_modules/typescript/lib/typescriptServices.js 149885             var lineNumber = ts.getLineAndCharacterOfPosition(sourceFile, position).line;

./node_modules/typescript/lib/typescriptServices.js 149886             // Only need to add `// @ts-ignore` for a line once.

./node_modules/typescript/lib/typescriptServices.js 149887             if (!seenLines || ts.tryAddToSet(seenLines, lineNumber)) {

./node_modules/typescript/lib/typescriptServices.js 149888                 changes.insertCommentBeforeLine(sourceFile, lineNumber, position, " @ts-ignore");

./node_modules/typescript/lib/typescriptServices.js 150217             /*multiline*/ true);

./node_modules/typescript/lib/typescriptServices.js 152087                                     hasLeadingNewline: true,

./node_modules/typescript/lib/typescriptServices.js 153146                         // CONSIDER: could detect that each is on a separate line (See `extractConstant_VariableList_MultipleLines` in `extractConstants.ts`)

./node_modules/typescript/lib/typescriptServices.js 154013                 if (file && ts.isTupleTypeNode(node) && (ts.getLineAndCharacterOfPosition(file, node.pos).line === ts.getLineAndCharacterOfPosition(file, node.end).line)) {

./node_modules/typescript/lib/typescriptServices.js 154024             changes.insertNodeBefore(file, firstStatement, ts.ignoreSourceNewlines(newTypeNode), /* blankLineBetween */ true);

./node_modules/typescript/lib/typescriptServices.js 154035             changes.insertNodeBefore(file, firstStatement, ts.ignoreSourceNewlines(newTypeNode), /* blankLineBetween */ true);

./node_modules/typescript/lib/typescriptServices.js 156085             // eslint-disable-next-line debug-assert

./node_modules/typescript/lib/typescriptServices.js 156542                     doc = doc.length === 0 ? inheritedDocs.slice() : inheritedDocs.concat(ts.lineBreakPart(), doc);

./node_modules/typescript/lib/typescriptServices.js 156574         SourceFileObject.prototype.getPositionOfLineAndCharacter = function (line, character, allowEdits) {

./node_modules/typescript/lib/typescriptServices.js 156575             return ts.computePositionOfLineAndCharacter(ts.getLineStarts(this), line, character, this.text, allowEdits);

./node_modules/typescript/lib/typescriptServices.js 156578             var line = this.getLineAndCharacterOfPosition(pos).line;

./node_modules/typescript/lib/typescriptServices.js 156579             var lineStarts = this.getLineStarts();

./node_modules/typescript/lib/typescriptServices.js 156581             if (line + 1 >= lineStarts.length) {

./node_modules/typescript/lib/typescriptServices.js 156585                 lastCharPos = lineStarts[line + 1] - 1;

./node_modules/typescript/lib/typescriptServices.js 156588             // if the new line is "\r\n", we should return the last non-new-line-character position

./node_modules/typescript/lib/typescriptServices.js 157759                 lineStarts: sourceFile.getLineStarts(),

./node_modules/typescript/lib/typescriptServices.js 157760                 firstLine: sourceFile.getLineAndCharacterOfPosition(textRange.pos).line,

./node_modules/typescript/lib/typescriptServices.js 157761                 lastLine: sourceFile.getLineAndCharacterOfPosition(textRange.end).line

./node_modules/typescript/lib/typescriptServices.js 157767             var _a = getLinesForRange(sourceFile, textRange), lineStarts = _a.lineStarts, firstLine = _a.firstLine, lastLine = _a.lastLine;

./node_modules/typescript/lib/typescriptServices.js 157770             var lineTextStarts = new ts.Map();

./node_modules/typescript/lib/typescriptServices.js 157772             var isJsx = ts.isInsideJsxElement(sourceFile, lineStarts[firstLine]);

./node_modules/typescript/lib/typescriptServices.js 157774             // Check each line before any text changes.

./node_modules/typescript/lib/typescriptServices.js 157776                 var lineText = sourceFile.text.substring(lineStarts[i], sourceFile.getLineEndOfPosition(lineStarts[i]));

./node_modules/typescript/lib/typescriptServices.js 157777                 // Find the start of text and the left-most character. No-op on empty lines.

./node_modules/typescript/lib/typescriptServices.js 157778                 var regExec = firstNonWhitespaceCharacterRegex.exec(lineText);

./node_modules/typescript/lib/typescriptServices.js 157781                     lineTextStarts.set(i.toString(), regExec.index);

./node_modules/typescript/lib/typescriptServices.js 157782                     if (lineText.substr(regExec.index, openComment.length) !== openComment) {

./node_modules/typescript/lib/typescriptServices.js 157789                 // If the range is multiline and ends on a beginning of a line, don't comment/uncomment.

./node_modules/typescript/lib/typescriptServices.js 157790                 if (firstLine !== lastLine && lineStarts[i] === textRange.end) {

./node_modules/typescript/lib/typescriptServices.js 157793                 var lineTextStart = lineTextStarts.get(i.toString());

./node_modules/typescript/lib/typescriptServices.js 157794                 // If the line is not an empty line; otherwise no-op.

./node_modules/typescript/lib/typescriptServices.js 157795                 if (lineTextStart !== undefined) {

./node_modules/typescript/lib/typescriptServices.js 157797                         textChanges.push.apply(textChanges, toggleMultilineComment(fileName, { pos: lineStarts[i] + leftMostPosition, end: sourceFile.getLineEndOfPosition(lineStarts[i]) }, isCommenting, isJsx));

./node_modules/typescript/lib/typescriptServices.js 157804                                 start: lineStarts[i] + leftMostPosition

./node_modules/typescript/lib/typescriptServices.js 157808                     else if (sourceFile.text.substr(lineStarts[i] + lineTextStart, openComment.length) === openComment) {

./node_modules/typescript/lib/typescriptServices.js 157813                                 start: lineStarts[i] + lineTextStart

./node_modules/typescript/lib/typescriptServices.js 157821         function toggleMultilineComment(fileName, textRange, insertComment, isInsideJsx) {

./node_modules/typescript/lib/typescriptServices.js 157831             var openMultiline = isJsx ? "{/*" : "/*";

./node_modules/typescript/lib/typescriptServices.js 157832             var closeMultiline = isJsx ? "*/}" : "*/";

./node_modules/typescript/lib/typescriptServices.js 157833             var openMultilineRegex = isJsx ? "\\{\\/\\*" : "\\/\\*";

./node_modules/typescript/lib/typescriptServices.js 157834             var closeMultilineRegex = isJsx ? "\\*\\/\\}" : "\\*\\/";

./node_modules/typescript/lib/typescriptServices.js 157838                 var offset = text.substr(pos, openMultiline.length) === openMultiline ? openMultiline.length : 0;

./node_modules/typescript/lib/typescriptServices.js 157855                     var newPos = text.substring(pos, textRange.end).search("(" + openMultilineRegex + ")|(" + closeMultilineRegex + ")");

./node_modules/typescript/lib/typescriptServices.js 157859                     pos = newPos === -1 ? textRange.end + 1 : pos + newPos + closeMultiline.length;

./node_modules/typescript/lib/typescriptServices.js 157871                 if (text.substr(firstPos, openMultiline.length) !== openMultiline) {

./node_modules/typescript/lib/typescriptServices.js 157873                         newText: openMultiline,

./node_modules/typescript/lib/typescriptServices.js 157882                     if (text.substr(positions[i] - closeMultiline.length, closeMultiline.length) !== closeMultiline) {

./node_modules/typescript/lib/typescriptServices.js 157884                             newText: closeMultiline,

./node_modules/typescript/lib/typescriptServices.js 157891                     if (text.substr(positions[i], openMultiline.length) !== openMultiline) {

./node_modules/typescript/lib/typescriptServices.js 157893                             newText: openMultiline,

./node_modules/typescript/lib/typescriptServices.js 157904                         newText: closeMultiline,

./node_modules/typescript/lib/typescriptServices.js 157916                     var from = pos_2 - closeMultiline.length > 0 ? pos_2 - closeMultiline.length : 0;

./node_modules/typescript/lib/typescriptServices.js 157917                     var offset = text.substr(from, closeMultiline.length) === closeMultiline ? closeMultiline.length : 0;

./node_modules/typescript/lib/typescriptServices.js 157921                             length: openMultiline.length,

./node_modules/typescript/lib/typescriptServices.js 157932             // If there is a selection that is on the same line, add multiline.

./node_modules/typescript/lib/typescriptServices.js 157934                 ? toggleMultilineComment(fileName, textRange, /*insertComment*/ true)

./node_modules/typescript/lib/typescriptServices.js 157955                             textChanges.push.apply(textChanges, toggleMultilineComment(fileName, { end: commentRange.end, pos: commentRange.pos + 1 }, /*insertComment*/ false));

./node_modules/typescript/lib/typescriptServices.js 158069                 // text up to the end of the line (or */).

./node_modules/typescript/lib/typescriptServices.js 158073                 // match the literal portion up to the end of the line or end of comment.

./node_modules/typescript/lib/typescriptServices.js 158084                 //  'm' is so we can find matches in a multi-line input.

./node_modules/typescript/lib/typescriptServices.js 158146                 return { line: 0, character: 0 };

./node_modules/typescript/lib/typescriptServices.js 158235             toggleMultilineComment: toggleMultilineComment,

./node_modules/typescript/lib/typescriptServices.js 158398             var lineOfPosition = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/typescriptServices.js 158399             if (sourceFile.getLineAndCharacterOfPosition(tokenAtLocation.getStart(sourceFile)).line > lineOfPosition) {

./node_modules/typescript/lib/typescriptServices.js 158400                 // Get previous token if the token is returned starts on new line

./node_modules/typescript/lib/typescriptServices.js 158403                 // token at position will return let keyword on second line as the token but we would like to use

./node_modules/typescript/lib/typescriptServices.js 158404                 // token on same line if trailing trivia (comments or white spaces on same line) part of the last token on that line

./node_modules/typescript/lib/typescriptServices.js 158406                 // It's a blank line

./node_modules/typescript/lib/typescriptServices.js 158407                 if (!preceding || sourceFile.getLineAndCharacterOfPosition(preceding.getEnd()).line !== lineOfPosition) {

./node_modules/typescript/lib/typescriptServices.js 158428                 if (node && lineOfPosition === sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line) {

./node_modules/typescript/lib/typescriptServices.js 158780                         // Set on parent if on same line otherwise on first statement

./node_modules/typescript/lib/typescriptServices.js 158786                         // Set span on previous token if it starts on same line otherwise on the first statement of the block

./node_modules/typescript/lib/typescriptServices.js 159022 var debugObjectHost = (function () { return this; })(); // eslint-disable-line prefer-const

./node_modules/typescript/lib/typescriptServices.js 159121             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 159307             this.languageService = null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 159313             this.logger = null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 159321             this.forwardJSONCall("refresh(" + throwOnError + ")", function () { return null; } // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 159328                 return null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescriptServices.js 159606         LanguageServiceShimObject.prototype.toggleMultilineComment = function (fileName, textRange) {

./node_modules/typescript/lib/typescriptServices.js 159608             return this.forwardJSONCall("toggleMultilineComment('" + fileName + "', '" + JSON.stringify(textRange) + "')", function () { return _this.languageService.toggleMultilineComment(fileName, textRange); });

./node_modules/typescript/lib/typescriptServices.js 159839         // The previous line should have made `globalThis` globally

./node_modules/typescript/lib/typescriptServices.js 160536         // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typescript.js 294     // The following is baselined as a literal template type without intervention

./node_modules/typescript/lib/typescript.js 296     // eslint-disable-next-line @typescript-eslint/no-inferrable-types

./node_modules/typescript/lib/typescript.js 313             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typescript.js 322             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typescript.js 2421      * Removes the leading and trailing white space and line terminator characters from a string.

./node_modules/typescript/lib/typescript.js 2589             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescript.js 2601          * @deprecated Use `checkDefined` to check whether a value is defined inline. Use `assertIsDefined` to check whether

./node_modules/typescript/lib/typescript.js 2618          * @deprecated Use `checkEachDefined` to check whether the elements of an array are defined inline. Use `assertEachIsDefined` to check whether

./node_modules/typescript/lib/typescript.js 2790             if (!("__debugFlowFlags" in flowNode)) { // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typescript.js 2836             if (!("__tsDebuggerDisplay" in array)) { // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typescript.js 3467     // eslint-disable-next-line @typescript-eslint/naming-convention

./node_modules/typescript/lib/typescript.js 3784                 + [__assign({ name: "process_name", args: { name: "tsc" } }, meta), __assign({ name: "thread_name", args: { name: "Main" } }, meta), __assign(__assign({ name: "TracingStartedInBrowser" }, meta), { cat: "disabled-by-default-devtools.timeline" })]

./node_modules/typescript/lib/typescript.js 3892                     line: lc.line + 1,

./node_modules/typescript/lib/typescript.js 3903             // Cleverness: no line break here so that the type ID will match the line number

./node_modules/typescript/lib/typescript.js 4017         // We detect and preserve #! on the first line

./node_modules/typescript/lib/typescript.js 4677         NodeBuilderFlags[NodeBuilderFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";

./node_modules/typescript/lib/typescript.js 4718         TypeFormatFlags[TypeFormatFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";

./node_modules/typescript/lib/typescript.js 5397         CharacterCodes[CharacterCodes["lineFeed"] = 10] = "lineFeed";

./node_modules/typescript/lib/typescript.js 5399         CharacterCodes[CharacterCodes["lineSeparator"] = 8232] = "lineSeparator";

./node_modules/typescript/lib/typescript.js 5644         /*@internal*/ EmitFlags[EmitFlags["IgnoreSourceNewlines"] = 134217728] = "IgnoreSourceNewlines";

./node_modules/typescript/lib/typescript.js 5816          * Single line comment of the form

./node_modules/typescript/lib/typescript.js 5823          * Multiline non-jsdoc pragma of the form

./node_modules/typescript/lib/typescript.js 6590      * Called for command-line and server use cases.

./node_modules/typescript/lib/typescript.js 6969     ts.sysLog = ts.noop; // eslint-disable-line prefer-const

./node_modules/typescript/lib/typescript.js 7396     // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/typescript.js 8964         Option_project_cannot_be_mixed_with_source_files_on_a_command_line: diag(5042, ts.DiagnosticCategory.Error, "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042", "Option 'project' cannot be mixed with source files on a command line."),

./node_modules/typescript/lib/typescript.js 8967         Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: diag(5051, ts.DiagnosticCategory.Error, "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051", "Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided."),

./node_modules/typescript/lib/typescript.js 9036         Insert_command_line_options_and_files_from_a_file: diag(6030, ts.DiagnosticCategory.Message, "Insert_command_line_options_and_files_from_a_file_6030", "Insert command line options and files from a file."),

./node_modules/typescript/lib/typescript.js 9061         Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: diag(6060, ts.DiagnosticCategory.Message, "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060", "Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)."),

./node_modules/typescript/lib/typescript.js 9063         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line: diag(6064, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'null' on command line."),

./node_modules/typescript/lib/typescript.js 9148         Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap_to_be_set: diag(6152, ts.DiagnosticCategory.Message, "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152", "Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set."),

./node_modules/typescript/lib/typescript.js 9167         Command_line_Options: diag(6171, ts.DiagnosticCategory.Message, "Command_line_Options_6171", "Command-line Options"),

./node_modules/typescript/lib/typescript.js 9216         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line: diag(6230, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'false' or 'null' on command line."),

./node_modules/typescript/lib/typescript.js 9270         Option_build_must_be_the_first_command_line_argument: diag(6369, ts.DiagnosticCategory.Error, "Option_build_must_be_the_first_command_line_argument_6369", "Option '--build' must be the first command line argument."),

./node_modules/typescript/lib/typescript.js 9362         Set_the_newline_character_for_emitting_files: diag(6659, ts.DiagnosticCategory.Message, "Set_the_newline_character_for_emitting_files_6659", "Set the newline character for emitting files."),

./node_modules/typescript/lib/typescript.js 9953      * Test for whether a single line comment with leading whitespace trimmed's text contains a directive.

./node_modules/typescript/lib/typescript.js 9957      * Test for whether a multi-line comment with leading whitespace trimmed's last line contains a directive.

./node_modules/typescript/lib/typescript.js 10019         var lineStart = 0;

./node_modules/typescript/lib/typescript.js 10025                     if (text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescript.js 10029                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typescript.js 10030                     result.push(lineStart);

./node_modules/typescript/lib/typescript.js 10031                     lineStart = pos;

./node_modules/typescript/lib/typescript.js 10035                         result.push(lineStart);

./node_modules/typescript/lib/typescript.js 10036                         lineStart = pos;

./node_modules/typescript/lib/typescript.js 10041         result.push(lineStart);

./node_modules/typescript/lib/typescript.js 10045     function getPositionOfLineAndCharacter(sourceFile, line, character, allowEdits) {

./node_modules/typescript/lib/typescript.js 10047             sourceFile.getPositionOfLineAndCharacter(line, character, allowEdits) :

./node_modules/typescript/lib/typescript.js 10048             computePositionOfLineAndCharacter(getLineStarts(sourceFile), line, character, sourceFile.text, allowEdits);

./node_modules/typescript/lib/typescript.js 10052     function computePositionOfLineAndCharacter(lineStarts, line, character, debugText, allowEdits) {

./node_modules/typescript/lib/typescript.js 10053         if (line < 0 || line >= lineStarts.length) {

./node_modules/typescript/lib/typescript.js 10055                 // Clamp line to nearest allowable value

./node_modules/typescript/lib/typescript.js 10056                 line = line < 0 ? 0 : line >= lineStarts.length ? lineStarts.length - 1 : line;

./node_modules/typescript/lib/typescript.js 10059                 ts.Debug.fail("Bad line number. Line: " + line + ", lineStarts.length: " + lineStarts.length + " , line map is correct? " + (debugText !== undefined ? ts.arraysEqual(lineStarts, computeLineStarts(debugText)) : "unknown"));

./node_modules/typescript/lib/typescript.js 10062         var res = lineStarts[line] + character;

./node_modules/typescript/lib/typescript.js 10067             return res > lineStarts[line + 1] ? lineStarts[line + 1] : typeof debugText === "string" && res > debugText.length ? debugText.length : res;

./node_modules/typescript/lib/typescript.js 10069         if (line < lineStarts.length - 1) {

./node_modules/typescript/lib/typescript.js 10070             ts.Debug.assert(res < lineStarts[line + 1]);

./node_modules/typescript/lib/typescript.js 10073             ts.Debug.assert(res <= debugText.length); // Allow single character overflow for trailing newline

./node_modules/typescript/lib/typescript.js 10080         return sourceFile.lineMap || (sourceFile.lineMap = computeLineStarts(sourceFile.text));

./node_modules/typescript/lib/typescript.js 10084     function computeLineAndCharacterOfPosition(lineStarts, position) {

./node_modules/typescript/lib/typescript.js 10085         var lineNumber = computeLineOfPosition(lineStarts, position);

./node_modules/typescript/lib/typescript.js 10087             line: lineNumber,

./node_modules/typescript/lib/typescript.js 10088             character: position - lineStarts[lineNumber]

./node_modules/typescript/lib/typescript.js 10094      * We assume the first line starts at position 0 and 'position' is non-negative.

./node_modules/typescript/lib/typescript.js 10096     function computeLineOfPosition(lineStarts, position, lowerBound) {

./node_modules/typescript/lib/typescript.js 10097         var lineNumber = ts.binarySearch(lineStarts, position, ts.identity, ts.compareValues, lowerBound);

./node_modules/typescript/lib/typescript.js 10098         if (lineNumber < 0) {

./node_modules/typescript/lib/typescript.js 10100             // the binary search returns the 2's-complement of the next line start

./node_modules/typescript/lib/typescript.js 10101             // e.g. if the line starts at [5, 10, 23, 80] and the position requested was 20

./node_modules/typescript/lib/typescript.js 10104             // We want the index of the previous line start, so we subtract 1.

./node_modules/typescript/lib/typescript.js 10106             lineNumber = ~lineNumber - 1;

./node_modules/typescript/lib/typescript.js 10107             ts.Debug.assert(lineNumber !== -1, "position cannot precede the beginning of the file");

./node_modules/typescript/lib/typescript.js 10109         return lineNumber;

./node_modules/typescript/lib/typescript.js 10116         var lineStarts = getLineStarts(sourceFile);

./node_modules/typescript/lib/typescript.js 10120         var lowerLine = computeLineOfPosition(lineStarts, lower);

./node_modules/typescript/lib/typescript.js 10121         var upperLine = computeLineOfPosition(lineStarts, upper, lowerLine);

./node_modules/typescript/lib/typescript.js 10133     /** Does not include line breaks. For that, see isWhiteSpaceLike. */

./node_modules/typescript/lib/typescript.js 10136         // It is explicitly not a line-break as it isn't in the exact set specified by EcmaScript.

./node_modules/typescript/lib/typescript.js 10153         // The ECMAScript line terminator characters are listed in Table 3.

./node_modules/typescript/lib/typescript.js 10160         // Only the characters in Table 3 are treated as line terminators. Other new line or line

./node_modules/typescript/lib/typescript.js 10161         // breaking characters are treated as white space but not as line terminators.

./node_modules/typescript/lib/typescript.js 10162         return ch === 10 /* lineFeed */ ||

./node_modules/typescript/lib/typescript.js 10164             ch === 8232 /* lineSeparator */ ||

./node_modules/typescript/lib/typescript.js 10187             case 10 /* lineFeed */:

./node_modules/typescript/lib/typescript.js 10220                     if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescript.js 10224                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typescript.js 10305         // Conflict markers must be at the start of a line.

./node_modules/typescript/lib/typescript.js 10363      * Single-line comment ranges include the leading double-slash characters but not the ending

./node_modules/typescript/lib/typescript.js 10364      * line break. Multi-line comment ranges include the leading slash-asterisk and trailing

./node_modules/typescript/lib/typescript.js 10371      * @param trailing If false, whitespace is skipped until the first line break and comments

./node_modules/typescript/lib/typescript.js 10373      *      between the given position and the next line break are returned.

./node_modules/typescript/lib/typescript.js 10399                     if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescript.js 10403                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typescript.js 10876                     if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescript.js 10975                 // when encountering a LineContinuation (i.e. a backslash and a line terminator sequence),

./node_modules/typescript/lib/typescript.js 10976                 // the line terminator is interpreted to be "the empty code unit sequence".

./node_modules/typescript/lib/typescript.js 10978                     if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescript.js 10982                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typescript.js 10983                 case 8232 /* lineSeparator */:

./node_modules/typescript/lib/typescript.js 11183                     case 10 /* lineFeed */:

./node_modules/typescript/lib/typescript.js 11191                             if (ch === 13 /* carriageReturn */ && pos + 1 < end && text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescript.js 11283                             // decoration at the start of a JSDoc comment line

./node_modules/typescript/lib/typescript.js 11320                         // Single-line comment

./node_modules/typescript/lib/typescript.js 11337                         // Multi-line comment

./node_modules/typescript/lib/typescript.js 11666                     // If we reach the end of a file, or hit a newline, then this is an unterminated

./node_modules/typescript/lib/typescript.js 11710         function appendIfCommentDirective(commentDirectives, text, commentDirectiveRegEx, lineStart) {

./node_modules/typescript/lib/typescript.js 11716                 range: { pos: lineStart, end: pos },

./node_modules/typescript/lib/typescript.js 11745         function reScanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/typescript.js 11746             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/typescript.js 11748             return token = scanJsxToken(allowMultilineJsxText);

./node_modules/typescript/lib/typescript.js 11769         function scanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/typescript.js 11770             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/typescript.js 11788             // First non-whitespace character on this line.

./node_modules/typescript/lib/typescript.js 11790             // These initial values are special because the first line is:

./node_modules/typescript/lib/typescript.js 11810                 // FirstNonWhitespace is 0, then we only see whitespaces so far. If we see a linebreak, we want to ignore that whitespaces.

./node_modules/typescript/lib/typescript.js 11819                 else if (!allowMultilineJsxText && isLineBreak(char) && firstNonWhitespace > 0) {

./node_modules/typescript/lib/typescript.js 11820                     // Stop JsxText on each line during formatting. This allows the formatter to

./node_modules/typescript/lib/typescript.js 11821                     // indent each line correctly.

./node_modules/typescript/lib/typescript.js 11905                     if (text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescript.js 11909                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typescript.js 12214     ts.unchangedTextChangeRange = createTextChangeRange(createTextSpan(0, 0), 0); // eslint-disable-line prefer-const

./node_modules/typescript/lib/typescript.js 12279             // which if the two $'s precedes the other, and we move that one forward until they line up.  in this case that

./node_modules/typescript/lib/typescript.js 13963     function guessIndentation(lines) {

./node_modules/typescript/lib/typescript.js 13965         for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {

./node_modules/typescript/lib/typescript.js 13966             var line = lines_1[_i];

./node_modules/typescript/lib/typescript.js 13967             if (!line.length) {

./node_modules/typescript/lib/typescript.js 13971             for (; i < line.length && i < indentation; i++) {

./node_modules/typescript/lib/typescript.js 13972                 if (!ts.isWhiteSpaceLike(line.charCodeAt(i))) {

./node_modules/typescript/lib/typescript.js 14072             // Completely ignore indentation for string writers.  And map newlines to

./node_modules/typescript/lib/typescript.js 14275     function getStartPositionOfLine(line, sourceFile) {

./node_modules/typescript/lib/typescript.js 14276         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/typescript.js 14277         return ts.getLineStarts(sourceFile)[line];

./node_modules/typescript/lib/typescript.js 14284         return file.fileName + "(" + (loc.line + 1) + "," + (loc.character + 1) + ")";

./node_modules/typescript/lib/typescript.js 14287     function getEndLinePosition(line, sourceFile) {

./node_modules/typescript/lib/typescript.js 14288         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/typescript.js 14289         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/typescript.js 14290         var lineIndex = line;

./node_modules/typescript/lib/typescript.js 14292         if (lineIndex + 1 === lineStarts.length) {

./node_modules/typescript/lib/typescript.js 14293             // last line - return EOF

./node_modules/typescript/lib/typescript.js 14297             // current line start

./node_modules/typescript/lib/typescript.js 14298             var start = lineStarts[lineIndex];

./node_modules/typescript/lib/typescript.js 14299             // take the start position of the next line - 1 = it should be some line break

./node_modules/typescript/lib/typescript.js 14300             var pos = lineStarts[lineIndex + 1] - 1;

./node_modules/typescript/lib/typescript.js 14302             // walk backwards skipping line breaks, stop the the beginning of current line.

./node_modules/typescript/lib/typescript.js 14305             // $ <- end of line for this position should match the start position

./node_modules/typescript/lib/typescript.js 14423             "" + ts.getLineAndCharacterOfPosition(sourceFile, commentDirective.range.end).line,

./node_modules/typescript/lib/typescript.js 14431                 var line = _a[0], directive = _a[1];

./node_modules/typescript/lib/typescript.js 14432                 return directive.type === 0 /* ExpectError */ && !usedLines.get(line);

./node_modules/typescript/lib/typescript.js 14439         function markUsed(line) {

./node_modules/typescript/lib/typescript.js 14440             if (!directivesByLine.has("" + line)) {

./node_modules/typescript/lib/typescript.js 14443             usedLines.set("" + line, true);

./node_modules/typescript/lib/typescript.js 14499             // strip space + asterisk at line start

./node_modules/typescript/lib/typescript.js 14500             text = text.split(/\r\n|\n|\r/).map(function (line) { return ts.trimStringStart(line.replace(/^\s*\*/, "")); }).join("\n");

./node_modules/typescript/lib/typescript.js 14549                 String: ["codePointAt", "includes", "endsWith", "normalize", "repeat", "startsWith", "anchor", "big", "blink", "bold", "fixed", "fontcolor", "fontsize", "italics", "link", "small", "strike", "sub", "sup"],

./node_modules/typescript/lib/typescript.js 15041             var startLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.pos).line;

./node_modules/typescript/lib/typescript.js 15042             var endLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.end).line;

./node_modules/typescript/lib/typescript.js 15044                 // The arrow function spans multiple lines,

./node_modules/typescript/lib/typescript.js 15045                 // make the error span be the first line, inclusive.

./node_modules/typescript/lib/typescript.js 17665     // This consists of the first 19 unprintable ASCII characters, canonical escapes, lineSeparator,

./node_modules/typescript/lib/typescript.js 17666     // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in

./node_modules/typescript/lib/typescript.js 17672     // Template strings preserve simple LF newlines, still encode CRLF (or CR)

./node_modules/typescript/lib/typescript.js 17709      * but augmented for a few select characters (e.g. lineSeparator, paragraphSeparator, nextLine)

./node_modules/typescript/lib/typescript.js 17729     // This consists of the first 19 unprintable ASCII characters, JSX canonical escapes, lineSeparator,

./node_modules/typescript/lib/typescript.js 17730     // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in

./node_modules/typescript/lib/typescript.js 17795         var lineStart;

./node_modules/typescript/lib/typescript.js 17796         var lineCount;

./node_modules/typescript/lib/typescript.js 17797         var linePos;

./node_modules/typescript/lib/typescript.js 17800             var lineStartsOfS = ts.computeLineStarts(s);

./node_modules/typescript/lib/typescript.js 17801             if (lineStartsOfS.length > 1) {

./node_modules/typescript/lib/typescript.js 17802                 lineCount = lineCount + lineStartsOfS.length - 1;

./node_modules/typescript/lib/typescript.js 17803                 linePos = output.length - s.length + ts.last(lineStartsOfS);

./node_modules/typescript/lib/typescript.js 17804                 lineStart = (linePos - output.length) === 0;

./node_modules/typescript/lib/typescript.js 17807                 lineStart = false;

./node_modules/typescript/lib/typescript.js 17812                 if (lineStart) {

./node_modules/typescript/lib/typescript.js 17814                     lineStart = false;

./node_modules/typescript/lib/typescript.js 17833             lineStart = true;

./node_modules/typescript/lib/typescript.js 17834             lineCount = 0;

./node_modules/typescript/lib/typescript.js 17835             linePos = 0;

./node_modules/typescript/lib/typescript.js 17851             if (!lineStart || force) {

./node_modules/typescript/lib/typescript.js 17853                 lineCount++;

./node_modules/typescript/lib/typescript.js 17854                 linePos = output.length;

./node_modules/typescript/lib/typescript.js 17855                 lineStart = true;

./node_modules/typescript/lib/typescript.js 17860             return lineStart ? output.length : (output.length + newLine.length);

./node_modules/typescript/lib/typescript.js 17872             getLine: function () { return lineCount; },

./node_modules/typescript/lib/typescript.js 17873             getColumn: function () { return lineStart ? indent * getIndentSize() : output.length - linePos; },

./node_modules/typescript/lib/typescript.js 17875             isAtStartOfLine: function () { return lineStart; },

./node_modules/typescript/lib/typescript.js 18099         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/typescript.js 18100         return ts.computeLineOfPosition(lineStarts, pos);

./node_modules/typescript/lib/typescript.js 18103     function getLineOfLocalPositionFromLineMap(lineMap, pos) {

./node_modules/typescript/lib/typescript.js 18104         return ts.computeLineOfPosition(lineMap, pos);

./node_modules/typescript/lib/typescript.js 18250     function emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments) {

./node_modules/typescript/lib/typescript.js 18251         emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, node.pos, leadingComments);

./node_modules/typescript/lib/typescript.js 18254     function emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, pos, leadingComments) {

./node_modules/typescript/lib/typescript.js 18255         // If the leading comments start on different line than the start of node, write new line

./node_modules/typescript/lib/typescript.js 18257             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, leadingComments[0].pos)) {

./node_modules/typescript/lib/typescript.js 18262     function emitNewLineBeforeLeadingCommentOfPosition(lineMap, writer, pos, commentPos) {

./node_modules/typescript/lib/typescript.js 18263         // If the leading comments start on different line than the start of node, write new line

./node_modules/typescript/lib/typescript.js 18265             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, commentPos)) {

./node_modules/typescript/lib/typescript.js 18270     function emitComments(text, lineMap, writer, comments, leadingSeparator, trailingSeparator, newLine, writeComment) {

./node_modules/typescript/lib/typescript.js 18282                 writeComment(text, lineMap, writer, comment.pos, comment.end, newLine);

./node_modules/typescript/lib/typescript.js 18300     function emitDetachedComments(text, lineMap, writer, writeComment, node, newLine, removeComments) {

./node_modules/typescript/lib/typescript.js 18323                     var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, lastComment.end);

./node_modules/typescript/lib/typescript.js 18324                     var commentLine = getLineOfLocalPositionFromLineMap(lineMap, comment.pos);

./node_modules/typescript/lib/typescript.js 18326                         // There was a blank line between the last comment and this comment.  This

./node_modules/typescript/lib/typescript.js 18337                 // sure there is at least one blank line between it and the node.  If not, it's not

./node_modules/typescript/lib/typescript.js 18339                 var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, ts.last(detachedComments).end);

./node_modules/typescript/lib/typescript.js 18340                 var nodeLine = getLineOfLocalPositionFromLineMap(lineMap, ts.skipTrivia(text, node.pos));

./node_modules/typescript/lib/typescript.js 18343                     emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments);

./node_modules/typescript/lib/typescript.js 18344                     emitComments(text, lineMap, writer, detachedComments, /*leadingSeparator*/ false, /*trailingSeparator*/ true, newLine, writeComment);

./node_modules/typescript/lib/typescript.js 18355     function writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/typescript.js 18357             var firstCommentLineAndCharacter = ts.computeLineAndCharacterOfPosition(lineMap, commentPos);

./node_modules/typescript/lib/typescript.js 18358             var lineCount = lineMap.length;

./node_modules/typescript/lib/typescript.js 18360             for (var pos = commentPos, currentLine = firstCommentLineAndCharacter.line; pos < commentEnd; currentLine++) {

./node_modules/typescript/lib/typescript.js 18361                 var nextLineStart = (currentLine + 1) === lineCount

./node_modules/typescript/lib/typescript.js 18363                     : lineMap[currentLine + 1];

./node_modules/typescript/lib/typescript.js 18365                     // If we are not emitting first line, we need to write the spaces to adjust the alignment

./node_modules/typescript/lib/typescript.js 18367                         firstCommentLineIndent = calculateIndent(text, lineMap[firstCommentLineAndCharacter.line], commentPos);

./node_modules/typescript/lib/typescript.js 18374                     //         /* starts at character 9 this is line 1

./node_modules/typescript/lib/typescript.js 18375                     //    * starts at character pos 4 line                        --1  = 8 - 8 + 3

./node_modules/typescript/lib/typescript.js 18380                     //     /* this is line 1 -- Assume current writer indent 8

./node_modules/typescript/lib/typescript.js 18381                     //      * line                                                --3 = 8 - 4 + 5

./node_modules/typescript/lib/typescript.js 18402                 // Write the comment line text

./node_modules/typescript/lib/typescript.js 18408             // Single line comment of style //....

./node_modules/typescript/lib/typescript.js 18424             // Empty string - make sure we write empty line

./node_modules/typescript/lib/typescript.js 18917     var lineFeed = "\n";

./node_modules/typescript/lib/typescript.js 18923                 return lineFeed;

./node_modules/typescript/lib/typescript.js 19461     // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/typescript.js 20495         // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescript.js 21905             inlineExpressions: inlineExpressions,

./node_modules/typescript/lib/typescript.js 23701             // eslint-disable-next-line no-undef-init

./node_modules/typescript/lib/typescript.js 25972         function inlineExpressions(expressions) {

./node_modules/typescript/lib/typescript.js 26352                 // tslint:disable-next-line no-invalid-template-strings

./node_modules/typescript/lib/typescript.js 26356                 // tslint:disable-next-line no-invalid-template-strings

./node_modules/typescript/lib/typescript.js 26705     // tslint:disable-next-line variable-name

./node_modules/typescript/lib/typescript.js 27034     function ignoreSourceNewlines(node) {

./node_modules/typescript/lib/typescript.js 27035         getOrCreateEmitNode(node).flags |= 134217728 /* IgnoreSourceNewlines */;

./node_modules/typescript/lib/typescript.js 27038     ts.ignoreSourceNewlines = ignoreSourceNewlines;

./node_modules/typescript/lib/typescript.js 29593     function createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState) {

./node_modules/typescript/lib/typescript.js 29595         return trampoline;

./node_modules/typescript/lib/typescript.js 29596         function trampoline(node, outerState) {

./node_modules/typescript/lib/typescript.js 29609     ts.createBinaryExpressionTrampoline = createBinaryExpressionTrampoline;

./node_modules/typescript/lib/typescript.js 30765             // code from createNode is inlined here so createNode won't have to deal with special case of creating source files

./node_modules/typescript/lib/typescript.js 30913         // reason about this side effect).  Mainstream VMs inline simple functions like this, so

./node_modules/typescript/lib/typescript.js 32064             // Note: the newlines are important here.  For example, if that above code

./node_modules/typescript/lib/typescript.js 32073             // line terminator after the identifier or keyword.

./node_modules/typescript/lib/typescript.js 33351                 // if the next token is not on the same line as yield.  or we don't have an '*' or

./node_modules/typescript/lib/typescript.js 34917             // directly as that might consume an expression on the following line.

./node_modules/typescript/lib/typescript.js 35019                     // however, an identifier cannot be followed by another identifier on the same line. This is what we

./node_modules/typescript/lib/typescript.js 35029                     // as the identifier 'namespace' on one line followed by the identifier 'n' on another.

./node_modules/typescript/lib/typescript.js 35637                 // We need to ensure that any subsequent modifiers appear on the same line

./node_modules/typescript/lib/typescript.js 36316                     // + 1 because the last index of \n is always one index before the first character in the line and coincidentally, if there is no \n before start, it is -1, which is also one index before the first character

./node_modules/typescript/lib/typescript.js 36340                                     // NOTE: According to usejsdoc.org, a tag goes to end of line, except the last tag.

./node_modules/typescript/lib/typescript.js 36341                                     // Real-world comments may break this rule, so "BeginningOfLine" will not be a real line beginning

./node_modules/typescript/lib/typescript.js 36358                                     // If we've already seen an asterisk, then we can no longer parse a tag on this line

./node_modules/typescript/lib/typescript.js 36363                                     // Ignore the first asterisk on a line

./node_modules/typescript/lib/typescript.js 36388                                         removeLeadingNewlines(comments);

./node_modules/typescript/lib/typescript.js 36399                                 // wasn't a tag, we can no longer parse a tag on this line until we hit the next

./node_modules/typescript/lib/typescript.js 36400                                 // line break.

./node_modules/typescript/lib/typescript.js 36416                 function removeLeadingNewlines(comments) {

./node_modules/typescript/lib/typescript.js 36427                     // We must use infinite lookahead, as there could be any number of newlines :(

./node_modules/typescript/lib/typescript.js 36653                     removeLeadingNewlines(comments);

./node_modules/typescript/lib/typescript.js 37095                     //   > Multiple bounded generics cannot be declared on the same line. For the sake of clarity, if multiple templates share the same

./node_modules/typescript/lib/typescript.js 37096                     //   > type bound they must be declared on separate lines.

./node_modules/typescript/lib/typescript.js 37828             var multiLinePragmaRegEx = /@(\S+)(\s+.*)?$/gim; // Defined inline since it uses the "g" flag, which keeps a persistent index (for iterating)

./node_modules/typescript/lib/typescript.js 37979      * A map of lib names to lib files. This map is used both for parsing the "lib" command line

./node_modules/typescript/lib/typescript.js 38060             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 38074             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 38172             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 38210             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 38218             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 38225             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 38234             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 38243             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 38250             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 38257             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 38743             name: "inlineSourceMap",

./node_modules/typescript/lib/typescript.js 38751             name: "inlineSources",

./node_modules/typescript/lib/typescript.js 38857             description: ts.Diagnostics.Set_the_newline_character_for_emitting_files,

./node_modules/typescript/lib/typescript.js 39088             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 39095             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 39102             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 39108             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typescript.js 39335                     errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line, opt.name));

./node_modules/typescript/lib/typescript.js 39339                 errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line, opt.name));

./node_modules/typescript/lib/typescript.js 39345             // Check to see if no argument was provided (e.g. "--locale" is the last command-line argument).

./node_modules/typescript/lib/typescript.js 39761                     return validateValue(/*value*/ null); // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescript.js 39920         // There is a typeMap associated with this command-line option so use it to map value back to its name

./node_modules/typescript/lib/typescript.js 39939                 // tsconfig only options cannot be specified via command line,

./node_modules/typescript/lib/typescript.js 39941                 if (optionsNameMap.has(name) && (optionsNameMap.get(name).category === ts.Diagnostics.Command_line_Options || optionsNameMap.get(name).category === ts.Diagnostics.Output_Formatting)) {

./node_modules/typescript/lib/typescript.js 39963                             // There is a typeMap associated with this command-line option so use it to map value back to its name

./node_modules/typescript/lib/typescript.js 39976      * Generate tsconfig configuration when running command line "--init"

./node_modules/typescript/lib/typescript.js 39977      * @param options commandlineOptions to be generated into tsconfig.json

./node_modules/typescript/lib/typescript.js 40010             var categoriesToSkip = [ts.Diagnostics.Command_line_Options, ts.Diagnostics.Editor_Support, ts.Diagnostics.Compiler_Diagnostics, ts.Diagnostics.Backwards_Compatibility, ts.Diagnostics.Watch_and_Build_Modes, ts.Diagnostics.Output_Formatting];

./node_modules/typescript/lib/typescript.js 40136         return x === undefined || x === null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescript.js 40638      * NOTE: used \ in place of / above to avoid issues with multiline comments.

./node_modules/typescript/lib/typescript.js 40650      * NOTE: used \ in place of / above to avoid issues with multiline comments.

./node_modules/typescript/lib/typescript.js 41045         if (typeof value !== typeOfTag || value === null) { // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescript.js 41047                 // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescript.js 41329                             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescript.js 42231                 // When baseUrl is not specified, the command line parser resolves relative paths to the config file location.

./node_modules/typescript/lib/typescript.js 43758             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, /*foldState*/ undefined);

./node_modules/typescript/lib/typescript.js 44327                     // typedef anchored to an A.B.C assignment - we need to bind into B's namespace under name C

./node_modules/typescript/lib/typescript.js 45645                 //  but be sure to bail on recuring into the type if accept declines the symbol.

./node_modules/typescript/lib/typescript.js 46784                 addErrorOrSuggestion(isError, "message" in message ? ts.createFileDiagnostic(file, 0, 0, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForFileFromMessageChain(file, message)); // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typescript.js 46787             addErrorOrSuggestion(isError, "message" in message ? ts.createDiagnosticForNode(location, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForNodeFromMessageChain(location, message)); // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typescript.js 47823             // generator functions and async functions are not inlined in control flow when immediately invoked

./node_modules/typescript/lib/typescript.js 50399                     ts.setEmitFlags(typeLiteralNode, (context.flags & 1024 /* MultilineObjectLiterals */) ? 0 : 1 /* SingleLine */);

./node_modules/typescript/lib/typescript.js 51067                     return ts.getSourceFileOfNode(ts.getNonAugmentationDeclaration(symbol)).fileName; // A resolver may not be provided for baselines and errors - in those cases we use the fileName in full

./node_modules/typescript/lib/typescript.js 51525                     if (file && ts.isTupleTypeNode(node) && (ts.getLineAndCharacterOfPosition(file, node.pos).line === ts.getLineAndCharacterOfPosition(file, node.end).line)) {

./node_modules/typescript/lib/typescript.js 51685                 function inlineExportModifiers(statements) {

./node_modules/typescript/lib/typescript.js 51719                     statements = inlineExportModifiers(statements);

./node_modules/typescript/lib/typescript.js 52485                             // Inlined JSON types exported with [module.]exports= will already emit an export=, so should use `declare`.

./node_modules/typescript/lib/typescript.js 62462                             // We can't simply assume invariance, because `Unmeasurable` marks nonlinear relations, for example, a relation tained by

./node_modules/typescript/lib/typescript.js 67097             var inlineLevel = 0;

./node_modules/typescript/lib/typescript.js 68089                         // When narrowing a reference to a const variable, non-assigned parameter, or readonly property, we inline

./node_modules/typescript/lib/typescript.js 68091                         if (!isMatchingReference(reference, expr) && inlineLevel < 5) {

./node_modules/typescript/lib/typescript.js 68096                                     inlineLevel++;

./node_modules/typescript/lib/typescript.js 68098                                     inlineLevel--;

./node_modules/typescript/lib/typescript.js 68265                     // (because the const enum value will not be inlined), or if (2) the alias is an export

./node_modules/typescript/lib/typescript.js 71253             //   1. if 'isolatedModules' is enabled, because the const enum value will not be inlined, and

./node_modules/typescript/lib/typescript.js 75249             var trampoline = ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState);

./node_modules/typescript/lib/typescript.js 75251                 var result = trampoline(node, checkMode);

./node_modules/typescript/lib/typescript.js 78252                         //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag

./node_modules/typescript/lib/typescript.js 78259                     //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag

./node_modules/typescript/lib/typescript.js 81427                     // If not a value, we're interpreting the identifier as a type export, along the lines of (`export { Id as default }`)

./node_modules/typescript/lib/typescript.js 82939                 // inline property\index accesses only for const enums

./node_modules/typescript/lib/typescript.js 83041             return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/typescript.js 83049             return nodeBuilder.typeToTypeNode(getReturnTypeOfSignature(signature), enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/typescript.js 83057             return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/typescript.js 83984             var startLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.pos).line;

./node_modules/typescript/lib/typescript.js 83985             var endLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.end).line;

./node_modules/typescript/lib/typescript.js 84187                     // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion

./node_modules/typescript/lib/typescript.js 85943                 if (end && (raw.generatedLine > end.line ||

./node_modules/typescript/lib/typescript.js 85944                     (raw.generatedLine === end.line && raw.generatedCharacter > end.character))) {

./node_modules/typescript/lib/typescript.js 85947                 if (start && (raw.generatedLine < start.line ||

./node_modules/typescript/lib/typescript.js 85948                     (start.line === raw.generatedLine && raw.generatedCharacter < start.character))) {

./node_modules/typescript/lib/typescript.js 85979                 var rawGeneratedLine = raw.generatedLine - (start ? start.line : 0);

./node_modules/typescript/lib/typescript.js 85981                 var rawGeneratedCharacter = start && start.line === raw.generatedLine ? raw.generatedCharacter - start.character : raw.generatedCharacter;

./node_modules/typescript/lib/typescript.js 86011                 // Emit line delimiters

./node_modules/typescript/lib/typescript.js 86033                 // 3. Relative source line

./node_modules/typescript/lib/typescript.js 86092     // Sometimes tools can see the following line as a source mapping url comment, so we mangle it a bit (the [M])

./node_modules/typescript/lib/typescript.js 86095     function getLineInfo(text, lineStarts) {

./node_modules/typescript/lib/typescript.js 86097             getLineCount: function () { return lineStarts.length; },

./node_modules/typescript/lib/typescript.js 86098             getLineText: function (line) { return text.substring(lineStarts[line], lineStarts[line + 1]); }

./node_modules/typescript/lib/typescript.js 86105     function tryGetSourceMappingURL(lineInfo) {

./node_modules/typescript/lib/typescript.js 86106         for (var index = lineInfo.getLineCount() - 1; index >= 0; index--) {

./node_modules/typescript/lib/typescript.js 86107             var line = lineInfo.getLineText(index);

./node_modules/typescript/lib/typescript.js 86108             var comment = sourceMapCommentRegExp.exec(line);

./node_modules/typescript/lib/typescript.js 86112             // If we see a non-whitespace/map comment-like line, break, to avoid scanning up the entire file

./node_modules/typescript/lib/typescript.js 86113             else if (!line.match(whitespaceOrMapCommentRegExp)) {

./node_modules/typescript/lib/typescript.js 86167                         // new line

./node_modules/typescript/lib/typescript.js 86174                         // Next entry is on same line - no action needed

./node_modules/typescript/lib/typescript.js 86707     function isSimpleInlineableExpression(expression) {

./node_modules/typescript/lib/typescript.js 86710     ts.isSimpleInlineableExpression = isSimpleInlineableExpression;

./node_modules/typescript/lib/typescript.js 86892         return context.factory.inlineExpressions(expressions) || context.factory.createOmittedExpression();

./node_modules/typescript/lib/typescript.js 86945      * @param hoistTempVariables Indicates whether temporary variables should not be recorded in-line.

./node_modules/typescript/lib/typescript.js 86979                 var value = context.factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/typescript.js 86995             /*type*/ undefined, pendingExpressions_1 ? context.factory.inlineExpressions(ts.append(pendingExpressions_1, value)) : value);

./node_modules/typescript/lib/typescript.js 87007                 value = context.factory.inlineExpressions(ts.append(pendingExpressions, value));

./node_modules/typescript/lib/typescript.js 87033                     if (!ts.isSimpleInlineableExpression(initializer) && ts.isBindingOrAssignmentPattern(bindingTarget)) {

./node_modules/typescript/lib/typescript.js 87193         if (initializer && !ts.isSimpleInlineableExpression(initializer))

./node_modules/typescript/lib/typescript.js 87344         // Examples: `\n` is converted to "\\n", a template string with a newline to "\n".

./node_modules/typescript/lib/typescript.js 87356         // Newline normalization:

./node_modules/typescript/lib/typescript.js 88898                 return generateNameForComputedPropertyName && !ts.isSimpleInlineableExpression(name.expression)

./node_modules/typescript/lib/typescript.js 88925                 if (!ts.isSimpleInlineableExpression(innerExpression)) {

./node_modules/typescript/lib/typescript.js 89155                 return ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/typescript.js 90119          * Tracks what computed name expressions originating from elided names must be inlined

./node_modules/typescript/lib/typescript.js 90273                 node = factory.updateComputedPropertyName(node, factory.inlineExpressions(expressions));

./node_modules/typescript/lib/typescript.js 90332             // If it's not inlineable, then we emit an expression after the class which assigns

./node_modules/typescript/lib/typescript.js 90335             if (expr && !ts.isSimpleInlineableExpression(expr)) {

./node_modules/typescript/lib/typescript.js 90449                             if (ts.isSimpleInlineableExpression(node.operand.argumentExpression)) {

./node_modules/typescript/lib/typescript.js 90484             if (ts.isSimpleInlineableExpression(receiver)) {

./node_modules/typescript/lib/typescript.js 90560                     factory.inlineExpressions(ts.compact(__spreadArray(__spreadArray([], pendingExpressions, true), [node], false))) :

./node_modules/typescript/lib/typescript.js 90592                                 if (!ts.isSimpleInlineableExpression(setterName)) {

./node_modules/typescript/lib/typescript.js 90743                 statements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/typescript.js 90764             // then we want to output the pendingExpressions as statements, not as inlined

./node_modules/typescript/lib/typescript.js 90794                         pendingStatements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/typescript.js 90800                         return factory.inlineExpressions([factory.createAssignment(temp, classExpression), temp]);

./node_modules/typescript/lib/typescript.js 90822                     return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/typescript.js 91014             var propertyName = ts.isComputedPropertyName(property.name) && !ts.isSimpleInlineableExpression(property.name.expression)

./node_modules/typescript/lib/typescript.js 91229          * value of the result or the expression itself if the value is either unused or safe to inline into multiple locations

./node_modules/typescript/lib/typescript.js 91236                 var inlinable = ts.isSimpleInlineableExpression(innerExpression);

./node_modules/typescript/lib/typescript.js 91883             return factory.inlineExpressions(ts.map(variables, transformInitializedVariable));

./node_modules/typescript/lib/typescript.js 92169                 factory.createObjectLiteralExpression(accessors, /* multiline */ true)

./node_modules/typescript/lib/typescript.js 92664                 factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), callValues]) :

./node_modules/typescript/lib/typescript.js 93488                     var lineCol = ts.getLineAndCharacterOfPosition(originalFile, location.pos);

./node_modules/typescript/lib/typescript.js 93491                         factory.createPropertyAssignment("lineNumber", factory.createNumericLiteral(lineCol.line + 1)),

./node_modules/typescript/lib/typescript.js 93492                         factory.createPropertyAssignment("columnNumber", factory.createNumericLiteral(lineCol.character + 1))

./node_modules/typescript/lib/typescript.js 93583                 // Always recreate the literal to escape any escape sequences or newlines which may be in the original jsx string and which

./node_modules/typescript/lib/typescript.js 93604          * JSX trims whitespace at the end and beginning of lines, except that the

./node_modules/typescript/lib/typescript.js 93605          * start/end of a tag is considered a start/end of a line only if that line is

./node_modules/typescript/lib/typescript.js 93606          * on the same line as the closing tag. See examples in

./node_modules/typescript/lib/typescript.js 93611          * - If there is only one line, return it.

./node_modules/typescript/lib/typescript.js 93612          * - If there is only whitespace (but multiple lines), return `undefined`.

./node_modules/typescript/lib/typescript.js 93613          * - Split the text into lines.

./node_modules/typescript/lib/typescript.js 93614          * - 'trimRight' the first line, 'trimLeft' the last line, 'trim' middle lines.

./node_modules/typescript/lib/typescript.js 93615          * - Decode entities on each line (individually).

./node_modules/typescript/lib/typescript.js 93616          * - Remove empty lines and join the rest with " ".

./node_modules/typescript/lib/typescript.js 93620             // First non-whitespace character on this line.

./node_modules/typescript/lib/typescript.js 93622             // Last non-whitespace character on this line.

./node_modules/typescript/lib/typescript.js 93624             // These initial values are special because the first line is:

./node_modules/typescript/lib/typescript.js 93626             // but lastNonWhitespace = -1 as a special flag to indicate that we *don't* include the line if it's all whitespace.

./node_modules/typescript/lib/typescript.js 93630                     // If we've seen any non-whitespace characters on this line, add the 'trim' of the line.

./node_modules/typescript/lib/typescript.js 93631                     // (lastNonWhitespace === -1 is a special flag to detect whether the first line is all whitespace.)

./node_modules/typescript/lib/typescript.js 93635                     // Reset firstNonWhitespace for the next line.

./node_modules/typescript/lib/typescript.js 93647                 // Last line had a non-whitespace character. Emit the 'trimLeft', meaning keep trailing whitespace.

./node_modules/typescript/lib/typescript.js 93649                 // Last line was all whitespace, so ignore it

./node_modules/typescript/lib/typescript.js 93902         oline: 0x203E,

./node_modules/typescript/lib/typescript.js 94752             // The assumption is that no prior step in the pipeline has added any prologue directives.

./node_modules/typescript/lib/typescript.js 95383             var multiLine = false; // indicates whether the block *must* be emitted as multiple lines

./node_modules/typescript/lib/typescript.js 95384             var singleLine = false; // indicates whether the block *may* be emitted as a single line

./node_modules/typescript/lib/typescript.js 95406                 // If the original body was a multi-line block, this must be a multi-line block.

./node_modules/typescript/lib/typescript.js 95440             // If we added any final generated statements, this must be a multi-line block

./node_modules/typescript/lib/typescript.js 95554                     updated = ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(assignments)), node);

./node_modules/typescript/lib/typescript.js 95870                 ? factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), values])

./node_modules/typescript/lib/typescript.js 95932             // new line

./node_modules/typescript/lib/typescript.js 95934             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/typescript.js 96844          * @param multiLine A value indicating whether the result should be emitted on multiple lines.

./node_modules/typescript/lib/typescript.js 97908                 return ts.setSourceMapRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/typescript.js 98016             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/typescript.js 98024                         emitWorker(1 /* Statement */, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/typescript.js 98046                         emitWorker(1 /* Statement */, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/typescript.js 98052             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/typescript.js 98181          * @param multiLine Whether array literals created should be emitted on multiple lines.

./node_modules/typescript/lib/typescript.js 98248             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/typescript.js 98251                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(expressions)));

./node_modules/typescript/lib/typescript.js 98411                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/typescript.js 98593                     ? factory.inlineExpressions(ts.map(variables, transformInitializedVariable))

./node_modules/typescript/lib/typescript.js 98710                     return createInlineBreak(label, /*location*/ node);

./node_modules/typescript/lib/typescript.js 98729                     return createInlineBreak(label, /*location*/ node);

./node_modules/typescript/lib/typescript.js 98739             return createInlineReturn(ts.visitNode(node.expression, visitor, ts.isExpression), 

./node_modules/typescript/lib/typescript.js 98822                                 createInlineBreak(clauseLabels[i], /*location*/ clause.expression)

./node_modules/typescript/lib/typescript.js 99413         function createInlineBreak(label, location) {

./node_modules/typescript/lib/typescript.js 99426         function createInlineReturn(expression, location) {

./node_modules/typescript/lib/typescript.js 100914                     var statement = ts.setOriginalNode(ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node), node);

./node_modules/typescript/lib/typescript.js 101705                 /*type*/ undefined, factory.createObjectLiteralExpression(exportedNames, /*multiline*/ true))

./node_modules/typescript/lib/typescript.js 101747             ], /*multiline*/ true));

./node_modules/typescript/lib/typescript.js 101797                                     /*typeArguments*/ undefined, [factory.createObjectLiteralExpression(properties, /*multiline*/ true)])));

./node_modules/typescript/lib/typescript.js 101986                 statements = ts.append(statements, ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node));

./node_modules/typescript/lib/typescript.js 102436                 return expressions ? factory.inlineExpressions(expressions) : factory.createOmittedExpression();

./node_modules/typescript/lib/typescript.js 103531     var declarationEmitNodeBuilderFlags = 1024 /* MultilineObjectLiterals */ |

./node_modules/typescript/lib/typescript.js 104354             if (ts.isTupleTypeNode(input) && (ts.getLineAndCharacterOfPosition(currentSourceFile, input.pos).line === ts.getLineAndCharacterOfPosition(currentSourceFile, input.end).line)) {

./node_modules/typescript/lib/typescript.js 105512         return (options.sourceMap && !options.inlineSourceMap) ? jsFilePath + ".map" : undefined;

./node_modules/typescript/lib/typescript.js 105648         ts.Debug.assert(ts.contains(commandLine.fileNames, inputFileName), "Expected fileName to be present in command line");

./node_modules/typescript/lib/typescript.js 105690         var sourceMapDataList = (compilerOptions.sourceMap || compilerOptions.inlineSourceMap || ts.getAreDeclarationMapsEnabled(compilerOptions)) ? [] : undefined;

./node_modules/typescript/lib/typescript.js 105782                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/typescript.js 105783                 inlineSources: compilerOptions.inlineSources,

./node_modules/typescript/lib/typescript.js 105835                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/typescript.js 105859                     // Explicitly do not passthru either `inline` option

./node_modules/typescript/lib/typescript.js 105908                     writer.writeComment("//# " + "sourceMappingURL" + "=" + sourceMappingURL); // Tools can sometimes see this line as a source mapping url comment

./node_modules/typescript/lib/typescript.js 105925             return (mapOptions.sourceMap || mapOptions.inlineSourceMap)

./node_modules/typescript/lib/typescript.js 105953             if (mapOptions.inlineSourceMap) {

./node_modules/typescript/lib/typescript.js 106071         // error if no source map or for now if inline sourcemap

./node_modules/typescript/lib/typescript.js 106072         if ((sourceMapFilePath && !sourceMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/typescript.js 106073             return sourceMapFilePath || "inline sourcemap decoding";

./node_modules/typescript/lib/typescript.js 106079         // error if no source map or for now if inline sourcemap

./node_modules/typescript/lib/typescript.js 106080         if ((declarationMapPath && !declarationMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/typescript.js 106081             return declarationMapPath || "inline sourcemap decoding";

./node_modules/typescript/lib/typescript.js 106155     var PipelinePhase;

./node_modules/typescript/lib/typescript.js 106156     (function (PipelinePhase) {

./node_modules/typescript/lib/typescript.js 106157         PipelinePhase[PipelinePhase["Notification"] = 0] = "Notification";

./node_modules/typescript/lib/typescript.js 106158         PipelinePhase[PipelinePhase["Substitution"] = 1] = "Substitution";

./node_modules/typescript/lib/typescript.js 106159         PipelinePhase[PipelinePhase["Comments"] = 2] = "Comments";

./node_modules/typescript/lib/typescript.js 106160         PipelinePhase[PipelinePhase["SourceMaps"] = 3] = "SourceMaps";

./node_modules/typescript/lib/typescript.js 106161         PipelinePhase[PipelinePhase["Emit"] = 4] = "Emit";

./node_modules/typescript/lib/typescript.js 106162     })(PipelinePhase || (PipelinePhase = {}));

./node_modules/typescript/lib/typescript.js 106179         var preserveSourceNewlines = printerOptions.preserveSourceNewlines; // Can be overridden inside nodes with the `IgnoreSourceNewlines` emit flag.

./node_modules/typescript/lib/typescript.js 106408             pipelineEmit(hint, node, /*parenthesizerRule*/ undefined);

./node_modules/typescript/lib/typescript.js 106445             pipelineEmit(4 /* Unspecified */, node, parenthesizerRule);

./node_modules/typescript/lib/typescript.js 106451             pipelineEmit(2 /* IdentifierName */, node, /*parenthesizerRule*/ undefined);

./node_modules/typescript/lib/typescript.js 106456             pipelineEmit(1 /* Expression */, node, parenthesizerRule);

./node_modules/typescript/lib/typescript.js 106459             pipelineEmit(ts.isStringLiteral(node) ? 6 /* JsxAttributeValue */ : 4 /* Unspecified */, node);

./node_modules/typescript/lib/typescript.js 106462             if (preserveSourceNewlines && (ts.getEmitFlags(node) & 134217728 /* IgnoreSourceNewlines */)) {

./node_modules/typescript/lib/typescript.js 106463                 preserveSourceNewlines = false;

./node_modules/typescript/lib/typescript.js 106466         function afterEmitNode(savedPreserveSourceNewlines) {

./node_modules/typescript/lib/typescript.js 106467             preserveSourceNewlines = savedPreserveSourceNewlines;

./node_modules/typescript/lib/typescript.js 106469         function pipelineEmit(emitHint, node, parenthesizerRule) {

./node_modules/typescript/lib/typescript.js 106471             var pipelinePhase = getPipelinePhase(0 /* Notification */, emitHint, node);

./node_modules/typescript/lib/typescript.js 106472             pipelinePhase(emitHint, node);

./node_modules/typescript/lib/typescript.js 106485         function getPipelinePhase(phase, emitHint, node) {

./node_modules/typescript/lib/typescript.js 106489                         return pipelineEmitWithNotification;

./node_modules/typescript/lib/typescript.js 106497                         return pipelineEmitWithSubstitution;

./node_modules/typescript/lib/typescript.js 106502                         return pipelineEmitWithComments;

./node_modules/typescript/lib/typescript.js 106507                         return pipelineEmitWithSourceMaps;

./node_modules/typescript/lib/typescript.js 106511                     return pipelineEmitWithHint;

./node_modules/typescript/lib/typescript.js 106516         function getNextPipelinePhase(currentPhase, emitHint, node) {

./node_modules/typescript/lib/typescript.js 106517             return getPipelinePhase(currentPhase + 1, emitHint, node);

./node_modules/typescript/lib/typescript.js 106519         function pipelineEmitWithNotification(hint, node) {

./node_modules/typescript/lib/typescript.js 106520             var pipelinePhase = getNextPipelinePhase(0 /* Notification */, hint, node);

./node_modules/typescript/lib/typescript.js 106521             onEmitNode(hint, node, pipelinePhase);

./node_modules/typescript/lib/typescript.js 106523         function pipelineEmitWithHint(hint, node) {

./node_modules/typescript/lib/typescript.js 106525             if (preserveSourceNewlines) {

./node_modules/typescript/lib/typescript.js 106526                 var savedPreserveSourceNewlines = preserveSourceNewlines;

./node_modules/typescript/lib/typescript.js 106528                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/typescript.js 106529                 afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/typescript.js 106532                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/typescript.js 106538         function pipelineEmitWithHintWorker(hint, node) {

./node_modules/typescript/lib/typescript.js 106993         function pipelineEmitWithSubstitution(hint, node) {

./node_modules/typescript/lib/typescript.js 106994             var pipelinePhase = getNextPipelinePhase(1 /* Substitution */, hint, node);

./node_modules/typescript/lib/typescript.js 106998             pipelinePhase(hint, node);

./node_modules/typescript/lib/typescript.js 107093             if ((printerOptions.sourceMap || printerOptions.inlineSourceMap)

./node_modules/typescript/lib/typescript.js 107468             pipelineEmit(3 /* MappedTypeParameter */, node.typeParameter);

./node_modules/typescript/lib/typescript.js 107564             var linesBeforeDot = getLinesBetweenNodes(node, node.expression, token);

./node_modules/typescript/lib/typescript.js 107565             var linesAfterDot = getLinesBetweenNodes(node, token, node.name);

./node_modules/typescript/lib/typescript.js 107566             writeLinesAndIndent(linesBeforeDot, /*writeSpaceIfNotIndenting*/ false);

./node_modules/typescript/lib/typescript.js 107580             writeLinesAndIndent(linesAfterDot, /*writeSpaceIfNotIndenting*/ false);

./node_modules/typescript/lib/typescript.js 107582             decreaseIndentIf(linesBeforeDot, linesAfterDot);

./node_modules/typescript/lib/typescript.js 107729             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, /*foldState*/ undefined);

./node_modules/typescript/lib/typescript.js 107733                     state.preserveSourceNewlinesStack[state.stackIndex] = preserveSourceNewlines;

./node_modules/typescript/lib/typescript.js 107749                         preserveSourceNewlinesStack: [undefined],

./node_modules/typescript/lib/typescript.js 107764                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, operatorToken);

./node_modules/typescript/lib/typescript.js 107765                 var linesAfterOperator = getLinesBetweenNodes(node, operatorToken, node.right);

./node_modules/typescript/lib/typescript.js 107766                 writeLinesAndIndent(linesBeforeOperator, isCommaOperator);

./node_modules/typescript/lib/typescript.js 107770                 writeLinesAndIndent(linesAfterOperator, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typescript.js 107776                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, node.operatorToken);

./node_modules/typescript/lib/typescript.js 107777                 var linesAfterOperator = getLinesBetweenNodes(node, node.operatorToken, node.right);

./node_modules/typescript/lib/typescript.js 107778                 decreaseIndentIf(linesBeforeOperator, linesAfterOperator);

./node_modules/typescript/lib/typescript.js 107780                     var savedPreserveSourceNewlines = state.preserveSourceNewlinesStack[state.stackIndex];

./node_modules/typescript/lib/typescript.js 107786                     afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/typescript.js 107799                 var pipelinePhase = getPipelinePhase(0 /* Notification */, 1 /* Expression */, next);

./node_modules/typescript/lib/typescript.js 107800                 if (pipelinePhase === pipelineEmitWithSubstitution) {

./node_modules/typescript/lib/typescript.js 107803                     pipelinePhase = getNextPipelinePhase(1 /* Substitution */, 1 /* Expression */, next);

./node_modules/typescript/lib/typescript.js 107806                 if (pipelinePhase === pipelineEmitWithComments ||

./node_modules/typescript/lib/typescript.js 107807                     pipelinePhase === pipelineEmitWithSourceMaps ||

./node_modules/typescript/lib/typescript.js 107808                     pipelinePhase === pipelineEmitWithHint) {

./node_modules/typescript/lib/typescript.js 107814                 pipelinePhase(1 /* Expression */, next);

./node_modules/typescript/lib/typescript.js 107818             var linesBeforeQuestion = getLinesBetweenNodes(node, node.condition, node.questionToken);

./node_modules/typescript/lib/typescript.js 107819             var linesAfterQuestion = getLinesBetweenNodes(node, node.questionToken, node.whenTrue);

./node_modules/typescript/lib/typescript.js 107820             var linesBeforeColon = getLinesBetweenNodes(node, node.whenTrue, node.colonToken);

./node_modules/typescript/lib/typescript.js 107821             var linesAfterColon = getLinesBetweenNodes(node, node.colonToken, node.whenFalse);

./node_modules/typescript/lib/typescript.js 107823             writeLinesAndIndent(linesBeforeQuestion, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typescript.js 107825             writeLinesAndIndent(linesAfterQuestion, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typescript.js 107827             decreaseIndentIf(linesBeforeQuestion, linesAfterQuestion);

./node_modules/typescript/lib/typescript.js 107828             writeLinesAndIndent(linesBeforeColon, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typescript.js 107830             writeLinesAndIndent(linesAfterColon, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typescript.js 107832             decreaseIndentIf(linesBeforeColon, linesAfterColon);

./node_modules/typescript/lib/typescript.js 107944             if (ts.isBlock(node.statement) && !preserveSourceNewlines) {

./node_modules/typescript/lib/typescript.js 108034                 emitTrailingCommentsOfPosition(pos, /*prefixSpace*/ !isJsxExprContext, /*forceNoNewline*/ isJsxExprContext);

./node_modules/typescript/lib/typescript.js 108151             // We must emit a function body as a single-line body in the following case:

./node_modules/typescript/lib/typescript.js 108153             // We must emit a function body as a multi-line body in the following cases:

./node_modules/typescript/lib/typescript.js 108154             // * The body is explicitly marked as multi-line.

./node_modules/typescript/lib/typescript.js 108155             // * A non-synthesized body's start and end position are on different lines.

./node_modules/typescript/lib/typescript.js 108156             // * Any statement in the body starts on a new line.

./node_modules/typescript/lib/typescript.js 108524                 var isMultiline = currentSourceFile && !ts.nodeIsSynthesized(node) && ts.getLineAndCharacterOfPosition(currentSourceFile, node.pos).line !== ts.getLineAndCharacterOfPosition(currentSourceFile, node.end).line;

./node_modules/typescript/lib/typescript.js 108525                 if (isMultiline) {

./node_modules/typescript/lib/typescript.js 108532                 if (isMultiline) {

./node_modules/typescript/lib/typescript.js 108561                 // treat synthesized nodes as located on the same line for emit purposes

./node_modules/typescript/lib/typescript.js 108644                     var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/typescript.js 108645                     for (var _a = 0, lines_2 = lines; _a < lines_2.length; _a++) {

./node_modules/typescript/lib/typescript.js 108646                         var line = lines_2[_a];

./node_modules/typescript/lib/typescript.js 108651                         write(line);

./node_modules/typescript/lib/typescript.js 109074                     pipelineEmit(5 /* EmbeddedStatement */, node);

./node_modules/typescript/lib/typescript.js 109180                 // Write a line terminator if the parent node was multi-line

./node_modules/typescript/lib/typescript.js 109181                 if (format & 1 /* MultiLine */ && !(preserveSourceNewlines && (!parentNode || ts.rangeIsOnSingleLine(parentNode, currentSourceFile)))) {

./node_modules/typescript/lib/typescript.js 109190                 // Write the opening line terminator or leading whitespace.

./node_modules/typescript/lib/typescript.js 109222                         //          /* End of parameter a */ -> this comment isn't considered to be trailing comment of parameter "a" due to newline

./node_modules/typescript/lib/typescript.js 109229                         // Write either a line terminator or whitespace to separate the elements.

./node_modules/typescript/lib/typescript.js 109232                             // If a synthesized node in a single-line list starts on a new

./node_modules/typescript/lib/typescript.js 109233                             // line, we should increase the indent.

./node_modules/typescript/lib/typescript.js 109295                 // Write the closing line terminator or closing whitespace.

./node_modules/typescript/lib/typescript.js 109386             else if (preserveSourceNewlines) {

./node_modules/typescript/lib/typescript.js 109387                 var lines = getLinesBetweenNodes(parentNode, prevChildNode, nextChildNode);

./node_modules/typescript/lib/typescript.js 109388                 if (lines) {

./node_modules/typescript/lib/typescript.js 109389                     writeLine(lines);

./node_modules/typescript/lib/typescript.js 109400             var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/typescript.js 109401             var indentation = ts.guessIndentation(lines);

./node_modules/typescript/lib/typescript.js 109402             for (var _a = 0, lines_3 = lines; _a < lines_3.length; _a++) {

./node_modules/typescript/lib/typescript.js 109403                 var lineText = lines_3[_a];

./node_modules/typescript/lib/typescript.js 109404                 var line = indentation ? lineText.slice(indentation) : lineText;

./node_modules/typescript/lib/typescript.js 109405                 if (line.length) {

./node_modules/typescript/lib/typescript.js 109407                     write(line);

./node_modules/typescript/lib/typescript.js 109411         function writeLinesAndIndent(lineCount, writeSpaceIfNotIndenting) {

./node_modules/typescript/lib/typescript.js 109412             if (lineCount) {

./node_modules/typescript/lib/typescript.js 109414                 writeLine(lineCount);

./node_modules/typescript/lib/typescript.js 109433             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/typescript.js 109443                     // line terminators have already been written as the separating line terminators of the

./node_modules/typescript/lib/typescript.js 109451                     // The outer list is the list of class members, with one line terminator between the

./node_modules/typescript/lib/typescript.js 109452                     // constructor and the method. The constructor is written, the separating line terminator

./node_modules/typescript/lib/typescript.js 109454                     // list, so we look for its leading line terminators. If we didn't know that we had already

./node_modules/typescript/lib/typescript.js 109455                     // written a newline as part of the parent list, it would appear that we need to write a

./node_modules/typescript/lib/typescript.js 109456                     // leading newline to start the modifiers.

./node_modules/typescript/lib/typescript.js 109467                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/typescript.js 109479             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/typescript.js 109488                     if (preserveSourceNewlines && siblingNodePositionsAreComparable(previousNode, nextNode)) {

./node_modules/typescript/lib/typescript.js 109491                     // If `preserveSourceNewlines` is `false` we do not intend to preserve the effective lines between the

./node_modules/typescript/lib/typescript.js 109492                     // previous and next node. Instead we naively check whether nodes are on separate lines within the

./node_modules/typescript/lib/typescript.js 109493                     // same node parent. If so, we intend to preserve a single line terminator. This is less precise and

./node_modules/typescript/lib/typescript.js 109494                     // expensive than checking with `preserveSourceNewlines` as above, but the goal is not to preserve the

./node_modules/typescript/lib/typescript.js 109495                     // effective source lines between two sibling nodes.

./node_modules/typescript/lib/typescript.js 109496                     else if (!preserveSourceNewlines && originalNodesHaveSameParent(previousNode, nextNode)) {

./node_modules/typescript/lib/typescript.js 109499                     // If the two nodes are not comparable, add a line terminator based on the format that can indicate

./node_modules/typescript/lib/typescript.js 109500                     // whether new lines are preferred or not.

./node_modules/typescript/lib/typescript.js 109513             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/typescript.js 109522                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/typescript.js 109538             // If 'preserveSourceNewlines' is disabled, we should never call this function

./node_modules/typescript/lib/typescript.js 109540             ts.Debug.assert(!!preserveSourceNewlines);

./node_modules/typescript/lib/typescript.js 109541             // We start by measuring the line difference from a position to its adjacent comments,

./node_modules/typescript/lib/typescript.js 109542             // so that this is counted as a one-line difference, not two:

./node_modules/typescript/lib/typescript.js 109547             var lines = getLineDifference(/*includeComments*/ true);

./node_modules/typescript/lib/typescript.js 109548             if (lines === 0) {

./node_modules/typescript/lib/typescript.js 109549                 // However, if the line difference considering comments was 0, we might have this:

./node_modules/typescript/lib/typescript.js 109555                 // a one-line difference, not zero.

./node_modules/typescript/lib/typescript.js 109558             return lines;

./node_modules/typescript/lib/typescript.js 109561             var leadingNewlines = preserveSourceNewlines && getLeadingLineTerminatorCount(parent, [node], 0 /* None */);

./node_modules/typescript/lib/typescript.js 109562             if (leadingNewlines) {

./node_modules/typescript/lib/typescript.js 109563                 writeLinesAndIndent(leadingNewlines, /*writeLinesIfNotIndenting*/ false);

./node_modules/typescript/lib/typescript.js 109565             return !!leadingNewlines;

./node_modules/typescript/lib/typescript.js 109568             var trailingNewlines = preserveSourceNewlines && getClosingLineTerminatorCount(parent, [node], 0 /* None */);

./node_modules/typescript/lib/typescript.js 109569             if (trailingNewlines) {

./node_modules/typescript/lib/typescript.js 109570                 writeLine(trailingNewlines);

./node_modules/typescript/lib/typescript.js 109590             // Always use a newline for synthesized code if the synthesizer desires it.

./node_modules/typescript/lib/typescript.js 109595                 if (preserveSourceNewlines) {

./node_modules/typescript/lib/typescript.js 110008         function pipelineEmitWithComments(hint, node) {

./node_modules/typescript/lib/typescript.js 110009             var pipelinePhase = getNextPipelinePhase(2 /* Comments */, hint, node);

./node_modules/typescript/lib/typescript.js 110014             pipelinePhase(hint, node);

./node_modules/typescript/lib/typescript.js 110084             if (comment.hasLeadingNewline || comment.kind === 2 /* SingleLineCommentTrivia */) {

./node_modules/typescript/lib/typescript.js 110106             var lineMap = comment.kind === 3 /* MultiLineCommentTrivia */ ? ts.computeLineStarts(text) : undefined;

./node_modules/typescript/lib/typescript.js 110107             ts.writeCommentRange(text, lineMap, writer, 0, text.length, newLine);

./node_modules/typescript/lib/typescript.js 110240         function emitTrailingCommentsOfPosition(pos, prefixSpace, forceNoNewline) {

./node_modules/typescript/lib/typescript.js 110245             forEachTrailingCommentToEmit(pos, prefixSpace ? emitTrailingComment : forceNoNewline ? emitTrailingCommentOfPositionNoNewline : emitTrailingCommentOfPosition);

./node_modules/typescript/lib/typescript.js 110248         function emitTrailingCommentOfPositionNoNewline(commentPos, commentEnd, kind) {

./node_modules/typescript/lib/typescript.js 110254                 writer.writeLine(); // still write a newline for single-line comments, so closing tokens aren't written on the same line

./node_modules/typescript/lib/typescript.js 110311         function emitComment(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/typescript.js 110315             ts.writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine);

./node_modules/typescript/lib/typescript.js 110333         function pipelineEmitWithSourceMaps(hint, node) {

./node_modules/typescript/lib/typescript.js 110334             var pipelinePhase = getNextPipelinePhase(3 /* SourceMaps */, hint, node);

./node_modules/typescript/lib/typescript.js 110336             pipelinePhase(hint, node);

./node_modules/typescript/lib/typescript.js 110395             var _a = ts.getLineAndCharacterOfPosition(sourceMapSource, pos), sourceLine = _a.line, sourceCharacter = _a.character;

./node_modules/typescript/lib/typescript.js 110454             if (printerOptions.inlineSources) {

./node_modules/typescript/lib/typescript.js 111295             var _a = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start), line = _a.line, character = _a.character; // TODO: GH#18217

./node_modules/typescript/lib/typescript.js 111298             return relativeFileName + "(" + (line + 1) + "," + (character + 1) + "): " + errorMessage;

./node_modules/typescript/lib/typescript.js 111322             case ts.DiagnosticCategory.Suggestion: return ts.Debug.fail("Should never get an Info diagnostic on the command line.");

./node_modules/typescript/lib/typescript.js 111332         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character;

./node_modules/typescript/lib/typescript.js 111333         var _b = ts.getLineAndCharacterOfPosition(file, start + length), lastLine = _b.line, lastLineChar = _b.character;

./node_modules/typescript/lib/typescript.js 111334         var lastLineInFile = ts.getLineAndCharacterOfPosition(file, file.text.length).line;

./node_modules/typescript/lib/typescript.js 111343             // If the error spans over 5 lines, we'll only show the first 2 and last 2 lines,

./node_modules/typescript/lib/typescript.js 111344             // so we'll skip ahead to the second-to-last line.

./node_modules/typescript/lib/typescript.js 111349             var lineStart = ts.getPositionOfLineAndCharacter(file, i, 0);

./node_modules/typescript/lib/typescript.js 111350             var lineEnd = i < lastLineInFile ? ts.getPositionOfLineAndCharacter(file, i + 1, 0) : file.text.length;

./node_modules/typescript/lib/typescript.js 111351             var lineContent = file.text.slice(lineStart, lineEnd);

./node_modules/typescript/lib/typescript.js 111352             lineContent = ts.trimStringEnd(lineContent); // trim from end

./node_modules/typescript/lib/typescript.js 111353             lineContent = lineContent.replace(/\t/g, " "); // convert tabs to single spaces

./node_modules/typescript/lib/typescript.js 111354             // Output the gutter and the actual contents of the line.

./node_modules/typescript/lib/typescript.js 111356             context += lineContent + host.getNewLine();

./node_modules/typescript/lib/typescript.js 111357             // Output the gutter and the error span for the line using tildes.

./node_modules/typescript/lib/typescript.js 111361                 // If we're on the last line, then limit it to the last character of the last line.

./node_modules/typescript/lib/typescript.js 111362                 // Otherwise, we'll just squiggle the rest of the line, giving 'slice' no end position.

./node_modules/typescript/lib/typescript.js 111364                 context += lineContent.slice(0, firstLineChar).replace(/\S/g, " ");

./node_modules/typescript/lib/typescript.js 111365                 context += lineContent.slice(firstLineChar, lastCharForLine).replace(/./g, "~");

./node_modules/typescript/lib/typescript.js 111368                 context += lineContent.slice(0, lastLineChar).replace(/./g, "~");

./node_modules/typescript/lib/typescript.js 111371                 // Squiggle the entire line.

./node_modules/typescript/lib/typescript.js 111372                 context += lineContent.replace(/./g, "~");

./node_modules/typescript/lib/typescript.js 111381         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character; // TODO: GH#18217

./node_modules/typescript/lib/typescript.js 111768         structureIsReused = tryReuseStructureFromOldProgram(); // eslint-disable-line prefer-const

./node_modules/typescript/lib/typescript.js 111870         // Release commandlines that new program does not use

./node_modules/typescript/lib/typescript.js 112684          * @returns The line index marked as preceding the diagnostic, or -1 if none was.

./node_modules/typescript/lib/typescript.js 112691             // Start out with the line just before the text

./node_modules/typescript/lib/typescript.js 112692             var lineStarts = ts.getLineStarts(file);

./node_modules/typescript/lib/typescript.js 112693             var line = ts.computeLineAndCharacterOfPosition(lineStarts, start).line - 1; // TODO: GH#18217

./node_modules/typescript/lib/typescript.js 112694             while (line >= 0) {

./node_modules/typescript/lib/typescript.js 112695                 // As soon as that line is known to have a comment directive, use that

./node_modules/typescript/lib/typescript.js 112696                 if (directives.markUsed(line)) {

./node_modules/typescript/lib/typescript.js 112697                     return line;

./node_modules/typescript/lib/typescript.js 112699                 // Stop searching if the line is not empty and not a comment

./node_modules/typescript/lib/typescript.js 112700                 var lineText = file.text.slice(lineStarts[line], lineStarts[line + 1]).trim();

./node_modules/typescript/lib/typescript.js 112701                 if (lineText !== "" && !/^(\s*)\/\/(.*)$/.test(lineText)) {

./node_modules/typescript/lib/typescript.js 112704                 line--;

./node_modules/typescript/lib/typescript.js 113047                 while (r.exec(file.text) !== null) { // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescript.js 113648             if (options.inlineSourceMap) {

./node_modules/typescript/lib/typescript.js 113650                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "sourceMap", "inlineSourceMap");

./node_modules/typescript/lib/typescript.js 113653                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "mapRoot", "inlineSourceMap");

./node_modules/typescript/lib/typescript.js 113719             if (!options.sourceMap && !options.inlineSourceMap) {

./node_modules/typescript/lib/typescript.js 113720                 if (options.inlineSources) {

./node_modules/typescript/lib/typescript.js 113721                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "inlineSources");

./node_modules/typescript/lib/typescript.js 113724                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "sourceRoot");

./node_modules/typescript/lib/typescript.js 115923             // eslint-disable-next-line no-empty

./node_modules/typescript/lib/typescript.js 116909             // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/typescript.js 118073         var parsedConfigs; // Parsed commandline and watching cached for referenced projects

./node_modules/typescript/lib/typescript.js 120392             "readline",

./node_modules/typescript/lib/typescript.js 120808         SymbolDisplayPartKind[SymbolDisplayPartKind["lineBreak"] = 6] = "lineBreak";

./node_modules/typescript/lib/typescript.js 120830         /** Single or multi-line comments */

./node_modules/typescript/lib/typescript.js 121496         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/typescript.js 121497         var line = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/typescript.js 121498         return lineStarts[line];

./node_modules/typescript/lib/typescript.js 122970         var lineStart;

./node_modules/typescript/lib/typescript.js 123019             if (lineStart) {

./node_modules/typescript/lib/typescript.js 123025                 lineStart = false;

./node_modules/typescript/lib/typescript.js 123046             displayParts.push(lineBreakPart());

./node_modules/typescript/lib/typescript.js 123047             lineStart = true;

./node_modules/typescript/lib/typescript.js 123051             lineStart = true;

./node_modules/typescript/lib/typescript.js 123211     function lineBreakPart() {

./node_modules/typescript/lib/typescript.js 123212         return displayPart("\n", ts.SymbolDisplayPartKind.lineBreak);

./node_modules/typescript/lib/typescript.js 123214     ts.lineBreakPart = lineBreakPart;

./node_modules/typescript/lib/typescript.js 123228             typechecker.writeType(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */ | 16384 /* UseAliasDefinedOutsideCurrentScope */, writer);

./node_modules/typescript/lib/typescript.js 123241         flags |= 16384 /* UseAliasDefinedOutsideCurrentScope */ | 1024 /* MultilineObjectLiterals */ | 32 /* WriteTypeArgumentsOfSignature */ | 8192 /* OmitParameterModifiers */;

./node_modules/typescript/lib/typescript.js 123389             if (text.charCodeAt(i) === 10 /* lineFeed */)

./node_modules/typescript/lib/typescript.js 123642         var startLine = sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line;

./node_modules/typescript/lib/typescript.js 123643         var endLine = sourceFile.getLineAndCharacterOfPosition(nextToken.getStart(sourceFile)).line;

./node_modules/typescript/lib/typescript.js 124412             // lines, just as we do with the end-of-line state. However, this is a burden for implementers,

./node_modules/typescript/lib/typescript.js 124414             // flatten any nesting when the template stack is non-empty and encode it in the end-of-line state.

./node_modules/typescript/lib/typescript.js 124416             //  1) When template strings are nested across different lines:

./node_modules/typescript/lib/typescript.js 124420             //     Where on the second line, you will get the closing of a template,

./node_modules/typescript/lib/typescript.js 124423             //  2) When substitution expressions have curly braces and the curly brace falls on the next line:

./node_modules/typescript/lib/typescript.js 124427             //     Where on the second line, you will get the 'return' keyword,

./node_modules/typescript/lib/typescript.js 124582                 // Check to see if we finished up on a multiline string literal.

./node_modules/typescript/lib/typescript.js 124591                 // If we have an odd number of backslashes, then the multiline string is unclosed

./node_modules/typescript/lib/typescript.js 124597                 // Check to see if the multiline comment was unclosed.

./node_modules/typescript/lib/typescript.js 124700         // (and a newline).  That way when we lex we'll think we're still in a string literal.

./node_modules/typescript/lib/typescript.js 124702         // If we're in a multiline comment, then prepend: /*

./node_modules/typescript/lib/typescript.js 124703         // (and a newline).  That way when we lex we'll think we're still in a multiline comment.

./node_modules/typescript/lib/typescript.js 124991                         // Don't bother with newlines/whitespace.

./node_modules/typescript/lib/typescript.js 125011                         // for the ||||||| and ======== markers, add a comment for the first line,

./node_modules/typescript/lib/typescript.js 125012                         // and then lex all subsequent lines up until the end of the conflict marker.

./node_modules/typescript/lib/typescript.js 125149             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typescript.js 125208             // Classify the line that the ||||||| or ======= marker is on as a comment.

./node_modules/typescript/lib/typescript.js 127201                         var lineStart = ts.getLineStartPositionForPosition(position, sourceFile);

./node_modules/typescript/lib/typescript.js 127202                         if (!/[^\*|\s(/)]/.test(sourceFile.text.substring(lineStart, position))) {

./node_modules/typescript/lib/typescript.js 128450                     // If we are sure that the previous property declaration is terminated according to newline or semicolon...

./node_modules/typescript/lib/typescript.js 128911                         if (ts.getLineAndCharacterOfPosition(sourceFile, contextToken.getEnd()).line !== ts.getLineAndCharacterOfPosition(sourceFile, position).line && ts.isObjectTypeDeclaration(location)) {

./node_modules/typescript/lib/typescript.js 129515             // (i.e. the keywords are separated by no comments, no newlines).

./node_modules/typescript/lib/typescript.js 131796                 var _a = "kind" in relatedSymbol ? relatedSymbol : { kind: undefined, symbol: relatedSymbol }, kind = _a.kind, symbol = _a.symbol; // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typescript.js 132515                 // get the text from printing the node on a single line without comments...

./node_modules/typescript/lib/typescript.js 133642             return ts.flatten(ts.intersperse(parts, [ts.lineBreakPart()]));

./node_modules/typescript/lib/typescript.js 133825          * - The line is all whitespace up to 'position' before performing the insertion.

./node_modules/typescript/lib/typescript.js 133858             // * The opening comment line

./node_modules/typescript/lib/typescript.js 133859             // * the first line (without a param) for the object's untagged info (this is also where the caret ends up)

./node_modules/typescript/lib/typescript.js 133860             // * the '@param'-tagged lines

./node_modules/typescript/lib/typescript.js 133863             // * the closing comment line

./node_modules/typescript/lib/typescript.js 133864             // * if the caret was directly in front of the object, then we add an extra line and indentation.

./node_modules/typescript/lib/typescript.js 133878             var lineStart = ts.getLineStartPositionForPosition(position, sourceFile);

./node_modules/typescript/lib/typescript.js 133879             var pos = lineStart;

./node_modules/typescript/lib/typescript.js 133882             return text.slice(lineStart, pos);

./node_modules/typescript/lib/typescript.js 134105          * matches because of the newline, whereas

./node_modules/typescript/lib/typescript.js 134582                 if ((!ts.isClassDeclaration(a.node) && !ts.isClassDeclaration(b.node)) // If neither outline node is a class

./node_modules/typescript/lib/typescript.js 134617                 // We merge if the outline node previous to b (bIndex - 1) is already part of the current class

./node_modules/typescript/lib/typescript.js 134618                 // We do this so that statements between class members that do not generate outline nodes do not split up the class outline:

./node_modules/typescript/lib/typescript.js 134619                 // Ex This should produce one outline node C:

./node_modules/typescript/lib/typescript.js 134621                 // Ex This will produce 3 outline nodes: C, a, C

./node_modules/typescript/lib/typescript.js 134755                     // We may get a string with newlines or other whitespace in the case of an object dereference

./node_modules/typescript/lib/typescript.js 134974             // Replaces ECMAScript line terminators and removes the trailing `\` from each line:

./node_modules/typescript/lib/typescript.js 135470             var lineStarts = sourceFile.getLineStarts();

./node_modules/typescript/lib/typescript.js 135471             for (var _i = 0, lineStarts_1 = lineStarts; _i < lineStarts_1.length; _i++) {

./node_modules/typescript/lib/typescript.js 135472                 var currentLineStart = lineStarts_1[_i];

./node_modules/typescript/lib/typescript.js 135473                 var lineEnd = sourceFile.getLineEndOfPosition(currentLineStart);

./node_modules/typescript/lib/typescript.js 135474                 var lineText = sourceFile.text.substring(currentLineStart, lineEnd);

./node_modules/typescript/lib/typescript.js 135475                 var result = isRegionDelimiter(lineText);

./node_modules/typescript/lib/typescript.js 135480                     var span = ts.createTextSpanFromBounds(sourceFile.text.indexOf("//", currentLineStart), lineEnd);

./node_modules/typescript/lib/typescript.js 135486                         region.textSpan.length = lineEnd - region.textSpan.start;

./node_modules/typescript/lib/typescript.js 135487                         region.hintSpan.length = lineEnd - region.textSpan.start;

./node_modules/typescript/lib/typescript.js 135494         function isRegionDelimiter(lineText) {

./node_modules/typescript/lib/typescript.js 135497             lineText = ts.trimStringStart(lineText);

./node_modules/typescript/lib/typescript.js 135498             if (!ts.startsWith(lineText, "\/\/")) {

./node_modules/typescript/lib/typescript.js 135499                 return null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescript.js 135501             lineText = ts.trimString(lineText.slice(2));

./node_modules/typescript/lib/typescript.js 135502             return regionDelimiterRegExp.exec(lineText);

./node_modules/typescript/lib/typescript.js 135517                         // never fold region delimiters into single-line comment regions

./node_modules/typescript/lib/typescript.js 135524                         // For single line comments, combine consecutive ones (2 or more) into

./node_modules/typescript/lib/typescript.js 135543                 // Only outline spans of two or more consecutive single line comments

./node_modules/typescript/lib/typescript.js 135674                 // Otherwise, the collapsed section will include the end of the previous line.

./node_modules/typescript/lib/typescript.js 136718                         // Blocks with braces, brackets, parens, or JSX tags on separate lines should be

./node_modules/typescript/lib/typescript.js 137961         // Dont support sourcemaps that contain inlined sources

./node_modules/typescript/lib/typescript.js 137966     function createSourceFileLike(text, lineMap) {

./node_modules/typescript/lib/typescript.js 137969             lineMap: lineMap,

./node_modules/typescript/lib/typescript.js 138423                                     displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/typescript.js 138602                             displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/typescript.js 138757                     displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/typescript.js 139028                     var startLine = this.sourceFile.getLineAndCharacterOfPosition(this.currentTokenSpan.pos).line;

./node_modules/typescript/lib/typescript.js 139029                     var endLine = this.sourceFile.getLineAndCharacterOfPosition(this.nextTokenSpan.pos).line;

./node_modules/typescript/lib/typescript.js 139047                 var startLine = this.sourceFile.getLineAndCharacterOfPosition(node.getStart(this.sourceFile)).line;

./node_modules/typescript/lib/typescript.js 139048                 var endLine = this.sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line;

./node_modules/typescript/lib/typescript.js 139055                     var startLine = this.sourceFile.getLineAndCharacterOfPosition(openBrace.getEnd()).line;

./node_modules/typescript/lib/typescript.js 139056                     var endLine = this.sourceFile.getLineAndCharacterOfPosition(closeBrace.getStart(this.sourceFile)).line;

./node_modules/typescript/lib/typescript.js 139220                         // move past new line

./node_modules/typescript/lib/typescript.js 139259                         return scanner.reScanJsxToken(/* allowMultilineJsxText */ false);

./node_modules/typescript/lib/typescript.js 139361             var anyTokenIncludingMultilineComments = tokenRangeFrom(__spreadArray(__spreadArray([], allTokens, true), [3 /* MultiLineCommentTrivia */], false));

./node_modules/typescript/lib/typescript.js 139379             var functionOpenBraceLeftTokenRange = anyTokenIncludingMultilineComments;

./node_modules/typescript/lib/typescript.js 139419                 // For functions and control block place } on a new line [multi-line rule]

./node_modules/typescript/lib/typescript.js 139420                 rule("NewLineBeforeCloseBraceInBlockContext", anyTokenIncludingMultilineComments, 19 /* CloseBraceToken */, [isMultilineBlockContext], 8 /* InsertNewLine */),

./node_modules/typescript/lib/typescript.js 139421                 // Space/new line after }.

./node_modules/typescript/lib/typescript.js 139433                 // Insert new line after { and before } in multi-line contexts.

./node_modules/typescript/lib/typescript.js 139434                 rule("NewLineAfterOpenBraceInBlockContext", 18 /* OpenBraceToken */, anyToken, [isMultilineBlockContext], 8 /* InsertNewLine */),

./node_modules/typescript/lib/typescript.js 139556                 // Insert a space after { and before } in single-line contexts, but remove space from empty object literals {}.

./node_modules/typescript/lib/typescript.js 139586                 rule("NewLineBeforeOpenBraceInControl", controlOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForControlBlocks"), isControlDeclContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/typescript.js 139589                 rule("NewLineBeforeOpenBraceInFunction", functionOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForFunctions"), isFunctionDeclContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/typescript.js 139591                 rule("NewLineBeforeOpenBraceInTypeScriptDeclWithBlock", typeScriptOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForFunctions"), isTypeScriptDeclWithBlockContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/typescript.js 139632          * @param flags whether the rule deletes a line or not, defaults to no-op

./node_modules/typescript/lib/typescript.js 139754         function isBeforeMultilineBlockContext(context) {

./node_modules/typescript/lib/typescript.js 139757         function isMultilineBlockContext(context) {

./node_modules/typescript/lib/typescript.js 140022             var startLine = context.sourceFile.getLineAndCharacterOfPosition(context.currentTokenSpan.pos).line;

./node_modules/typescript/lib/typescript.js 140023             var endLine = context.sourceFile.getLineAndCharacterOfPosition(nextTokenStart).line;

./node_modules/typescript/lib/typescript.js 140223             var line = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/typescript.js 140224             if (line === 0) {

./node_modules/typescript/lib/typescript.js 140227             // After the enter key, the cursor is now at a new line. The new line may or may not contain non-whitespace characters.

./node_modules/typescript/lib/typescript.js 140228             // If the new line has only whitespaces, we won't want to format this line, because that would remove the indentation as

./node_modules/typescript/lib/typescript.js 140230             //  1. the end of the previous line

./node_modules/typescript/lib/typescript.js 140231             //  2. the last non-whitespace character in the current line

./node_modules/typescript/lib/typescript.js 140232             var endOfFormatSpan = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/typescript.js 140236             // if the character at the end of the span is a line break, we shouldn't include it, because it indicates we don't want to

./node_modules/typescript/lib/typescript.js 140237             // touch the current line at all. Also, on some OSes the line break consists of two characters (\r\n), we should test if the

./node_modules/typescript/lib/typescript.js 140238             // previous character before the end of format span is line break character as well.

./node_modules/typescript/lib/typescript.js 140243                 // get start position for the previous line

./node_modules/typescript/lib/typescript.js 140244                 pos: ts.getStartPositionOfLine(line - 1, sourceFile),

./node_modules/typescript/lib/typescript.js 140296             // format from the beginning of the line

./node_modules/typescript/lib/typescript.js 140437          * If we hit Enter at $ we want line '    b ||' to be indented.

./node_modules/typescript/lib/typescript.js 140438          * Formatting will be applied to the last two lines.

./node_modules/typescript/lib/typescript.js 140439          * Node that fully encloses these lines is binary expression 'a ||...'.

./node_modules/typescript/lib/typescript.js 140442          * that some parent node on the same line does - like if statement in this case.

./node_modules/typescript/lib/typescript.js 140443          * Note that we are considering parents only from the same line with initial node -

./node_modules/typescript/lib/typescript.js 140444          * if parent is on the different line - its delta was already contributed

./node_modules/typescript/lib/typescript.js 140451                 var line = sourceFile.getLineAndCharacterOfPosition(n.getStart(sourceFile)).line;

./node_modules/typescript/lib/typescript.js 140452                 if (previousLine !== -1 /* Unknown */ && line !== previousLine) {

./node_modules/typescript/lib/typescript.js 140458                 previousLine = line;

./node_modules/typescript/lib/typescript.js 140497                 var startLine = sourceFile.getLineAndCharacterOfPosition(enclosingNode.getStart(sourceFile)).line;

./node_modules/typescript/lib/typescript.js 140500                     undecoratedStartLine = sourceFile.getLineAndCharacterOfPosition(ts.getNonDecoratorTokenPosOfNode(enclosingNode, sourceFile)).line;

./node_modules/typescript/lib/typescript.js 140533                     var startLine = sourceFile.getLineAndCharacterOfPosition(startPos).line;

./node_modules/typescript/lib/typescript.js 140548                     // if node is located on the same line with the parent

./node_modules/typescript/lib/typescript.js 140559                         // - we need to get the indentation on last line and the delta of parent

./node_modules/typescript/lib/typescript.js 140624                     getIndentationForToken: function (line, kind, container, suppressDelta) {

./node_modules/typescript/lib/typescript.js 140625                         return !suppressDelta && shouldAddDelta(line, kind, container) ? indentation + getDelta(container) : indentation;

./node_modules/typescript/lib/typescript.js 140629                     recomputeIndentation: function (lineAdded, parent) {

./node_modules/typescript/lib/typescript.js 140631                             indentation += lineAdded ? options.indentSize : -options.indentSize;

./node_modules/typescript/lib/typescript.js 140636                 function shouldAddDelta(line, kind, container) {

./node_modules/typescript/lib/typescript.js 140663                     // if token line equals to the line of containing node (this is a first token in the node) - use node indentation

./node_modules/typescript/lib/typescript.js 140664                     return nodeStartLine !== line

./node_modules/typescript/lib/typescript.js 140708                         processPair(token, sourceFile.getLineAndCharacterOfPosition(token.pos).line, node, previousRange, previousRangeStartLine, previousParent, contextNode, nodeDynamicIndentation);

./node_modules/typescript/lib/typescript.js 140713                     var childStartLine = sourceFile.getLineAndCharacterOfPosition(childStartPos).line;

./node_modules/typescript/lib/typescript.js 140716                         undecoratedChildStartLine = sourceFile.getLineAndCharacterOfPosition(ts.getNonDecoratorTokenPosOfNode(child, sourceFile)).line;

./node_modules/typescript/lib/typescript.js 140785                                 startLine = sourceFile.getLineAndCharacterOfPosition(tokenInfo.token.pos).line;

./node_modules/typescript/lib/typescript.js 140816                             var commaTokenLine = sourceFile.getLineAndCharacterOfPosition(tokenInfo.token.pos).line;

./node_modules/typescript/lib/typescript.js 140839                     var lineAction = 0 /* None */;

./node_modules/typescript/lib/typescript.js 140846                         lineAction = processRange(currentTokenInfo.token, tokenStart, parent, childContextNode, dynamicIndentation);

./node_modules/typescript/lib/typescript.js 140849                             if (lineAction === 0 /* None */) {

./node_modules/typescript/lib/typescript.js 140850                                 // indent token only if end line of previous range does not match start line of the token

./node_modules/typescript/lib/typescript.js 140851                                 var prevEndLine = savePreviousRange && sourceFile.getLineAndCharacterOfPosition(savePreviousRange.end).line;

./node_modules/typescript/lib/typescript.js 140852                                 indentToken = lastTriviaWasNewLine && tokenStart.line !== prevEndLine;

./node_modules/typescript/lib/typescript.js 140855                                 indentToken = lineAction === 1 /* LineAdded */;

./node_modules/typescript/lib/typescript.js 140864                             dynamicIndentation.getIndentationForToken(tokenStart.line, currentTokenInfo.token.kind, container, !!isListEndToken) :

./node_modules/typescript/lib/typescript.js 140869                             indentNextTokenOrTrivia = indentTriviaItems(currentTokenInfo.leadingTrivia, commentIndentation_1, indentNextTokenOrTrivia, function (item) { return insertIndentation(item.pos, commentIndentation_1, /*lineAdded*/ false); });

./node_modules/typescript/lib/typescript.js 140873                             insertIndentation(currentTokenInfo.token.pos, tokenIndentation, lineAction === 1 /* LineAdded */);

./node_modules/typescript/lib/typescript.js 140874                             lastIndentedLine = tokenStart.line;

./node_modules/typescript/lib/typescript.js 140889                                 indentMultilineComment(triviaItem, commentIndentation, /*firstLineIsIndented*/ !indentNextTokenOrTrivia);

./node_modules/typescript/lib/typescript.js 140917                 var lineAction = 0 /* None */;

./node_modules/typescript/lib/typescript.js 140920                         // trim whitespaces starting from the beginning of the span up to the current line

./node_modules/typescript/lib/typescript.js 140922                         trimTrailingWhitespacesForLines(originalStart.line, rangeStart.line);

./node_modules/typescript/lib/typescript.js 140925                         lineAction =

./node_modules/typescript/lib/typescript.js 140926                             processPair(range, rangeStart.line, parent, previousRange, previousRangeStartLine, previousParent, contextNode, dynamicIndentation);

./node_modules/typescript/lib/typescript.js 140931                 previousRangeStartLine = rangeStart.line;

./node_modules/typescript/lib/typescript.js 140932                 return lineAction;

./node_modules/typescript/lib/typescript.js 140938                 var lineAction = 0 /* None */;

./node_modules/typescript/lib/typescript.js 140943                         lineAction = applyRuleEdits(rule, previousItem, previousStartLine, currentItem, currentStartLine);

./node_modules/typescript/lib/typescript.js 140944                         switch (lineAction) {

./node_modules/typescript/lib/typescript.js 140946                                 // Handle the case where the next line is moved to be the end of this line.

./node_modules/typescript/lib/typescript.js 140947                                 // In this case we don't indent the next line in the next pass.

./node_modules/typescript/lib/typescript.js 140949                                     dynamicIndentation.recomputeIndentation(/*lineAddedByFormatting*/ false, contextNode);

./node_modules/typescript/lib/typescript.js 140953                                 // Handle the case where token2 is moved to the new line.

./node_modules/typescript/lib/typescript.js 140955                                 // sameLineIndent flag to notify the indenter that the indentation is within the line.

./node_modules/typescript/lib/typescript.js 140957                                     dynamicIndentation.recomputeIndentation(/*lineAddedByFormatting*/ true, contextNode);

./node_modules/typescript/lib/typescript.js 140961                                 ts.Debug.assert(lineAction === 0 /* None */);

./node_modules/typescript/lib/typescript.js 140963                         // We need to trim trailing whitespace between the tokens if they were on different lines, and no rule was applied to put them on the same line

./node_modules/typescript/lib/typescript.js 140971                     // We need to trim trailing whitespace between the tokens if they were on different lines, and no rule was applied to put them on the same line

./node_modules/typescript/lib/typescript.js 140974                 return lineAction;

./node_modules/typescript/lib/typescript.js 140976             function insertIndentation(pos, indentation, lineAdded) {

./node_modules/typescript/lib/typescript.js 140978                 if (lineAdded) {

./node_modules/typescript/lib/typescript.js 140979                     // new line is added before the token by the formatting rules

./node_modules/typescript/lib/typescript.js 140985                     var startLinePosition = ts.getStartPositionOfLine(tokenStart.line, sourceFile);

./node_modules/typescript/lib/typescript.js 141006             function indentMultilineComment(commentRange, indentation, firstLineIsIndented, indentFinalLine) {

./node_modules/typescript/lib/typescript.js 141008                 // split comment in lines

./node_modules/typescript/lib/typescript.js 141009                 var startLine = sourceFile.getLineAndCharacterOfPosition(commentRange.pos).line;

./node_modules/typescript/lib/typescript.js 141010                 var endLine = sourceFile.getLineAndCharacterOfPosition(commentRange.end).line;

./node_modules/typescript/lib/typescript.js 141013                         // treat as single line comment

./node_modules/typescript/lib/typescript.js 141014                         insertIndentation(commentRange.pos, indentation, /*lineAdded*/ false);

./node_modules/typescript/lib/typescript.js 141020                 for (var line = startLine; line < endLine; line++) {

./node_modules/typescript/lib/typescript.js 141021                     var endOfLine = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/typescript.js 141023                     startPos = ts.getStartPositionOfLine(line + 1, sourceFile);

./node_modules/typescript/lib/typescript.js 141054             function trimTrailingWhitespacesForLines(line1, line2, range) {

./node_modules/typescript/lib/typescript.js 141055                 for (var line = line1; line < line2; line++) {

./node_modules/typescript/lib/typescript.js 141056                     var lineStartPosition = ts.getStartPositionOfLine(line, sourceFile);

./node_modules/typescript/lib/typescript.js 141057                     var lineEndPosition = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/typescript.js 141059                     if (range && (ts.isComment(range.kind) || ts.isStringOrRegularExpressionOrTemplateLiteral(range.kind)) && range.pos <= lineEndPosition && range.end > lineEndPosition) {

./node_modules/typescript/lib/typescript.js 141062                     var whitespaceStart = getTrailingWhitespaceStartPosition(lineStartPosition, lineEndPosition);

./node_modules/typescript/lib/typescript.js 141064                         ts.Debug.assert(whitespaceStart === lineStartPosition || !ts.isWhiteSpaceSingleLine(sourceFile.text.charCodeAt(whitespaceStart - 1)));

./node_modules/typescript/lib/typescript.js 141065                         recordDelete(whitespaceStart, lineEndPosition + 1 - whitespaceStart);

./node_modules/typescript/lib/typescript.js 141084              * Trimming will be done for lines after the previous range

./node_modules/typescript/lib/typescript.js 141088                 var startLine = sourceFile.getLineAndCharacterOfPosition(startPosition).line;

./node_modules/typescript/lib/typescript.js 141089                 var endLine = sourceFile.getLineAndCharacterOfPosition(originalRange.end).line;

./node_modules/typescript/lib/typescript.js 141124                         // exit early if we on different lines and rule cannot change number of newlines

./node_modules/typescript/lib/typescript.js 141125                         // if line1 and line2 are on subsequent lines then no edits are required - ok to exit

./node_modules/typescript/lib/typescript.js 141126                         // if line1 and line2 are separated with more than one newline - ok to exit since we cannot delete extra new lines

./node_modules/typescript/lib/typescript.js 141130                         // edit should not be applied if we have one line feed between elements

./node_modules/typescript/lib/typescript.js 141131                         var lineDelta = currentStartLine - previousStartLine;

./node_modules/typescript/lib/typescript.js 141132                         if (lineDelta !== 1) {

./node_modules/typescript/lib/typescript.js 141138                         // exit early if we on different lines and rule cannot change number of newlines

./node_modules/typescript/lib/typescript.js 141172             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescript.js 141180                 // The end marker of a single-line comment does not include the newline character.

./node_modules/typescript/lib/typescript.js 141185                 // But for closed multi-line comments, we don't want to be inside the comment in the following case:

./node_modules/typescript/lib/typescript.js 141189                 // However, unterminated multi-line comments *do* contain their end.

./node_modules/typescript/lib/typescript.js 141191                 // Internally, we represent the end of the comment at the newline and closing '/', respectively.

./node_modules/typescript/lib/typescript.js 141300              * `true` when we need to assume `position` is on a newline.

./node_modules/typescript/lib/typescript.js 141309              * When inserting some text after an open brace, we would like to get indentation as if a newline was already there.

./node_modules/typescript/lib/typescript.js 141323                 // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescript.js 141336                 var lineAtPosition = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/typescript.js 141337                 // indentation is first non-whitespace character in a previous line

./node_modules/typescript/lib/typescript.js 141338                 // for block indentation, we should look for a line which contains something that's not

./node_modules/typescript/lib/typescript.js 141355                 return getSmartIndent(sourceFile, position, precedingToken, lineAtPosition, assumeNewLineBeforeCloseBrace, options);

./node_modules/typescript/lib/typescript.js 141359                 var previousLine = ts.getLineAndCharacterOfPosition(sourceFile, position).line - 1;

./node_modules/typescript/lib/typescript.js 141360                 var commentStartLine = ts.getLineAndCharacterOfPosition(sourceFile, enclosingCommentRange.pos).line;

./node_modules/typescript/lib/typescript.js 141374                 // move backwards until we find a line with a non-whitespace character,

./node_modules/typescript/lib/typescript.js 141375                 // then find the first non-whitespace character for that line.

./node_modules/typescript/lib/typescript.js 141384                 var lineStart = ts.getLineStartPositionForPosition(current, sourceFile);

./node_modules/typescript/lib/typescript.js 141385                 return findFirstNonWhitespaceColumn(lineStart, current, sourceFile, options);

./node_modules/typescript/lib/typescript.js 141387             function getSmartIndent(sourceFile, position, precedingToken, lineAtPosition, assumeNewLineBeforeCloseBrace, options) {

./node_modules/typescript/lib/typescript.js 141395                         var nextTokenKind = nextTokenIsCurlyBraceOnSameLineAsCursor(precedingToken, current, lineAtPosition, sourceFile);

./node_modules/typescript/lib/typescript.js 141399                             : lineAtPosition !== currentStart.line ? options.indentSize : 0;

./node_modules/typescript/lib/typescript.js 141403                     // do not consider parent-child line sharing yet:

./node_modules/typescript/lib/typescript.js 141405                     //    | preceding node 'a' does share line with its parent but indentation is expected

./node_modules/typescript/lib/typescript.js 141429                 // * parent and child nodes start on the same line, or

./node_modules/typescript/lib/typescript.js 141430                 // * parent is an IfStatement and child starts on the same line as an 'else clause'.

./node_modules/typescript/lib/typescript.js 141438                     var parentAndChildShareLine = containingListOrParentStart.line === currentStart.line ||

./node_modules/typescript/lib/typescript.js 141439                         childStartsOnTheSameLineWithElseInIfStatement(parent, current, currentStart.line, sourceFile);

./node_modules/typescript/lib/typescript.js 141443                         // A list indents its children if the children begin on a later line than the list itself:

./node_modules/typescript/lib/typescript.js 141459                         var listIndentsChild = !!firstListChild && getStartLineAndCharacterForNode(firstListChild, sourceFile).line > containingListOrParentStart.line;

./node_modules/typescript/lib/typescript.js 141470                     // increase indentation if parent node wants its content to be indented and parent and child nodes don't start on the same line

./node_modules/typescript/lib/typescript.js 141482                     var useTrueStart = isArgumentAndStartLineOverlapsExpressionBeingCalled(parent, current, currentStart.line, sourceFile);

./node_modules/typescript/lib/typescript.js 141514                 // - parent and child are not on the same line

./node_modules/typescript/lib/typescript.js 141528             function nextTokenIsCurlyBraceOnSameLineAsCursor(precedingToken, current, lineAtPosition, sourceFile) {

./node_modules/typescript/lib/typescript.js 141538                     // close braces are indented at the parent level if they are located on the same line with cursor

./node_modules/typescript/lib/typescript.js 141539                     // this means that if new line will be added at $ position, this case will be indented

./node_modules/typescript/lib/typescript.js 141546                     var nextTokenStartLine = getStartLineAndCharacterForNode(nextToken, sourceFile).line;

./node_modules/typescript/lib/typescript.js 141547                     return lineAtPosition === nextTokenStartLine ? 2 /* CloseBrace */ : 0 /* Unknown */;

./node_modules/typescript/lib/typescript.js 141559                 var expressionOfCallExpressionEndLine = ts.getLineAndCharacterOfPosition(sourceFile, expressionOfCallExpressionEnd).line;

./node_modules/typescript/lib/typescript.js 141567                     var elseKeywordStartLine = getStartLineAndCharacterForNode(elseKeyword, sourceFile).line;

./node_modules/typescript/lib/typescript.js 141573             // A multiline conditional typically increases the indentation of its whenTrue and whenFalse children:

./node_modules/typescript/lib/typescript.js 141579             // However, that indentation does not apply if the subexpressions themselves span multiple lines,

./node_modules/typescript/lib/typescript.js 141585             //   whenTrue: 'multiline object literal'

./node_modules/typescript/lib/typescript.js 141587             //   whenFalse('multiline parenthesized expression')

./node_modules/typescript/lib/typescript.js 141592             // we check for the whenTrue branch beginning on the line that the condition ends, and the whenFalse

./node_modules/typescript/lib/typescript.js 141593             // branch beginning on the line that the whenTrue branch ends.

./node_modules/typescript/lib/typescript.js 141596                     var conditionEndLine = ts.getLineAndCharacterOfPosition(sourceFile, parent.condition.end).line;

./node_modules/typescript/lib/typescript.js 141605                         //   ? 1 : (          L1: whenTrue indented because it's on a new line

./node_modules/typescript/lib/typescript.js 141607                         //   );                   and one because of the parentheses spanning multiple lines

./node_modules/typescript/lib/typescript.js 141608                         var trueStartLine = getStartLineAndCharacterForNode(parent.whenTrue, sourceFile).line;

./node_modules/typescript/lib/typescript.js 141609                         var trueEndLine = ts.getLineAndCharacterOfPosition(sourceFile, parent.whenTrue.end).line;

./node_modules/typescript/lib/typescript.js 141628                     var lineOfPreviousNode = ts.getLineAndCharacterOfPosition(sourceFile, previousNode.getEnd()).line;

./node_modules/typescript/lib/typescript.js 141629                     if (childStartLine === lineOfPreviousNode) {

./node_modules/typescript/lib/typescript.js 141721                 // walk toward the start of the list starting from current node and check if the line is the same for all items.

./node_modules/typescript/lib/typescript.js 141722                 // if end line for item [i - 1] differs from the start line for item [i] - find column of the first non-whitespace character on the line of item [i]

./node_modules/typescript/lib/typescript.js 141723                 var lineAndCharacter = getStartLineAndCharacterForNode(node, sourceFile);

./node_modules/typescript/lib/typescript.js 141728                     // skip list items that ends on the same line with the current list element

./node_modules/typescript/lib/typescript.js 141729                     var prevEndLine = sourceFile.getLineAndCharacterOfPosition(list[i].end).line;

./node_modules/typescript/lib/typescript.js 141730                     if (prevEndLine !== lineAndCharacter.line) {

./node_modules/typescript/lib/typescript.js 141731                         return findColumnForFirstNonWhitespaceCharacterInLine(lineAndCharacter, sourceFile, options);

./node_modules/typescript/lib/typescript.js 141733                     lineAndCharacter = getStartLineAndCharacterForNode(list[i], sourceFile);

./node_modules/typescript/lib/typescript.js 141737             function findColumnForFirstNonWhitespaceCharacterInLine(lineAndCharacter, sourceFile, options) {

./node_modules/typescript/lib/typescript.js 141738                 var lineStart = sourceFile.getPositionOfLineAndCharacter(lineAndCharacter.line, 0);

./node_modules/typescript/lib/typescript.js 141739                 return findFirstNonWhitespaceColumn(lineStart, lineStart + lineAndCharacter.character, sourceFile, options);

./node_modules/typescript/lib/typescript.js 141742              * Character is the actual index of the character since the beginning of the line.

./node_modules/typescript/lib/typescript.js 141890                 var startLine = sourceFile.getLineAndCharacterOfPosition(rangeStart).line;

./node_modules/typescript/lib/typescript.js 141891                 var endLine = sourceFile.getLineAndCharacterOfPosition(range.end).line;

./node_modules/typescript/lib/typescript.js 141929              * if there are no line breaks between the node and the previous token,

./node_modules/typescript/lib/typescript.js 141938              * Only delete trivia on the same line as getStart().

./node_modules/typescript/lib/typescript.js 142007                 // full start and start of the node are on the same line

./node_modules/typescript/lib/typescript.js 142025             // get start position of the line following the line that contains fullstart position

./node_modules/typescript/lib/typescript.js 142029             // skip whitespaces/newlines

./node_modules/typescript/lib/typescript.js 142033         /** Return the end position of a multiline comment of it is on another line; otherwise returns `undefined`; */

./node_modules/typescript/lib/typescript.js 142034         function getEndPositionOfMultilineTrailingComment(sourceFile, node, options) {

./node_modules/typescript/lib/typescript.js 142038                 // If the trailing comment is a multiline comment that extends to the next lines,

./node_modules/typescript/lib/typescript.js 142045                         // Single line can break the loop as trivia will only be this line.

./node_modules/typescript/lib/typescript.js 142046                         // Comments on subsequest lines are also ignored.

./node_modules/typescript/lib/typescript.js 142050                         // Get the end line of the comment and compare against the end line of the node.

./node_modules/typescript/lib/typescript.js 142051                         // If the comment end line position and the multiline comment extends to multiple lines,

./node_modules/typescript/lib/typescript.js 142077             var multilineEndPosition = getEndPositionOfMultilineTrailingComment(sourceFile, node, options);

./node_modules/typescript/lib/typescript.js 142078             if (multilineEndPosition) {

./node_modules/typescript/lib/typescript.js 142079                 return multilineEndPosition;

./node_modules/typescript/lib/typescript.js 142138                 // When deleting multiple nodes we need to track if the end position is including multiline trailing comments.

./node_modules/typescript/lib/typescript.js 142144                     hasTrailingComment = !!getEndPositionOfMultilineTrailingComment(sourceFile, node, options);

./node_modules/typescript/lib/typescript.js 142191                 return !!getEndPositionOfMultilineTrailingComment(sourceFile, oldNode, configurableEnd);

./node_modules/typescript/lib/typescript.js 142249             ChangeTracker.prototype.insertCommentBeforeLine = function (sourceFile, lineNumber, position, commentText) {

./node_modules/typescript/lib/typescript.js 142250                 var lineStartPosition = ts.getStartPositionOfLine(lineNumber, sourceFile);

./node_modules/typescript/lib/typescript.js 142251                 var startPosition = ts.getFirstNonSpaceCharacterPosition(sourceFile.text, lineStartPosition);

./node_modules/typescript/lib/typescript.js 142252                 // First try to see if we can put the comment on the previous line.

./node_modules/typescript/lib/typescript.js 142255                 // Otherwise, add an extra new line immediately before the error span.

./node_modules/typescript/lib/typescript.js 142258                 var indent = sourceFile.text.slice(lineStartPosition, startPosition);

./node_modules/typescript/lib/typescript.js 142380              * new lines and must share the same indentation.

./node_modules/typescript/lib/typescript.js 142388                         // each indented member must be on a new line

./node_modules/typescript/lib/typescript.js 142412                 // - Always insert leading newline.

./node_modules/typescript/lib/typescript.js 142418                 // - Only insert a trailing newline if body is single-line and there are no other insertions for the node.

./node_modules/typescript/lib/typescript.js 142529                     // use next sibling as an anchor

./node_modules/typescript/lib/typescript.js 142538                         // in multiline case it will work as

./node_modules/typescript/lib/typescript.js 142558                     var multilineList = false;

./node_modules/typescript/lib/typescript.js 142562                     // - determine if list is a multiline

./node_modules/typescript/lib/typescript.js 142564                         // if list has only one element then we'll format is as multiline if node has comment in trailing trivia, or as singleline otherwise

./node_modules/typescript/lib/typescript.js 142573                         // determine if list is multiline by checking lines of after element and element that precedes it.

./node_modules/typescript/lib/typescript.js 142575                         multilineList = afterMinusOneStartLinePosition !== afterStartLinePosition;

./node_modules/typescript/lib/typescript.js 142578                         // in this case we'll always treat containing list as multiline

./node_modules/typescript/lib/typescript.js 142579                         multilineList = true;

./node_modules/typescript/lib/typescript.js 142581                     if (multilineList) {

./node_modules/typescript/lib/typescript.js 142586                         // insert element before the line break on the line that contains 'after' element

./node_modules/typescript/lib/typescript.js 142743                 // strip initial indentation (spaces or tabs) if text will be inserted in the middle of the line

./node_modules/typescript/lib/typescript.js 142779                     preserveSourceNewlines: true,

./node_modules/typescript/lib/typescript.js 143019                     // There was a blank line between the last comment and this comment.

./node_modules/typescript/lib/typescript.js 143021                     var commentLine = sourceFile.getLineAndCharacterOfPosition(range.pos).line;

./node_modules/typescript/lib/typescript.js 143022                     var lastCommentEndLine = sourceFile.getLineAndCharacterOfPosition(lastComment.range.end).line;

./node_modules/typescript/lib/typescript.js 143028                         firstNodeLine = sourceFile.getLineAndCharacterOfPosition(sourceFile.statements[0].getStart()).line;

./node_modules/typescript/lib/typescript.js 143029                     var commentEndLine = sourceFile.getLineAndCharacterOfPosition(range.end).line;

./node_modules/typescript/lib/typescript.js 143045                         if (position < text.length && charCode === 13 /* carriageReturn */ && text.charCodeAt(position) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typescript.js 144843             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typescript.js 145055                 // useNonAdjustedEndPosition to ensure we don't eat the newline after the statement.

./node_modules/typescript/lib/typescript.js 145245                             // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion

./node_modules/typescript/lib/typescript.js 148504             // If label is on a separate line, just delete the rest of that line, but not the indentation of the labeled statement.

./node_modules/typescript/lib/typescript.js 149885             var lineNumber = ts.getLineAndCharacterOfPosition(sourceFile, position).line;

./node_modules/typescript/lib/typescript.js 149886             // Only need to add `// @ts-ignore` for a line once.

./node_modules/typescript/lib/typescript.js 149887             if (!seenLines || ts.tryAddToSet(seenLines, lineNumber)) {

./node_modules/typescript/lib/typescript.js 149888                 changes.insertCommentBeforeLine(sourceFile, lineNumber, position, " @ts-ignore");

./node_modules/typescript/lib/typescript.js 150217             /*multiline*/ true);

./node_modules/typescript/lib/typescript.js 152087                                     hasLeadingNewline: true,

./node_modules/typescript/lib/typescript.js 153146                         // CONSIDER: could detect that each is on a separate line (See `extractConstant_VariableList_MultipleLines` in `extractConstants.ts`)

./node_modules/typescript/lib/typescript.js 154013                 if (file && ts.isTupleTypeNode(node) && (ts.getLineAndCharacterOfPosition(file, node.pos).line === ts.getLineAndCharacterOfPosition(file, node.end).line)) {

./node_modules/typescript/lib/typescript.js 154024             changes.insertNodeBefore(file, firstStatement, ts.ignoreSourceNewlines(newTypeNode), /* blankLineBetween */ true);

./node_modules/typescript/lib/typescript.js 154035             changes.insertNodeBefore(file, firstStatement, ts.ignoreSourceNewlines(newTypeNode), /* blankLineBetween */ true);

./node_modules/typescript/lib/typescript.js 156085             // eslint-disable-next-line debug-assert

./node_modules/typescript/lib/typescript.js 156542                     doc = doc.length === 0 ? inheritedDocs.slice() : inheritedDocs.concat(ts.lineBreakPart(), doc);

./node_modules/typescript/lib/typescript.js 156574         SourceFileObject.prototype.getPositionOfLineAndCharacter = function (line, character, allowEdits) {

./node_modules/typescript/lib/typescript.js 156575             return ts.computePositionOfLineAndCharacter(ts.getLineStarts(this), line, character, this.text, allowEdits);

./node_modules/typescript/lib/typescript.js 156578             var line = this.getLineAndCharacterOfPosition(pos).line;

./node_modules/typescript/lib/typescript.js 156579             var lineStarts = this.getLineStarts();

./node_modules/typescript/lib/typescript.js 156581             if (line + 1 >= lineStarts.length) {

./node_modules/typescript/lib/typescript.js 156585                 lastCharPos = lineStarts[line + 1] - 1;

./node_modules/typescript/lib/typescript.js 156588             // if the new line is "\r\n", we should return the last non-new-line-character position

./node_modules/typescript/lib/typescript.js 157759                 lineStarts: sourceFile.getLineStarts(),

./node_modules/typescript/lib/typescript.js 157760                 firstLine: sourceFile.getLineAndCharacterOfPosition(textRange.pos).line,

./node_modules/typescript/lib/typescript.js 157761                 lastLine: sourceFile.getLineAndCharacterOfPosition(textRange.end).line

./node_modules/typescript/lib/typescript.js 157767             var _a = getLinesForRange(sourceFile, textRange), lineStarts = _a.lineStarts, firstLine = _a.firstLine, lastLine = _a.lastLine;

./node_modules/typescript/lib/typescript.js 157770             var lineTextStarts = new ts.Map();

./node_modules/typescript/lib/typescript.js 157772             var isJsx = ts.isInsideJsxElement(sourceFile, lineStarts[firstLine]);

./node_modules/typescript/lib/typescript.js 157774             // Check each line before any text changes.

./node_modules/typescript/lib/typescript.js 157776                 var lineText = sourceFile.text.substring(lineStarts[i], sourceFile.getLineEndOfPosition(lineStarts[i]));

./node_modules/typescript/lib/typescript.js 157777                 // Find the start of text and the left-most character. No-op on empty lines.

./node_modules/typescript/lib/typescript.js 157778                 var regExec = firstNonWhitespaceCharacterRegex.exec(lineText);

./node_modules/typescript/lib/typescript.js 157781                     lineTextStarts.set(i.toString(), regExec.index);

./node_modules/typescript/lib/typescript.js 157782                     if (lineText.substr(regExec.index, openComment.length) !== openComment) {

./node_modules/typescript/lib/typescript.js 157789                 // If the range is multiline and ends on a beginning of a line, don't comment/uncomment.

./node_modules/typescript/lib/typescript.js 157790                 if (firstLine !== lastLine && lineStarts[i] === textRange.end) {

./node_modules/typescript/lib/typescript.js 157793                 var lineTextStart = lineTextStarts.get(i.toString());

./node_modules/typescript/lib/typescript.js 157794                 // If the line is not an empty line; otherwise no-op.

./node_modules/typescript/lib/typescript.js 157795                 if (lineTextStart !== undefined) {

./node_modules/typescript/lib/typescript.js 157797                         textChanges.push.apply(textChanges, toggleMultilineComment(fileName, { pos: lineStarts[i] + leftMostPosition, end: sourceFile.getLineEndOfPosition(lineStarts[i]) }, isCommenting, isJsx));

./node_modules/typescript/lib/typescript.js 157804                                 start: lineStarts[i] + leftMostPosition

./node_modules/typescript/lib/typescript.js 157808                     else if (sourceFile.text.substr(lineStarts[i] + lineTextStart, openComment.length) === openComment) {

./node_modules/typescript/lib/typescript.js 157813                                 start: lineStarts[i] + lineTextStart

./node_modules/typescript/lib/typescript.js 157821         function toggleMultilineComment(fileName, textRange, insertComment, isInsideJsx) {

./node_modules/typescript/lib/typescript.js 157831             var openMultiline = isJsx ? "{/*" : "/*";

./node_modules/typescript/lib/typescript.js 157832             var closeMultiline = isJsx ? "*/}" : "*/";

./node_modules/typescript/lib/typescript.js 157833             var openMultilineRegex = isJsx ? "\\{\\/\\*" : "\\/\\*";

./node_modules/typescript/lib/typescript.js 157834             var closeMultilineRegex = isJsx ? "\\*\\/\\}" : "\\*\\/";

./node_modules/typescript/lib/typescript.js 157838                 var offset = text.substr(pos, openMultiline.length) === openMultiline ? openMultiline.length : 0;

./node_modules/typescript/lib/typescript.js 157855                     var newPos = text.substring(pos, textRange.end).search("(" + openMultilineRegex + ")|(" + closeMultilineRegex + ")");

./node_modules/typescript/lib/typescript.js 157859                     pos = newPos === -1 ? textRange.end + 1 : pos + newPos + closeMultiline.length;

./node_modules/typescript/lib/typescript.js 157871                 if (text.substr(firstPos, openMultiline.length) !== openMultiline) {

./node_modules/typescript/lib/typescript.js 157873                         newText: openMultiline,

./node_modules/typescript/lib/typescript.js 157882                     if (text.substr(positions[i] - closeMultiline.length, closeMultiline.length) !== closeMultiline) {

./node_modules/typescript/lib/typescript.js 157884                             newText: closeMultiline,

./node_modules/typescript/lib/typescript.js 157891                     if (text.substr(positions[i], openMultiline.length) !== openMultiline) {

./node_modules/typescript/lib/typescript.js 157893                             newText: openMultiline,

./node_modules/typescript/lib/typescript.js 157904                         newText: closeMultiline,

./node_modules/typescript/lib/typescript.js 157916                     var from = pos_2 - closeMultiline.length > 0 ? pos_2 - closeMultiline.length : 0;

./node_modules/typescript/lib/typescript.js 157917                     var offset = text.substr(from, closeMultiline.length) === closeMultiline ? closeMultiline.length : 0;

./node_modules/typescript/lib/typescript.js 157921                             length: openMultiline.length,

./node_modules/typescript/lib/typescript.js 157932             // If there is a selection that is on the same line, add multiline.

./node_modules/typescript/lib/typescript.js 157934                 ? toggleMultilineComment(fileName, textRange, /*insertComment*/ true)

./node_modules/typescript/lib/typescript.js 157955                             textChanges.push.apply(textChanges, toggleMultilineComment(fileName, { end: commentRange.end, pos: commentRange.pos + 1 }, /*insertComment*/ false));

./node_modules/typescript/lib/typescript.js 158069                 // text up to the end of the line (or */).

./node_modules/typescript/lib/typescript.js 158073                 // match the literal portion up to the end of the line or end of comment.

./node_modules/typescript/lib/typescript.js 158084                 //  'm' is so we can find matches in a multi-line input.

./node_modules/typescript/lib/typescript.js 158146                 return { line: 0, character: 0 };

./node_modules/typescript/lib/typescript.js 158235             toggleMultilineComment: toggleMultilineComment,

./node_modules/typescript/lib/typescript.js 158398             var lineOfPosition = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/typescript.js 158399             if (sourceFile.getLineAndCharacterOfPosition(tokenAtLocation.getStart(sourceFile)).line > lineOfPosition) {

./node_modules/typescript/lib/typescript.js 158400                 // Get previous token if the token is returned starts on new line

./node_modules/typescript/lib/typescript.js 158403                 // token at position will return let keyword on second line as the token but we would like to use

./node_modules/typescript/lib/typescript.js 158404                 // token on same line if trailing trivia (comments or white spaces on same line) part of the last token on that line

./node_modules/typescript/lib/typescript.js 158406                 // It's a blank line

./node_modules/typescript/lib/typescript.js 158407                 if (!preceding || sourceFile.getLineAndCharacterOfPosition(preceding.getEnd()).line !== lineOfPosition) {

./node_modules/typescript/lib/typescript.js 158428                 if (node && lineOfPosition === sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line) {

./node_modules/typescript/lib/typescript.js 158780                         // Set on parent if on same line otherwise on first statement

./node_modules/typescript/lib/typescript.js 158786                         // Set span on previous token if it starts on same line otherwise on the first statement of the block

./node_modules/typescript/lib/typescript.js 159022 var debugObjectHost = (function () { return this; })(); // eslint-disable-line prefer-const

./node_modules/typescript/lib/typescript.js 159121             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typescript.js 159307             this.languageService = null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescript.js 159313             this.logger = null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescript.js 159321             this.forwardJSONCall("refresh(" + throwOnError + ")", function () { return null; } // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescript.js 159328                 return null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typescript.js 159606         LanguageServiceShimObject.prototype.toggleMultilineComment = function (fileName, textRange) {

./node_modules/typescript/lib/typescript.js 159608             return this.forwardJSONCall("toggleMultilineComment('" + fileName + "', '" + JSON.stringify(textRange) + "')", function () { return _this.languageService.toggleMultilineComment(fileName, textRange); });

./node_modules/typescript/lib/typescript.js 159839         // The previous line should have made `globalThis` globally

./node_modules/typescript/lib/typescript.js 160536         // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typingsInstaller.js 89     // The following is baselined as a literal template type without intervention

./node_modules/typescript/lib/typingsInstaller.js 91     // eslint-disable-next-line @typescript-eslint/no-inferrable-types

./node_modules/typescript/lib/typingsInstaller.js 108             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typingsInstaller.js 117             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/typingsInstaller.js 2216      * Removes the leading and trailing white space and line terminator characters from a string.

./node_modules/typescript/lib/typingsInstaller.js 2384             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typingsInstaller.js 2396          * @deprecated Use `checkDefined` to check whether a value is defined inline. Use `assertIsDefined` to check whether

./node_modules/typescript/lib/typingsInstaller.js 2413          * @deprecated Use `checkEachDefined` to check whether the elements of an array are defined inline. Use `assertEachIsDefined` to check whether

./node_modules/typescript/lib/typingsInstaller.js 2585             if (!("__debugFlowFlags" in flowNode)) { // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typingsInstaller.js 2631             if (!("__tsDebuggerDisplay" in array)) { // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typingsInstaller.js 3262     // eslint-disable-next-line @typescript-eslint/naming-convention

./node_modules/typescript/lib/typingsInstaller.js 3579                 + [__assign({ name: "process_name", args: { name: "tsc" } }, meta), __assign({ name: "thread_name", args: { name: "Main" } }, meta), __assign(__assign({ name: "TracingStartedInBrowser" }, meta), { cat: "disabled-by-default-devtools.timeline" })]

./node_modules/typescript/lib/typingsInstaller.js 3687                     line: lc.line + 1,

./node_modules/typescript/lib/typingsInstaller.js 3698             // Cleverness: no line break here so that the type ID will match the line number

./node_modules/typescript/lib/typingsInstaller.js 3812         // We detect and preserve #! on the first line

./node_modules/typescript/lib/typingsInstaller.js 4472         NodeBuilderFlags[NodeBuilderFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";

./node_modules/typescript/lib/typingsInstaller.js 4513         TypeFormatFlags[TypeFormatFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";

./node_modules/typescript/lib/typingsInstaller.js 5192         CharacterCodes[CharacterCodes["lineFeed"] = 10] = "lineFeed";

./node_modules/typescript/lib/typingsInstaller.js 5194         CharacterCodes[CharacterCodes["lineSeparator"] = 8232] = "lineSeparator";

./node_modules/typescript/lib/typingsInstaller.js 5439         /*@internal*/ EmitFlags[EmitFlags["IgnoreSourceNewlines"] = 134217728] = "IgnoreSourceNewlines";

./node_modules/typescript/lib/typingsInstaller.js 5611          * Single line comment of the form

./node_modules/typescript/lib/typingsInstaller.js 5618          * Multiline non-jsdoc pragma of the form

./node_modules/typescript/lib/typingsInstaller.js 6385      * Called for command-line and server use cases.

./node_modules/typescript/lib/typingsInstaller.js 6764     ts.sysLog = ts.noop; // eslint-disable-line prefer-const

./node_modules/typescript/lib/typingsInstaller.js 7191     // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/typingsInstaller.js 8759         Option_project_cannot_be_mixed_with_source_files_on_a_command_line: diag(5042, ts.DiagnosticCategory.Error, "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042", "Option 'project' cannot be mixed with source files on a command line."),

./node_modules/typescript/lib/typingsInstaller.js 8762         Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: diag(5051, ts.DiagnosticCategory.Error, "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051", "Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided."),

./node_modules/typescript/lib/typingsInstaller.js 8831         Insert_command_line_options_and_files_from_a_file: diag(6030, ts.DiagnosticCategory.Message, "Insert_command_line_options_and_files_from_a_file_6030", "Insert command line options and files from a file."),

./node_modules/typescript/lib/typingsInstaller.js 8856         Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: diag(6060, ts.DiagnosticCategory.Message, "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060", "Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)."),

./node_modules/typescript/lib/typingsInstaller.js 8858         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line: diag(6064, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'null' on command line."),

./node_modules/typescript/lib/typingsInstaller.js 8943         Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap_to_be_set: diag(6152, ts.DiagnosticCategory.Message, "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152", "Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set."),

./node_modules/typescript/lib/typingsInstaller.js 8962         Command_line_Options: diag(6171, ts.DiagnosticCategory.Message, "Command_line_Options_6171", "Command-line Options"),

./node_modules/typescript/lib/typingsInstaller.js 9011         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line: diag(6230, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'false' or 'null' on command line."),

./node_modules/typescript/lib/typingsInstaller.js 9065         Option_build_must_be_the_first_command_line_argument: diag(6369, ts.DiagnosticCategory.Error, "Option_build_must_be_the_first_command_line_argument_6369", "Option '--build' must be the first command line argument."),

./node_modules/typescript/lib/typingsInstaller.js 9157         Set_the_newline_character_for_emitting_files: diag(6659, ts.DiagnosticCategory.Message, "Set_the_newline_character_for_emitting_files_6659", "Set the newline character for emitting files."),

./node_modules/typescript/lib/typingsInstaller.js 9748      * Test for whether a single line comment with leading whitespace trimmed's text contains a directive.

./node_modules/typescript/lib/typingsInstaller.js 9752      * Test for whether a multi-line comment with leading whitespace trimmed's last line contains a directive.

./node_modules/typescript/lib/typingsInstaller.js 9814         var lineStart = 0;

./node_modules/typescript/lib/typingsInstaller.js 9820                     if (text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typingsInstaller.js 9824                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typingsInstaller.js 9825                     result.push(lineStart);

./node_modules/typescript/lib/typingsInstaller.js 9826                     lineStart = pos;

./node_modules/typescript/lib/typingsInstaller.js 9830                         result.push(lineStart);

./node_modules/typescript/lib/typingsInstaller.js 9831                         lineStart = pos;

./node_modules/typescript/lib/typingsInstaller.js 9836         result.push(lineStart);

./node_modules/typescript/lib/typingsInstaller.js 9840     function getPositionOfLineAndCharacter(sourceFile, line, character, allowEdits) {

./node_modules/typescript/lib/typingsInstaller.js 9842             sourceFile.getPositionOfLineAndCharacter(line, character, allowEdits) :

./node_modules/typescript/lib/typingsInstaller.js 9843             computePositionOfLineAndCharacter(getLineStarts(sourceFile), line, character, sourceFile.text, allowEdits);

./node_modules/typescript/lib/typingsInstaller.js 9847     function computePositionOfLineAndCharacter(lineStarts, line, character, debugText, allowEdits) {

./node_modules/typescript/lib/typingsInstaller.js 9848         if (line < 0 || line >= lineStarts.length) {

./node_modules/typescript/lib/typingsInstaller.js 9850                 // Clamp line to nearest allowable value

./node_modules/typescript/lib/typingsInstaller.js 9851                 line = line < 0 ? 0 : line >= lineStarts.length ? lineStarts.length - 1 : line;

./node_modules/typescript/lib/typingsInstaller.js 9854                 ts.Debug.fail("Bad line number. Line: " + line + ", lineStarts.length: " + lineStarts.length + " , line map is correct? " + (debugText !== undefined ? ts.arraysEqual(lineStarts, computeLineStarts(debugText)) : "unknown"));

./node_modules/typescript/lib/typingsInstaller.js 9857         var res = lineStarts[line] + character;

./node_modules/typescript/lib/typingsInstaller.js 9862             return res > lineStarts[line + 1] ? lineStarts[line + 1] : typeof debugText === "string" && res > debugText.length ? debugText.length : res;

./node_modules/typescript/lib/typingsInstaller.js 9864         if (line < lineStarts.length - 1) {

./node_modules/typescript/lib/typingsInstaller.js 9865             ts.Debug.assert(res < lineStarts[line + 1]);

./node_modules/typescript/lib/typingsInstaller.js 9868             ts.Debug.assert(res <= debugText.length); // Allow single character overflow for trailing newline

./node_modules/typescript/lib/typingsInstaller.js 9875         return sourceFile.lineMap || (sourceFile.lineMap = computeLineStarts(sourceFile.text));

./node_modules/typescript/lib/typingsInstaller.js 9879     function computeLineAndCharacterOfPosition(lineStarts, position) {

./node_modules/typescript/lib/typingsInstaller.js 9880         var lineNumber = computeLineOfPosition(lineStarts, position);

./node_modules/typescript/lib/typingsInstaller.js 9882             line: lineNumber,

./node_modules/typescript/lib/typingsInstaller.js 9883             character: position - lineStarts[lineNumber]

./node_modules/typescript/lib/typingsInstaller.js 9889      * We assume the first line starts at position 0 and 'position' is non-negative.

./node_modules/typescript/lib/typingsInstaller.js 9891     function computeLineOfPosition(lineStarts, position, lowerBound) {

./node_modules/typescript/lib/typingsInstaller.js 9892         var lineNumber = ts.binarySearch(lineStarts, position, ts.identity, ts.compareValues, lowerBound);

./node_modules/typescript/lib/typingsInstaller.js 9893         if (lineNumber < 0) {

./node_modules/typescript/lib/typingsInstaller.js 9895             // the binary search returns the 2's-complement of the next line start

./node_modules/typescript/lib/typingsInstaller.js 9896             // e.g. if the line starts at [5, 10, 23, 80] and the position requested was 20

./node_modules/typescript/lib/typingsInstaller.js 9899             // We want the index of the previous line start, so we subtract 1.

./node_modules/typescript/lib/typingsInstaller.js 9901             lineNumber = ~lineNumber - 1;

./node_modules/typescript/lib/typingsInstaller.js 9902             ts.Debug.assert(lineNumber !== -1, "position cannot precede the beginning of the file");

./node_modules/typescript/lib/typingsInstaller.js 9904         return lineNumber;

./node_modules/typescript/lib/typingsInstaller.js 9911         var lineStarts = getLineStarts(sourceFile);

./node_modules/typescript/lib/typingsInstaller.js 9915         var lowerLine = computeLineOfPosition(lineStarts, lower);

./node_modules/typescript/lib/typingsInstaller.js 9916         var upperLine = computeLineOfPosition(lineStarts, upper, lowerLine);

./node_modules/typescript/lib/typingsInstaller.js 9928     /** Does not include line breaks. For that, see isWhiteSpaceLike. */

./node_modules/typescript/lib/typingsInstaller.js 9931         // It is explicitly not a line-break as it isn't in the exact set specified by EcmaScript.

./node_modules/typescript/lib/typingsInstaller.js 9948         // The ECMAScript line terminator characters are listed in Table 3.

./node_modules/typescript/lib/typingsInstaller.js 9955         // Only the characters in Table 3 are treated as line terminators. Other new line or line

./node_modules/typescript/lib/typingsInstaller.js 9956         // breaking characters are treated as white space but not as line terminators.

./node_modules/typescript/lib/typingsInstaller.js 9957         return ch === 10 /* lineFeed */ ||

./node_modules/typescript/lib/typingsInstaller.js 9959             ch === 8232 /* lineSeparator */ ||

./node_modules/typescript/lib/typingsInstaller.js 9982             case 10 /* lineFeed */:

./node_modules/typescript/lib/typingsInstaller.js 10015                     if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typingsInstaller.js 10019                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typingsInstaller.js 10100         // Conflict markers must be at the start of a line.

./node_modules/typescript/lib/typingsInstaller.js 10158      * Single-line comment ranges include the leading double-slash characters but not the ending

./node_modules/typescript/lib/typingsInstaller.js 10159      * line break. Multi-line comment ranges include the leading slash-asterisk and trailing

./node_modules/typescript/lib/typingsInstaller.js 10166      * @param trailing If false, whitespace is skipped until the first line break and comments

./node_modules/typescript/lib/typingsInstaller.js 10168      *      between the given position and the next line break are returned.

./node_modules/typescript/lib/typingsInstaller.js 10194                     if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typingsInstaller.js 10198                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typingsInstaller.js 10671                     if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typingsInstaller.js 10770                 // when encountering a LineContinuation (i.e. a backslash and a line terminator sequence),

./node_modules/typescript/lib/typingsInstaller.js 10771                 // the line terminator is interpreted to be "the empty code unit sequence".

./node_modules/typescript/lib/typingsInstaller.js 10773                     if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typingsInstaller.js 10777                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typingsInstaller.js 10778                 case 8232 /* lineSeparator */:

./node_modules/typescript/lib/typingsInstaller.js 10978                     case 10 /* lineFeed */:

./node_modules/typescript/lib/typingsInstaller.js 10986                             if (ch === 13 /* carriageReturn */ && pos + 1 < end && text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typingsInstaller.js 11078                             // decoration at the start of a JSDoc comment line

./node_modules/typescript/lib/typingsInstaller.js 11115                         // Single-line comment

./node_modules/typescript/lib/typingsInstaller.js 11132                         // Multi-line comment

./node_modules/typescript/lib/typingsInstaller.js 11461                     // If we reach the end of a file, or hit a newline, then this is an unterminated

./node_modules/typescript/lib/typingsInstaller.js 11505         function appendIfCommentDirective(commentDirectives, text, commentDirectiveRegEx, lineStart) {

./node_modules/typescript/lib/typingsInstaller.js 11511                 range: { pos: lineStart, end: pos },

./node_modules/typescript/lib/typingsInstaller.js 11540         function reScanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/typingsInstaller.js 11541             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/typingsInstaller.js 11543             return token = scanJsxToken(allowMultilineJsxText);

./node_modules/typescript/lib/typingsInstaller.js 11564         function scanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/typingsInstaller.js 11565             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/typingsInstaller.js 11583             // First non-whitespace character on this line.

./node_modules/typescript/lib/typingsInstaller.js 11585             // These initial values are special because the first line is:

./node_modules/typescript/lib/typingsInstaller.js 11605                 // FirstNonWhitespace is 0, then we only see whitespaces so far. If we see a linebreak, we want to ignore that whitespaces.

./node_modules/typescript/lib/typingsInstaller.js 11614                 else if (!allowMultilineJsxText && isLineBreak(char) && firstNonWhitespace > 0) {

./node_modules/typescript/lib/typingsInstaller.js 11615                     // Stop JsxText on each line during formatting. This allows the formatter to

./node_modules/typescript/lib/typingsInstaller.js 11616                     // indent each line correctly.

./node_modules/typescript/lib/typingsInstaller.js 11700                     if (text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/typingsInstaller.js 11704                 case 10 /* lineFeed */:

./node_modules/typescript/lib/typingsInstaller.js 12009     ts.unchangedTextChangeRange = createTextChangeRange(createTextSpan(0, 0), 0); // eslint-disable-line prefer-const

./node_modules/typescript/lib/typingsInstaller.js 12074             // which if the two $'s precedes the other, and we move that one forward until they line up.  in this case that

./node_modules/typescript/lib/typingsInstaller.js 13758     function guessIndentation(lines) {

./node_modules/typescript/lib/typingsInstaller.js 13760         for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {

./node_modules/typescript/lib/typingsInstaller.js 13761             var line = lines_1[_i];

./node_modules/typescript/lib/typingsInstaller.js 13762             if (!line.length) {

./node_modules/typescript/lib/typingsInstaller.js 13766             for (; i < line.length && i < indentation; i++) {

./node_modules/typescript/lib/typingsInstaller.js 13767                 if (!ts.isWhiteSpaceLike(line.charCodeAt(i))) {

./node_modules/typescript/lib/typingsInstaller.js 13867             // Completely ignore indentation for string writers.  And map newlines to

./node_modules/typescript/lib/typingsInstaller.js 14070     function getStartPositionOfLine(line, sourceFile) {

./node_modules/typescript/lib/typingsInstaller.js 14071         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/typingsInstaller.js 14072         return ts.getLineStarts(sourceFile)[line];

./node_modules/typescript/lib/typingsInstaller.js 14079         return file.fileName + "(" + (loc.line + 1) + "," + (loc.character + 1) + ")";

./node_modules/typescript/lib/typingsInstaller.js 14082     function getEndLinePosition(line, sourceFile) {

./node_modules/typescript/lib/typingsInstaller.js 14083         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/typingsInstaller.js 14084         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/typingsInstaller.js 14085         var lineIndex = line;

./node_modules/typescript/lib/typingsInstaller.js 14087         if (lineIndex + 1 === lineStarts.length) {

./node_modules/typescript/lib/typingsInstaller.js 14088             // last line - return EOF

./node_modules/typescript/lib/typingsInstaller.js 14092             // current line start

./node_modules/typescript/lib/typingsInstaller.js 14093             var start = lineStarts[lineIndex];

./node_modules/typescript/lib/typingsInstaller.js 14094             // take the start position of the next line - 1 = it should be some line break

./node_modules/typescript/lib/typingsInstaller.js 14095             var pos = lineStarts[lineIndex + 1] - 1;

./node_modules/typescript/lib/typingsInstaller.js 14097             // walk backwards skipping line breaks, stop the the beginning of current line.

./node_modules/typescript/lib/typingsInstaller.js 14100             // $ <- end of line for this position should match the start position

./node_modules/typescript/lib/typingsInstaller.js 14218             "" + ts.getLineAndCharacterOfPosition(sourceFile, commentDirective.range.end).line,

./node_modules/typescript/lib/typingsInstaller.js 14226                 var line = _a[0], directive = _a[1];

./node_modules/typescript/lib/typingsInstaller.js 14227                 return directive.type === 0 /* ExpectError */ && !usedLines.get(line);

./node_modules/typescript/lib/typingsInstaller.js 14234         function markUsed(line) {

./node_modules/typescript/lib/typingsInstaller.js 14235             if (!directivesByLine.has("" + line)) {

./node_modules/typescript/lib/typingsInstaller.js 14238             usedLines.set("" + line, true);

./node_modules/typescript/lib/typingsInstaller.js 14294             // strip space + asterisk at line start

./node_modules/typescript/lib/typingsInstaller.js 14295             text = text.split(/\r\n|\n|\r/).map(function (line) { return ts.trimStringStart(line.replace(/^\s*\*/, "")); }).join("\n");

./node_modules/typescript/lib/typingsInstaller.js 14344                 String: ["codePointAt", "includes", "endsWith", "normalize", "repeat", "startsWith", "anchor", "big", "blink", "bold", "fixed", "fontcolor", "fontsize", "italics", "link", "small", "strike", "sub", "sup"],

./node_modules/typescript/lib/typingsInstaller.js 14836             var startLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.pos).line;

./node_modules/typescript/lib/typingsInstaller.js 14837             var endLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.end).line;

./node_modules/typescript/lib/typingsInstaller.js 14839                 // The arrow function spans multiple lines,

./node_modules/typescript/lib/typingsInstaller.js 14840                 // make the error span be the first line, inclusive.

./node_modules/typescript/lib/typingsInstaller.js 17460     // This consists of the first 19 unprintable ASCII characters, canonical escapes, lineSeparator,

./node_modules/typescript/lib/typingsInstaller.js 17461     // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in

./node_modules/typescript/lib/typingsInstaller.js 17467     // Template strings preserve simple LF newlines, still encode CRLF (or CR)

./node_modules/typescript/lib/typingsInstaller.js 17504      * but augmented for a few select characters (e.g. lineSeparator, paragraphSeparator, nextLine)

./node_modules/typescript/lib/typingsInstaller.js 17524     // This consists of the first 19 unprintable ASCII characters, JSX canonical escapes, lineSeparator,

./node_modules/typescript/lib/typingsInstaller.js 17525     // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in

./node_modules/typescript/lib/typingsInstaller.js 17590         var lineStart;

./node_modules/typescript/lib/typingsInstaller.js 17591         var lineCount;

./node_modules/typescript/lib/typingsInstaller.js 17592         var linePos;

./node_modules/typescript/lib/typingsInstaller.js 17595             var lineStartsOfS = ts.computeLineStarts(s);

./node_modules/typescript/lib/typingsInstaller.js 17596             if (lineStartsOfS.length > 1) {

./node_modules/typescript/lib/typingsInstaller.js 17597                 lineCount = lineCount + lineStartsOfS.length - 1;

./node_modules/typescript/lib/typingsInstaller.js 17598                 linePos = output.length - s.length + ts.last(lineStartsOfS);

./node_modules/typescript/lib/typingsInstaller.js 17599                 lineStart = (linePos - output.length) === 0;

./node_modules/typescript/lib/typingsInstaller.js 17602                 lineStart = false;

./node_modules/typescript/lib/typingsInstaller.js 17607                 if (lineStart) {

./node_modules/typescript/lib/typingsInstaller.js 17609                     lineStart = false;

./node_modules/typescript/lib/typingsInstaller.js 17628             lineStart = true;

./node_modules/typescript/lib/typingsInstaller.js 17629             lineCount = 0;

./node_modules/typescript/lib/typingsInstaller.js 17630             linePos = 0;

./node_modules/typescript/lib/typingsInstaller.js 17646             if (!lineStart || force) {

./node_modules/typescript/lib/typingsInstaller.js 17648                 lineCount++;

./node_modules/typescript/lib/typingsInstaller.js 17649                 linePos = output.length;

./node_modules/typescript/lib/typingsInstaller.js 17650                 lineStart = true;

./node_modules/typescript/lib/typingsInstaller.js 17655             return lineStart ? output.length : (output.length + newLine.length);

./node_modules/typescript/lib/typingsInstaller.js 17667             getLine: function () { return lineCount; },

./node_modules/typescript/lib/typingsInstaller.js 17668             getColumn: function () { return lineStart ? indent * getIndentSize() : output.length - linePos; },

./node_modules/typescript/lib/typingsInstaller.js 17670             isAtStartOfLine: function () { return lineStart; },

./node_modules/typescript/lib/typingsInstaller.js 17894         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/typingsInstaller.js 17895         return ts.computeLineOfPosition(lineStarts, pos);

./node_modules/typescript/lib/typingsInstaller.js 17898     function getLineOfLocalPositionFromLineMap(lineMap, pos) {

./node_modules/typescript/lib/typingsInstaller.js 17899         return ts.computeLineOfPosition(lineMap, pos);

./node_modules/typescript/lib/typingsInstaller.js 18045     function emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments) {

./node_modules/typescript/lib/typingsInstaller.js 18046         emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, node.pos, leadingComments);

./node_modules/typescript/lib/typingsInstaller.js 18049     function emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, pos, leadingComments) {

./node_modules/typescript/lib/typingsInstaller.js 18050         // If the leading comments start on different line than the start of node, write new line

./node_modules/typescript/lib/typingsInstaller.js 18052             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, leadingComments[0].pos)) {

./node_modules/typescript/lib/typingsInstaller.js 18057     function emitNewLineBeforeLeadingCommentOfPosition(lineMap, writer, pos, commentPos) {

./node_modules/typescript/lib/typingsInstaller.js 18058         // If the leading comments start on different line than the start of node, write new line

./node_modules/typescript/lib/typingsInstaller.js 18060             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, commentPos)) {

./node_modules/typescript/lib/typingsInstaller.js 18065     function emitComments(text, lineMap, writer, comments, leadingSeparator, trailingSeparator, newLine, writeComment) {

./node_modules/typescript/lib/typingsInstaller.js 18077                 writeComment(text, lineMap, writer, comment.pos, comment.end, newLine);

./node_modules/typescript/lib/typingsInstaller.js 18095     function emitDetachedComments(text, lineMap, writer, writeComment, node, newLine, removeComments) {

./node_modules/typescript/lib/typingsInstaller.js 18118                     var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, lastComment.end);

./node_modules/typescript/lib/typingsInstaller.js 18119                     var commentLine = getLineOfLocalPositionFromLineMap(lineMap, comment.pos);

./node_modules/typescript/lib/typingsInstaller.js 18121                         // There was a blank line between the last comment and this comment.  This

./node_modules/typescript/lib/typingsInstaller.js 18132                 // sure there is at least one blank line between it and the node.  If not, it's not

./node_modules/typescript/lib/typingsInstaller.js 18134                 var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, ts.last(detachedComments).end);

./node_modules/typescript/lib/typingsInstaller.js 18135                 var nodeLine = getLineOfLocalPositionFromLineMap(lineMap, ts.skipTrivia(text, node.pos));

./node_modules/typescript/lib/typingsInstaller.js 18138                     emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments);

./node_modules/typescript/lib/typingsInstaller.js 18139                     emitComments(text, lineMap, writer, detachedComments, /*leadingSeparator*/ false, /*trailingSeparator*/ true, newLine, writeComment);

./node_modules/typescript/lib/typingsInstaller.js 18150     function writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/typingsInstaller.js 18152             var firstCommentLineAndCharacter = ts.computeLineAndCharacterOfPosition(lineMap, commentPos);

./node_modules/typescript/lib/typingsInstaller.js 18153             var lineCount = lineMap.length;

./node_modules/typescript/lib/typingsInstaller.js 18155             for (var pos = commentPos, currentLine = firstCommentLineAndCharacter.line; pos < commentEnd; currentLine++) {

./node_modules/typescript/lib/typingsInstaller.js 18156                 var nextLineStart = (currentLine + 1) === lineCount

./node_modules/typescript/lib/typingsInstaller.js 18158                     : lineMap[currentLine + 1];

./node_modules/typescript/lib/typingsInstaller.js 18160                     // If we are not emitting first line, we need to write the spaces to adjust the alignment

./node_modules/typescript/lib/typingsInstaller.js 18162                         firstCommentLineIndent = calculateIndent(text, lineMap[firstCommentLineAndCharacter.line], commentPos);

./node_modules/typescript/lib/typingsInstaller.js 18169                     //         /* starts at character 9 this is line 1

./node_modules/typescript/lib/typingsInstaller.js 18170                     //    * starts at character pos 4 line                        --1  = 8 - 8 + 3

./node_modules/typescript/lib/typingsInstaller.js 18175                     //     /* this is line 1 -- Assume current writer indent 8

./node_modules/typescript/lib/typingsInstaller.js 18176                     //      * line                                                --3 = 8 - 4 + 5

./node_modules/typescript/lib/typingsInstaller.js 18197                 // Write the comment line text

./node_modules/typescript/lib/typingsInstaller.js 18203             // Single line comment of style //....

./node_modules/typescript/lib/typingsInstaller.js 18219             // Empty string - make sure we write empty line

./node_modules/typescript/lib/typingsInstaller.js 18712     var lineFeed = "\n";

./node_modules/typescript/lib/typingsInstaller.js 18718                 return lineFeed;

./node_modules/typescript/lib/typingsInstaller.js 19256     // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/typingsInstaller.js 20290         // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typingsInstaller.js 21700             inlineExpressions: inlineExpressions,

./node_modules/typescript/lib/typingsInstaller.js 23496             // eslint-disable-next-line no-undef-init

./node_modules/typescript/lib/typingsInstaller.js 25767         function inlineExpressions(expressions) {

./node_modules/typescript/lib/typingsInstaller.js 26147                 // tslint:disable-next-line no-invalid-template-strings

./node_modules/typescript/lib/typingsInstaller.js 26151                 // tslint:disable-next-line no-invalid-template-strings

./node_modules/typescript/lib/typingsInstaller.js 26500     // tslint:disable-next-line variable-name

./node_modules/typescript/lib/typingsInstaller.js 26829     function ignoreSourceNewlines(node) {

./node_modules/typescript/lib/typingsInstaller.js 26830         getOrCreateEmitNode(node).flags |= 134217728 /* IgnoreSourceNewlines */;

./node_modules/typescript/lib/typingsInstaller.js 26833     ts.ignoreSourceNewlines = ignoreSourceNewlines;

./node_modules/typescript/lib/typingsInstaller.js 29388     function createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState) {

./node_modules/typescript/lib/typingsInstaller.js 29390         return trampoline;

./node_modules/typescript/lib/typingsInstaller.js 29391         function trampoline(node, outerState) {

./node_modules/typescript/lib/typingsInstaller.js 29404     ts.createBinaryExpressionTrampoline = createBinaryExpressionTrampoline;

./node_modules/typescript/lib/typingsInstaller.js 30560             // code from createNode is inlined here so createNode won't have to deal with special case of creating source files

./node_modules/typescript/lib/typingsInstaller.js 30708         // reason about this side effect).  Mainstream VMs inline simple functions like this, so

./node_modules/typescript/lib/typingsInstaller.js 31859             // Note: the newlines are important here.  For example, if that above code

./node_modules/typescript/lib/typingsInstaller.js 31868             // line terminator after the identifier or keyword.

./node_modules/typescript/lib/typingsInstaller.js 33146                 // if the next token is not on the same line as yield.  or we don't have an '*' or

./node_modules/typescript/lib/typingsInstaller.js 34712             // directly as that might consume an expression on the following line.

./node_modules/typescript/lib/typingsInstaller.js 34814                     // however, an identifier cannot be followed by another identifier on the same line. This is what we

./node_modules/typescript/lib/typingsInstaller.js 34824                     // as the identifier 'namespace' on one line followed by the identifier 'n' on another.

./node_modules/typescript/lib/typingsInstaller.js 35432                 // We need to ensure that any subsequent modifiers appear on the same line

./node_modules/typescript/lib/typingsInstaller.js 36111                     // + 1 because the last index of \n is always one index before the first character in the line and coincidentally, if there is no \n before start, it is -1, which is also one index before the first character

./node_modules/typescript/lib/typingsInstaller.js 36135                                     // NOTE: According to usejsdoc.org, a tag goes to end of line, except the last tag.

./node_modules/typescript/lib/typingsInstaller.js 36136                                     // Real-world comments may break this rule, so "BeginningOfLine" will not be a real line beginning

./node_modules/typescript/lib/typingsInstaller.js 36153                                     // If we've already seen an asterisk, then we can no longer parse a tag on this line

./node_modules/typescript/lib/typingsInstaller.js 36158                                     // Ignore the first asterisk on a line

./node_modules/typescript/lib/typingsInstaller.js 36183                                         removeLeadingNewlines(comments);

./node_modules/typescript/lib/typingsInstaller.js 36194                                 // wasn't a tag, we can no longer parse a tag on this line until we hit the next

./node_modules/typescript/lib/typingsInstaller.js 36195                                 // line break.

./node_modules/typescript/lib/typingsInstaller.js 36211                 function removeLeadingNewlines(comments) {

./node_modules/typescript/lib/typingsInstaller.js 36222                     // We must use infinite lookahead, as there could be any number of newlines :(

./node_modules/typescript/lib/typingsInstaller.js 36448                     removeLeadingNewlines(comments);

./node_modules/typescript/lib/typingsInstaller.js 36890                     //   > Multiple bounded generics cannot be declared on the same line. For the sake of clarity, if multiple templates share the same

./node_modules/typescript/lib/typingsInstaller.js 36891                     //   > type bound they must be declared on separate lines.

./node_modules/typescript/lib/typingsInstaller.js 37623             var multiLinePragmaRegEx = /@(\S+)(\s+.*)?$/gim; // Defined inline since it uses the "g" flag, which keeps a persistent index (for iterating)

./node_modules/typescript/lib/typingsInstaller.js 37774      * A map of lib names to lib files. This map is used both for parsing the "lib" command line

./node_modules/typescript/lib/typingsInstaller.js 37855             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 37869             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 37967             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 38005             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 38013             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 38020             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 38029             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 38038             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 38045             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 38052             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 38538             name: "inlineSourceMap",

./node_modules/typescript/lib/typingsInstaller.js 38546             name: "inlineSources",

./node_modules/typescript/lib/typingsInstaller.js 38652             description: ts.Diagnostics.Set_the_newline_character_for_emitting_files,

./node_modules/typescript/lib/typingsInstaller.js 38883             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 38890             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 38897             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 38903             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/typingsInstaller.js 39130                     errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line, opt.name));

./node_modules/typescript/lib/typingsInstaller.js 39134                 errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line, opt.name));

./node_modules/typescript/lib/typingsInstaller.js 39140             // Check to see if no argument was provided (e.g. "--locale" is the last command-line argument).

./node_modules/typescript/lib/typingsInstaller.js 39556                     return validateValue(/*value*/ null); // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typingsInstaller.js 39715         // There is a typeMap associated with this command-line option so use it to map value back to its name

./node_modules/typescript/lib/typingsInstaller.js 39734                 // tsconfig only options cannot be specified via command line,

./node_modules/typescript/lib/typingsInstaller.js 39736                 if (optionsNameMap.has(name) && (optionsNameMap.get(name).category === ts.Diagnostics.Command_line_Options || optionsNameMap.get(name).category === ts.Diagnostics.Output_Formatting)) {

./node_modules/typescript/lib/typingsInstaller.js 39758                             // There is a typeMap associated with this command-line option so use it to map value back to its name

./node_modules/typescript/lib/typingsInstaller.js 39771      * Generate tsconfig configuration when running command line "--init"

./node_modules/typescript/lib/typingsInstaller.js 39772      * @param options commandlineOptions to be generated into tsconfig.json

./node_modules/typescript/lib/typingsInstaller.js 39805             var categoriesToSkip = [ts.Diagnostics.Command_line_Options, ts.Diagnostics.Editor_Support, ts.Diagnostics.Compiler_Diagnostics, ts.Diagnostics.Backwards_Compatibility, ts.Diagnostics.Watch_and_Build_Modes, ts.Diagnostics.Output_Formatting];

./node_modules/typescript/lib/typingsInstaller.js 39931         return x === undefined || x === null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typingsInstaller.js 40433      * NOTE: used \ in place of / above to avoid issues with multiline comments.

./node_modules/typescript/lib/typingsInstaller.js 40445      * NOTE: used \ in place of / above to avoid issues with multiline comments.

./node_modules/typescript/lib/typingsInstaller.js 40840         if (typeof value !== typeOfTag || value === null) { // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typingsInstaller.js 40842                 // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typingsInstaller.js 41124                             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/typingsInstaller.js 42026                 // When baseUrl is not specified, the command line parser resolves relative paths to the config file location.

./node_modules/typescript/lib/typingsInstaller.js 43553             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, /*foldState*/ undefined);

./node_modules/typescript/lib/typingsInstaller.js 44122                     // typedef anchored to an A.B.C assignment - we need to bind into B's namespace under name C

./node_modules/typescript/lib/typingsInstaller.js 45440                 //  but be sure to bail on recuring into the type if accept declines the symbol.

./node_modules/typescript/lib/typingsInstaller.js 46579                 addErrorOrSuggestion(isError, "message" in message ? ts.createFileDiagnostic(file, 0, 0, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForFileFromMessageChain(file, message)); // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typingsInstaller.js 46582             addErrorOrSuggestion(isError, "message" in message ? ts.createDiagnosticForNode(location, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForNodeFromMessageChain(location, message)); // eslint-disable-line no-in-operator

./node_modules/typescript/lib/typingsInstaller.js 47618             // generator functions and async functions are not inlined in control flow when immediately invoked

./node_modules/typescript/lib/typingsInstaller.js 50194                     ts.setEmitFlags(typeLiteralNode, (context.flags & 1024 /* MultilineObjectLiterals */) ? 0 : 1 /* SingleLine */);

./node_modules/typescript/lib/typingsInstaller.js 50862                     return ts.getSourceFileOfNode(ts.getNonAugmentationDeclaration(symbol)).fileName; // A resolver may not be provided for baselines and errors - in those cases we use the fileName in full

./node_modules/typescript/lib/typingsInstaller.js 51320                     if (file && ts.isTupleTypeNode(node) && (ts.getLineAndCharacterOfPosition(file, node.pos).line === ts.getLineAndCharacterOfPosition(file, node.end).line)) {

./node_modules/typescript/lib/typingsInstaller.js 51480                 function inlineExportModifiers(statements) {

./node_modules/typescript/lib/typingsInstaller.js 51514                     statements = inlineExportModifiers(statements);

./node_modules/typescript/lib/typingsInstaller.js 52280                             // Inlined JSON types exported with [module.]exports= will already emit an export=, so should use `declare`.

./node_modules/typescript/lib/typingsInstaller.js 62257                             // We can't simply assume invariance, because `Unmeasurable` marks nonlinear relations, for example, a relation tained by

./node_modules/typescript/lib/typingsInstaller.js 66892             var inlineLevel = 0;

./node_modules/typescript/lib/typingsInstaller.js 67884                         // When narrowing a reference to a const variable, non-assigned parameter, or readonly property, we inline

./node_modules/typescript/lib/typingsInstaller.js 67886                         if (!isMatchingReference(reference, expr) && inlineLevel < 5) {

./node_modules/typescript/lib/typingsInstaller.js 67891                                     inlineLevel++;

./node_modules/typescript/lib/typingsInstaller.js 67893                                     inlineLevel--;

./node_modules/typescript/lib/typingsInstaller.js 68060                     // (because the const enum value will not be inlined), or if (2) the alias is an export

./node_modules/typescript/lib/typingsInstaller.js 71048             //   1. if 'isolatedModules' is enabled, because the const enum value will not be inlined, and

./node_modules/typescript/lib/typingsInstaller.js 75044             var trampoline = ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState);

./node_modules/typescript/lib/typingsInstaller.js 75046                 var result = trampoline(node, checkMode);

./node_modules/typescript/lib/typingsInstaller.js 78047                         //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag

./node_modules/typescript/lib/typingsInstaller.js 78054                     //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag

./node_modules/typescript/lib/typingsInstaller.js 81222                     // If not a value, we're interpreting the identifier as a type export, along the lines of (`export { Id as default }`)

./node_modules/typescript/lib/typingsInstaller.js 82734                 // inline property\index accesses only for const enums

./node_modules/typescript/lib/typingsInstaller.js 82836             return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/typingsInstaller.js 82844             return nodeBuilder.typeToTypeNode(getReturnTypeOfSignature(signature), enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/typingsInstaller.js 82852             return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/typingsInstaller.js 83779             var startLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.pos).line;

./node_modules/typescript/lib/typingsInstaller.js 83780             var endLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.end).line;

./node_modules/typescript/lib/typingsInstaller.js 83982                     // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion

./node_modules/typescript/lib/typingsInstaller.js 85738                 if (end && (raw.generatedLine > end.line ||

./node_modules/typescript/lib/typingsInstaller.js 85739                     (raw.generatedLine === end.line && raw.generatedCharacter > end.character))) {

./node_modules/typescript/lib/typingsInstaller.js 85742                 if (start && (raw.generatedLine < start.line ||

./node_modules/typescript/lib/typingsInstaller.js 85743                     (start.line === raw.generatedLine && raw.generatedCharacter < start.character))) {

./node_modules/typescript/lib/typingsInstaller.js 85774                 var rawGeneratedLine = raw.generatedLine - (start ? start.line : 0);

./node_modules/typescript/lib/typingsInstaller.js 85776                 var rawGeneratedCharacter = start && start.line === raw.generatedLine ? raw.generatedCharacter - start.character : raw.generatedCharacter;

./node_modules/typescript/lib/typingsInstaller.js 85806                 // Emit line delimiters

./node_modules/typescript/lib/typingsInstaller.js 85828                 // 3. Relative source line

./node_modules/typescript/lib/typingsInstaller.js 85887     // Sometimes tools can see the following line as a source mapping url comment, so we mangle it a bit (the [M])

./node_modules/typescript/lib/typingsInstaller.js 85890     function getLineInfo(text, lineStarts) {

./node_modules/typescript/lib/typingsInstaller.js 85892             getLineCount: function () { return lineStarts.length; },

./node_modules/typescript/lib/typingsInstaller.js 85893             getLineText: function (line) { return text.substring(lineStarts[line], lineStarts[line + 1]); }

./node_modules/typescript/lib/typingsInstaller.js 85900     function tryGetSourceMappingURL(lineInfo) {

./node_modules/typescript/lib/typingsInstaller.js 85901         for (var index = lineInfo.getLineCount() - 1; index >= 0; index--) {

./node_modules/typescript/lib/typingsInstaller.js 85902             var line = lineInfo.getLineText(index);

./node_modules/typescript/lib/typingsInstaller.js 85903             var comment = sourceMapCommentRegExp.exec(line);

./node_modules/typescript/lib/typingsInstaller.js 85907             // If we see a non-whitespace/map comment-like line, break, to avoid scanning up the entire file

./node_modules/typescript/lib/typingsInstaller.js 85908             else if (!line.match(whitespaceOrMapCommentRegExp)) {

./node_modules/typescript/lib/typingsInstaller.js 85962                         // new line

./node_modules/typescript/lib/typingsInstaller.js 85969                         // Next entry is on same line - no action needed

./node_modules/typescript/lib/typingsInstaller.js 86502     function isSimpleInlineableExpression(expression) {

./node_modules/typescript/lib/typingsInstaller.js 86505     ts.isSimpleInlineableExpression = isSimpleInlineableExpression;

./node_modules/typescript/lib/typingsInstaller.js 86687         return context.factory.inlineExpressions(expressions) || context.factory.createOmittedExpression();

./node_modules/typescript/lib/typingsInstaller.js 86740      * @param hoistTempVariables Indicates whether temporary variables should not be recorded in-line.

./node_modules/typescript/lib/typingsInstaller.js 86774                 var value = context.factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/typingsInstaller.js 86790             /*type*/ undefined, pendingExpressions_1 ? context.factory.inlineExpressions(ts.append(pendingExpressions_1, value)) : value);

./node_modules/typescript/lib/typingsInstaller.js 86802                 value = context.factory.inlineExpressions(ts.append(pendingExpressions, value));

./node_modules/typescript/lib/typingsInstaller.js 86828                     if (!ts.isSimpleInlineableExpression(initializer) && ts.isBindingOrAssignmentPattern(bindingTarget)) {

./node_modules/typescript/lib/typingsInstaller.js 86988         if (initializer && !ts.isSimpleInlineableExpression(initializer))

./node_modules/typescript/lib/typingsInstaller.js 87139         // Examples: `\n` is converted to "\\n", a template string with a newline to "\n".

./node_modules/typescript/lib/typingsInstaller.js 87151         // Newline normalization:

./node_modules/typescript/lib/typingsInstaller.js 88693                 return generateNameForComputedPropertyName && !ts.isSimpleInlineableExpression(name.expression)

./node_modules/typescript/lib/typingsInstaller.js 88720                 if (!ts.isSimpleInlineableExpression(innerExpression)) {

./node_modules/typescript/lib/typingsInstaller.js 88950                 return ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/typingsInstaller.js 89914          * Tracks what computed name expressions originating from elided names must be inlined

./node_modules/typescript/lib/typingsInstaller.js 90068                 node = factory.updateComputedPropertyName(node, factory.inlineExpressions(expressions));

./node_modules/typescript/lib/typingsInstaller.js 90127             // If it's not inlineable, then we emit an expression after the class which assigns

./node_modules/typescript/lib/typingsInstaller.js 90130             if (expr && !ts.isSimpleInlineableExpression(expr)) {

./node_modules/typescript/lib/typingsInstaller.js 90244                             if (ts.isSimpleInlineableExpression(node.operand.argumentExpression)) {

./node_modules/typescript/lib/typingsInstaller.js 90279             if (ts.isSimpleInlineableExpression(receiver)) {

./node_modules/typescript/lib/typingsInstaller.js 90355                     factory.inlineExpressions(ts.compact(__spreadArray(__spreadArray([], pendingExpressions, true), [node], false))) :

./node_modules/typescript/lib/typingsInstaller.js 90387                                 if (!ts.isSimpleInlineableExpression(setterName)) {

./node_modules/typescript/lib/typingsInstaller.js 90538                 statements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/typingsInstaller.js 90559             // then we want to output the pendingExpressions as statements, not as inlined

./node_modules/typescript/lib/typingsInstaller.js 90589                         pendingStatements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/typingsInstaller.js 90595                         return factory.inlineExpressions([factory.createAssignment(temp, classExpression), temp]);

./node_modules/typescript/lib/typingsInstaller.js 90617                     return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/typingsInstaller.js 90809             var propertyName = ts.isComputedPropertyName(property.name) && !ts.isSimpleInlineableExpression(property.name.expression)

./node_modules/typescript/lib/typingsInstaller.js 91024          * value of the result or the expression itself if the value is either unused or safe to inline into multiple locations

./node_modules/typescript/lib/typingsInstaller.js 91031                 var inlinable = ts.isSimpleInlineableExpression(innerExpression);

./node_modules/typescript/lib/typingsInstaller.js 91678             return factory.inlineExpressions(ts.map(variables, transformInitializedVariable));

./node_modules/typescript/lib/typingsInstaller.js 91964                 factory.createObjectLiteralExpression(accessors, /* multiline */ true)

./node_modules/typescript/lib/typingsInstaller.js 92459                 factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), callValues]) :

./node_modules/typescript/lib/typingsInstaller.js 93283                     var lineCol = ts.getLineAndCharacterOfPosition(originalFile, location.pos);

./node_modules/typescript/lib/typingsInstaller.js 93286                         factory.createPropertyAssignment("lineNumber", factory.createNumericLiteral(lineCol.line + 1)),

./node_modules/typescript/lib/typingsInstaller.js 93287                         factory.createPropertyAssignment("columnNumber", factory.createNumericLiteral(lineCol.character + 1))

./node_modules/typescript/lib/typingsInstaller.js 93378                 // Always recreate the literal to escape any escape sequences or newlines which may be in the original jsx string and which

./node_modules/typescript/lib/typingsInstaller.js 93399          * JSX trims whitespace at the end and beginning of lines, except that the

./node_modules/typescript/lib/typingsInstaller.js 93400          * start/end of a tag is considered a start/end of a line only if that line is

./node_modules/typescript/lib/typingsInstaller.js 93401          * on the same line as the closing tag. See examples in

./node_modules/typescript/lib/typingsInstaller.js 93406          * - If there is only one line, return it.

./node_modules/typescript/lib/typingsInstaller.js 93407          * - If there is only whitespace (but multiple lines), return `undefined`.

./node_modules/typescript/lib/typingsInstaller.js 93408          * - Split the text into lines.

./node_modules/typescript/lib/typingsInstaller.js 93409          * - 'trimRight' the first line, 'trimLeft' the last line, 'trim' middle lines.

./node_modules/typescript/lib/typingsInstaller.js 93410          * - Decode entities on each line (individually).

./node_modules/typescript/lib/typingsInstaller.js 93411          * - Remove empty lines and join the rest with " ".

./node_modules/typescript/lib/typingsInstaller.js 93415             // First non-whitespace character on this line.

./node_modules/typescript/lib/typingsInstaller.js 93417             // Last non-whitespace character on this line.

./node_modules/typescript/lib/typingsInstaller.js 93419             // These initial values are special because the first line is:

./node_modules/typescript/lib/typingsInstaller.js 93421             // but lastNonWhitespace = -1 as a special flag to indicate that we *don't* include the line if it's all whitespace.

./node_modules/typescript/lib/typingsInstaller.js 93425                     // If we've seen any non-whitespace characters on this line, add the 'trim' of the line.

./node_modules/typescript/lib/typingsInstaller.js 93426                     // (lastNonWhitespace === -1 is a special flag to detect whether the first line is all whitespace.)

./node_modules/typescript/lib/typingsInstaller.js 93430                     // Reset firstNonWhitespace for the next line.

./node_modules/typescript/lib/typingsInstaller.js 93442                 // Last line had a non-whitespace character. Emit the 'trimLeft', meaning keep trailing whitespace.

./node_modules/typescript/lib/typingsInstaller.js 93444                 // Last line was all whitespace, so ignore it

./node_modules/typescript/lib/typingsInstaller.js 93697         oline: 0x203E,

./node_modules/typescript/lib/typingsInstaller.js 94547             // The assumption is that no prior step in the pipeline has added any prologue directives.

./node_modules/typescript/lib/typingsInstaller.js 95178             var multiLine = false; // indicates whether the block *must* be emitted as multiple lines

./node_modules/typescript/lib/typingsInstaller.js 95179             var singleLine = false; // indicates whether the block *may* be emitted as a single line

./node_modules/typescript/lib/typingsInstaller.js 95201                 // If the original body was a multi-line block, this must be a multi-line block.

./node_modules/typescript/lib/typingsInstaller.js 95235             // If we added any final generated statements, this must be a multi-line block

./node_modules/typescript/lib/typingsInstaller.js 95349                     updated = ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(assignments)), node);

./node_modules/typescript/lib/typingsInstaller.js 95665                 ? factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), values])

./node_modules/typescript/lib/typingsInstaller.js 95727             // new line

./node_modules/typescript/lib/typingsInstaller.js 95729             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/typingsInstaller.js 96639          * @param multiLine A value indicating whether the result should be emitted on multiple lines.

./node_modules/typescript/lib/typingsInstaller.js 97703                 return ts.setSourceMapRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/typingsInstaller.js 97811             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/typingsInstaller.js 97819                         emitWorker(1 /* Statement */, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/typingsInstaller.js 97841                         emitWorker(1 /* Statement */, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/typingsInstaller.js 97847             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/typingsInstaller.js 97976          * @param multiLine Whether array literals created should be emitted on multiple lines.

./node_modules/typescript/lib/typingsInstaller.js 98043             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/typingsInstaller.js 98046                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(expressions)));

./node_modules/typescript/lib/typingsInstaller.js 98206                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/typingsInstaller.js 98388                     ? factory.inlineExpressions(ts.map(variables, transformInitializedVariable))

./node_modules/typescript/lib/typingsInstaller.js 98505                     return createInlineBreak(label, /*location*/ node);

./node_modules/typescript/lib/typingsInstaller.js 98524                     return createInlineBreak(label, /*location*/ node);

./node_modules/typescript/lib/typingsInstaller.js 98534             return createInlineReturn(ts.visitNode(node.expression, visitor, ts.isExpression), 

./node_modules/typescript/lib/typingsInstaller.js 98617                                 createInlineBreak(clauseLabels[i], /*location*/ clause.expression)

./node_modules/typescript/lib/typingsInstaller.js 99208         function createInlineBreak(label, location) {

./node_modules/typescript/lib/typingsInstaller.js 99221         function createInlineReturn(expression, location) {

./node_modules/typescript/lib/typingsInstaller.js 100709                     var statement = ts.setOriginalNode(ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node), node);

./node_modules/typescript/lib/typingsInstaller.js 101500                 /*type*/ undefined, factory.createObjectLiteralExpression(exportedNames, /*multiline*/ true))

./node_modules/typescript/lib/typingsInstaller.js 101542             ], /*multiline*/ true));

./node_modules/typescript/lib/typingsInstaller.js 101592                                     /*typeArguments*/ undefined, [factory.createObjectLiteralExpression(properties, /*multiline*/ true)])));

./node_modules/typescript/lib/typingsInstaller.js 101781                 statements = ts.append(statements, ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node));

./node_modules/typescript/lib/typingsInstaller.js 102231                 return expressions ? factory.inlineExpressions(expressions) : factory.createOmittedExpression();

./node_modules/typescript/lib/typingsInstaller.js 103326     var declarationEmitNodeBuilderFlags = 1024 /* MultilineObjectLiterals */ |

./node_modules/typescript/lib/typingsInstaller.js 104149             if (ts.isTupleTypeNode(input) && (ts.getLineAndCharacterOfPosition(currentSourceFile, input.pos).line === ts.getLineAndCharacterOfPosition(currentSourceFile, input.end).line)) {

./node_modules/typescript/lib/typingsInstaller.js 105307         return (options.sourceMap && !options.inlineSourceMap) ? jsFilePath + ".map" : undefined;

./node_modules/typescript/lib/typingsInstaller.js 105443         ts.Debug.assert(ts.contains(commandLine.fileNames, inputFileName), "Expected fileName to be present in command line");

./node_modules/typescript/lib/typingsInstaller.js 105485         var sourceMapDataList = (compilerOptions.sourceMap || compilerOptions.inlineSourceMap || ts.getAreDeclarationMapsEnabled(compilerOptions)) ? [] : undefined;

./node_modules/typescript/lib/typingsInstaller.js 105577                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/typingsInstaller.js 105578                 inlineSources: compilerOptions.inlineSources,

./node_modules/typescript/lib/typingsInstaller.js 105630                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/typingsInstaller.js 105654                     // Explicitly do not passthru either `inline` option

./node_modules/typescript/lib/typingsInstaller.js 105703                     writer.writeComment("//# " + "sourceMappingURL" + "=" + sourceMappingURL); // Tools can sometimes see this line as a source mapping url comment

./node_modules/typescript/lib/typingsInstaller.js 105720             return (mapOptions.sourceMap || mapOptions.inlineSourceMap)

./node_modules/typescript/lib/typingsInstaller.js 105748             if (mapOptions.inlineSourceMap) {

./node_modules/typescript/lib/typingsInstaller.js 105866         // error if no source map or for now if inline sourcemap

./node_modules/typescript/lib/typingsInstaller.js 105867         if ((sourceMapFilePath && !sourceMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/typingsInstaller.js 105868             return sourceMapFilePath || "inline sourcemap decoding";

./node_modules/typescript/lib/typingsInstaller.js 105874         // error if no source map or for now if inline sourcemap

./node_modules/typescript/lib/typingsInstaller.js 105875         if ((declarationMapPath && !declarationMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/typingsInstaller.js 105876             return declarationMapPath || "inline sourcemap decoding";

./node_modules/typescript/lib/typingsInstaller.js 105950     var PipelinePhase;

./node_modules/typescript/lib/typingsInstaller.js 105951     (function (PipelinePhase) {

./node_modules/typescript/lib/typingsInstaller.js 105952         PipelinePhase[PipelinePhase["Notification"] = 0] = "Notification";

./node_modules/typescript/lib/typingsInstaller.js 105953         PipelinePhase[PipelinePhase["Substitution"] = 1] = "Substitution";

./node_modules/typescript/lib/typingsInstaller.js 105954         PipelinePhase[PipelinePhase["Comments"] = 2] = "Comments";

./node_modules/typescript/lib/typingsInstaller.js 105955         PipelinePhase[PipelinePhase["SourceMaps"] = 3] = "SourceMaps";

./node_modules/typescript/lib/typingsInstaller.js 105956         PipelinePhase[PipelinePhase["Emit"] = 4] = "Emit";

./node_modules/typescript/lib/typingsInstaller.js 105957     })(PipelinePhase || (PipelinePhase = {}));

./node_modules/typescript/lib/typingsInstaller.js 105974         var preserveSourceNewlines = printerOptions.preserveSourceNewlines; // Can be overridden inside nodes with the `IgnoreSourceNewlines` emit flag.

./node_modules/typescript/lib/typingsInstaller.js 106203             pipelineEmit(hint, node, /*parenthesizerRule*/ undefined);

./node_modules/typescript/lib/typingsInstaller.js 106240             pipelineEmit(4 /* Unspecified */, node, parenthesizerRule);

./node_modules/typescript/lib/typingsInstaller.js 106246             pipelineEmit(2 /* IdentifierName */, node, /*parenthesizerRule*/ undefined);

./node_modules/typescript/lib/typingsInstaller.js 106251             pipelineEmit(1 /* Expression */, node, parenthesizerRule);

./node_modules/typescript/lib/typingsInstaller.js 106254             pipelineEmit(ts.isStringLiteral(node) ? 6 /* JsxAttributeValue */ : 4 /* Unspecified */, node);

./node_modules/typescript/lib/typingsInstaller.js 106257             if (preserveSourceNewlines && (ts.getEmitFlags(node) & 134217728 /* IgnoreSourceNewlines */)) {

./node_modules/typescript/lib/typingsInstaller.js 106258                 preserveSourceNewlines = false;

./node_modules/typescript/lib/typingsInstaller.js 106261         function afterEmitNode(savedPreserveSourceNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 106262             preserveSourceNewlines = savedPreserveSourceNewlines;

./node_modules/typescript/lib/typingsInstaller.js 106264         function pipelineEmit(emitHint, node, parenthesizerRule) {

./node_modules/typescript/lib/typingsInstaller.js 106266             var pipelinePhase = getPipelinePhase(0 /* Notification */, emitHint, node);

./node_modules/typescript/lib/typingsInstaller.js 106267             pipelinePhase(emitHint, node);

./node_modules/typescript/lib/typingsInstaller.js 106280         function getPipelinePhase(phase, emitHint, node) {

./node_modules/typescript/lib/typingsInstaller.js 106284                         return pipelineEmitWithNotification;

./node_modules/typescript/lib/typingsInstaller.js 106292                         return pipelineEmitWithSubstitution;

./node_modules/typescript/lib/typingsInstaller.js 106297                         return pipelineEmitWithComments;

./node_modules/typescript/lib/typingsInstaller.js 106302                         return pipelineEmitWithSourceMaps;

./node_modules/typescript/lib/typingsInstaller.js 106306                     return pipelineEmitWithHint;

./node_modules/typescript/lib/typingsInstaller.js 106311         function getNextPipelinePhase(currentPhase, emitHint, node) {

./node_modules/typescript/lib/typingsInstaller.js 106312             return getPipelinePhase(currentPhase + 1, emitHint, node);

./node_modules/typescript/lib/typingsInstaller.js 106314         function pipelineEmitWithNotification(hint, node) {

./node_modules/typescript/lib/typingsInstaller.js 106315             var pipelinePhase = getNextPipelinePhase(0 /* Notification */, hint, node);

./node_modules/typescript/lib/typingsInstaller.js 106316             onEmitNode(hint, node, pipelinePhase);

./node_modules/typescript/lib/typingsInstaller.js 106318         function pipelineEmitWithHint(hint, node) {

./node_modules/typescript/lib/typingsInstaller.js 106320             if (preserveSourceNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 106321                 var savedPreserveSourceNewlines = preserveSourceNewlines;

./node_modules/typescript/lib/typingsInstaller.js 106323                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/typingsInstaller.js 106324                 afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/typingsInstaller.js 106327                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/typingsInstaller.js 106333         function pipelineEmitWithHintWorker(hint, node) {

./node_modules/typescript/lib/typingsInstaller.js 106788         function pipelineEmitWithSubstitution(hint, node) {

./node_modules/typescript/lib/typingsInstaller.js 106789             var pipelinePhase = getNextPipelinePhase(1 /* Substitution */, hint, node);

./node_modules/typescript/lib/typingsInstaller.js 106793             pipelinePhase(hint, node);

./node_modules/typescript/lib/typingsInstaller.js 106888             if ((printerOptions.sourceMap || printerOptions.inlineSourceMap)

./node_modules/typescript/lib/typingsInstaller.js 107263             pipelineEmit(3 /* MappedTypeParameter */, node.typeParameter);

./node_modules/typescript/lib/typingsInstaller.js 107359             var linesBeforeDot = getLinesBetweenNodes(node, node.expression, token);

./node_modules/typescript/lib/typingsInstaller.js 107360             var linesAfterDot = getLinesBetweenNodes(node, token, node.name);

./node_modules/typescript/lib/typingsInstaller.js 107361             writeLinesAndIndent(linesBeforeDot, /*writeSpaceIfNotIndenting*/ false);

./node_modules/typescript/lib/typingsInstaller.js 107375             writeLinesAndIndent(linesAfterDot, /*writeSpaceIfNotIndenting*/ false);

./node_modules/typescript/lib/typingsInstaller.js 107377             decreaseIndentIf(linesBeforeDot, linesAfterDot);

./node_modules/typescript/lib/typingsInstaller.js 107524             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, /*foldState*/ undefined);

./node_modules/typescript/lib/typingsInstaller.js 107528                     state.preserveSourceNewlinesStack[state.stackIndex] = preserveSourceNewlines;

./node_modules/typescript/lib/typingsInstaller.js 107544                         preserveSourceNewlinesStack: [undefined],

./node_modules/typescript/lib/typingsInstaller.js 107559                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, operatorToken);

./node_modules/typescript/lib/typingsInstaller.js 107560                 var linesAfterOperator = getLinesBetweenNodes(node, operatorToken, node.right);

./node_modules/typescript/lib/typingsInstaller.js 107561                 writeLinesAndIndent(linesBeforeOperator, isCommaOperator);

./node_modules/typescript/lib/typingsInstaller.js 107565                 writeLinesAndIndent(linesAfterOperator, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typingsInstaller.js 107571                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, node.operatorToken);

./node_modules/typescript/lib/typingsInstaller.js 107572                 var linesAfterOperator = getLinesBetweenNodes(node, node.operatorToken, node.right);

./node_modules/typescript/lib/typingsInstaller.js 107573                 decreaseIndentIf(linesBeforeOperator, linesAfterOperator);

./node_modules/typescript/lib/typingsInstaller.js 107575                     var savedPreserveSourceNewlines = state.preserveSourceNewlinesStack[state.stackIndex];

./node_modules/typescript/lib/typingsInstaller.js 107581                     afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/typingsInstaller.js 107594                 var pipelinePhase = getPipelinePhase(0 /* Notification */, 1 /* Expression */, next);

./node_modules/typescript/lib/typingsInstaller.js 107595                 if (pipelinePhase === pipelineEmitWithSubstitution) {

./node_modules/typescript/lib/typingsInstaller.js 107598                     pipelinePhase = getNextPipelinePhase(1 /* Substitution */, 1 /* Expression */, next);

./node_modules/typescript/lib/typingsInstaller.js 107601                 if (pipelinePhase === pipelineEmitWithComments ||

./node_modules/typescript/lib/typingsInstaller.js 107602                     pipelinePhase === pipelineEmitWithSourceMaps ||

./node_modules/typescript/lib/typingsInstaller.js 107603                     pipelinePhase === pipelineEmitWithHint) {

./node_modules/typescript/lib/typingsInstaller.js 107609                 pipelinePhase(1 /* Expression */, next);

./node_modules/typescript/lib/typingsInstaller.js 107613             var linesBeforeQuestion = getLinesBetweenNodes(node, node.condition, node.questionToken);

./node_modules/typescript/lib/typingsInstaller.js 107614             var linesAfterQuestion = getLinesBetweenNodes(node, node.questionToken, node.whenTrue);

./node_modules/typescript/lib/typingsInstaller.js 107615             var linesBeforeColon = getLinesBetweenNodes(node, node.whenTrue, node.colonToken);

./node_modules/typescript/lib/typingsInstaller.js 107616             var linesAfterColon = getLinesBetweenNodes(node, node.colonToken, node.whenFalse);

./node_modules/typescript/lib/typingsInstaller.js 107618             writeLinesAndIndent(linesBeforeQuestion, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typingsInstaller.js 107620             writeLinesAndIndent(linesAfterQuestion, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typingsInstaller.js 107622             decreaseIndentIf(linesBeforeQuestion, linesAfterQuestion);

./node_modules/typescript/lib/typingsInstaller.js 107623             writeLinesAndIndent(linesBeforeColon, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typingsInstaller.js 107625             writeLinesAndIndent(linesAfterColon, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/typingsInstaller.js 107627             decreaseIndentIf(linesBeforeColon, linesAfterColon);

./node_modules/typescript/lib/typingsInstaller.js 107739             if (ts.isBlock(node.statement) && !preserveSourceNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 107829                 emitTrailingCommentsOfPosition(pos, /*prefixSpace*/ !isJsxExprContext, /*forceNoNewline*/ isJsxExprContext);

./node_modules/typescript/lib/typingsInstaller.js 107946             // We must emit a function body as a single-line body in the following case:

./node_modules/typescript/lib/typingsInstaller.js 107948             // We must emit a function body as a multi-line body in the following cases:

./node_modules/typescript/lib/typingsInstaller.js 107949             // * The body is explicitly marked as multi-line.

./node_modules/typescript/lib/typingsInstaller.js 107950             // * A non-synthesized body's start and end position are on different lines.

./node_modules/typescript/lib/typingsInstaller.js 107951             // * Any statement in the body starts on a new line.

./node_modules/typescript/lib/typingsInstaller.js 108319                 var isMultiline = currentSourceFile && !ts.nodeIsSynthesized(node) && ts.getLineAndCharacterOfPosition(currentSourceFile, node.pos).line !== ts.getLineAndCharacterOfPosition(currentSourceFile, node.end).line;

./node_modules/typescript/lib/typingsInstaller.js 108320                 if (isMultiline) {

./node_modules/typescript/lib/typingsInstaller.js 108327                 if (isMultiline) {

./node_modules/typescript/lib/typingsInstaller.js 108356                 // treat synthesized nodes as located on the same line for emit purposes

./node_modules/typescript/lib/typingsInstaller.js 108439                     var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/typingsInstaller.js 108440                     for (var _a = 0, lines_2 = lines; _a < lines_2.length; _a++) {

./node_modules/typescript/lib/typingsInstaller.js 108441                         var line = lines_2[_a];

./node_modules/typescript/lib/typingsInstaller.js 108446                         write(line);

./node_modules/typescript/lib/typingsInstaller.js 108869                     pipelineEmit(5 /* EmbeddedStatement */, node);

./node_modules/typescript/lib/typingsInstaller.js 108975                 // Write a line terminator if the parent node was multi-line

./node_modules/typescript/lib/typingsInstaller.js 108976                 if (format & 1 /* MultiLine */ && !(preserveSourceNewlines && (!parentNode || ts.rangeIsOnSingleLine(parentNode, currentSourceFile)))) {

./node_modules/typescript/lib/typingsInstaller.js 108985                 // Write the opening line terminator or leading whitespace.

./node_modules/typescript/lib/typingsInstaller.js 109017                         //          /* End of parameter a */ -> this comment isn't considered to be trailing comment of parameter "a" due to newline

./node_modules/typescript/lib/typingsInstaller.js 109024                         // Write either a line terminator or whitespace to separate the elements.

./node_modules/typescript/lib/typingsInstaller.js 109027                             // If a synthesized node in a single-line list starts on a new

./node_modules/typescript/lib/typingsInstaller.js 109028                             // line, we should increase the indent.

./node_modules/typescript/lib/typingsInstaller.js 109090                 // Write the closing line terminator or closing whitespace.

./node_modules/typescript/lib/typingsInstaller.js 109181             else if (preserveSourceNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 109182                 var lines = getLinesBetweenNodes(parentNode, prevChildNode, nextChildNode);

./node_modules/typescript/lib/typingsInstaller.js 109183                 if (lines) {

./node_modules/typescript/lib/typingsInstaller.js 109184                     writeLine(lines);

./node_modules/typescript/lib/typingsInstaller.js 109195             var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/typingsInstaller.js 109196             var indentation = ts.guessIndentation(lines);

./node_modules/typescript/lib/typingsInstaller.js 109197             for (var _a = 0, lines_3 = lines; _a < lines_3.length; _a++) {

./node_modules/typescript/lib/typingsInstaller.js 109198                 var lineText = lines_3[_a];

./node_modules/typescript/lib/typingsInstaller.js 109199                 var line = indentation ? lineText.slice(indentation) : lineText;

./node_modules/typescript/lib/typingsInstaller.js 109200                 if (line.length) {

./node_modules/typescript/lib/typingsInstaller.js 109202                     write(line);

./node_modules/typescript/lib/typingsInstaller.js 109206         function writeLinesAndIndent(lineCount, writeSpaceIfNotIndenting) {

./node_modules/typescript/lib/typingsInstaller.js 109207             if (lineCount) {

./node_modules/typescript/lib/typingsInstaller.js 109209                 writeLine(lineCount);

./node_modules/typescript/lib/typingsInstaller.js 109228             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 109238                     // line terminators have already been written as the separating line terminators of the

./node_modules/typescript/lib/typingsInstaller.js 109246                     // The outer list is the list of class members, with one line terminator between the

./node_modules/typescript/lib/typingsInstaller.js 109247                     // constructor and the method. The constructor is written, the separating line terminator

./node_modules/typescript/lib/typingsInstaller.js 109249                     // list, so we look for its leading line terminators. If we didn't know that we had already

./node_modules/typescript/lib/typingsInstaller.js 109250                     // written a newline as part of the parent list, it would appear that we need to write a

./node_modules/typescript/lib/typingsInstaller.js 109251                     // leading newline to start the modifiers.

./node_modules/typescript/lib/typingsInstaller.js 109262                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 109274             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 109283                     if (preserveSourceNewlines && siblingNodePositionsAreComparable(previousNode, nextNode)) {

./node_modules/typescript/lib/typingsInstaller.js 109286                     // If `preserveSourceNewlines` is `false` we do not intend to preserve the effective lines between the

./node_modules/typescript/lib/typingsInstaller.js 109287                     // previous and next node. Instead we naively check whether nodes are on separate lines within the

./node_modules/typescript/lib/typingsInstaller.js 109288                     // same node parent. If so, we intend to preserve a single line terminator. This is less precise and

./node_modules/typescript/lib/typingsInstaller.js 109289                     // expensive than checking with `preserveSourceNewlines` as above, but the goal is not to preserve the

./node_modules/typescript/lib/typingsInstaller.js 109290                     // effective source lines between two sibling nodes.

./node_modules/typescript/lib/typingsInstaller.js 109291                     else if (!preserveSourceNewlines && originalNodesHaveSameParent(previousNode, nextNode)) {

./node_modules/typescript/lib/typingsInstaller.js 109294                     // If the two nodes are not comparable, add a line terminator based on the format that can indicate

./node_modules/typescript/lib/typingsInstaller.js 109295                     // whether new lines are preferred or not.

./node_modules/typescript/lib/typingsInstaller.js 109308             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 109317                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 109333             // If 'preserveSourceNewlines' is disabled, we should never call this function

./node_modules/typescript/lib/typingsInstaller.js 109335             ts.Debug.assert(!!preserveSourceNewlines);

./node_modules/typescript/lib/typingsInstaller.js 109336             // We start by measuring the line difference from a position to its adjacent comments,

./node_modules/typescript/lib/typingsInstaller.js 109337             // so that this is counted as a one-line difference, not two:

./node_modules/typescript/lib/typingsInstaller.js 109342             var lines = getLineDifference(/*includeComments*/ true);

./node_modules/typescript/lib/typingsInstaller.js 109343             if (lines === 0) {

./node_modules/typescript/lib/typingsInstaller.js 109344                 // However, if the line difference considering comments was 0, we might have this:

./node_modules/typescript/lib/typingsInstaller.js 109350                 // a one-line difference, not zero.

./node_modules/typescript/lib/typingsInstaller.js 109353             return lines;

./node_modules/typescript/lib/typingsInstaller.js 109356             var leadingNewlines = preserveSourceNewlines && getLeadingLineTerminatorCount(parent, [node], 0 /* None */);

./node_modules/typescript/lib/typingsInstaller.js 109357             if (leadingNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 109358                 writeLinesAndIndent(leadingNewlines, /*writeLinesIfNotIndenting*/ false);

./node_modules/typescript/lib/typingsInstaller.js 109360             return !!leadingNewlines;

./node_modules/typescript/lib/typingsInstaller.js 109363             var trailingNewlines = preserveSourceNewlines && getClosingLineTerminatorCount(parent, [node], 0 /* None */);

./node_modules/typescript/lib/typingsInstaller.js 109364             if (trailingNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 109365                 writeLine(trailingNewlines);

./node_modules/typescript/lib/typingsInstaller.js 109385             // Always use a newline for synthesized code if the synthesizer desires it.

./node_modules/typescript/lib/typingsInstaller.js 109390                 if (preserveSourceNewlines) {

./node_modules/typescript/lib/typingsInstaller.js 109803         function pipelineEmitWithComments(hint, node) {

./node_modules/typescript/lib/typingsInstaller.js 109804             var pipelinePhase = getNextPipelinePhase(2 /* Comments */, hint, node);

./node_modules/typescript/lib/typingsInstaller.js 109809             pipelinePhase(hint, node);

./node_modules/typescript/lib/typingsInstaller.js 109879             if (comment.hasLeadingNewline || comment.kind === 2 /* SingleLineCommentTrivia */) {

./node_modules/typescript/lib/typingsInstaller.js 109901             var lineMap = comment.kind === 3 /* MultiLineCommentTrivia */ ? ts.computeLineStarts(text) : undefined;

./node_modules/typescript/lib/typingsInstaller.js 109902             ts.writeCommentRange(text, lineMap, writer, 0, text.length, newLine);

./node_modules/typescript/lib/typingsInstaller.js 110035         function emitTrailingCommentsOfPosition(pos, prefixSpace, forceNoNewline) {

./node_modules/typescript/lib/typingsInstaller.js 110040             forEachTrailingCommentToEmit(pos, prefixSpace ? emitTrailingComment : forceNoNewline ? emitTrailingCommentOfPositionNoNewline : emitTrailingCommentOfPosition);

./node_modules/typescript/lib/typingsInstaller.js 110043         function emitTrailingCommentOfPositionNoNewline(commentPos, commentEnd, kind) {

./node_modules/typescript/lib/typingsInstaller.js 110049                 writer.writeLine(); // still write a newline for single-line comments, so closing tokens aren't written on the same line

./node_modules/typescript/lib/typingsInstaller.js 110106         function emitComment(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/typingsInstaller.js 110110             ts.writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine);

./node_modules/typescript/lib/typingsInstaller.js 110128         function pipelineEmitWithSourceMaps(hint, node) {

./node_modules/typescript/lib/typingsInstaller.js 110129             var pipelinePhase = getNextPipelinePhase(3 /* SourceMaps */, hint, node);

./node_modules/typescript/lib/typingsInstaller.js 110131             pipelinePhase(hint, node);

./node_modules/typescript/lib/typingsInstaller.js 110190             var _a = ts.getLineAndCharacterOfPosition(sourceMapSource, pos), sourceLine = _a.line, sourceCharacter = _a.character;

./node_modules/typescript/lib/typingsInstaller.js 110249             if (printerOptions.inlineSources) {

./node_modules/typescript/lib/typingsInstaller.js 111090             var _a = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start), line = _a.line, character = _a.character; // TODO: GH#18217

./node_modules/typescript/lib/typingsInstaller.js 111093             return relativeFileName + "(" + (line + 1) + "," + (character + 1) + "): " + errorMessage;

./node_modules/typescript/lib/typingsInstaller.js 111117             case ts.DiagnosticCategory.Suggestion: return ts.Debug.fail("Should never get an Info diagnostic on the command line.");

./node_modules/typescript/lib/typingsInstaller.js 111127         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character;

./node_modules/typescript/lib/typingsInstaller.js 111128         var _b = ts.getLineAndCharacterOfPosition(file, start + length), lastLine = _b.line, lastLineChar = _b.character;

./node_modules/typescript/lib/typingsInstaller.js 111129         var lastLineInFile = ts.getLineAndCharacterOfPosition(file, file.text.length).line;

./node_modules/typescript/lib/typingsInstaller.js 111138             // If the error spans over 5 lines, we'll only show the first 2 and last 2 lines,

./node_modules/typescript/lib/typingsInstaller.js 111139             // so we'll skip ahead to the second-to-last line.

./node_modules/typescript/lib/typingsInstaller.js 111144             var lineStart = ts.getPositionOfLineAndCharacter(file, i, 0);

./node_modules/typescript/lib/typingsInstaller.js 111145             var lineEnd = i < lastLineInFile ? ts.getPositionOfLineAndCharacter(file, i + 1, 0) : file.text.length;

./node_modules/typescript/lib/typingsInstaller.js 111146             var lineContent = file.text.slice(lineStart, lineEnd);

./node_modules/typescript/lib/typingsInstaller.js 111147             lineContent = ts.trimStringEnd(lineContent); // trim from end

./node_modules/typescript/lib/typingsInstaller.js 111148             lineContent = lineContent.replace(/\t/g, " "); // convert tabs to single spaces

./node_modules/typescript/lib/typingsInstaller.js 111149             // Output the gutter and the actual contents of the line.

./node_modules/typescript/lib/typingsInstaller.js 111151             context += lineContent + host.getNewLine();

./node_modules/typescript/lib/typingsInstaller.js 111152             // Output the gutter and the error span for the line using tildes.

./node_modules/typescript/lib/typingsInstaller.js 111156                 // If we're on the last line, then limit it to the last character of the last line.

./node_modules/typescript/lib/typingsInstaller.js 111157                 // Otherwise, we'll just squiggle the rest of the line, giving 'slice' no end position.

./node_modules/typescript/lib/typingsInstaller.js 111159                 context += lineContent.slice(0, firstLineChar).replace(/\S/g, " ");

./node_modules/typescript/lib/typingsInstaller.js 111160                 context += lineContent.slice(firstLineChar, lastCharForLine).replace(/./g, "~");

./node_modules/typescript/lib/typingsInstaller.js 111163                 context += lineContent.slice(0, lastLineChar).replace(/./g, "~");

./node_modules/typescript/lib/typingsInstaller.js 111166                 // Squiggle the entire line.

./node_modules/typescript/lib/typingsInstaller.js 111167                 context += lineContent.replace(/./g, "~");

./node_modules/typescript/lib/typingsInstaller.js 111176         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character; // TODO: GH#18217

./node_modules/typescript/lib/typingsInstaller.js 111563         structureIsReused = tryReuseStructureFromOldProgram(); // eslint-disable-line prefer-const

./node_modules/typescript/lib/typingsInstaller.js 111665         // Release commandlines that new program does not use

./node_modules/typescript/lib/typingsInstaller.js 112479          * @returns The line index marked as preceding the diagnostic, or -1 if none was.

./node_modules/typescript/lib/typingsInstaller.js 112486             // Start out with the line just before the text

./node_modules/typescript/lib/typingsInstaller.js 112487             var lineStarts = ts.getLineStarts(file);

./node_modules/typescript/lib/typingsInstaller.js 112488             var line = ts.computeLineAndCharacterOfPosition(lineStarts, start).line - 1; // TODO: GH#18217

./node_modules/typescript/lib/typingsInstaller.js 112489             while (line >= 0) {

./node_modules/typescript/lib/typingsInstaller.js 112490                 // As soon as that line is known to have a comment directive, use that

./node_modules/typescript/lib/typingsInstaller.js 112491                 if (directives.markUsed(line)) {

./node_modules/typescript/lib/typingsInstaller.js 112492                     return line;

./node_modules/typescript/lib/typingsInstaller.js 112494                 // Stop searching if the line is not empty and not a comment

./node_modules/typescript/lib/typingsInstaller.js 112495                 var lineText = file.text.slice(lineStarts[line], lineStarts[line + 1]).trim();

./node_modules/typescript/lib/typingsInstaller.js 112496                 if (lineText !== "" && !/^(\s*)\/\/(.*)$/.test(lineText)) {

./node_modules/typescript/lib/typingsInstaller.js 112499                 line--;

./node_modules/typescript/lib/typingsInstaller.js 112842                 while (r.exec(file.text) !== null) { // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/typingsInstaller.js 113443             if (options.inlineSourceMap) {

./node_modules/typescript/lib/typingsInstaller.js 113445                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "sourceMap", "inlineSourceMap");

./node_modules/typescript/lib/typingsInstaller.js 113448                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "mapRoot", "inlineSourceMap");

./node_modules/typescript/lib/typingsInstaller.js 113514             if (!options.sourceMap && !options.inlineSourceMap) {

./node_modules/typescript/lib/typingsInstaller.js 113515                 if (options.inlineSources) {

./node_modules/typescript/lib/typingsInstaller.js 113516                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "inlineSources");

./node_modules/typescript/lib/typingsInstaller.js 113519                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "sourceRoot");

./node_modules/typescript/lib/typingsInstaller.js 115718             // eslint-disable-next-line no-empty

./node_modules/typescript/lib/typingsInstaller.js 116704             // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/typingsInstaller.js 117868         var parsedConfigs; // Parsed commandline and watching cached for referenced projects

./node_modules/typescript/lib/typingsInstaller.js 120187             "readline",

./node_modules/typescript/lib/typingsInstaller.js 120764                         // eslint-disable-next-line @typescript-eslint/no-unnecessary-qualifier

./node_modules/typescript/lib/typingsInstaller.js 120813                                 // eslint-disable-next-line @typescript-eslint/no-unnecessary-qualifier

./node_modules/typescript/lib/typingsInstaller.js 121168             function indent(newline, str) {

./node_modules/typescript/lib/typingsInstaller.js 121170                     ? newline + "    " + str.replace(/\r?\n/, newline + "    ")

./node_modules/typescript/lib/tsserverlibrary.js 294     // The following is baselined as a literal template type without intervention

./node_modules/typescript/lib/tsserverlibrary.js 296     // eslint-disable-next-line @typescript-eslint/no-inferrable-types

./node_modules/typescript/lib/tsserverlibrary.js 313             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserverlibrary.js 322             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserverlibrary.js 2421      * Removes the leading and trailing white space and line terminator characters from a string.

./node_modules/typescript/lib/tsserverlibrary.js 2589             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 2601          * @deprecated Use `checkDefined` to check whether a value is defined inline. Use `assertIsDefined` to check whether

./node_modules/typescript/lib/tsserverlibrary.js 2618          * @deprecated Use `checkEachDefined` to check whether the elements of an array are defined inline. Use `assertEachIsDefined` to check whether

./node_modules/typescript/lib/tsserverlibrary.js 2790             if (!("__debugFlowFlags" in flowNode)) { // eslint-disable-line no-in-operator

./node_modules/typescript/lib/tsserverlibrary.js 2836             if (!("__tsDebuggerDisplay" in array)) { // eslint-disable-line no-in-operator

./node_modules/typescript/lib/tsserverlibrary.js 3467     // eslint-disable-next-line @typescript-eslint/naming-convention

./node_modules/typescript/lib/tsserverlibrary.js 3784                 + [__assign({ name: "process_name", args: { name: "tsc" } }, meta), __assign({ name: "thread_name", args: { name: "Main" } }, meta), __assign(__assign({ name: "TracingStartedInBrowser" }, meta), { cat: "disabled-by-default-devtools.timeline" })]

./node_modules/typescript/lib/tsserverlibrary.js 3892                     line: lc.line + 1,

./node_modules/typescript/lib/tsserverlibrary.js 3903             // Cleverness: no line break here so that the type ID will match the line number

./node_modules/typescript/lib/tsserverlibrary.js 4017         // We detect and preserve #! on the first line

./node_modules/typescript/lib/tsserverlibrary.js 4677         NodeBuilderFlags[NodeBuilderFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";

./node_modules/typescript/lib/tsserverlibrary.js 4718         TypeFormatFlags[TypeFormatFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";

./node_modules/typescript/lib/tsserverlibrary.js 5397         CharacterCodes[CharacterCodes["lineFeed"] = 10] = "lineFeed";

./node_modules/typescript/lib/tsserverlibrary.js 5399         CharacterCodes[CharacterCodes["lineSeparator"] = 8232] = "lineSeparator";

./node_modules/typescript/lib/tsserverlibrary.js 5644         /*@internal*/ EmitFlags[EmitFlags["IgnoreSourceNewlines"] = 134217728] = "IgnoreSourceNewlines";

./node_modules/typescript/lib/tsserverlibrary.js 5816          * Single line comment of the form

./node_modules/typescript/lib/tsserverlibrary.js 5823          * Multiline non-jsdoc pragma of the form

./node_modules/typescript/lib/tsserverlibrary.js 6590      * Called for command-line and server use cases.

./node_modules/typescript/lib/tsserverlibrary.js 6969     ts.sysLog = ts.noop; // eslint-disable-line prefer-const

./node_modules/typescript/lib/tsserverlibrary.js 7396     // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/tsserverlibrary.js 8964         Option_project_cannot_be_mixed_with_source_files_on_a_command_line: diag(5042, ts.DiagnosticCategory.Error, "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042", "Option 'project' cannot be mixed with source files on a command line."),

./node_modules/typescript/lib/tsserverlibrary.js 8967         Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: diag(5051, ts.DiagnosticCategory.Error, "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051", "Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided."),

./node_modules/typescript/lib/tsserverlibrary.js 9036         Insert_command_line_options_and_files_from_a_file: diag(6030, ts.DiagnosticCategory.Message, "Insert_command_line_options_and_files_from_a_file_6030", "Insert command line options and files from a file."),

./node_modules/typescript/lib/tsserverlibrary.js 9061         Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: diag(6060, ts.DiagnosticCategory.Message, "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060", "Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)."),

./node_modules/typescript/lib/tsserverlibrary.js 9063         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line: diag(6064, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'null' on command line."),

./node_modules/typescript/lib/tsserverlibrary.js 9148         Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap_to_be_set: diag(6152, ts.DiagnosticCategory.Message, "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152", "Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set."),

./node_modules/typescript/lib/tsserverlibrary.js 9167         Command_line_Options: diag(6171, ts.DiagnosticCategory.Message, "Command_line_Options_6171", "Command-line Options"),

./node_modules/typescript/lib/tsserverlibrary.js 9216         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line: diag(6230, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'false' or 'null' on command line."),

./node_modules/typescript/lib/tsserverlibrary.js 9270         Option_build_must_be_the_first_command_line_argument: diag(6369, ts.DiagnosticCategory.Error, "Option_build_must_be_the_first_command_line_argument_6369", "Option '--build' must be the first command line argument."),

./node_modules/typescript/lib/tsserverlibrary.js 9362         Set_the_newline_character_for_emitting_files: diag(6659, ts.DiagnosticCategory.Message, "Set_the_newline_character_for_emitting_files_6659", "Set the newline character for emitting files."),

./node_modules/typescript/lib/tsserverlibrary.js 9953      * Test for whether a single line comment with leading whitespace trimmed's text contains a directive.

./node_modules/typescript/lib/tsserverlibrary.js 9957      * Test for whether a multi-line comment with leading whitespace trimmed's last line contains a directive.

./node_modules/typescript/lib/tsserverlibrary.js 10019         var lineStart = 0;

./node_modules/typescript/lib/tsserverlibrary.js 10025                     if (text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserverlibrary.js 10029                 case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserverlibrary.js 10030                     result.push(lineStart);

./node_modules/typescript/lib/tsserverlibrary.js 10031                     lineStart = pos;

./node_modules/typescript/lib/tsserverlibrary.js 10035                         result.push(lineStart);

./node_modules/typescript/lib/tsserverlibrary.js 10036                         lineStart = pos;

./node_modules/typescript/lib/tsserverlibrary.js 10041         result.push(lineStart);

./node_modules/typescript/lib/tsserverlibrary.js 10045     function getPositionOfLineAndCharacter(sourceFile, line, character, allowEdits) {

./node_modules/typescript/lib/tsserverlibrary.js 10047             sourceFile.getPositionOfLineAndCharacter(line, character, allowEdits) :

./node_modules/typescript/lib/tsserverlibrary.js 10048             computePositionOfLineAndCharacter(getLineStarts(sourceFile), line, character, sourceFile.text, allowEdits);

./node_modules/typescript/lib/tsserverlibrary.js 10052     function computePositionOfLineAndCharacter(lineStarts, line, character, debugText, allowEdits) {

./node_modules/typescript/lib/tsserverlibrary.js 10053         if (line < 0 || line >= lineStarts.length) {

./node_modules/typescript/lib/tsserverlibrary.js 10055                 // Clamp line to nearest allowable value

./node_modules/typescript/lib/tsserverlibrary.js 10056                 line = line < 0 ? 0 : line >= lineStarts.length ? lineStarts.length - 1 : line;

./node_modules/typescript/lib/tsserverlibrary.js 10059                 ts.Debug.fail("Bad line number. Line: " + line + ", lineStarts.length: " + lineStarts.length + " , line map is correct? " + (debugText !== undefined ? ts.arraysEqual(lineStarts, computeLineStarts(debugText)) : "unknown"));

./node_modules/typescript/lib/tsserverlibrary.js 10062         var res = lineStarts[line] + character;

./node_modules/typescript/lib/tsserverlibrary.js 10067             return res > lineStarts[line + 1] ? lineStarts[line + 1] : typeof debugText === "string" && res > debugText.length ? debugText.length : res;

./node_modules/typescript/lib/tsserverlibrary.js 10069         if (line < lineStarts.length - 1) {

./node_modules/typescript/lib/tsserverlibrary.js 10070             ts.Debug.assert(res < lineStarts[line + 1]);

./node_modules/typescript/lib/tsserverlibrary.js 10073             ts.Debug.assert(res <= debugText.length); // Allow single character overflow for trailing newline

./node_modules/typescript/lib/tsserverlibrary.js 10080         return sourceFile.lineMap || (sourceFile.lineMap = computeLineStarts(sourceFile.text));

./node_modules/typescript/lib/tsserverlibrary.js 10084     function computeLineAndCharacterOfPosition(lineStarts, position) {

./node_modules/typescript/lib/tsserverlibrary.js 10085         var lineNumber = computeLineOfPosition(lineStarts, position);

./node_modules/typescript/lib/tsserverlibrary.js 10087             line: lineNumber,

./node_modules/typescript/lib/tsserverlibrary.js 10088             character: position - lineStarts[lineNumber]

./node_modules/typescript/lib/tsserverlibrary.js 10094      * We assume the first line starts at position 0 and 'position' is non-negative.

./node_modules/typescript/lib/tsserverlibrary.js 10096     function computeLineOfPosition(lineStarts, position, lowerBound) {

./node_modules/typescript/lib/tsserverlibrary.js 10097         var lineNumber = ts.binarySearch(lineStarts, position, ts.identity, ts.compareValues, lowerBound);

./node_modules/typescript/lib/tsserverlibrary.js 10098         if (lineNumber < 0) {

./node_modules/typescript/lib/tsserverlibrary.js 10100             // the binary search returns the 2's-complement of the next line start

./node_modules/typescript/lib/tsserverlibrary.js 10101             // e.g. if the line starts at [5, 10, 23, 80] and the position requested was 20

./node_modules/typescript/lib/tsserverlibrary.js 10104             // We want the index of the previous line start, so we subtract 1.

./node_modules/typescript/lib/tsserverlibrary.js 10106             lineNumber = ~lineNumber - 1;

./node_modules/typescript/lib/tsserverlibrary.js 10107             ts.Debug.assert(lineNumber !== -1, "position cannot precede the beginning of the file");

./node_modules/typescript/lib/tsserverlibrary.js 10109         return lineNumber;

./node_modules/typescript/lib/tsserverlibrary.js 10116         var lineStarts = getLineStarts(sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 10120         var lowerLine = computeLineOfPosition(lineStarts, lower);

./node_modules/typescript/lib/tsserverlibrary.js 10121         var upperLine = computeLineOfPosition(lineStarts, upper, lowerLine);

./node_modules/typescript/lib/tsserverlibrary.js 10133     /** Does not include line breaks. For that, see isWhiteSpaceLike. */

./node_modules/typescript/lib/tsserverlibrary.js 10136         // It is explicitly not a line-break as it isn't in the exact set specified by EcmaScript.

./node_modules/typescript/lib/tsserverlibrary.js 10153         // The ECMAScript line terminator characters are listed in Table 3.

./node_modules/typescript/lib/tsserverlibrary.js 10160         // Only the characters in Table 3 are treated as line terminators. Other new line or line

./node_modules/typescript/lib/tsserverlibrary.js 10161         // breaking characters are treated as white space but not as line terminators.

./node_modules/typescript/lib/tsserverlibrary.js 10162         return ch === 10 /* lineFeed */ ||

./node_modules/typescript/lib/tsserverlibrary.js 10164             ch === 8232 /* lineSeparator */ ||

./node_modules/typescript/lib/tsserverlibrary.js 10187             case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserverlibrary.js 10220                     if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserverlibrary.js 10224                 case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserverlibrary.js 10305         // Conflict markers must be at the start of a line.

./node_modules/typescript/lib/tsserverlibrary.js 10363      * Single-line comment ranges include the leading double-slash characters but not the ending

./node_modules/typescript/lib/tsserverlibrary.js 10364      * line break. Multi-line comment ranges include the leading slash-asterisk and trailing

./node_modules/typescript/lib/tsserverlibrary.js 10371      * @param trailing If false, whitespace is skipped until the first line break and comments

./node_modules/typescript/lib/tsserverlibrary.js 10373      *      between the given position and the next line break are returned.

./node_modules/typescript/lib/tsserverlibrary.js 10399                     if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserverlibrary.js 10403                 case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserverlibrary.js 10876                     if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserverlibrary.js 10975                 // when encountering a LineContinuation (i.e. a backslash and a line terminator sequence),

./node_modules/typescript/lib/tsserverlibrary.js 10976                 // the line terminator is interpreted to be "the empty code unit sequence".

./node_modules/typescript/lib/tsserverlibrary.js 10978                     if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserverlibrary.js 10982                 case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserverlibrary.js 10983                 case 8232 /* lineSeparator */:

./node_modules/typescript/lib/tsserverlibrary.js 11183                     case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserverlibrary.js 11191                             if (ch === 13 /* carriageReturn */ && pos + 1 < end && text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserverlibrary.js 11283                             // decoration at the start of a JSDoc comment line

./node_modules/typescript/lib/tsserverlibrary.js 11320                         // Single-line comment

./node_modules/typescript/lib/tsserverlibrary.js 11337                         // Multi-line comment

./node_modules/typescript/lib/tsserverlibrary.js 11666                     // If we reach the end of a file, or hit a newline, then this is an unterminated

./node_modules/typescript/lib/tsserverlibrary.js 11710         function appendIfCommentDirective(commentDirectives, text, commentDirectiveRegEx, lineStart) {

./node_modules/typescript/lib/tsserverlibrary.js 11716                 range: { pos: lineStart, end: pos },

./node_modules/typescript/lib/tsserverlibrary.js 11745         function reScanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/tsserverlibrary.js 11746             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/tsserverlibrary.js 11748             return token = scanJsxToken(allowMultilineJsxText);

./node_modules/typescript/lib/tsserverlibrary.js 11769         function scanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/tsserverlibrary.js 11770             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/tsserverlibrary.js 11788             // First non-whitespace character on this line.

./node_modules/typescript/lib/tsserverlibrary.js 11790             // These initial values are special because the first line is:

./node_modules/typescript/lib/tsserverlibrary.js 11810                 // FirstNonWhitespace is 0, then we only see whitespaces so far. If we see a linebreak, we want to ignore that whitespaces.

./node_modules/typescript/lib/tsserverlibrary.js 11819                 else if (!allowMultilineJsxText && isLineBreak(char) && firstNonWhitespace > 0) {

./node_modules/typescript/lib/tsserverlibrary.js 11820                     // Stop JsxText on each line during formatting. This allows the formatter to

./node_modules/typescript/lib/tsserverlibrary.js 11821                     // indent each line correctly.

./node_modules/typescript/lib/tsserverlibrary.js 11905                     if (text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserverlibrary.js 11909                 case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserverlibrary.js 12214     ts.unchangedTextChangeRange = createTextChangeRange(createTextSpan(0, 0), 0); // eslint-disable-line prefer-const

./node_modules/typescript/lib/tsserverlibrary.js 12279             // which if the two $'s precedes the other, and we move that one forward until they line up.  in this case that

./node_modules/typescript/lib/tsserverlibrary.js 13963     function guessIndentation(lines) {

./node_modules/typescript/lib/tsserverlibrary.js 13965         for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {

./node_modules/typescript/lib/tsserverlibrary.js 13966             var line = lines_1[_i];

./node_modules/typescript/lib/tsserverlibrary.js 13967             if (!line.length) {

./node_modules/typescript/lib/tsserverlibrary.js 13971             for (; i < line.length && i < indentation; i++) {

./node_modules/typescript/lib/tsserverlibrary.js 13972                 if (!ts.isWhiteSpaceLike(line.charCodeAt(i))) {

./node_modules/typescript/lib/tsserverlibrary.js 14072             // Completely ignore indentation for string writers.  And map newlines to

./node_modules/typescript/lib/tsserverlibrary.js 14275     function getStartPositionOfLine(line, sourceFile) {

./node_modules/typescript/lib/tsserverlibrary.js 14276         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/tsserverlibrary.js 14277         return ts.getLineStarts(sourceFile)[line];

./node_modules/typescript/lib/tsserverlibrary.js 14284         return file.fileName + "(" + (loc.line + 1) + "," + (loc.character + 1) + ")";

./node_modules/typescript/lib/tsserverlibrary.js 14287     function getEndLinePosition(line, sourceFile) {

./node_modules/typescript/lib/tsserverlibrary.js 14288         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/tsserverlibrary.js 14289         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 14290         var lineIndex = line;

./node_modules/typescript/lib/tsserverlibrary.js 14292         if (lineIndex + 1 === lineStarts.length) {

./node_modules/typescript/lib/tsserverlibrary.js 14293             // last line - return EOF

./node_modules/typescript/lib/tsserverlibrary.js 14297             // current line start

./node_modules/typescript/lib/tsserverlibrary.js 14298             var start = lineStarts[lineIndex];

./node_modules/typescript/lib/tsserverlibrary.js 14299             // take the start position of the next line - 1 = it should be some line break

./node_modules/typescript/lib/tsserverlibrary.js 14300             var pos = lineStarts[lineIndex + 1] - 1;

./node_modules/typescript/lib/tsserverlibrary.js 14302             // walk backwards skipping line breaks, stop the the beginning of current line.

./node_modules/typescript/lib/tsserverlibrary.js 14305             // $ <- end of line for this position should match the start position

./node_modules/typescript/lib/tsserverlibrary.js 14423             "" + ts.getLineAndCharacterOfPosition(sourceFile, commentDirective.range.end).line,

./node_modules/typescript/lib/tsserverlibrary.js 14431                 var line = _a[0], directive = _a[1];

./node_modules/typescript/lib/tsserverlibrary.js 14432                 return directive.type === 0 /* ExpectError */ && !usedLines.get(line);

./node_modules/typescript/lib/tsserverlibrary.js 14439         function markUsed(line) {

./node_modules/typescript/lib/tsserverlibrary.js 14440             if (!directivesByLine.has("" + line)) {

./node_modules/typescript/lib/tsserverlibrary.js 14443             usedLines.set("" + line, true);

./node_modules/typescript/lib/tsserverlibrary.js 14499             // strip space + asterisk at line start

./node_modules/typescript/lib/tsserverlibrary.js 14500             text = text.split(/\r\n|\n|\r/).map(function (line) { return ts.trimStringStart(line.replace(/^\s*\*/, "")); }).join("\n");

./node_modules/typescript/lib/tsserverlibrary.js 14549                 String: ["codePointAt", "includes", "endsWith", "normalize", "repeat", "startsWith", "anchor", "big", "blink", "bold", "fixed", "fontcolor", "fontsize", "italics", "link", "small", "strike", "sub", "sup"],

./node_modules/typescript/lib/tsserverlibrary.js 15041             var startLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.pos).line;

./node_modules/typescript/lib/tsserverlibrary.js 15042             var endLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.end).line;

./node_modules/typescript/lib/tsserverlibrary.js 15044                 // The arrow function spans multiple lines,

./node_modules/typescript/lib/tsserverlibrary.js 15045                 // make the error span be the first line, inclusive.

./node_modules/typescript/lib/tsserverlibrary.js 17665     // This consists of the first 19 unprintable ASCII characters, canonical escapes, lineSeparator,

./node_modules/typescript/lib/tsserverlibrary.js 17666     // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in

./node_modules/typescript/lib/tsserverlibrary.js 17672     // Template strings preserve simple LF newlines, still encode CRLF (or CR)

./node_modules/typescript/lib/tsserverlibrary.js 17709      * but augmented for a few select characters (e.g. lineSeparator, paragraphSeparator, nextLine)

./node_modules/typescript/lib/tsserverlibrary.js 17729     // This consists of the first 19 unprintable ASCII characters, JSX canonical escapes, lineSeparator,

./node_modules/typescript/lib/tsserverlibrary.js 17730     // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in

./node_modules/typescript/lib/tsserverlibrary.js 17795         var lineStart;

./node_modules/typescript/lib/tsserverlibrary.js 17796         var lineCount;

./node_modules/typescript/lib/tsserverlibrary.js 17797         var linePos;

./node_modules/typescript/lib/tsserverlibrary.js 17800             var lineStartsOfS = ts.computeLineStarts(s);

./node_modules/typescript/lib/tsserverlibrary.js 17801             if (lineStartsOfS.length > 1) {

./node_modules/typescript/lib/tsserverlibrary.js 17802                 lineCount = lineCount + lineStartsOfS.length - 1;

./node_modules/typescript/lib/tsserverlibrary.js 17803                 linePos = output.length - s.length + ts.last(lineStartsOfS);

./node_modules/typescript/lib/tsserverlibrary.js 17804                 lineStart = (linePos - output.length) === 0;

./node_modules/typescript/lib/tsserverlibrary.js 17807                 lineStart = false;

./node_modules/typescript/lib/tsserverlibrary.js 17812                 if (lineStart) {

./node_modules/typescript/lib/tsserverlibrary.js 17814                     lineStart = false;

./node_modules/typescript/lib/tsserverlibrary.js 17833             lineStart = true;

./node_modules/typescript/lib/tsserverlibrary.js 17834             lineCount = 0;

./node_modules/typescript/lib/tsserverlibrary.js 17835             linePos = 0;

./node_modules/typescript/lib/tsserverlibrary.js 17851             if (!lineStart || force) {

./node_modules/typescript/lib/tsserverlibrary.js 17853                 lineCount++;

./node_modules/typescript/lib/tsserverlibrary.js 17854                 linePos = output.length;

./node_modules/typescript/lib/tsserverlibrary.js 17855                 lineStart = true;

./node_modules/typescript/lib/tsserverlibrary.js 17860             return lineStart ? output.length : (output.length + newLine.length);

./node_modules/typescript/lib/tsserverlibrary.js 17872             getLine: function () { return lineCount; },

./node_modules/typescript/lib/tsserverlibrary.js 17873             getColumn: function () { return lineStart ? indent * getIndentSize() : output.length - linePos; },

./node_modules/typescript/lib/tsserverlibrary.js 17875             isAtStartOfLine: function () { return lineStart; },

./node_modules/typescript/lib/tsserverlibrary.js 18099         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 18100         return ts.computeLineOfPosition(lineStarts, pos);

./node_modules/typescript/lib/tsserverlibrary.js 18103     function getLineOfLocalPositionFromLineMap(lineMap, pos) {

./node_modules/typescript/lib/tsserverlibrary.js 18104         return ts.computeLineOfPosition(lineMap, pos);

./node_modules/typescript/lib/tsserverlibrary.js 18250     function emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments) {

./node_modules/typescript/lib/tsserverlibrary.js 18251         emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, node.pos, leadingComments);

./node_modules/typescript/lib/tsserverlibrary.js 18254     function emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, pos, leadingComments) {

./node_modules/typescript/lib/tsserverlibrary.js 18255         // If the leading comments start on different line than the start of node, write new line

./node_modules/typescript/lib/tsserverlibrary.js 18257             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, leadingComments[0].pos)) {

./node_modules/typescript/lib/tsserverlibrary.js 18262     function emitNewLineBeforeLeadingCommentOfPosition(lineMap, writer, pos, commentPos) {

./node_modules/typescript/lib/tsserverlibrary.js 18263         // If the leading comments start on different line than the start of node, write new line

./node_modules/typescript/lib/tsserverlibrary.js 18265             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, commentPos)) {

./node_modules/typescript/lib/tsserverlibrary.js 18270     function emitComments(text, lineMap, writer, comments, leadingSeparator, trailingSeparator, newLine, writeComment) {

./node_modules/typescript/lib/tsserverlibrary.js 18282                 writeComment(text, lineMap, writer, comment.pos, comment.end, newLine);

./node_modules/typescript/lib/tsserverlibrary.js 18300     function emitDetachedComments(text, lineMap, writer, writeComment, node, newLine, removeComments) {

./node_modules/typescript/lib/tsserverlibrary.js 18323                     var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, lastComment.end);

./node_modules/typescript/lib/tsserverlibrary.js 18324                     var commentLine = getLineOfLocalPositionFromLineMap(lineMap, comment.pos);

./node_modules/typescript/lib/tsserverlibrary.js 18326                         // There was a blank line between the last comment and this comment.  This

./node_modules/typescript/lib/tsserverlibrary.js 18337                 // sure there is at least one blank line between it and the node.  If not, it's not

./node_modules/typescript/lib/tsserverlibrary.js 18339                 var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, ts.last(detachedComments).end);

./node_modules/typescript/lib/tsserverlibrary.js 18340                 var nodeLine = getLineOfLocalPositionFromLineMap(lineMap, ts.skipTrivia(text, node.pos));

./node_modules/typescript/lib/tsserverlibrary.js 18343                     emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments);

./node_modules/typescript/lib/tsserverlibrary.js 18344                     emitComments(text, lineMap, writer, detachedComments, /*leadingSeparator*/ false, /*trailingSeparator*/ true, newLine, writeComment);

./node_modules/typescript/lib/tsserverlibrary.js 18355     function writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/tsserverlibrary.js 18357             var firstCommentLineAndCharacter = ts.computeLineAndCharacterOfPosition(lineMap, commentPos);

./node_modules/typescript/lib/tsserverlibrary.js 18358             var lineCount = lineMap.length;

./node_modules/typescript/lib/tsserverlibrary.js 18360             for (var pos = commentPos, currentLine = firstCommentLineAndCharacter.line; pos < commentEnd; currentLine++) {

./node_modules/typescript/lib/tsserverlibrary.js 18361                 var nextLineStart = (currentLine + 1) === lineCount

./node_modules/typescript/lib/tsserverlibrary.js 18363                     : lineMap[currentLine + 1];

./node_modules/typescript/lib/tsserverlibrary.js 18365                     // If we are not emitting first line, we need to write the spaces to adjust the alignment

./node_modules/typescript/lib/tsserverlibrary.js 18367                         firstCommentLineIndent = calculateIndent(text, lineMap[firstCommentLineAndCharacter.line], commentPos);

./node_modules/typescript/lib/tsserverlibrary.js 18374                     //         /* starts at character 9 this is line 1

./node_modules/typescript/lib/tsserverlibrary.js 18375                     //    * starts at character pos 4 line                        --1  = 8 - 8 + 3

./node_modules/typescript/lib/tsserverlibrary.js 18380                     //     /* this is line 1 -- Assume current writer indent 8

./node_modules/typescript/lib/tsserverlibrary.js 18381                     //      * line                                                --3 = 8 - 4 + 5

./node_modules/typescript/lib/tsserverlibrary.js 18402                 // Write the comment line text

./node_modules/typescript/lib/tsserverlibrary.js 18408             // Single line comment of style //....

./node_modules/typescript/lib/tsserverlibrary.js 18424             // Empty string - make sure we write empty line

./node_modules/typescript/lib/tsserverlibrary.js 18917     var lineFeed = "\n";

./node_modules/typescript/lib/tsserverlibrary.js 18923                 return lineFeed;

./node_modules/typescript/lib/tsserverlibrary.js 19461     // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/tsserverlibrary.js 20495         // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 21905             inlineExpressions: inlineExpressions,

./node_modules/typescript/lib/tsserverlibrary.js 23701             // eslint-disable-next-line no-undef-init

./node_modules/typescript/lib/tsserverlibrary.js 25972         function inlineExpressions(expressions) {

./node_modules/typescript/lib/tsserverlibrary.js 26352                 // tslint:disable-next-line no-invalid-template-strings

./node_modules/typescript/lib/tsserverlibrary.js 26356                 // tslint:disable-next-line no-invalid-template-strings

./node_modules/typescript/lib/tsserverlibrary.js 26705     // tslint:disable-next-line variable-name

./node_modules/typescript/lib/tsserverlibrary.js 27034     function ignoreSourceNewlines(node) {

./node_modules/typescript/lib/tsserverlibrary.js 27035         getOrCreateEmitNode(node).flags |= 134217728 /* IgnoreSourceNewlines */;

./node_modules/typescript/lib/tsserverlibrary.js 27038     ts.ignoreSourceNewlines = ignoreSourceNewlines;

./node_modules/typescript/lib/tsserverlibrary.js 29593     function createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState) {

./node_modules/typescript/lib/tsserverlibrary.js 29595         return trampoline;

./node_modules/typescript/lib/tsserverlibrary.js 29596         function trampoline(node, outerState) {

./node_modules/typescript/lib/tsserverlibrary.js 29609     ts.createBinaryExpressionTrampoline = createBinaryExpressionTrampoline;

./node_modules/typescript/lib/tsserverlibrary.js 30765             // code from createNode is inlined here so createNode won't have to deal with special case of creating source files

./node_modules/typescript/lib/tsserverlibrary.js 30913         // reason about this side effect).  Mainstream VMs inline simple functions like this, so

./node_modules/typescript/lib/tsserverlibrary.js 32064             // Note: the newlines are important here.  For example, if that above code

./node_modules/typescript/lib/tsserverlibrary.js 32073             // line terminator after the identifier or keyword.

./node_modules/typescript/lib/tsserverlibrary.js 33351                 // if the next token is not on the same line as yield.  or we don't have an '*' or

./node_modules/typescript/lib/tsserverlibrary.js 34917             // directly as that might consume an expression on the following line.

./node_modules/typescript/lib/tsserverlibrary.js 35019                     // however, an identifier cannot be followed by another identifier on the same line. This is what we

./node_modules/typescript/lib/tsserverlibrary.js 35029                     // as the identifier 'namespace' on one line followed by the identifier 'n' on another.

./node_modules/typescript/lib/tsserverlibrary.js 35637                 // We need to ensure that any subsequent modifiers appear on the same line

./node_modules/typescript/lib/tsserverlibrary.js 36316                     // + 1 because the last index of \n is always one index before the first character in the line and coincidentally, if there is no \n before start, it is -1, which is also one index before the first character

./node_modules/typescript/lib/tsserverlibrary.js 36340                                     // NOTE: According to usejsdoc.org, a tag goes to end of line, except the last tag.

./node_modules/typescript/lib/tsserverlibrary.js 36341                                     // Real-world comments may break this rule, so "BeginningOfLine" will not be a real line beginning

./node_modules/typescript/lib/tsserverlibrary.js 36358                                     // If we've already seen an asterisk, then we can no longer parse a tag on this line

./node_modules/typescript/lib/tsserverlibrary.js 36363                                     // Ignore the first asterisk on a line

./node_modules/typescript/lib/tsserverlibrary.js 36388                                         removeLeadingNewlines(comments);

./node_modules/typescript/lib/tsserverlibrary.js 36399                                 // wasn't a tag, we can no longer parse a tag on this line until we hit the next

./node_modules/typescript/lib/tsserverlibrary.js 36400                                 // line break.

./node_modules/typescript/lib/tsserverlibrary.js 36416                 function removeLeadingNewlines(comments) {

./node_modules/typescript/lib/tsserverlibrary.js 36427                     // We must use infinite lookahead, as there could be any number of newlines :(

./node_modules/typescript/lib/tsserverlibrary.js 36653                     removeLeadingNewlines(comments);

./node_modules/typescript/lib/tsserverlibrary.js 37095                     //   > Multiple bounded generics cannot be declared on the same line. For the sake of clarity, if multiple templates share the same

./node_modules/typescript/lib/tsserverlibrary.js 37096                     //   > type bound they must be declared on separate lines.

./node_modules/typescript/lib/tsserverlibrary.js 37828             var multiLinePragmaRegEx = /@(\S+)(\s+.*)?$/gim; // Defined inline since it uses the "g" flag, which keeps a persistent index (for iterating)

./node_modules/typescript/lib/tsserverlibrary.js 37979      * A map of lib names to lib files. This map is used both for parsing the "lib" command line

./node_modules/typescript/lib/tsserverlibrary.js 38060             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 38074             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 38172             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 38210             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 38218             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 38225             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 38234             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 38243             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 38250             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 38257             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 38743             name: "inlineSourceMap",

./node_modules/typescript/lib/tsserverlibrary.js 38751             name: "inlineSources",

./node_modules/typescript/lib/tsserverlibrary.js 38857             description: ts.Diagnostics.Set_the_newline_character_for_emitting_files,

./node_modules/typescript/lib/tsserverlibrary.js 39088             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 39095             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 39102             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 39108             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserverlibrary.js 39335                     errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line, opt.name));

./node_modules/typescript/lib/tsserverlibrary.js 39339                 errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line, opt.name));

./node_modules/typescript/lib/tsserverlibrary.js 39345             // Check to see if no argument was provided (e.g. "--locale" is the last command-line argument).

./node_modules/typescript/lib/tsserverlibrary.js 39761                     return validateValue(/*value*/ null); // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 39920         // There is a typeMap associated with this command-line option so use it to map value back to its name

./node_modules/typescript/lib/tsserverlibrary.js 39939                 // tsconfig only options cannot be specified via command line,

./node_modules/typescript/lib/tsserverlibrary.js 39941                 if (optionsNameMap.has(name) && (optionsNameMap.get(name).category === ts.Diagnostics.Command_line_Options || optionsNameMap.get(name).category === ts.Diagnostics.Output_Formatting)) {

./node_modules/typescript/lib/tsserverlibrary.js 39963                             // There is a typeMap associated with this command-line option so use it to map value back to its name

./node_modules/typescript/lib/tsserverlibrary.js 39976      * Generate tsconfig configuration when running command line "--init"

./node_modules/typescript/lib/tsserverlibrary.js 39977      * @param options commandlineOptions to be generated into tsconfig.json

./node_modules/typescript/lib/tsserverlibrary.js 40010             var categoriesToSkip = [ts.Diagnostics.Command_line_Options, ts.Diagnostics.Editor_Support, ts.Diagnostics.Compiler_Diagnostics, ts.Diagnostics.Backwards_Compatibility, ts.Diagnostics.Watch_and_Build_Modes, ts.Diagnostics.Output_Formatting];

./node_modules/typescript/lib/tsserverlibrary.js 40136         return x === undefined || x === null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 40638      * NOTE: used \ in place of / above to avoid issues with multiline comments.

./node_modules/typescript/lib/tsserverlibrary.js 40650      * NOTE: used \ in place of / above to avoid issues with multiline comments.

./node_modules/typescript/lib/tsserverlibrary.js 41045         if (typeof value !== typeOfTag || value === null) { // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 41047                 // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 41329                             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 42231                 // When baseUrl is not specified, the command line parser resolves relative paths to the config file location.

./node_modules/typescript/lib/tsserverlibrary.js 43758             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, /*foldState*/ undefined);

./node_modules/typescript/lib/tsserverlibrary.js 44327                     // typedef anchored to an A.B.C assignment - we need to bind into B's namespace under name C

./node_modules/typescript/lib/tsserverlibrary.js 45645                 //  but be sure to bail on recuring into the type if accept declines the symbol.

./node_modules/typescript/lib/tsserverlibrary.js 46784                 addErrorOrSuggestion(isError, "message" in message ? ts.createFileDiagnostic(file, 0, 0, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForFileFromMessageChain(file, message)); // eslint-disable-line no-in-operator

./node_modules/typescript/lib/tsserverlibrary.js 46787             addErrorOrSuggestion(isError, "message" in message ? ts.createDiagnosticForNode(location, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForNodeFromMessageChain(location, message)); // eslint-disable-line no-in-operator

./node_modules/typescript/lib/tsserverlibrary.js 47823             // generator functions and async functions are not inlined in control flow when immediately invoked

./node_modules/typescript/lib/tsserverlibrary.js 50399                     ts.setEmitFlags(typeLiteralNode, (context.flags & 1024 /* MultilineObjectLiterals */) ? 0 : 1 /* SingleLine */);

./node_modules/typescript/lib/tsserverlibrary.js 51067                     return ts.getSourceFileOfNode(ts.getNonAugmentationDeclaration(symbol)).fileName; // A resolver may not be provided for baselines and errors - in those cases we use the fileName in full

./node_modules/typescript/lib/tsserverlibrary.js 51525                     if (file && ts.isTupleTypeNode(node) && (ts.getLineAndCharacterOfPosition(file, node.pos).line === ts.getLineAndCharacterOfPosition(file, node.end).line)) {

./node_modules/typescript/lib/tsserverlibrary.js 51685                 function inlineExportModifiers(statements) {

./node_modules/typescript/lib/tsserverlibrary.js 51719                     statements = inlineExportModifiers(statements);

./node_modules/typescript/lib/tsserverlibrary.js 52485                             // Inlined JSON types exported with [module.]exports= will already emit an export=, so should use `declare`.

./node_modules/typescript/lib/tsserverlibrary.js 62462                             // We can't simply assume invariance, because `Unmeasurable` marks nonlinear relations, for example, a relation tained by

./node_modules/typescript/lib/tsserverlibrary.js 67097             var inlineLevel = 0;

./node_modules/typescript/lib/tsserverlibrary.js 68089                         // When narrowing a reference to a const variable, non-assigned parameter, or readonly property, we inline

./node_modules/typescript/lib/tsserverlibrary.js 68091                         if (!isMatchingReference(reference, expr) && inlineLevel < 5) {

./node_modules/typescript/lib/tsserverlibrary.js 68096                                     inlineLevel++;

./node_modules/typescript/lib/tsserverlibrary.js 68098                                     inlineLevel--;

./node_modules/typescript/lib/tsserverlibrary.js 68265                     // (because the const enum value will not be inlined), or if (2) the alias is an export

./node_modules/typescript/lib/tsserverlibrary.js 71253             //   1. if 'isolatedModules' is enabled, because the const enum value will not be inlined, and

./node_modules/typescript/lib/tsserverlibrary.js 75249             var trampoline = ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState);

./node_modules/typescript/lib/tsserverlibrary.js 75251                 var result = trampoline(node, checkMode);

./node_modules/typescript/lib/tsserverlibrary.js 78252                         //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag

./node_modules/typescript/lib/tsserverlibrary.js 78259                     //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag

./node_modules/typescript/lib/tsserverlibrary.js 81427                     // If not a value, we're interpreting the identifier as a type export, along the lines of (`export { Id as default }`)

./node_modules/typescript/lib/tsserverlibrary.js 82939                 // inline property\index accesses only for const enums

./node_modules/typescript/lib/tsserverlibrary.js 83041             return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/tsserverlibrary.js 83049             return nodeBuilder.typeToTypeNode(getReturnTypeOfSignature(signature), enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/tsserverlibrary.js 83057             return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/tsserverlibrary.js 83984             var startLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.pos).line;

./node_modules/typescript/lib/tsserverlibrary.js 83985             var endLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.end).line;

./node_modules/typescript/lib/tsserverlibrary.js 84187                     // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion

./node_modules/typescript/lib/tsserverlibrary.js 85943                 if (end && (raw.generatedLine > end.line ||

./node_modules/typescript/lib/tsserverlibrary.js 85944                     (raw.generatedLine === end.line && raw.generatedCharacter > end.character))) {

./node_modules/typescript/lib/tsserverlibrary.js 85947                 if (start && (raw.generatedLine < start.line ||

./node_modules/typescript/lib/tsserverlibrary.js 85948                     (start.line === raw.generatedLine && raw.generatedCharacter < start.character))) {

./node_modules/typescript/lib/tsserverlibrary.js 85979                 var rawGeneratedLine = raw.generatedLine - (start ? start.line : 0);

./node_modules/typescript/lib/tsserverlibrary.js 85981                 var rawGeneratedCharacter = start && start.line === raw.generatedLine ? raw.generatedCharacter - start.character : raw.generatedCharacter;

./node_modules/typescript/lib/tsserverlibrary.js 86011                 // Emit line delimiters

./node_modules/typescript/lib/tsserverlibrary.js 86033                 // 3. Relative source line

./node_modules/typescript/lib/tsserverlibrary.js 86092     // Sometimes tools can see the following line as a source mapping url comment, so we mangle it a bit (the [M])

./node_modules/typescript/lib/tsserverlibrary.js 86095     function getLineInfo(text, lineStarts) {

./node_modules/typescript/lib/tsserverlibrary.js 86097             getLineCount: function () { return lineStarts.length; },

./node_modules/typescript/lib/tsserverlibrary.js 86098             getLineText: function (line) { return text.substring(lineStarts[line], lineStarts[line + 1]); }

./node_modules/typescript/lib/tsserverlibrary.js 86105     function tryGetSourceMappingURL(lineInfo) {

./node_modules/typescript/lib/tsserverlibrary.js 86106         for (var index = lineInfo.getLineCount() - 1; index >= 0; index--) {

./node_modules/typescript/lib/tsserverlibrary.js 86107             var line = lineInfo.getLineText(index);

./node_modules/typescript/lib/tsserverlibrary.js 86108             var comment = sourceMapCommentRegExp.exec(line);

./node_modules/typescript/lib/tsserverlibrary.js 86112             // If we see a non-whitespace/map comment-like line, break, to avoid scanning up the entire file

./node_modules/typescript/lib/tsserverlibrary.js 86113             else if (!line.match(whitespaceOrMapCommentRegExp)) {

./node_modules/typescript/lib/tsserverlibrary.js 86167                         // new line

./node_modules/typescript/lib/tsserverlibrary.js 86174                         // Next entry is on same line - no action needed

./node_modules/typescript/lib/tsserverlibrary.js 86707     function isSimpleInlineableExpression(expression) {

./node_modules/typescript/lib/tsserverlibrary.js 86710     ts.isSimpleInlineableExpression = isSimpleInlineableExpression;

./node_modules/typescript/lib/tsserverlibrary.js 86892         return context.factory.inlineExpressions(expressions) || context.factory.createOmittedExpression();

./node_modules/typescript/lib/tsserverlibrary.js 86945      * @param hoistTempVariables Indicates whether temporary variables should not be recorded in-line.

./node_modules/typescript/lib/tsserverlibrary.js 86979                 var value = context.factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/tsserverlibrary.js 86995             /*type*/ undefined, pendingExpressions_1 ? context.factory.inlineExpressions(ts.append(pendingExpressions_1, value)) : value);

./node_modules/typescript/lib/tsserverlibrary.js 87007                 value = context.factory.inlineExpressions(ts.append(pendingExpressions, value));

./node_modules/typescript/lib/tsserverlibrary.js 87033                     if (!ts.isSimpleInlineableExpression(initializer) && ts.isBindingOrAssignmentPattern(bindingTarget)) {

./node_modules/typescript/lib/tsserverlibrary.js 87193         if (initializer && !ts.isSimpleInlineableExpression(initializer))

./node_modules/typescript/lib/tsserverlibrary.js 87344         // Examples: `\n` is converted to "\\n", a template string with a newline to "\n".

./node_modules/typescript/lib/tsserverlibrary.js 87356         // Newline normalization:

./node_modules/typescript/lib/tsserverlibrary.js 88898                 return generateNameForComputedPropertyName && !ts.isSimpleInlineableExpression(name.expression)

./node_modules/typescript/lib/tsserverlibrary.js 88925                 if (!ts.isSimpleInlineableExpression(innerExpression)) {

./node_modules/typescript/lib/tsserverlibrary.js 89155                 return ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/tsserverlibrary.js 90119          * Tracks what computed name expressions originating from elided names must be inlined

./node_modules/typescript/lib/tsserverlibrary.js 90273                 node = factory.updateComputedPropertyName(node, factory.inlineExpressions(expressions));

./node_modules/typescript/lib/tsserverlibrary.js 90332             // If it's not inlineable, then we emit an expression after the class which assigns

./node_modules/typescript/lib/tsserverlibrary.js 90335             if (expr && !ts.isSimpleInlineableExpression(expr)) {

./node_modules/typescript/lib/tsserverlibrary.js 90449                             if (ts.isSimpleInlineableExpression(node.operand.argumentExpression)) {

./node_modules/typescript/lib/tsserverlibrary.js 90484             if (ts.isSimpleInlineableExpression(receiver)) {

./node_modules/typescript/lib/tsserverlibrary.js 90560                     factory.inlineExpressions(ts.compact(__spreadArray(__spreadArray([], pendingExpressions, true), [node], false))) :

./node_modules/typescript/lib/tsserverlibrary.js 90592                                 if (!ts.isSimpleInlineableExpression(setterName)) {

./node_modules/typescript/lib/tsserverlibrary.js 90743                 statements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/tsserverlibrary.js 90764             // then we want to output the pendingExpressions as statements, not as inlined

./node_modules/typescript/lib/tsserverlibrary.js 90794                         pendingStatements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/tsserverlibrary.js 90800                         return factory.inlineExpressions([factory.createAssignment(temp, classExpression), temp]);

./node_modules/typescript/lib/tsserverlibrary.js 90822                     return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/tsserverlibrary.js 91014             var propertyName = ts.isComputedPropertyName(property.name) && !ts.isSimpleInlineableExpression(property.name.expression)

./node_modules/typescript/lib/tsserverlibrary.js 91229          * value of the result or the expression itself if the value is either unused or safe to inline into multiple locations

./node_modules/typescript/lib/tsserverlibrary.js 91236                 var inlinable = ts.isSimpleInlineableExpression(innerExpression);

./node_modules/typescript/lib/tsserverlibrary.js 91883             return factory.inlineExpressions(ts.map(variables, transformInitializedVariable));

./node_modules/typescript/lib/tsserverlibrary.js 92169                 factory.createObjectLiteralExpression(accessors, /* multiline */ true)

./node_modules/typescript/lib/tsserverlibrary.js 92664                 factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), callValues]) :

./node_modules/typescript/lib/tsserverlibrary.js 93488                     var lineCol = ts.getLineAndCharacterOfPosition(originalFile, location.pos);

./node_modules/typescript/lib/tsserverlibrary.js 93491                         factory.createPropertyAssignment("lineNumber", factory.createNumericLiteral(lineCol.line + 1)),

./node_modules/typescript/lib/tsserverlibrary.js 93492                         factory.createPropertyAssignment("columnNumber", factory.createNumericLiteral(lineCol.character + 1))

./node_modules/typescript/lib/tsserverlibrary.js 93583                 // Always recreate the literal to escape any escape sequences or newlines which may be in the original jsx string and which

./node_modules/typescript/lib/tsserverlibrary.js 93604          * JSX trims whitespace at the end and beginning of lines, except that the

./node_modules/typescript/lib/tsserverlibrary.js 93605          * start/end of a tag is considered a start/end of a line only if that line is

./node_modules/typescript/lib/tsserverlibrary.js 93606          * on the same line as the closing tag. See examples in

./node_modules/typescript/lib/tsserverlibrary.js 93611          * - If there is only one line, return it.

./node_modules/typescript/lib/tsserverlibrary.js 93612          * - If there is only whitespace (but multiple lines), return `undefined`.

./node_modules/typescript/lib/tsserverlibrary.js 93613          * - Split the text into lines.

./node_modules/typescript/lib/tsserverlibrary.js 93614          * - 'trimRight' the first line, 'trimLeft' the last line, 'trim' middle lines.

./node_modules/typescript/lib/tsserverlibrary.js 93615          * - Decode entities on each line (individually).

./node_modules/typescript/lib/tsserverlibrary.js 93616          * - Remove empty lines and join the rest with " ".

./node_modules/typescript/lib/tsserverlibrary.js 93620             // First non-whitespace character on this line.

./node_modules/typescript/lib/tsserverlibrary.js 93622             // Last non-whitespace character on this line.

./node_modules/typescript/lib/tsserverlibrary.js 93624             // These initial values are special because the first line is:

./node_modules/typescript/lib/tsserverlibrary.js 93626             // but lastNonWhitespace = -1 as a special flag to indicate that we *don't* include the line if it's all whitespace.

./node_modules/typescript/lib/tsserverlibrary.js 93630                     // If we've seen any non-whitespace characters on this line, add the 'trim' of the line.

./node_modules/typescript/lib/tsserverlibrary.js 93631                     // (lastNonWhitespace === -1 is a special flag to detect whether the first line is all whitespace.)

./node_modules/typescript/lib/tsserverlibrary.js 93635                     // Reset firstNonWhitespace for the next line.

./node_modules/typescript/lib/tsserverlibrary.js 93647                 // Last line had a non-whitespace character. Emit the 'trimLeft', meaning keep trailing whitespace.

./node_modules/typescript/lib/tsserverlibrary.js 93649                 // Last line was all whitespace, so ignore it

./node_modules/typescript/lib/tsserverlibrary.js 93902         oline: 0x203E,

./node_modules/typescript/lib/tsserverlibrary.js 94752             // The assumption is that no prior step in the pipeline has added any prologue directives.

./node_modules/typescript/lib/tsserverlibrary.js 95383             var multiLine = false; // indicates whether the block *must* be emitted as multiple lines

./node_modules/typescript/lib/tsserverlibrary.js 95384             var singleLine = false; // indicates whether the block *may* be emitted as a single line

./node_modules/typescript/lib/tsserverlibrary.js 95406                 // If the original body was a multi-line block, this must be a multi-line block.

./node_modules/typescript/lib/tsserverlibrary.js 95440             // If we added any final generated statements, this must be a multi-line block

./node_modules/typescript/lib/tsserverlibrary.js 95554                     updated = ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(assignments)), node);

./node_modules/typescript/lib/tsserverlibrary.js 95870                 ? factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), values])

./node_modules/typescript/lib/tsserverlibrary.js 95932             // new line

./node_modules/typescript/lib/tsserverlibrary.js 95934             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/tsserverlibrary.js 96844          * @param multiLine A value indicating whether the result should be emitted on multiple lines.

./node_modules/typescript/lib/tsserverlibrary.js 97908                 return ts.setSourceMapRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/tsserverlibrary.js 98016             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/tsserverlibrary.js 98024                         emitWorker(1 /* Statement */, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/tsserverlibrary.js 98046                         emitWorker(1 /* Statement */, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/tsserverlibrary.js 98052             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/tsserverlibrary.js 98181          * @param multiLine Whether array literals created should be emitted on multiple lines.

./node_modules/typescript/lib/tsserverlibrary.js 98248             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/tsserverlibrary.js 98251                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(expressions)));

./node_modules/typescript/lib/tsserverlibrary.js 98411                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/tsserverlibrary.js 98593                     ? factory.inlineExpressions(ts.map(variables, transformInitializedVariable))

./node_modules/typescript/lib/tsserverlibrary.js 98710                     return createInlineBreak(label, /*location*/ node);

./node_modules/typescript/lib/tsserverlibrary.js 98729                     return createInlineBreak(label, /*location*/ node);

./node_modules/typescript/lib/tsserverlibrary.js 98739             return createInlineReturn(ts.visitNode(node.expression, visitor, ts.isExpression), 

./node_modules/typescript/lib/tsserverlibrary.js 98822                                 createInlineBreak(clauseLabels[i], /*location*/ clause.expression)

./node_modules/typescript/lib/tsserverlibrary.js 99413         function createInlineBreak(label, location) {

./node_modules/typescript/lib/tsserverlibrary.js 99426         function createInlineReturn(expression, location) {

./node_modules/typescript/lib/tsserverlibrary.js 100914                     var statement = ts.setOriginalNode(ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node), node);

./node_modules/typescript/lib/tsserverlibrary.js 101705                 /*type*/ undefined, factory.createObjectLiteralExpression(exportedNames, /*multiline*/ true))

./node_modules/typescript/lib/tsserverlibrary.js 101747             ], /*multiline*/ true));

./node_modules/typescript/lib/tsserverlibrary.js 101797                                     /*typeArguments*/ undefined, [factory.createObjectLiteralExpression(properties, /*multiline*/ true)])));

./node_modules/typescript/lib/tsserverlibrary.js 101986                 statements = ts.append(statements, ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node));

./node_modules/typescript/lib/tsserverlibrary.js 102436                 return expressions ? factory.inlineExpressions(expressions) : factory.createOmittedExpression();

./node_modules/typescript/lib/tsserverlibrary.js 103531     var declarationEmitNodeBuilderFlags = 1024 /* MultilineObjectLiterals */ |

./node_modules/typescript/lib/tsserverlibrary.js 104354             if (ts.isTupleTypeNode(input) && (ts.getLineAndCharacterOfPosition(currentSourceFile, input.pos).line === ts.getLineAndCharacterOfPosition(currentSourceFile, input.end).line)) {

./node_modules/typescript/lib/tsserverlibrary.js 105512         return (options.sourceMap && !options.inlineSourceMap) ? jsFilePath + ".map" : undefined;

./node_modules/typescript/lib/tsserverlibrary.js 105648         ts.Debug.assert(ts.contains(commandLine.fileNames, inputFileName), "Expected fileName to be present in command line");

./node_modules/typescript/lib/tsserverlibrary.js 105690         var sourceMapDataList = (compilerOptions.sourceMap || compilerOptions.inlineSourceMap || ts.getAreDeclarationMapsEnabled(compilerOptions)) ? [] : undefined;

./node_modules/typescript/lib/tsserverlibrary.js 105782                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/tsserverlibrary.js 105783                 inlineSources: compilerOptions.inlineSources,

./node_modules/typescript/lib/tsserverlibrary.js 105835                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/tsserverlibrary.js 105859                     // Explicitly do not passthru either `inline` option

./node_modules/typescript/lib/tsserverlibrary.js 105908                     writer.writeComment("//# " + "sourceMappingURL" + "=" + sourceMappingURL); // Tools can sometimes see this line as a source mapping url comment

./node_modules/typescript/lib/tsserverlibrary.js 105925             return (mapOptions.sourceMap || mapOptions.inlineSourceMap)

./node_modules/typescript/lib/tsserverlibrary.js 105953             if (mapOptions.inlineSourceMap) {

./node_modules/typescript/lib/tsserverlibrary.js 106071         // error if no source map or for now if inline sourcemap

./node_modules/typescript/lib/tsserverlibrary.js 106072         if ((sourceMapFilePath && !sourceMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/tsserverlibrary.js 106073             return sourceMapFilePath || "inline sourcemap decoding";

./node_modules/typescript/lib/tsserverlibrary.js 106079         // error if no source map or for now if inline sourcemap

./node_modules/typescript/lib/tsserverlibrary.js 106080         if ((declarationMapPath && !declarationMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/tsserverlibrary.js 106081             return declarationMapPath || "inline sourcemap decoding";

./node_modules/typescript/lib/tsserverlibrary.js 106155     var PipelinePhase;

./node_modules/typescript/lib/tsserverlibrary.js 106156     (function (PipelinePhase) {

./node_modules/typescript/lib/tsserverlibrary.js 106157         PipelinePhase[PipelinePhase["Notification"] = 0] = "Notification";

./node_modules/typescript/lib/tsserverlibrary.js 106158         PipelinePhase[PipelinePhase["Substitution"] = 1] = "Substitution";

./node_modules/typescript/lib/tsserverlibrary.js 106159         PipelinePhase[PipelinePhase["Comments"] = 2] = "Comments";

./node_modules/typescript/lib/tsserverlibrary.js 106160         PipelinePhase[PipelinePhase["SourceMaps"] = 3] = "SourceMaps";

./node_modules/typescript/lib/tsserverlibrary.js 106161         PipelinePhase[PipelinePhase["Emit"] = 4] = "Emit";

./node_modules/typescript/lib/tsserverlibrary.js 106162     })(PipelinePhase || (PipelinePhase = {}));

./node_modules/typescript/lib/tsserverlibrary.js 106179         var preserveSourceNewlines = printerOptions.preserveSourceNewlines; // Can be overridden inside nodes with the `IgnoreSourceNewlines` emit flag.

./node_modules/typescript/lib/tsserverlibrary.js 106408             pipelineEmit(hint, node, /*parenthesizerRule*/ undefined);

./node_modules/typescript/lib/tsserverlibrary.js 106445             pipelineEmit(4 /* Unspecified */, node, parenthesizerRule);

./node_modules/typescript/lib/tsserverlibrary.js 106451             pipelineEmit(2 /* IdentifierName */, node, /*parenthesizerRule*/ undefined);

./node_modules/typescript/lib/tsserverlibrary.js 106456             pipelineEmit(1 /* Expression */, node, parenthesizerRule);

./node_modules/typescript/lib/tsserverlibrary.js 106459             pipelineEmit(ts.isStringLiteral(node) ? 6 /* JsxAttributeValue */ : 4 /* Unspecified */, node);

./node_modules/typescript/lib/tsserverlibrary.js 106462             if (preserveSourceNewlines && (ts.getEmitFlags(node) & 134217728 /* IgnoreSourceNewlines */)) {

./node_modules/typescript/lib/tsserverlibrary.js 106463                 preserveSourceNewlines = false;

./node_modules/typescript/lib/tsserverlibrary.js 106466         function afterEmitNode(savedPreserveSourceNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 106467             preserveSourceNewlines = savedPreserveSourceNewlines;

./node_modules/typescript/lib/tsserverlibrary.js 106469         function pipelineEmit(emitHint, node, parenthesizerRule) {

./node_modules/typescript/lib/tsserverlibrary.js 106471             var pipelinePhase = getPipelinePhase(0 /* Notification */, emitHint, node);

./node_modules/typescript/lib/tsserverlibrary.js 106472             pipelinePhase(emitHint, node);

./node_modules/typescript/lib/tsserverlibrary.js 106485         function getPipelinePhase(phase, emitHint, node) {

./node_modules/typescript/lib/tsserverlibrary.js 106489                         return pipelineEmitWithNotification;

./node_modules/typescript/lib/tsserverlibrary.js 106497                         return pipelineEmitWithSubstitution;

./node_modules/typescript/lib/tsserverlibrary.js 106502                         return pipelineEmitWithComments;

./node_modules/typescript/lib/tsserverlibrary.js 106507                         return pipelineEmitWithSourceMaps;

./node_modules/typescript/lib/tsserverlibrary.js 106511                     return pipelineEmitWithHint;

./node_modules/typescript/lib/tsserverlibrary.js 106516         function getNextPipelinePhase(currentPhase, emitHint, node) {

./node_modules/typescript/lib/tsserverlibrary.js 106517             return getPipelinePhase(currentPhase + 1, emitHint, node);

./node_modules/typescript/lib/tsserverlibrary.js 106519         function pipelineEmitWithNotification(hint, node) {

./node_modules/typescript/lib/tsserverlibrary.js 106520             var pipelinePhase = getNextPipelinePhase(0 /* Notification */, hint, node);

./node_modules/typescript/lib/tsserverlibrary.js 106521             onEmitNode(hint, node, pipelinePhase);

./node_modules/typescript/lib/tsserverlibrary.js 106523         function pipelineEmitWithHint(hint, node) {

./node_modules/typescript/lib/tsserverlibrary.js 106525             if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 106526                 var savedPreserveSourceNewlines = preserveSourceNewlines;

./node_modules/typescript/lib/tsserverlibrary.js 106528                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/tsserverlibrary.js 106529                 afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/tsserverlibrary.js 106532                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/tsserverlibrary.js 106538         function pipelineEmitWithHintWorker(hint, node) {

./node_modules/typescript/lib/tsserverlibrary.js 106993         function pipelineEmitWithSubstitution(hint, node) {

./node_modules/typescript/lib/tsserverlibrary.js 106994             var pipelinePhase = getNextPipelinePhase(1 /* Substitution */, hint, node);

./node_modules/typescript/lib/tsserverlibrary.js 106998             pipelinePhase(hint, node);

./node_modules/typescript/lib/tsserverlibrary.js 107093             if ((printerOptions.sourceMap || printerOptions.inlineSourceMap)

./node_modules/typescript/lib/tsserverlibrary.js 107468             pipelineEmit(3 /* MappedTypeParameter */, node.typeParameter);

./node_modules/typescript/lib/tsserverlibrary.js 107564             var linesBeforeDot = getLinesBetweenNodes(node, node.expression, token);

./node_modules/typescript/lib/tsserverlibrary.js 107565             var linesAfterDot = getLinesBetweenNodes(node, token, node.name);

./node_modules/typescript/lib/tsserverlibrary.js 107566             writeLinesAndIndent(linesBeforeDot, /*writeSpaceIfNotIndenting*/ false);

./node_modules/typescript/lib/tsserverlibrary.js 107580             writeLinesAndIndent(linesAfterDot, /*writeSpaceIfNotIndenting*/ false);

./node_modules/typescript/lib/tsserverlibrary.js 107582             decreaseIndentIf(linesBeforeDot, linesAfterDot);

./node_modules/typescript/lib/tsserverlibrary.js 107729             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, /*foldState*/ undefined);

./node_modules/typescript/lib/tsserverlibrary.js 107733                     state.preserveSourceNewlinesStack[state.stackIndex] = preserveSourceNewlines;

./node_modules/typescript/lib/tsserverlibrary.js 107749                         preserveSourceNewlinesStack: [undefined],

./node_modules/typescript/lib/tsserverlibrary.js 107764                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, operatorToken);

./node_modules/typescript/lib/tsserverlibrary.js 107765                 var linesAfterOperator = getLinesBetweenNodes(node, operatorToken, node.right);

./node_modules/typescript/lib/tsserverlibrary.js 107766                 writeLinesAndIndent(linesBeforeOperator, isCommaOperator);

./node_modules/typescript/lib/tsserverlibrary.js 107770                 writeLinesAndIndent(linesAfterOperator, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/tsserverlibrary.js 107776                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, node.operatorToken);

./node_modules/typescript/lib/tsserverlibrary.js 107777                 var linesAfterOperator = getLinesBetweenNodes(node, node.operatorToken, node.right);

./node_modules/typescript/lib/tsserverlibrary.js 107778                 decreaseIndentIf(linesBeforeOperator, linesAfterOperator);

./node_modules/typescript/lib/tsserverlibrary.js 107780                     var savedPreserveSourceNewlines = state.preserveSourceNewlinesStack[state.stackIndex];

./node_modules/typescript/lib/tsserverlibrary.js 107786                     afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/tsserverlibrary.js 107799                 var pipelinePhase = getPipelinePhase(0 /* Notification */, 1 /* Expression */, next);

./node_modules/typescript/lib/tsserverlibrary.js 107800                 if (pipelinePhase === pipelineEmitWithSubstitution) {

./node_modules/typescript/lib/tsserverlibrary.js 107803                     pipelinePhase = getNextPipelinePhase(1 /* Substitution */, 1 /* Expression */, next);

./node_modules/typescript/lib/tsserverlibrary.js 107806                 if (pipelinePhase === pipelineEmitWithComments ||

./node_modules/typescript/lib/tsserverlibrary.js 107807                     pipelinePhase === pipelineEmitWithSourceMaps ||

./node_modules/typescript/lib/tsserverlibrary.js 107808                     pipelinePhase === pipelineEmitWithHint) {

./node_modules/typescript/lib/tsserverlibrary.js 107814                 pipelinePhase(1 /* Expression */, next);

./node_modules/typescript/lib/tsserverlibrary.js 107818             var linesBeforeQuestion = getLinesBetweenNodes(node, node.condition, node.questionToken);

./node_modules/typescript/lib/tsserverlibrary.js 107819             var linesAfterQuestion = getLinesBetweenNodes(node, node.questionToken, node.whenTrue);

./node_modules/typescript/lib/tsserverlibrary.js 107820             var linesBeforeColon = getLinesBetweenNodes(node, node.whenTrue, node.colonToken);

./node_modules/typescript/lib/tsserverlibrary.js 107821             var linesAfterColon = getLinesBetweenNodes(node, node.colonToken, node.whenFalse);

./node_modules/typescript/lib/tsserverlibrary.js 107823             writeLinesAndIndent(linesBeforeQuestion, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/tsserverlibrary.js 107825             writeLinesAndIndent(linesAfterQuestion, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/tsserverlibrary.js 107827             decreaseIndentIf(linesBeforeQuestion, linesAfterQuestion);

./node_modules/typescript/lib/tsserverlibrary.js 107828             writeLinesAndIndent(linesBeforeColon, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/tsserverlibrary.js 107830             writeLinesAndIndent(linesAfterColon, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/tsserverlibrary.js 107832             decreaseIndentIf(linesBeforeColon, linesAfterColon);

./node_modules/typescript/lib/tsserverlibrary.js 107944             if (ts.isBlock(node.statement) && !preserveSourceNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 108034                 emitTrailingCommentsOfPosition(pos, /*prefixSpace*/ !isJsxExprContext, /*forceNoNewline*/ isJsxExprContext);

./node_modules/typescript/lib/tsserverlibrary.js 108151             // We must emit a function body as a single-line body in the following case:

./node_modules/typescript/lib/tsserverlibrary.js 108153             // We must emit a function body as a multi-line body in the following cases:

./node_modules/typescript/lib/tsserverlibrary.js 108154             // * The body is explicitly marked as multi-line.

./node_modules/typescript/lib/tsserverlibrary.js 108155             // * A non-synthesized body's start and end position are on different lines.

./node_modules/typescript/lib/tsserverlibrary.js 108156             // * Any statement in the body starts on a new line.

./node_modules/typescript/lib/tsserverlibrary.js 108524                 var isMultiline = currentSourceFile && !ts.nodeIsSynthesized(node) && ts.getLineAndCharacterOfPosition(currentSourceFile, node.pos).line !== ts.getLineAndCharacterOfPosition(currentSourceFile, node.end).line;

./node_modules/typescript/lib/tsserverlibrary.js 108525                 if (isMultiline) {

./node_modules/typescript/lib/tsserverlibrary.js 108532                 if (isMultiline) {

./node_modules/typescript/lib/tsserverlibrary.js 108561                 // treat synthesized nodes as located on the same line for emit purposes

./node_modules/typescript/lib/tsserverlibrary.js 108644                     var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/tsserverlibrary.js 108645                     for (var _a = 0, lines_2 = lines; _a < lines_2.length; _a++) {

./node_modules/typescript/lib/tsserverlibrary.js 108646                         var line = lines_2[_a];

./node_modules/typescript/lib/tsserverlibrary.js 108651                         write(line);

./node_modules/typescript/lib/tsserverlibrary.js 109074                     pipelineEmit(5 /* EmbeddedStatement */, node);

./node_modules/typescript/lib/tsserverlibrary.js 109180                 // Write a line terminator if the parent node was multi-line

./node_modules/typescript/lib/tsserverlibrary.js 109181                 if (format & 1 /* MultiLine */ && !(preserveSourceNewlines && (!parentNode || ts.rangeIsOnSingleLine(parentNode, currentSourceFile)))) {

./node_modules/typescript/lib/tsserverlibrary.js 109190                 // Write the opening line terminator or leading whitespace.

./node_modules/typescript/lib/tsserverlibrary.js 109222                         //          /* End of parameter a */ -> this comment isn't considered to be trailing comment of parameter "a" due to newline

./node_modules/typescript/lib/tsserverlibrary.js 109229                         // Write either a line terminator or whitespace to separate the elements.

./node_modules/typescript/lib/tsserverlibrary.js 109232                             // If a synthesized node in a single-line list starts on a new

./node_modules/typescript/lib/tsserverlibrary.js 109233                             // line, we should increase the indent.

./node_modules/typescript/lib/tsserverlibrary.js 109295                 // Write the closing line terminator or closing whitespace.

./node_modules/typescript/lib/tsserverlibrary.js 109386             else if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 109387                 var lines = getLinesBetweenNodes(parentNode, prevChildNode, nextChildNode);

./node_modules/typescript/lib/tsserverlibrary.js 109388                 if (lines) {

./node_modules/typescript/lib/tsserverlibrary.js 109389                     writeLine(lines);

./node_modules/typescript/lib/tsserverlibrary.js 109400             var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/tsserverlibrary.js 109401             var indentation = ts.guessIndentation(lines);

./node_modules/typescript/lib/tsserverlibrary.js 109402             for (var _a = 0, lines_3 = lines; _a < lines_3.length; _a++) {

./node_modules/typescript/lib/tsserverlibrary.js 109403                 var lineText = lines_3[_a];

./node_modules/typescript/lib/tsserverlibrary.js 109404                 var line = indentation ? lineText.slice(indentation) : lineText;

./node_modules/typescript/lib/tsserverlibrary.js 109405                 if (line.length) {

./node_modules/typescript/lib/tsserverlibrary.js 109407                     write(line);

./node_modules/typescript/lib/tsserverlibrary.js 109411         function writeLinesAndIndent(lineCount, writeSpaceIfNotIndenting) {

./node_modules/typescript/lib/tsserverlibrary.js 109412             if (lineCount) {

./node_modules/typescript/lib/tsserverlibrary.js 109414                 writeLine(lineCount);

./node_modules/typescript/lib/tsserverlibrary.js 109433             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 109443                     // line terminators have already been written as the separating line terminators of the

./node_modules/typescript/lib/tsserverlibrary.js 109451                     // The outer list is the list of class members, with one line terminator between the

./node_modules/typescript/lib/tsserverlibrary.js 109452                     // constructor and the method. The constructor is written, the separating line terminator

./node_modules/typescript/lib/tsserverlibrary.js 109454                     // list, so we look for its leading line terminators. If we didn't know that we had already

./node_modules/typescript/lib/tsserverlibrary.js 109455                     // written a newline as part of the parent list, it would appear that we need to write a

./node_modules/typescript/lib/tsserverlibrary.js 109456                     // leading newline to start the modifiers.

./node_modules/typescript/lib/tsserverlibrary.js 109467                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 109479             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 109488                     if (preserveSourceNewlines && siblingNodePositionsAreComparable(previousNode, nextNode)) {

./node_modules/typescript/lib/tsserverlibrary.js 109491                     // If `preserveSourceNewlines` is `false` we do not intend to preserve the effective lines between the

./node_modules/typescript/lib/tsserverlibrary.js 109492                     // previous and next node. Instead we naively check whether nodes are on separate lines within the

./node_modules/typescript/lib/tsserverlibrary.js 109493                     // same node parent. If so, we intend to preserve a single line terminator. This is less precise and

./node_modules/typescript/lib/tsserverlibrary.js 109494                     // expensive than checking with `preserveSourceNewlines` as above, but the goal is not to preserve the

./node_modules/typescript/lib/tsserverlibrary.js 109495                     // effective source lines between two sibling nodes.

./node_modules/typescript/lib/tsserverlibrary.js 109496                     else if (!preserveSourceNewlines && originalNodesHaveSameParent(previousNode, nextNode)) {

./node_modules/typescript/lib/tsserverlibrary.js 109499                     // If the two nodes are not comparable, add a line terminator based on the format that can indicate

./node_modules/typescript/lib/tsserverlibrary.js 109500                     // whether new lines are preferred or not.

./node_modules/typescript/lib/tsserverlibrary.js 109513             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 109522                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 109538             // If 'preserveSourceNewlines' is disabled, we should never call this function

./node_modules/typescript/lib/tsserverlibrary.js 109540             ts.Debug.assert(!!preserveSourceNewlines);

./node_modules/typescript/lib/tsserverlibrary.js 109541             // We start by measuring the line difference from a position to its adjacent comments,

./node_modules/typescript/lib/tsserverlibrary.js 109542             // so that this is counted as a one-line difference, not two:

./node_modules/typescript/lib/tsserverlibrary.js 109547             var lines = getLineDifference(/*includeComments*/ true);

./node_modules/typescript/lib/tsserverlibrary.js 109548             if (lines === 0) {

./node_modules/typescript/lib/tsserverlibrary.js 109549                 // However, if the line difference considering comments was 0, we might have this:

./node_modules/typescript/lib/tsserverlibrary.js 109555                 // a one-line difference, not zero.

./node_modules/typescript/lib/tsserverlibrary.js 109558             return lines;

./node_modules/typescript/lib/tsserverlibrary.js 109561             var leadingNewlines = preserveSourceNewlines && getLeadingLineTerminatorCount(parent, [node], 0 /* None */);

./node_modules/typescript/lib/tsserverlibrary.js 109562             if (leadingNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 109563                 writeLinesAndIndent(leadingNewlines, /*writeLinesIfNotIndenting*/ false);

./node_modules/typescript/lib/tsserverlibrary.js 109565             return !!leadingNewlines;

./node_modules/typescript/lib/tsserverlibrary.js 109568             var trailingNewlines = preserveSourceNewlines && getClosingLineTerminatorCount(parent, [node], 0 /* None */);

./node_modules/typescript/lib/tsserverlibrary.js 109569             if (trailingNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 109570                 writeLine(trailingNewlines);

./node_modules/typescript/lib/tsserverlibrary.js 109590             // Always use a newline for synthesized code if the synthesizer desires it.

./node_modules/typescript/lib/tsserverlibrary.js 109595                 if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsserverlibrary.js 110008         function pipelineEmitWithComments(hint, node) {

./node_modules/typescript/lib/tsserverlibrary.js 110009             var pipelinePhase = getNextPipelinePhase(2 /* Comments */, hint, node);

./node_modules/typescript/lib/tsserverlibrary.js 110014             pipelinePhase(hint, node);

./node_modules/typescript/lib/tsserverlibrary.js 110084             if (comment.hasLeadingNewline || comment.kind === 2 /* SingleLineCommentTrivia */) {

./node_modules/typescript/lib/tsserverlibrary.js 110106             var lineMap = comment.kind === 3 /* MultiLineCommentTrivia */ ? ts.computeLineStarts(text) : undefined;

./node_modules/typescript/lib/tsserverlibrary.js 110107             ts.writeCommentRange(text, lineMap, writer, 0, text.length, newLine);

./node_modules/typescript/lib/tsserverlibrary.js 110240         function emitTrailingCommentsOfPosition(pos, prefixSpace, forceNoNewline) {

./node_modules/typescript/lib/tsserverlibrary.js 110245             forEachTrailingCommentToEmit(pos, prefixSpace ? emitTrailingComment : forceNoNewline ? emitTrailingCommentOfPositionNoNewline : emitTrailingCommentOfPosition);

./node_modules/typescript/lib/tsserverlibrary.js 110248         function emitTrailingCommentOfPositionNoNewline(commentPos, commentEnd, kind) {

./node_modules/typescript/lib/tsserverlibrary.js 110254                 writer.writeLine(); // still write a newline for single-line comments, so closing tokens aren't written on the same line

./node_modules/typescript/lib/tsserverlibrary.js 110311         function emitComment(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/tsserverlibrary.js 110315             ts.writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine);

./node_modules/typescript/lib/tsserverlibrary.js 110333         function pipelineEmitWithSourceMaps(hint, node) {

./node_modules/typescript/lib/tsserverlibrary.js 110334             var pipelinePhase = getNextPipelinePhase(3 /* SourceMaps */, hint, node);

./node_modules/typescript/lib/tsserverlibrary.js 110336             pipelinePhase(hint, node);

./node_modules/typescript/lib/tsserverlibrary.js 110395             var _a = ts.getLineAndCharacterOfPosition(sourceMapSource, pos), sourceLine = _a.line, sourceCharacter = _a.character;

./node_modules/typescript/lib/tsserverlibrary.js 110454             if (printerOptions.inlineSources) {

./node_modules/typescript/lib/tsserverlibrary.js 111295             var _a = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start), line = _a.line, character = _a.character; // TODO: GH#18217

./node_modules/typescript/lib/tsserverlibrary.js 111298             return relativeFileName + "(" + (line + 1) + "," + (character + 1) + "): " + errorMessage;

./node_modules/typescript/lib/tsserverlibrary.js 111322             case ts.DiagnosticCategory.Suggestion: return ts.Debug.fail("Should never get an Info diagnostic on the command line.");

./node_modules/typescript/lib/tsserverlibrary.js 111332         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character;

./node_modules/typescript/lib/tsserverlibrary.js 111333         var _b = ts.getLineAndCharacterOfPosition(file, start + length), lastLine = _b.line, lastLineChar = _b.character;

./node_modules/typescript/lib/tsserverlibrary.js 111334         var lastLineInFile = ts.getLineAndCharacterOfPosition(file, file.text.length).line;

./node_modules/typescript/lib/tsserverlibrary.js 111343             // If the error spans over 5 lines, we'll only show the first 2 and last 2 lines,

./node_modules/typescript/lib/tsserverlibrary.js 111344             // so we'll skip ahead to the second-to-last line.

./node_modules/typescript/lib/tsserverlibrary.js 111349             var lineStart = ts.getPositionOfLineAndCharacter(file, i, 0);

./node_modules/typescript/lib/tsserverlibrary.js 111350             var lineEnd = i < lastLineInFile ? ts.getPositionOfLineAndCharacter(file, i + 1, 0) : file.text.length;

./node_modules/typescript/lib/tsserverlibrary.js 111351             var lineContent = file.text.slice(lineStart, lineEnd);

./node_modules/typescript/lib/tsserverlibrary.js 111352             lineContent = ts.trimStringEnd(lineContent); // trim from end

./node_modules/typescript/lib/tsserverlibrary.js 111353             lineContent = lineContent.replace(/\t/g, " "); // convert tabs to single spaces

./node_modules/typescript/lib/tsserverlibrary.js 111354             // Output the gutter and the actual contents of the line.

./node_modules/typescript/lib/tsserverlibrary.js 111356             context += lineContent + host.getNewLine();

./node_modules/typescript/lib/tsserverlibrary.js 111357             // Output the gutter and the error span for the line using tildes.

./node_modules/typescript/lib/tsserverlibrary.js 111361                 // If we're on the last line, then limit it to the last character of the last line.

./node_modules/typescript/lib/tsserverlibrary.js 111362                 // Otherwise, we'll just squiggle the rest of the line, giving 'slice' no end position.

./node_modules/typescript/lib/tsserverlibrary.js 111364                 context += lineContent.slice(0, firstLineChar).replace(/\S/g, " ");

./node_modules/typescript/lib/tsserverlibrary.js 111365                 context += lineContent.slice(firstLineChar, lastCharForLine).replace(/./g, "~");

./node_modules/typescript/lib/tsserverlibrary.js 111368                 context += lineContent.slice(0, lastLineChar).replace(/./g, "~");

./node_modules/typescript/lib/tsserverlibrary.js 111371                 // Squiggle the entire line.

./node_modules/typescript/lib/tsserverlibrary.js 111372                 context += lineContent.replace(/./g, "~");

./node_modules/typescript/lib/tsserverlibrary.js 111381         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character; // TODO: GH#18217

./node_modules/typescript/lib/tsserverlibrary.js 111768         structureIsReused = tryReuseStructureFromOldProgram(); // eslint-disable-line prefer-const

./node_modules/typescript/lib/tsserverlibrary.js 111870         // Release commandlines that new program does not use

./node_modules/typescript/lib/tsserverlibrary.js 112684          * @returns The line index marked as preceding the diagnostic, or -1 if none was.

./node_modules/typescript/lib/tsserverlibrary.js 112691             // Start out with the line just before the text

./node_modules/typescript/lib/tsserverlibrary.js 112692             var lineStarts = ts.getLineStarts(file);

./node_modules/typescript/lib/tsserverlibrary.js 112693             var line = ts.computeLineAndCharacterOfPosition(lineStarts, start).line - 1; // TODO: GH#18217

./node_modules/typescript/lib/tsserverlibrary.js 112694             while (line >= 0) {

./node_modules/typescript/lib/tsserverlibrary.js 112695                 // As soon as that line is known to have a comment directive, use that

./node_modules/typescript/lib/tsserverlibrary.js 112696                 if (directives.markUsed(line)) {

./node_modules/typescript/lib/tsserverlibrary.js 112697                     return line;

./node_modules/typescript/lib/tsserverlibrary.js 112699                 // Stop searching if the line is not empty and not a comment

./node_modules/typescript/lib/tsserverlibrary.js 112700                 var lineText = file.text.slice(lineStarts[line], lineStarts[line + 1]).trim();

./node_modules/typescript/lib/tsserverlibrary.js 112701                 if (lineText !== "" && !/^(\s*)\/\/(.*)$/.test(lineText)) {

./node_modules/typescript/lib/tsserverlibrary.js 112704                 line--;

./node_modules/typescript/lib/tsserverlibrary.js 113047                 while (r.exec(file.text) !== null) { // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 113648             if (options.inlineSourceMap) {

./node_modules/typescript/lib/tsserverlibrary.js 113650                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "sourceMap", "inlineSourceMap");

./node_modules/typescript/lib/tsserverlibrary.js 113653                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "mapRoot", "inlineSourceMap");

./node_modules/typescript/lib/tsserverlibrary.js 113719             if (!options.sourceMap && !options.inlineSourceMap) {

./node_modules/typescript/lib/tsserverlibrary.js 113720                 if (options.inlineSources) {

./node_modules/typescript/lib/tsserverlibrary.js 113721                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "inlineSources");

./node_modules/typescript/lib/tsserverlibrary.js 113724                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "sourceRoot");

./node_modules/typescript/lib/tsserverlibrary.js 115923             // eslint-disable-next-line no-empty

./node_modules/typescript/lib/tsserverlibrary.js 116909             // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/tsserverlibrary.js 118073         var parsedConfigs; // Parsed commandline and watching cached for referenced projects

./node_modules/typescript/lib/tsserverlibrary.js 120392             "readline",

./node_modules/typescript/lib/tsserverlibrary.js 120808         SymbolDisplayPartKind[SymbolDisplayPartKind["lineBreak"] = 6] = "lineBreak";

./node_modules/typescript/lib/tsserverlibrary.js 120830         /** Single or multi-line comments */

./node_modules/typescript/lib/tsserverlibrary.js 121496         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 121497         var line = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/tsserverlibrary.js 121498         return lineStarts[line];

./node_modules/typescript/lib/tsserverlibrary.js 122970         var lineStart;

./node_modules/typescript/lib/tsserverlibrary.js 123019             if (lineStart) {

./node_modules/typescript/lib/tsserverlibrary.js 123025                 lineStart = false;

./node_modules/typescript/lib/tsserverlibrary.js 123046             displayParts.push(lineBreakPart());

./node_modules/typescript/lib/tsserverlibrary.js 123047             lineStart = true;

./node_modules/typescript/lib/tsserverlibrary.js 123051             lineStart = true;

./node_modules/typescript/lib/tsserverlibrary.js 123211     function lineBreakPart() {

./node_modules/typescript/lib/tsserverlibrary.js 123212         return displayPart("\n", ts.SymbolDisplayPartKind.lineBreak);

./node_modules/typescript/lib/tsserverlibrary.js 123214     ts.lineBreakPart = lineBreakPart;

./node_modules/typescript/lib/tsserverlibrary.js 123228             typechecker.writeType(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */ | 16384 /* UseAliasDefinedOutsideCurrentScope */, writer);

./node_modules/typescript/lib/tsserverlibrary.js 123241         flags |= 16384 /* UseAliasDefinedOutsideCurrentScope */ | 1024 /* MultilineObjectLiterals */ | 32 /* WriteTypeArgumentsOfSignature */ | 8192 /* OmitParameterModifiers */;

./node_modules/typescript/lib/tsserverlibrary.js 123389             if (text.charCodeAt(i) === 10 /* lineFeed */)

./node_modules/typescript/lib/tsserverlibrary.js 123642         var startLine = sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line;

./node_modules/typescript/lib/tsserverlibrary.js 123643         var endLine = sourceFile.getLineAndCharacterOfPosition(nextToken.getStart(sourceFile)).line;

./node_modules/typescript/lib/tsserverlibrary.js 124412             // lines, just as we do with the end-of-line state. However, this is a burden for implementers,

./node_modules/typescript/lib/tsserverlibrary.js 124414             // flatten any nesting when the template stack is non-empty and encode it in the end-of-line state.

./node_modules/typescript/lib/tsserverlibrary.js 124416             //  1) When template strings are nested across different lines:

./node_modules/typescript/lib/tsserverlibrary.js 124420             //     Where on the second line, you will get the closing of a template,

./node_modules/typescript/lib/tsserverlibrary.js 124423             //  2) When substitution expressions have curly braces and the curly brace falls on the next line:

./node_modules/typescript/lib/tsserverlibrary.js 124427             //     Where on the second line, you will get the 'return' keyword,

./node_modules/typescript/lib/tsserverlibrary.js 124582                 // Check to see if we finished up on a multiline string literal.

./node_modules/typescript/lib/tsserverlibrary.js 124591                 // If we have an odd number of backslashes, then the multiline string is unclosed

./node_modules/typescript/lib/tsserverlibrary.js 124597                 // Check to see if the multiline comment was unclosed.

./node_modules/typescript/lib/tsserverlibrary.js 124700         // (and a newline).  That way when we lex we'll think we're still in a string literal.

./node_modules/typescript/lib/tsserverlibrary.js 124702         // If we're in a multiline comment, then prepend: /*

./node_modules/typescript/lib/tsserverlibrary.js 124703         // (and a newline).  That way when we lex we'll think we're still in a multiline comment.

./node_modules/typescript/lib/tsserverlibrary.js 124991                         // Don't bother with newlines/whitespace.

./node_modules/typescript/lib/tsserverlibrary.js 125011                         // for the ||||||| and ======== markers, add a comment for the first line,

./node_modules/typescript/lib/tsserverlibrary.js 125012                         // and then lex all subsequent lines up until the end of the conflict marker.

./node_modules/typescript/lib/tsserverlibrary.js 125149             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserverlibrary.js 125208             // Classify the line that the ||||||| or ======= marker is on as a comment.

./node_modules/typescript/lib/tsserverlibrary.js 127201                         var lineStart = ts.getLineStartPositionForPosition(position, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 127202                         if (!/[^\*|\s(/)]/.test(sourceFile.text.substring(lineStart, position))) {

./node_modules/typescript/lib/tsserverlibrary.js 128450                     // If we are sure that the previous property declaration is terminated according to newline or semicolon...

./node_modules/typescript/lib/tsserverlibrary.js 128911                         if (ts.getLineAndCharacterOfPosition(sourceFile, contextToken.getEnd()).line !== ts.getLineAndCharacterOfPosition(sourceFile, position).line && ts.isObjectTypeDeclaration(location)) {

./node_modules/typescript/lib/tsserverlibrary.js 129515             // (i.e. the keywords are separated by no comments, no newlines).

./node_modules/typescript/lib/tsserverlibrary.js 131796                 var _a = "kind" in relatedSymbol ? relatedSymbol : { kind: undefined, symbol: relatedSymbol }, kind = _a.kind, symbol = _a.symbol; // eslint-disable-line no-in-operator

./node_modules/typescript/lib/tsserverlibrary.js 132515                 // get the text from printing the node on a single line without comments...

./node_modules/typescript/lib/tsserverlibrary.js 133642             return ts.flatten(ts.intersperse(parts, [ts.lineBreakPart()]));

./node_modules/typescript/lib/tsserverlibrary.js 133825          * - The line is all whitespace up to 'position' before performing the insertion.

./node_modules/typescript/lib/tsserverlibrary.js 133858             // * The opening comment line

./node_modules/typescript/lib/tsserverlibrary.js 133859             // * the first line (without a param) for the object's untagged info (this is also where the caret ends up)

./node_modules/typescript/lib/tsserverlibrary.js 133860             // * the '@param'-tagged lines

./node_modules/typescript/lib/tsserverlibrary.js 133863             // * the closing comment line

./node_modules/typescript/lib/tsserverlibrary.js 133864             // * if the caret was directly in front of the object, then we add an extra line and indentation.

./node_modules/typescript/lib/tsserverlibrary.js 133878             var lineStart = ts.getLineStartPositionForPosition(position, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 133879             var pos = lineStart;

./node_modules/typescript/lib/tsserverlibrary.js 133882             return text.slice(lineStart, pos);

./node_modules/typescript/lib/tsserverlibrary.js 134105          * matches because of the newline, whereas

./node_modules/typescript/lib/tsserverlibrary.js 134582                 if ((!ts.isClassDeclaration(a.node) && !ts.isClassDeclaration(b.node)) // If neither outline node is a class

./node_modules/typescript/lib/tsserverlibrary.js 134617                 // We merge if the outline node previous to b (bIndex - 1) is already part of the current class

./node_modules/typescript/lib/tsserverlibrary.js 134618                 // We do this so that statements between class members that do not generate outline nodes do not split up the class outline:

./node_modules/typescript/lib/tsserverlibrary.js 134619                 // Ex This should produce one outline node C:

./node_modules/typescript/lib/tsserverlibrary.js 134621                 // Ex This will produce 3 outline nodes: C, a, C

./node_modules/typescript/lib/tsserverlibrary.js 134755                     // We may get a string with newlines or other whitespace in the case of an object dereference

./node_modules/typescript/lib/tsserverlibrary.js 134974             // Replaces ECMAScript line terminators and removes the trailing `\` from each line:

./node_modules/typescript/lib/tsserverlibrary.js 135470             var lineStarts = sourceFile.getLineStarts();

./node_modules/typescript/lib/tsserverlibrary.js 135471             for (var _i = 0, lineStarts_1 = lineStarts; _i < lineStarts_1.length; _i++) {

./node_modules/typescript/lib/tsserverlibrary.js 135472                 var currentLineStart = lineStarts_1[_i];

./node_modules/typescript/lib/tsserverlibrary.js 135473                 var lineEnd = sourceFile.getLineEndOfPosition(currentLineStart);

./node_modules/typescript/lib/tsserverlibrary.js 135474                 var lineText = sourceFile.text.substring(currentLineStart, lineEnd);

./node_modules/typescript/lib/tsserverlibrary.js 135475                 var result = isRegionDelimiter(lineText);

./node_modules/typescript/lib/tsserverlibrary.js 135480                     var span = ts.createTextSpanFromBounds(sourceFile.text.indexOf("//", currentLineStart), lineEnd);

./node_modules/typescript/lib/tsserverlibrary.js 135486                         region.textSpan.length = lineEnd - region.textSpan.start;

./node_modules/typescript/lib/tsserverlibrary.js 135487                         region.hintSpan.length = lineEnd - region.textSpan.start;

./node_modules/typescript/lib/tsserverlibrary.js 135494         function isRegionDelimiter(lineText) {

./node_modules/typescript/lib/tsserverlibrary.js 135497             lineText = ts.trimStringStart(lineText);

./node_modules/typescript/lib/tsserverlibrary.js 135498             if (!ts.startsWith(lineText, "\/\/")) {

./node_modules/typescript/lib/tsserverlibrary.js 135499                 return null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 135501             lineText = ts.trimString(lineText.slice(2));

./node_modules/typescript/lib/tsserverlibrary.js 135502             return regionDelimiterRegExp.exec(lineText);

./node_modules/typescript/lib/tsserverlibrary.js 135517                         // never fold region delimiters into single-line comment regions

./node_modules/typescript/lib/tsserverlibrary.js 135524                         // For single line comments, combine consecutive ones (2 or more) into

./node_modules/typescript/lib/tsserverlibrary.js 135543                 // Only outline spans of two or more consecutive single line comments

./node_modules/typescript/lib/tsserverlibrary.js 135674                 // Otherwise, the collapsed section will include the end of the previous line.

./node_modules/typescript/lib/tsserverlibrary.js 136718                         // Blocks with braces, brackets, parens, or JSX tags on separate lines should be

./node_modules/typescript/lib/tsserverlibrary.js 137961         // Dont support sourcemaps that contain inlined sources

./node_modules/typescript/lib/tsserverlibrary.js 137966     function createSourceFileLike(text, lineMap) {

./node_modules/typescript/lib/tsserverlibrary.js 137969             lineMap: lineMap,

./node_modules/typescript/lib/tsserverlibrary.js 138423                                     displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/tsserverlibrary.js 138602                             displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/tsserverlibrary.js 138757                     displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/tsserverlibrary.js 139028                     var startLine = this.sourceFile.getLineAndCharacterOfPosition(this.currentTokenSpan.pos).line;

./node_modules/typescript/lib/tsserverlibrary.js 139029                     var endLine = this.sourceFile.getLineAndCharacterOfPosition(this.nextTokenSpan.pos).line;

./node_modules/typescript/lib/tsserverlibrary.js 139047                 var startLine = this.sourceFile.getLineAndCharacterOfPosition(node.getStart(this.sourceFile)).line;

./node_modules/typescript/lib/tsserverlibrary.js 139048                 var endLine = this.sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line;

./node_modules/typescript/lib/tsserverlibrary.js 139055                     var startLine = this.sourceFile.getLineAndCharacterOfPosition(openBrace.getEnd()).line;

./node_modules/typescript/lib/tsserverlibrary.js 139056                     var endLine = this.sourceFile.getLineAndCharacterOfPosition(closeBrace.getStart(this.sourceFile)).line;

./node_modules/typescript/lib/tsserverlibrary.js 139220                         // move past new line

./node_modules/typescript/lib/tsserverlibrary.js 139259                         return scanner.reScanJsxToken(/* allowMultilineJsxText */ false);

./node_modules/typescript/lib/tsserverlibrary.js 139361             var anyTokenIncludingMultilineComments = tokenRangeFrom(__spreadArray(__spreadArray([], allTokens, true), [3 /* MultiLineCommentTrivia */], false));

./node_modules/typescript/lib/tsserverlibrary.js 139379             var functionOpenBraceLeftTokenRange = anyTokenIncludingMultilineComments;

./node_modules/typescript/lib/tsserverlibrary.js 139419                 // For functions and control block place } on a new line [multi-line rule]

./node_modules/typescript/lib/tsserverlibrary.js 139420                 rule("NewLineBeforeCloseBraceInBlockContext", anyTokenIncludingMultilineComments, 19 /* CloseBraceToken */, [isMultilineBlockContext], 8 /* InsertNewLine */),

./node_modules/typescript/lib/tsserverlibrary.js 139421                 // Space/new line after }.

./node_modules/typescript/lib/tsserverlibrary.js 139433                 // Insert new line after { and before } in multi-line contexts.

./node_modules/typescript/lib/tsserverlibrary.js 139434                 rule("NewLineAfterOpenBraceInBlockContext", 18 /* OpenBraceToken */, anyToken, [isMultilineBlockContext], 8 /* InsertNewLine */),

./node_modules/typescript/lib/tsserverlibrary.js 139556                 // Insert a space after { and before } in single-line contexts, but remove space from empty object literals {}.

./node_modules/typescript/lib/tsserverlibrary.js 139586                 rule("NewLineBeforeOpenBraceInControl", controlOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForControlBlocks"), isControlDeclContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/tsserverlibrary.js 139589                 rule("NewLineBeforeOpenBraceInFunction", functionOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForFunctions"), isFunctionDeclContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/tsserverlibrary.js 139591                 rule("NewLineBeforeOpenBraceInTypeScriptDeclWithBlock", typeScriptOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForFunctions"), isTypeScriptDeclWithBlockContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/tsserverlibrary.js 139632          * @param flags whether the rule deletes a line or not, defaults to no-op

./node_modules/typescript/lib/tsserverlibrary.js 139754         function isBeforeMultilineBlockContext(context) {

./node_modules/typescript/lib/tsserverlibrary.js 139757         function isMultilineBlockContext(context) {

./node_modules/typescript/lib/tsserverlibrary.js 140022             var startLine = context.sourceFile.getLineAndCharacterOfPosition(context.currentTokenSpan.pos).line;

./node_modules/typescript/lib/tsserverlibrary.js 140023             var endLine = context.sourceFile.getLineAndCharacterOfPosition(nextTokenStart).line;

./node_modules/typescript/lib/tsserverlibrary.js 140223             var line = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/tsserverlibrary.js 140224             if (line === 0) {

./node_modules/typescript/lib/tsserverlibrary.js 140227             // After the enter key, the cursor is now at a new line. The new line may or may not contain non-whitespace characters.

./node_modules/typescript/lib/tsserverlibrary.js 140228             // If the new line has only whitespaces, we won't want to format this line, because that would remove the indentation as

./node_modules/typescript/lib/tsserverlibrary.js 140230             //  1. the end of the previous line

./node_modules/typescript/lib/tsserverlibrary.js 140231             //  2. the last non-whitespace character in the current line

./node_modules/typescript/lib/tsserverlibrary.js 140232             var endOfFormatSpan = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 140236             // if the character at the end of the span is a line break, we shouldn't include it, because it indicates we don't want to

./node_modules/typescript/lib/tsserverlibrary.js 140237             // touch the current line at all. Also, on some OSes the line break consists of two characters (\r\n), we should test if the

./node_modules/typescript/lib/tsserverlibrary.js 140238             // previous character before the end of format span is line break character as well.

./node_modules/typescript/lib/tsserverlibrary.js 140243                 // get start position for the previous line

./node_modules/typescript/lib/tsserverlibrary.js 140244                 pos: ts.getStartPositionOfLine(line - 1, sourceFile),

./node_modules/typescript/lib/tsserverlibrary.js 140296             // format from the beginning of the line

./node_modules/typescript/lib/tsserverlibrary.js 140437          * If we hit Enter at $ we want line '    b ||' to be indented.

./node_modules/typescript/lib/tsserverlibrary.js 140438          * Formatting will be applied to the last two lines.

./node_modules/typescript/lib/tsserverlibrary.js 140439          * Node that fully encloses these lines is binary expression 'a ||...'.

./node_modules/typescript/lib/tsserverlibrary.js 140442          * that some parent node on the same line does - like if statement in this case.

./node_modules/typescript/lib/tsserverlibrary.js 140443          * Note that we are considering parents only from the same line with initial node -

./node_modules/typescript/lib/tsserverlibrary.js 140444          * if parent is on the different line - its delta was already contributed

./node_modules/typescript/lib/tsserverlibrary.js 140451                 var line = sourceFile.getLineAndCharacterOfPosition(n.getStart(sourceFile)).line;

./node_modules/typescript/lib/tsserverlibrary.js 140452                 if (previousLine !== -1 /* Unknown */ && line !== previousLine) {

./node_modules/typescript/lib/tsserverlibrary.js 140458                 previousLine = line;

./node_modules/typescript/lib/tsserverlibrary.js 140497                 var startLine = sourceFile.getLineAndCharacterOfPosition(enclosingNode.getStart(sourceFile)).line;

./node_modules/typescript/lib/tsserverlibrary.js 140500                     undecoratedStartLine = sourceFile.getLineAndCharacterOfPosition(ts.getNonDecoratorTokenPosOfNode(enclosingNode, sourceFile)).line;

./node_modules/typescript/lib/tsserverlibrary.js 140533                     var startLine = sourceFile.getLineAndCharacterOfPosition(startPos).line;

./node_modules/typescript/lib/tsserverlibrary.js 140548                     // if node is located on the same line with the parent

./node_modules/typescript/lib/tsserverlibrary.js 140559                         // - we need to get the indentation on last line and the delta of parent

./node_modules/typescript/lib/tsserverlibrary.js 140624                     getIndentationForToken: function (line, kind, container, suppressDelta) {

./node_modules/typescript/lib/tsserverlibrary.js 140625                         return !suppressDelta && shouldAddDelta(line, kind, container) ? indentation + getDelta(container) : indentation;

./node_modules/typescript/lib/tsserverlibrary.js 140629                     recomputeIndentation: function (lineAdded, parent) {

./node_modules/typescript/lib/tsserverlibrary.js 140631                             indentation += lineAdded ? options.indentSize : -options.indentSize;

./node_modules/typescript/lib/tsserverlibrary.js 140636                 function shouldAddDelta(line, kind, container) {

./node_modules/typescript/lib/tsserverlibrary.js 140663                     // if token line equals to the line of containing node (this is a first token in the node) - use node indentation

./node_modules/typescript/lib/tsserverlibrary.js 140664                     return nodeStartLine !== line

./node_modules/typescript/lib/tsserverlibrary.js 140708                         processPair(token, sourceFile.getLineAndCharacterOfPosition(token.pos).line, node, previousRange, previousRangeStartLine, previousParent, contextNode, nodeDynamicIndentation);

./node_modules/typescript/lib/tsserverlibrary.js 140713                     var childStartLine = sourceFile.getLineAndCharacterOfPosition(childStartPos).line;

./node_modules/typescript/lib/tsserverlibrary.js 140716                         undecoratedChildStartLine = sourceFile.getLineAndCharacterOfPosition(ts.getNonDecoratorTokenPosOfNode(child, sourceFile)).line;

./node_modules/typescript/lib/tsserverlibrary.js 140785                                 startLine = sourceFile.getLineAndCharacterOfPosition(tokenInfo.token.pos).line;

./node_modules/typescript/lib/tsserverlibrary.js 140816                             var commaTokenLine = sourceFile.getLineAndCharacterOfPosition(tokenInfo.token.pos).line;

./node_modules/typescript/lib/tsserverlibrary.js 140839                     var lineAction = 0 /* None */;

./node_modules/typescript/lib/tsserverlibrary.js 140846                         lineAction = processRange(currentTokenInfo.token, tokenStart, parent, childContextNode, dynamicIndentation);

./node_modules/typescript/lib/tsserverlibrary.js 140849                             if (lineAction === 0 /* None */) {

./node_modules/typescript/lib/tsserverlibrary.js 140850                                 // indent token only if end line of previous range does not match start line of the token

./node_modules/typescript/lib/tsserverlibrary.js 140851                                 var prevEndLine = savePreviousRange && sourceFile.getLineAndCharacterOfPosition(savePreviousRange.end).line;

./node_modules/typescript/lib/tsserverlibrary.js 140852                                 indentToken = lastTriviaWasNewLine && tokenStart.line !== prevEndLine;

./node_modules/typescript/lib/tsserverlibrary.js 140855                                 indentToken = lineAction === 1 /* LineAdded */;

./node_modules/typescript/lib/tsserverlibrary.js 140864                             dynamicIndentation.getIndentationForToken(tokenStart.line, currentTokenInfo.token.kind, container, !!isListEndToken) :

./node_modules/typescript/lib/tsserverlibrary.js 140869                             indentNextTokenOrTrivia = indentTriviaItems(currentTokenInfo.leadingTrivia, commentIndentation_1, indentNextTokenOrTrivia, function (item) { return insertIndentation(item.pos, commentIndentation_1, /*lineAdded*/ false); });

./node_modules/typescript/lib/tsserverlibrary.js 140873                             insertIndentation(currentTokenInfo.token.pos, tokenIndentation, lineAction === 1 /* LineAdded */);

./node_modules/typescript/lib/tsserverlibrary.js 140874                             lastIndentedLine = tokenStart.line;

./node_modules/typescript/lib/tsserverlibrary.js 140889                                 indentMultilineComment(triviaItem, commentIndentation, /*firstLineIsIndented*/ !indentNextTokenOrTrivia);

./node_modules/typescript/lib/tsserverlibrary.js 140917                 var lineAction = 0 /* None */;

./node_modules/typescript/lib/tsserverlibrary.js 140920                         // trim whitespaces starting from the beginning of the span up to the current line

./node_modules/typescript/lib/tsserverlibrary.js 140922                         trimTrailingWhitespacesForLines(originalStart.line, rangeStart.line);

./node_modules/typescript/lib/tsserverlibrary.js 140925                         lineAction =

./node_modules/typescript/lib/tsserverlibrary.js 140926                             processPair(range, rangeStart.line, parent, previousRange, previousRangeStartLine, previousParent, contextNode, dynamicIndentation);

./node_modules/typescript/lib/tsserverlibrary.js 140931                 previousRangeStartLine = rangeStart.line;

./node_modules/typescript/lib/tsserverlibrary.js 140932                 return lineAction;

./node_modules/typescript/lib/tsserverlibrary.js 140938                 var lineAction = 0 /* None */;

./node_modules/typescript/lib/tsserverlibrary.js 140943                         lineAction = applyRuleEdits(rule, previousItem, previousStartLine, currentItem, currentStartLine);

./node_modules/typescript/lib/tsserverlibrary.js 140944                         switch (lineAction) {

./node_modules/typescript/lib/tsserverlibrary.js 140946                                 // Handle the case where the next line is moved to be the end of this line.

./node_modules/typescript/lib/tsserverlibrary.js 140947                                 // In this case we don't indent the next line in the next pass.

./node_modules/typescript/lib/tsserverlibrary.js 140949                                     dynamicIndentation.recomputeIndentation(/*lineAddedByFormatting*/ false, contextNode);

./node_modules/typescript/lib/tsserverlibrary.js 140953                                 // Handle the case where token2 is moved to the new line.

./node_modules/typescript/lib/tsserverlibrary.js 140955                                 // sameLineIndent flag to notify the indenter that the indentation is within the line.

./node_modules/typescript/lib/tsserverlibrary.js 140957                                     dynamicIndentation.recomputeIndentation(/*lineAddedByFormatting*/ true, contextNode);

./node_modules/typescript/lib/tsserverlibrary.js 140961                                 ts.Debug.assert(lineAction === 0 /* None */);

./node_modules/typescript/lib/tsserverlibrary.js 140963                         // We need to trim trailing whitespace between the tokens if they were on different lines, and no rule was applied to put them on the same line

./node_modules/typescript/lib/tsserverlibrary.js 140971                     // We need to trim trailing whitespace between the tokens if they were on different lines, and no rule was applied to put them on the same line

./node_modules/typescript/lib/tsserverlibrary.js 140974                 return lineAction;

./node_modules/typescript/lib/tsserverlibrary.js 140976             function insertIndentation(pos, indentation, lineAdded) {

./node_modules/typescript/lib/tsserverlibrary.js 140978                 if (lineAdded) {

./node_modules/typescript/lib/tsserverlibrary.js 140979                     // new line is added before the token by the formatting rules

./node_modules/typescript/lib/tsserverlibrary.js 140985                     var startLinePosition = ts.getStartPositionOfLine(tokenStart.line, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 141006             function indentMultilineComment(commentRange, indentation, firstLineIsIndented, indentFinalLine) {

./node_modules/typescript/lib/tsserverlibrary.js 141008                 // split comment in lines

./node_modules/typescript/lib/tsserverlibrary.js 141009                 var startLine = sourceFile.getLineAndCharacterOfPosition(commentRange.pos).line;

./node_modules/typescript/lib/tsserverlibrary.js 141010                 var endLine = sourceFile.getLineAndCharacterOfPosition(commentRange.end).line;

./node_modules/typescript/lib/tsserverlibrary.js 141013                         // treat as single line comment

./node_modules/typescript/lib/tsserverlibrary.js 141014                         insertIndentation(commentRange.pos, indentation, /*lineAdded*/ false);

./node_modules/typescript/lib/tsserverlibrary.js 141020                 for (var line = startLine; line < endLine; line++) {

./node_modules/typescript/lib/tsserverlibrary.js 141021                     var endOfLine = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 141023                     startPos = ts.getStartPositionOfLine(line + 1, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 141054             function trimTrailingWhitespacesForLines(line1, line2, range) {

./node_modules/typescript/lib/tsserverlibrary.js 141055                 for (var line = line1; line < line2; line++) {

./node_modules/typescript/lib/tsserverlibrary.js 141056                     var lineStartPosition = ts.getStartPositionOfLine(line, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 141057                     var lineEndPosition = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 141059                     if (range && (ts.isComment(range.kind) || ts.isStringOrRegularExpressionOrTemplateLiteral(range.kind)) && range.pos <= lineEndPosition && range.end > lineEndPosition) {

./node_modules/typescript/lib/tsserverlibrary.js 141062                     var whitespaceStart = getTrailingWhitespaceStartPosition(lineStartPosition, lineEndPosition);

./node_modules/typescript/lib/tsserverlibrary.js 141064                         ts.Debug.assert(whitespaceStart === lineStartPosition || !ts.isWhiteSpaceSingleLine(sourceFile.text.charCodeAt(whitespaceStart - 1)));

./node_modules/typescript/lib/tsserverlibrary.js 141065                         recordDelete(whitespaceStart, lineEndPosition + 1 - whitespaceStart);

./node_modules/typescript/lib/tsserverlibrary.js 141084              * Trimming will be done for lines after the previous range

./node_modules/typescript/lib/tsserverlibrary.js 141088                 var startLine = sourceFile.getLineAndCharacterOfPosition(startPosition).line;

./node_modules/typescript/lib/tsserverlibrary.js 141089                 var endLine = sourceFile.getLineAndCharacterOfPosition(originalRange.end).line;

./node_modules/typescript/lib/tsserverlibrary.js 141124                         // exit early if we on different lines and rule cannot change number of newlines

./node_modules/typescript/lib/tsserverlibrary.js 141125                         // if line1 and line2 are on subsequent lines then no edits are required - ok to exit

./node_modules/typescript/lib/tsserverlibrary.js 141126                         // if line1 and line2 are separated with more than one newline - ok to exit since we cannot delete extra new lines

./node_modules/typescript/lib/tsserverlibrary.js 141130                         // edit should not be applied if we have one line feed between elements

./node_modules/typescript/lib/tsserverlibrary.js 141131                         var lineDelta = currentStartLine - previousStartLine;

./node_modules/typescript/lib/tsserverlibrary.js 141132                         if (lineDelta !== 1) {

./node_modules/typescript/lib/tsserverlibrary.js 141138                         // exit early if we on different lines and rule cannot change number of newlines

./node_modules/typescript/lib/tsserverlibrary.js 141172             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 141180                 // The end marker of a single-line comment does not include the newline character.

./node_modules/typescript/lib/tsserverlibrary.js 141185                 // But for closed multi-line comments, we don't want to be inside the comment in the following case:

./node_modules/typescript/lib/tsserverlibrary.js 141189                 // However, unterminated multi-line comments *do* contain their end.

./node_modules/typescript/lib/tsserverlibrary.js 141191                 // Internally, we represent the end of the comment at the newline and closing '/', respectively.

./node_modules/typescript/lib/tsserverlibrary.js 141300              * `true` when we need to assume `position` is on a newline.

./node_modules/typescript/lib/tsserverlibrary.js 141309              * When inserting some text after an open brace, we would like to get indentation as if a newline was already there.

./node_modules/typescript/lib/tsserverlibrary.js 141323                 // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 141336                 var lineAtPosition = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/tsserverlibrary.js 141337                 // indentation is first non-whitespace character in a previous line

./node_modules/typescript/lib/tsserverlibrary.js 141338                 // for block indentation, we should look for a line which contains something that's not

./node_modules/typescript/lib/tsserverlibrary.js 141355                 return getSmartIndent(sourceFile, position, precedingToken, lineAtPosition, assumeNewLineBeforeCloseBrace, options);

./node_modules/typescript/lib/tsserverlibrary.js 141359                 var previousLine = ts.getLineAndCharacterOfPosition(sourceFile, position).line - 1;

./node_modules/typescript/lib/tsserverlibrary.js 141360                 var commentStartLine = ts.getLineAndCharacterOfPosition(sourceFile, enclosingCommentRange.pos).line;

./node_modules/typescript/lib/tsserverlibrary.js 141374                 // move backwards until we find a line with a non-whitespace character,

./node_modules/typescript/lib/tsserverlibrary.js 141375                 // then find the first non-whitespace character for that line.

./node_modules/typescript/lib/tsserverlibrary.js 141384                 var lineStart = ts.getLineStartPositionForPosition(current, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 141385                 return findFirstNonWhitespaceColumn(lineStart, current, sourceFile, options);

./node_modules/typescript/lib/tsserverlibrary.js 141387             function getSmartIndent(sourceFile, position, precedingToken, lineAtPosition, assumeNewLineBeforeCloseBrace, options) {

./node_modules/typescript/lib/tsserverlibrary.js 141395                         var nextTokenKind = nextTokenIsCurlyBraceOnSameLineAsCursor(precedingToken, current, lineAtPosition, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 141399                             : lineAtPosition !== currentStart.line ? options.indentSize : 0;

./node_modules/typescript/lib/tsserverlibrary.js 141403                     // do not consider parent-child line sharing yet:

./node_modules/typescript/lib/tsserverlibrary.js 141405                     //    | preceding node 'a' does share line with its parent but indentation is expected

./node_modules/typescript/lib/tsserverlibrary.js 141429                 // * parent and child nodes start on the same line, or

./node_modules/typescript/lib/tsserverlibrary.js 141430                 // * parent is an IfStatement and child starts on the same line as an 'else clause'.

./node_modules/typescript/lib/tsserverlibrary.js 141438                     var parentAndChildShareLine = containingListOrParentStart.line === currentStart.line ||

./node_modules/typescript/lib/tsserverlibrary.js 141439                         childStartsOnTheSameLineWithElseInIfStatement(parent, current, currentStart.line, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 141443                         // A list indents its children if the children begin on a later line than the list itself:

./node_modules/typescript/lib/tsserverlibrary.js 141459                         var listIndentsChild = !!firstListChild && getStartLineAndCharacterForNode(firstListChild, sourceFile).line > containingListOrParentStart.line;

./node_modules/typescript/lib/tsserverlibrary.js 141470                     // increase indentation if parent node wants its content to be indented and parent and child nodes don't start on the same line

./node_modules/typescript/lib/tsserverlibrary.js 141482                     var useTrueStart = isArgumentAndStartLineOverlapsExpressionBeingCalled(parent, current, currentStart.line, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 141514                 // - parent and child are not on the same line

./node_modules/typescript/lib/tsserverlibrary.js 141528             function nextTokenIsCurlyBraceOnSameLineAsCursor(precedingToken, current, lineAtPosition, sourceFile) {

./node_modules/typescript/lib/tsserverlibrary.js 141538                     // close braces are indented at the parent level if they are located on the same line with cursor

./node_modules/typescript/lib/tsserverlibrary.js 141539                     // this means that if new line will be added at $ position, this case will be indented

./node_modules/typescript/lib/tsserverlibrary.js 141546                     var nextTokenStartLine = getStartLineAndCharacterForNode(nextToken, sourceFile).line;

./node_modules/typescript/lib/tsserverlibrary.js 141547                     return lineAtPosition === nextTokenStartLine ? 2 /* CloseBrace */ : 0 /* Unknown */;

./node_modules/typescript/lib/tsserverlibrary.js 141559                 var expressionOfCallExpressionEndLine = ts.getLineAndCharacterOfPosition(sourceFile, expressionOfCallExpressionEnd).line;

./node_modules/typescript/lib/tsserverlibrary.js 141567                     var elseKeywordStartLine = getStartLineAndCharacterForNode(elseKeyword, sourceFile).line;

./node_modules/typescript/lib/tsserverlibrary.js 141573             // A multiline conditional typically increases the indentation of its whenTrue and whenFalse children:

./node_modules/typescript/lib/tsserverlibrary.js 141579             // However, that indentation does not apply if the subexpressions themselves span multiple lines,

./node_modules/typescript/lib/tsserverlibrary.js 141585             //   whenTrue: 'multiline object literal'

./node_modules/typescript/lib/tsserverlibrary.js 141587             //   whenFalse('multiline parenthesized expression')

./node_modules/typescript/lib/tsserverlibrary.js 141592             // we check for the whenTrue branch beginning on the line that the condition ends, and the whenFalse

./node_modules/typescript/lib/tsserverlibrary.js 141593             // branch beginning on the line that the whenTrue branch ends.

./node_modules/typescript/lib/tsserverlibrary.js 141596                     var conditionEndLine = ts.getLineAndCharacterOfPosition(sourceFile, parent.condition.end).line;

./node_modules/typescript/lib/tsserverlibrary.js 141605                         //   ? 1 : (          L1: whenTrue indented because it's on a new line

./node_modules/typescript/lib/tsserverlibrary.js 141607                         //   );                   and one because of the parentheses spanning multiple lines

./node_modules/typescript/lib/tsserverlibrary.js 141608                         var trueStartLine = getStartLineAndCharacterForNode(parent.whenTrue, sourceFile).line;

./node_modules/typescript/lib/tsserverlibrary.js 141609                         var trueEndLine = ts.getLineAndCharacterOfPosition(sourceFile, parent.whenTrue.end).line;

./node_modules/typescript/lib/tsserverlibrary.js 141628                     var lineOfPreviousNode = ts.getLineAndCharacterOfPosition(sourceFile, previousNode.getEnd()).line;

./node_modules/typescript/lib/tsserverlibrary.js 141629                     if (childStartLine === lineOfPreviousNode) {

./node_modules/typescript/lib/tsserverlibrary.js 141721                 // walk toward the start of the list starting from current node and check if the line is the same for all items.

./node_modules/typescript/lib/tsserverlibrary.js 141722                 // if end line for item [i - 1] differs from the start line for item [i] - find column of the first non-whitespace character on the line of item [i]

./node_modules/typescript/lib/tsserverlibrary.js 141723                 var lineAndCharacter = getStartLineAndCharacterForNode(node, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 141728                     // skip list items that ends on the same line with the current list element

./node_modules/typescript/lib/tsserverlibrary.js 141729                     var prevEndLine = sourceFile.getLineAndCharacterOfPosition(list[i].end).line;

./node_modules/typescript/lib/tsserverlibrary.js 141730                     if (prevEndLine !== lineAndCharacter.line) {

./node_modules/typescript/lib/tsserverlibrary.js 141731                         return findColumnForFirstNonWhitespaceCharacterInLine(lineAndCharacter, sourceFile, options);

./node_modules/typescript/lib/tsserverlibrary.js 141733                     lineAndCharacter = getStartLineAndCharacterForNode(list[i], sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 141737             function findColumnForFirstNonWhitespaceCharacterInLine(lineAndCharacter, sourceFile, options) {

./node_modules/typescript/lib/tsserverlibrary.js 141738                 var lineStart = sourceFile.getPositionOfLineAndCharacter(lineAndCharacter.line, 0);

./node_modules/typescript/lib/tsserverlibrary.js 141739                 return findFirstNonWhitespaceColumn(lineStart, lineStart + lineAndCharacter.character, sourceFile, options);

./node_modules/typescript/lib/tsserverlibrary.js 141742              * Character is the actual index of the character since the beginning of the line.

./node_modules/typescript/lib/tsserverlibrary.js 141890                 var startLine = sourceFile.getLineAndCharacterOfPosition(rangeStart).line;

./node_modules/typescript/lib/tsserverlibrary.js 141891                 var endLine = sourceFile.getLineAndCharacterOfPosition(range.end).line;

./node_modules/typescript/lib/tsserverlibrary.js 141929              * if there are no line breaks between the node and the previous token,

./node_modules/typescript/lib/tsserverlibrary.js 141938              * Only delete trivia on the same line as getStart().

./node_modules/typescript/lib/tsserverlibrary.js 142007                 // full start and start of the node are on the same line

./node_modules/typescript/lib/tsserverlibrary.js 142025             // get start position of the line following the line that contains fullstart position

./node_modules/typescript/lib/tsserverlibrary.js 142029             // skip whitespaces/newlines

./node_modules/typescript/lib/tsserverlibrary.js 142033         /** Return the end position of a multiline comment of it is on another line; otherwise returns `undefined`; */

./node_modules/typescript/lib/tsserverlibrary.js 142034         function getEndPositionOfMultilineTrailingComment(sourceFile, node, options) {

./node_modules/typescript/lib/tsserverlibrary.js 142038                 // If the trailing comment is a multiline comment that extends to the next lines,

./node_modules/typescript/lib/tsserverlibrary.js 142045                         // Single line can break the loop as trivia will only be this line.

./node_modules/typescript/lib/tsserverlibrary.js 142046                         // Comments on subsequest lines are also ignored.

./node_modules/typescript/lib/tsserverlibrary.js 142050                         // Get the end line of the comment and compare against the end line of the node.

./node_modules/typescript/lib/tsserverlibrary.js 142051                         // If the comment end line position and the multiline comment extends to multiple lines,

./node_modules/typescript/lib/tsserverlibrary.js 142077             var multilineEndPosition = getEndPositionOfMultilineTrailingComment(sourceFile, node, options);

./node_modules/typescript/lib/tsserverlibrary.js 142078             if (multilineEndPosition) {

./node_modules/typescript/lib/tsserverlibrary.js 142079                 return multilineEndPosition;

./node_modules/typescript/lib/tsserverlibrary.js 142138                 // When deleting multiple nodes we need to track if the end position is including multiline trailing comments.

./node_modules/typescript/lib/tsserverlibrary.js 142144                     hasTrailingComment = !!getEndPositionOfMultilineTrailingComment(sourceFile, node, options);

./node_modules/typescript/lib/tsserverlibrary.js 142191                 return !!getEndPositionOfMultilineTrailingComment(sourceFile, oldNode, configurableEnd);

./node_modules/typescript/lib/tsserverlibrary.js 142249             ChangeTracker.prototype.insertCommentBeforeLine = function (sourceFile, lineNumber, position, commentText) {

./node_modules/typescript/lib/tsserverlibrary.js 142250                 var lineStartPosition = ts.getStartPositionOfLine(lineNumber, sourceFile);

./node_modules/typescript/lib/tsserverlibrary.js 142251                 var startPosition = ts.getFirstNonSpaceCharacterPosition(sourceFile.text, lineStartPosition);

./node_modules/typescript/lib/tsserverlibrary.js 142252                 // First try to see if we can put the comment on the previous line.

./node_modules/typescript/lib/tsserverlibrary.js 142255                 // Otherwise, add an extra new line immediately before the error span.

./node_modules/typescript/lib/tsserverlibrary.js 142258                 var indent = sourceFile.text.slice(lineStartPosition, startPosition);

./node_modules/typescript/lib/tsserverlibrary.js 142380              * new lines and must share the same indentation.

./node_modules/typescript/lib/tsserverlibrary.js 142388                         // each indented member must be on a new line

./node_modules/typescript/lib/tsserverlibrary.js 142412                 // - Always insert leading newline.

./node_modules/typescript/lib/tsserverlibrary.js 142418                 // - Only insert a trailing newline if body is single-line and there are no other insertions for the node.

./node_modules/typescript/lib/tsserverlibrary.js 142529                     // use next sibling as an anchor

./node_modules/typescript/lib/tsserverlibrary.js 142538                         // in multiline case it will work as

./node_modules/typescript/lib/tsserverlibrary.js 142558                     var multilineList = false;

./node_modules/typescript/lib/tsserverlibrary.js 142562                     // - determine if list is a multiline

./node_modules/typescript/lib/tsserverlibrary.js 142564                         // if list has only one element then we'll format is as multiline if node has comment in trailing trivia, or as singleline otherwise

./node_modules/typescript/lib/tsserverlibrary.js 142573                         // determine if list is multiline by checking lines of after element and element that precedes it.

./node_modules/typescript/lib/tsserverlibrary.js 142575                         multilineList = afterMinusOneStartLinePosition !== afterStartLinePosition;

./node_modules/typescript/lib/tsserverlibrary.js 142578                         // in this case we'll always treat containing list as multiline

./node_modules/typescript/lib/tsserverlibrary.js 142579                         multilineList = true;

./node_modules/typescript/lib/tsserverlibrary.js 142581                     if (multilineList) {

./node_modules/typescript/lib/tsserverlibrary.js 142586                         // insert element before the line break on the line that contains 'after' element

./node_modules/typescript/lib/tsserverlibrary.js 142743                 // strip initial indentation (spaces or tabs) if text will be inserted in the middle of the line

./node_modules/typescript/lib/tsserverlibrary.js 142779                     preserveSourceNewlines: true,

./node_modules/typescript/lib/tsserverlibrary.js 143019                     // There was a blank line between the last comment and this comment.

./node_modules/typescript/lib/tsserverlibrary.js 143021                     var commentLine = sourceFile.getLineAndCharacterOfPosition(range.pos).line;

./node_modules/typescript/lib/tsserverlibrary.js 143022                     var lastCommentEndLine = sourceFile.getLineAndCharacterOfPosition(lastComment.range.end).line;

./node_modules/typescript/lib/tsserverlibrary.js 143028                         firstNodeLine = sourceFile.getLineAndCharacterOfPosition(sourceFile.statements[0].getStart()).line;

./node_modules/typescript/lib/tsserverlibrary.js 143029                     var commentEndLine = sourceFile.getLineAndCharacterOfPosition(range.end).line;

./node_modules/typescript/lib/tsserverlibrary.js 143045                         if (position < text.length && charCode === 13 /* carriageReturn */ && text.charCodeAt(position) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserverlibrary.js 144843             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserverlibrary.js 145055                 // useNonAdjustedEndPosition to ensure we don't eat the newline after the statement.

./node_modules/typescript/lib/tsserverlibrary.js 145245                             // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion

./node_modules/typescript/lib/tsserverlibrary.js 148504             // If label is on a separate line, just delete the rest of that line, but not the indentation of the labeled statement.

./node_modules/typescript/lib/tsserverlibrary.js 149885             var lineNumber = ts.getLineAndCharacterOfPosition(sourceFile, position).line;

./node_modules/typescript/lib/tsserverlibrary.js 149886             // Only need to add `// @ts-ignore` for a line once.

./node_modules/typescript/lib/tsserverlibrary.js 149887             if (!seenLines || ts.tryAddToSet(seenLines, lineNumber)) {

./node_modules/typescript/lib/tsserverlibrary.js 149888                 changes.insertCommentBeforeLine(sourceFile, lineNumber, position, " @ts-ignore");

./node_modules/typescript/lib/tsserverlibrary.js 150217             /*multiline*/ true);

./node_modules/typescript/lib/tsserverlibrary.js 152087                                     hasLeadingNewline: true,

./node_modules/typescript/lib/tsserverlibrary.js 153146                         // CONSIDER: could detect that each is on a separate line (See `extractConstant_VariableList_MultipleLines` in `extractConstants.ts`)

./node_modules/typescript/lib/tsserverlibrary.js 154013                 if (file && ts.isTupleTypeNode(node) && (ts.getLineAndCharacterOfPosition(file, node.pos).line === ts.getLineAndCharacterOfPosition(file, node.end).line)) {

./node_modules/typescript/lib/tsserverlibrary.js 154024             changes.insertNodeBefore(file, firstStatement, ts.ignoreSourceNewlines(newTypeNode), /* blankLineBetween */ true);

./node_modules/typescript/lib/tsserverlibrary.js 154035             changes.insertNodeBefore(file, firstStatement, ts.ignoreSourceNewlines(newTypeNode), /* blankLineBetween */ true);

./node_modules/typescript/lib/tsserverlibrary.js 156085             // eslint-disable-next-line debug-assert

./node_modules/typescript/lib/tsserverlibrary.js 156542                     doc = doc.length === 0 ? inheritedDocs.slice() : inheritedDocs.concat(ts.lineBreakPart(), doc);

./node_modules/typescript/lib/tsserverlibrary.js 156574         SourceFileObject.prototype.getPositionOfLineAndCharacter = function (line, character, allowEdits) {

./node_modules/typescript/lib/tsserverlibrary.js 156575             return ts.computePositionOfLineAndCharacter(ts.getLineStarts(this), line, character, this.text, allowEdits);

./node_modules/typescript/lib/tsserverlibrary.js 156578             var line = this.getLineAndCharacterOfPosition(pos).line;

./node_modules/typescript/lib/tsserverlibrary.js 156579             var lineStarts = this.getLineStarts();

./node_modules/typescript/lib/tsserverlibrary.js 156581             if (line + 1 >= lineStarts.length) {

./node_modules/typescript/lib/tsserverlibrary.js 156585                 lastCharPos = lineStarts[line + 1] - 1;

./node_modules/typescript/lib/tsserverlibrary.js 156588             // if the new line is "\r\n", we should return the last non-new-line-character position

./node_modules/typescript/lib/tsserverlibrary.js 157759                 lineStarts: sourceFile.getLineStarts(),

./node_modules/typescript/lib/tsserverlibrary.js 157760                 firstLine: sourceFile.getLineAndCharacterOfPosition(textRange.pos).line,

./node_modules/typescript/lib/tsserverlibrary.js 157761                 lastLine: sourceFile.getLineAndCharacterOfPosition(textRange.end).line

./node_modules/typescript/lib/tsserverlibrary.js 157767             var _a = getLinesForRange(sourceFile, textRange), lineStarts = _a.lineStarts, firstLine = _a.firstLine, lastLine = _a.lastLine;

./node_modules/typescript/lib/tsserverlibrary.js 157770             var lineTextStarts = new ts.Map();

./node_modules/typescript/lib/tsserverlibrary.js 157772             var isJsx = ts.isInsideJsxElement(sourceFile, lineStarts[firstLine]);

./node_modules/typescript/lib/tsserverlibrary.js 157774             // Check each line before any text changes.

./node_modules/typescript/lib/tsserverlibrary.js 157776                 var lineText = sourceFile.text.substring(lineStarts[i], sourceFile.getLineEndOfPosition(lineStarts[i]));

./node_modules/typescript/lib/tsserverlibrary.js 157777                 // Find the start of text and the left-most character. No-op on empty lines.

./node_modules/typescript/lib/tsserverlibrary.js 157778                 var regExec = firstNonWhitespaceCharacterRegex.exec(lineText);

./node_modules/typescript/lib/tsserverlibrary.js 157781                     lineTextStarts.set(i.toString(), regExec.index);

./node_modules/typescript/lib/tsserverlibrary.js 157782                     if (lineText.substr(regExec.index, openComment.length) !== openComment) {

./node_modules/typescript/lib/tsserverlibrary.js 157789                 // If the range is multiline and ends on a beginning of a line, don't comment/uncomment.

./node_modules/typescript/lib/tsserverlibrary.js 157790                 if (firstLine !== lastLine && lineStarts[i] === textRange.end) {

./node_modules/typescript/lib/tsserverlibrary.js 157793                 var lineTextStart = lineTextStarts.get(i.toString());

./node_modules/typescript/lib/tsserverlibrary.js 157794                 // If the line is not an empty line; otherwise no-op.

./node_modules/typescript/lib/tsserverlibrary.js 157795                 if (lineTextStart !== undefined) {

./node_modules/typescript/lib/tsserverlibrary.js 157797                         textChanges.push.apply(textChanges, toggleMultilineComment(fileName, { pos: lineStarts[i] + leftMostPosition, end: sourceFile.getLineEndOfPosition(lineStarts[i]) }, isCommenting, isJsx));

./node_modules/typescript/lib/tsserverlibrary.js 157804                                 start: lineStarts[i] + leftMostPosition

./node_modules/typescript/lib/tsserverlibrary.js 157808                     else if (sourceFile.text.substr(lineStarts[i] + lineTextStart, openComment.length) === openComment) {

./node_modules/typescript/lib/tsserverlibrary.js 157813                                 start: lineStarts[i] + lineTextStart

./node_modules/typescript/lib/tsserverlibrary.js 157821         function toggleMultilineComment(fileName, textRange, insertComment, isInsideJsx) {

./node_modules/typescript/lib/tsserverlibrary.js 157831             var openMultiline = isJsx ? "{/*" : "/*";

./node_modules/typescript/lib/tsserverlibrary.js 157832             var closeMultiline = isJsx ? "*/}" : "*/";

./node_modules/typescript/lib/tsserverlibrary.js 157833             var openMultilineRegex = isJsx ? "\\{\\/\\*" : "\\/\\*";

./node_modules/typescript/lib/tsserverlibrary.js 157834             var closeMultilineRegex = isJsx ? "\\*\\/\\}" : "\\*\\/";

./node_modules/typescript/lib/tsserverlibrary.js 157838                 var offset = text.substr(pos, openMultiline.length) === openMultiline ? openMultiline.length : 0;

./node_modules/typescript/lib/tsserverlibrary.js 157855                     var newPos = text.substring(pos, textRange.end).search("(" + openMultilineRegex + ")|(" + closeMultilineRegex + ")");

./node_modules/typescript/lib/tsserverlibrary.js 157859                     pos = newPos === -1 ? textRange.end + 1 : pos + newPos + closeMultiline.length;

./node_modules/typescript/lib/tsserverlibrary.js 157871                 if (text.substr(firstPos, openMultiline.length) !== openMultiline) {

./node_modules/typescript/lib/tsserverlibrary.js 157873                         newText: openMultiline,

./node_modules/typescript/lib/tsserverlibrary.js 157882                     if (text.substr(positions[i] - closeMultiline.length, closeMultiline.length) !== closeMultiline) {

./node_modules/typescript/lib/tsserverlibrary.js 157884                             newText: closeMultiline,

./node_modules/typescript/lib/tsserverlibrary.js 157891                     if (text.substr(positions[i], openMultiline.length) !== openMultiline) {

./node_modules/typescript/lib/tsserverlibrary.js 157893                             newText: openMultiline,

./node_modules/typescript/lib/tsserverlibrary.js 157904                         newText: closeMultiline,

./node_modules/typescript/lib/tsserverlibrary.js 157916                     var from = pos_2 - closeMultiline.length > 0 ? pos_2 - closeMultiline.length : 0;

./node_modules/typescript/lib/tsserverlibrary.js 157917                     var offset = text.substr(from, closeMultiline.length) === closeMultiline ? closeMultiline.length : 0;

./node_modules/typescript/lib/tsserverlibrary.js 157921                             length: openMultiline.length,

./node_modules/typescript/lib/tsserverlibrary.js 157932             // If there is a selection that is on the same line, add multiline.

./node_modules/typescript/lib/tsserverlibrary.js 157934                 ? toggleMultilineComment(fileName, textRange, /*insertComment*/ true)

./node_modules/typescript/lib/tsserverlibrary.js 157955                             textChanges.push.apply(textChanges, toggleMultilineComment(fileName, { end: commentRange.end, pos: commentRange.pos + 1 }, /*insertComment*/ false));

./node_modules/typescript/lib/tsserverlibrary.js 158069                 // text up to the end of the line (or */).

./node_modules/typescript/lib/tsserverlibrary.js 158073                 // match the literal portion up to the end of the line or end of comment.

./node_modules/typescript/lib/tsserverlibrary.js 158084                 //  'm' is so we can find matches in a multi-line input.

./node_modules/typescript/lib/tsserverlibrary.js 158146                 return { line: 0, character: 0 };

./node_modules/typescript/lib/tsserverlibrary.js 158235             toggleMultilineComment: toggleMultilineComment,

./node_modules/typescript/lib/tsserverlibrary.js 158398             var lineOfPosition = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/tsserverlibrary.js 158399             if (sourceFile.getLineAndCharacterOfPosition(tokenAtLocation.getStart(sourceFile)).line > lineOfPosition) {

./node_modules/typescript/lib/tsserverlibrary.js 158400                 // Get previous token if the token is returned starts on new line

./node_modules/typescript/lib/tsserverlibrary.js 158403                 // token at position will return let keyword on second line as the token but we would like to use

./node_modules/typescript/lib/tsserverlibrary.js 158404                 // token on same line if trailing trivia (comments or white spaces on same line) part of the last token on that line

./node_modules/typescript/lib/tsserverlibrary.js 158406                 // It's a blank line

./node_modules/typescript/lib/tsserverlibrary.js 158407                 if (!preceding || sourceFile.getLineAndCharacterOfPosition(preceding.getEnd()).line !== lineOfPosition) {

./node_modules/typescript/lib/tsserverlibrary.js 158428                 if (node && lineOfPosition === sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line) {

./node_modules/typescript/lib/tsserverlibrary.js 158780                         // Set on parent if on same line otherwise on first statement

./node_modules/typescript/lib/tsserverlibrary.js 158786                         // Set span on previous token if it starts on same line otherwise on the first statement of the block

./node_modules/typescript/lib/tsserverlibrary.js 159022 var debugObjectHost = (function () { return this; })(); // eslint-disable-line prefer-const

./node_modules/typescript/lib/tsserverlibrary.js 159121             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 159307             this.languageService = null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 159313             this.logger = null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 159321             this.forwardJSONCall("refresh(" + throwOnError + ")", function () { return null; } // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 159328                 return null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserverlibrary.js 159606         LanguageServiceShimObject.prototype.toggleMultilineComment = function (fileName, textRange) {

./node_modules/typescript/lib/tsserverlibrary.js 159608             return this.forwardJSONCall("toggleMultilineComment('" + fileName + "', '" + JSON.stringify(textRange) + "')", function () { return _this.languageService.toggleMultilineComment(fileName, textRange); });

./node_modules/typescript/lib/tsserverlibrary.js 159839         // The previous line should have made `globalThis` globally

./node_modules/typescript/lib/tsserverlibrary.js 160075         /** Put stringified JSON on the next line, indented. */

./node_modules/typescript/lib/tsserverlibrary.js 160240                 CommandTypes["ToggleMultilineComment"] = "toggleMultilineComment";

./node_modules/typescript/lib/tsserverlibrary.js 160242                 CommandTypes["ToggleMultilineCommentFull"] = "toggleMultilineComment-full";

./node_modules/typescript/lib/tsserverlibrary.js 160418                 this.lineMap = undefined;

./node_modules/typescript/lib/tsserverlibrary.js 160427                 this.lineMap = undefined;

./node_modules/typescript/lib/tsserverlibrary.js 160497             TextStorage.prototype.getAbsolutePositionAndLineText = function (line) {

./node_modules/typescript/lib/tsserverlibrary.js 160498                 return this.switchToScriptVersionCache().getAbsolutePositionAndLineText(line);

./node_modules/typescript/lib/tsserverlibrary.js 160501              *  @param line 0 based index

./node_modules/typescript/lib/tsserverlibrary.js 160503             TextStorage.prototype.lineToTextSpan = function (line) {

./node_modules/typescript/lib/tsserverlibrary.js 160505                     var lineMap = this.getLineMap();

./node_modules/typescript/lib/tsserverlibrary.js 160506                     var start = lineMap[line]; // -1 since line is 1-based

./node_modules/typescript/lib/tsserverlibrary.js 160507                     var end = line + 1 < lineMap.length ? lineMap[line + 1] : this.text.length;

./node_modules/typescript/lib/tsserverlibrary.js 160510                 return this.svc.lineToTextSpan(line);

./node_modules/typescript/lib/tsserverlibrary.js 160513              * @param line 1 based index

./node_modules/typescript/lib/tsserverlibrary.js 160516             TextStorage.prototype.lineOffsetToPosition = function (line, offset, allowEdits) {

./node_modules/typescript/lib/tsserverlibrary.js 160518                     return ts.computePositionOfLineAndCharacter(this.getLineMap(), line - 1, offset - 1, this.text, allowEdits);

./node_modules/typescript/lib/tsserverlibrary.js 160520                 // TODO: assert this offset is actually on the line

./node_modules/typescript/lib/tsserverlibrary.js 160521                 return this.svc.lineOffsetToPosition(line, offset);

./node_modules/typescript/lib/tsserverlibrary.js 160525                     var _a = ts.computeLineAndCharacterOfPosition(this.getLineMap(), position), line = _a.line, character = _a.character;

./node_modules/typescript/lib/tsserverlibrary.js 160526                     return { line: line + 1, offset: character + 1 };

./node_modules/typescript/lib/tsserverlibrary.js 160576                 return this.lineMap || (this.lineMap = ts.computeLineStarts(this.getOrLoadText()));

./node_modules/typescript/lib/tsserverlibrary.js 160583                         getLineText: function (line) { return _this.svc.getAbsolutePositionAndLineText(line + 1).lineText; }

./node_modules/typescript/lib/tsserverlibrary.js 160586                 var lineMap = this.getLineMap();

./node_modules/typescript/lib/tsserverlibrary.js 160587                 return ts.getLineInfo(this.text, lineMap);

./node_modules/typescript/lib/tsserverlibrary.js 160858             ScriptInfo.prototype.getAbsolutePositionAndLineText = function (line) {

./node_modules/typescript/lib/tsserverlibrary.js 160859                 return this.textStorage.getAbsolutePositionAndLineText(line);

./node_modules/typescript/lib/tsserverlibrary.js 160879              *  @param line 1 based index

./node_modules/typescript/lib/tsserverlibrary.js 160881             ScriptInfo.prototype.lineToTextSpan = function (line) {

./node_modules/typescript/lib/tsserverlibrary.js 160882                 return this.textStorage.lineToTextSpan(line);

./node_modules/typescript/lib/tsserverlibrary.js 160884             ScriptInfo.prototype.lineOffsetToPosition = function (line, offset, allowEdits) {

./node_modules/typescript/lib/tsserverlibrary.js 160885                 return this.textStorage.lineOffsetToPosition(line, offset, allowEdits);

./node_modules/typescript/lib/tsserverlibrary.js 160921             ts.Debug.assert(typeof location.line === "number", "Expected line " + location.line + " to be a number.");

./node_modules/typescript/lib/tsserverlibrary.js 160923             ts.Debug.assert(location.line > 0, "Expected line to be non-" + (location.line === 0 ? "zero" : "negative"));

./node_modules/typescript/lib/tsserverlibrary.js 162295                         // Skip empty names from odd commandline parses

./node_modules/typescript/lib/tsserverlibrary.js 162359                         // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserverlibrary.js 162788                 // Ensure we have upto date parsed command line

./node_modules/typescript/lib/tsserverlibrary.js 164489                     version: ts.version, // eslint-disable-line @typescript-eslint/no-unnecessary-qualifier

./node_modules/typescript/lib/tsserverlibrary.js 165289                 // Key doesnt matter since its only for text and lines

./node_modules/typescript/lib/tsserverlibrary.js 165300                             var lineOffset = info.positionToLineOffset(pos);

./node_modules/typescript/lib/tsserverlibrary.js 165301                             return { line: lineOffset.line - 1, character: lineOffset.offset - 1 };

./node_modules/typescript/lib/tsserverlibrary.js 165303                         getPositionOfLineAndCharacter: function (line, character, allowEdits) { return info.lineOffsetToPosition(line + 1, character + 1, allowEdits); }

./node_modules/typescript/lib/tsserverlibrary.js 166641         function convertToLocation(lineAndCharacter) {

./node_modules/typescript/lib/tsserverlibrary.js 166642             return { line: lineAndCharacter.line + 1, offset: lineAndCharacter.character + 1 };

./node_modules/typescript/lib/tsserverlibrary.js 167095                         var response = { version: ts.version }; // eslint-disable-line @typescript-eslint/no-unnecessary-qualifier

./node_modules/typescript/lib/tsserverlibrary.js 167142                                 var start = scriptInfo.lineOffsetToPosition(change.start.line, change.start.offset);

./node_modules/typescript/lib/tsserverlibrary.js 167143                                 var end = scriptInfo.lineOffsetToPosition(change.end.line, change.end.offset);

./node_modules/typescript/lib/tsserverlibrary.js 167453                     _a[server.CommandNames.ToggleMultilineComment] = function (request) {

./node_modules/typescript/lib/tsserverlibrary.js 167454                         return _this.requiredResponse(_this.toggleMultilineComment(request.arguments, /*simplifiedResult*/ true));

./node_modules/typescript/lib/tsserverlibrary.js 167456                     _a[server.CommandNames.ToggleMultilineCommentFull] = function (request) {

./node_modules/typescript/lib/tsserverlibrary.js 167457                         return _this.requiredResponse(_this.toggleMultilineComment(request.arguments, /*simplifiedResult*/ false));

./node_modules/typescript/lib/tsserverlibrary.js 167640                         catch (_b) { } // eslint-disable-line no-empty

./node_modules/typescript/lib/tsserverlibrary.js 167988                     start: { line: start.line + 1, offset: start.character + 1 },

./node_modules/typescript/lib/tsserverlibrary.js 167989                     end: { line: end.line + 1, offset: end.character + 1 }

./node_modules/typescript/lib/tsserverlibrary.js 168228                 return args.position !== undefined ? args.position : scriptInfo.lineOffsetToPosition(args.line, args.offset);

./node_modules/typescript/lib/tsserverlibrary.js 168337                 var startPosition = scriptInfo.lineOffsetToPosition(args.line, args.offset);

./node_modules/typescript/lib/tsserverlibrary.js 168338                 var endPosition = scriptInfo.lineOffsetToPosition(args.endLine, args.endOffset);

./node_modules/typescript/lib/tsserverlibrary.js 168364                 var position = scriptInfo.lineOffsetToPosition(args.line, args.offset);

./node_modules/typescript/lib/tsserverlibrary.js 168368                 // the position is on a line containing only whitespace.

./node_modules/typescript/lib/tsserverlibrary.js 168371                 // only to the previous line.  If all this is true, then

./node_modules/typescript/lib/tsserverlibrary.js 168372                 // add edits necessary to properly indent the current line.

./node_modules/typescript/lib/tsserverlibrary.js 168374                     var _b = scriptInfo.getAbsolutePositionAndLineText(args.line), lineText = _b.lineText, absolutePosition = _b.absolutePosition;

./node_modules/typescript/lib/tsserverlibrary.js 168375                     if (lineText && lineText.search("\\S") < 0) {

./node_modules/typescript/lib/tsserverlibrary.js 168379                         for (i = 0, len = lineText.length; i < len; i++) {

./node_modules/typescript/lib/tsserverlibrary.js 168380                             if (lineText.charAt(i) === " ") {

./node_modules/typescript/lib/tsserverlibrary.js 168383                             else if (lineText.charAt(i) === "\t") {

./node_modules/typescript/lib/tsserverlibrary.js 168532                 var start = scriptInfo.lineOffsetToPosition(args.line, args.offset);

./node_modules/typescript/lib/tsserverlibrary.js 168533                 var end = scriptInfo.lineOffsetToPosition(args.endLine, args.endOffset);

./node_modules/typescript/lib/tsserverlibrary.js 168673                 return locationOrSpan.line !== undefined;

./node_modules/typescript/lib/tsserverlibrary.js 168686                     return loc.position !== undefined ? loc.position : scriptInfo.lineOffsetToPosition(loc.line, loc.offset);

./node_modules/typescript/lib/tsserverlibrary.js 168794                     startPosition = scriptInfo.lineOffsetToPosition(args.startLine, args.startOffset);

./node_modules/typescript/lib/tsserverlibrary.js 168802                     endPosition = scriptInfo.lineOffsetToPosition(args.endLine, args.endOffset);

./node_modules/typescript/lib/tsserverlibrary.js 168921             Session.prototype.toggleMultilineComment = function (args, simplifiedResult) {

./node_modules/typescript/lib/tsserverlibrary.js 168926                 var textChanges = languageService.toggleMultilineComment(file, textRange);

./node_modules/typescript/lib/tsserverlibrary.js 169169             return { line: lc.line + 1, offset: lc.character + 1 };

./node_modules/typescript/lib/tsserverlibrary.js 169175             return { fileName: textChanges.fileName, textChanges: [{ start: { line: 0, offset: 0 }, end: { line: 0, offset: 0 }, newText: change.newText }] };

./node_modules/typescript/lib/tsserverlibrary.js 169180             var _a = ts.computeLineAndCharacterOfPosition(ts.computeLineStarts(newText), renameLocation), line = _a.line, character = _a.character;

./node_modules/typescript/lib/tsserverlibrary.js 169181             return { line: line + 1, offset: character + 1 };

./node_modules/typescript/lib/tsserverlibrary.js 169201             var lineSpan = scriptInfo.lineToTextSpan(span.start.line - 1);

./node_modules/typescript/lib/tsserverlibrary.js 169202             var lineText = scriptInfo.getSnapshot().getText(lineSpan.start, ts.textSpanEnd(lineSpan)).replace(/\r|\n/g, "");

./node_modules/typescript/lib/tsserverlibrary.js 169203             return __assign(__assign({ file: fileName }, span), { lineText: lineText, isWriteAccess: isWriteAccess, isDefinition: isDefinition });

./node_modules/typescript/lib/tsserverlibrary.js 169219         var lineCollectionCapacity = 4;

./node_modules/typescript/lib/tsserverlibrary.js 169232                 this.lineIndex = new LineIndex();

./node_modules/typescript/lib/tsserverlibrary.js 169237                 this.lineIndex.root = new LineNode();

./node_modules/typescript/lib/tsserverlibrary.js 169238                 this.startPath = [this.lineIndex.root];

./node_modules/typescript/lib/tsserverlibrary.js 169239                 this.stack = [this.lineIndex.root];

./node_modules/typescript/lib/tsserverlibrary.js 169256                 var lm = LineIndex.linesFromText(insertedText);

./node_modules/typescript/lib/tsserverlibrary.js 169257                 var lines = lm.lines;

./node_modules/typescript/lib/tsserverlibrary.js 169258                 if (lines.length > 1 && lines[lines.length - 1] === "") {

./node_modules/typescript/lib/tsserverlibrary.js 169259                     lines.pop();

./node_modules/typescript/lib/tsserverlibrary.js 169280                 if (lines.length > 0) {

./node_modules/typescript/lib/tsserverlibrary.js 169281                     leafNode.text = lines[0];

./node_modules/typescript/lib/tsserverlibrary.js 169282                     if (lines.length > 1) {

./node_modules/typescript/lib/tsserverlibrary.js 169283                         var insertedNodes = new Array(lines.length - 1);

./node_modules/typescript/lib/tsserverlibrary.js 169285                         for (var i = 1; i < lines.length; i++) {

./node_modules/typescript/lib/tsserverlibrary.js 169286                             insertedNodes[i - 1] = new LineLeaf(lines[i]);

./node_modules/typescript/lib/tsserverlibrary.js 169298                             newRoot.add(this.lineIndex.root);

./node_modules/typescript/lib/tsserverlibrary.js 169299                             insertedNodes = newRoot.insertAt(this.lineIndex.root, insertedNodes);

./node_modules/typescript/lib/tsserverlibrary.js 169301                             this.lineIndex.root = newRoot;

./node_modules/typescript/lib/tsserverlibrary.js 169303                         this.lineIndex.root.updateCounts();

./node_modules/typescript/lib/tsserverlibrary.js 169319                 return this.lineIndex;

./node_modules/typescript/lib/tsserverlibrary.js 169321             EditWalker.prototype.post = function (_relativeStart, _relativeLength, lineCollection) {

./node_modules/typescript/lib/tsserverlibrary.js 169323                 // if range is on single line, we will never make this state transition

./node_modules/typescript/lib/tsserverlibrary.js 169324                 if (lineCollection === this.lineCollectionAtBranch) {

./node_modules/typescript/lib/tsserverlibrary.js 169330             EditWalker.prototype.pre = function (_relativeStart, _relativeLength, lineCollection, _parent, nodeType) {

./node_modules/typescript/lib/tsserverlibrary.js 169334                     // if range is on single line, we will never make this state transition

./node_modules/typescript/lib/tsserverlibrary.js 169337                     this.lineCollectionAtBranch = lineCollection;

./node_modules/typescript/lib/tsserverlibrary.js 169351                             currentNode.add(lineCollection);

./node_modules/typescript/lib/tsserverlibrary.js 169359                             child = fresh(lineCollection);

./node_modules/typescript/lib/tsserverlibrary.js 169366                             child = fresh(lineCollection);

./node_modules/typescript/lib/tsserverlibrary.js 169371                             if (!lineCollection.isLeaf()) {

./node_modules/typescript/lib/tsserverlibrary.js 169372                                 child = fresh(lineCollection);

./node_modules/typescript/lib/tsserverlibrary.js 169386                             if (!lineCollection.isLeaf()) {

./node_modules/typescript/lib/tsserverlibrary.js 169387                                 child = fresh(lineCollection);

./node_modules/typescript/lib/tsserverlibrary.js 169396                             currentNode.add(lineCollection);

./node_modules/typescript/lib/tsserverlibrary.js 169480                 return this._getSnapshot().index.lineNumberToInfo(oneBasedLine);

./node_modules/typescript/lib/tsserverlibrary.js 169482             ScriptVersionCache.prototype.lineOffsetToPosition = function (line, column) {

./node_modules/typescript/lib/tsserverlibrary.js 169483                 return this._getSnapshot().index.absolutePositionOfStartOfLine(line) + (column - 1);

./node_modules/typescript/lib/tsserverlibrary.js 169488             ScriptVersionCache.prototype.lineToTextSpan = function (line) {

./node_modules/typescript/lib/tsserverlibrary.js 169490                 var _a = index.lineNumberToInfo(line + 1), lineText = _a.lineText, absolutePosition = _a.absolutePosition;

./node_modules/typescript/lib/tsserverlibrary.js 169491                 var len = lineText !== undefined ? lineText.length : index.absolutePositionOfStartOfLine(line + 2) - absolutePosition;

./node_modules/typescript/lib/tsserverlibrary.js 169522                 var lm = LineIndex.linesFromText(script);

./node_modules/typescript/lib/tsserverlibrary.js 169523                 snap.index.load(lm.lines);

./node_modules/typescript/lib/tsserverlibrary.js 169564                 return this.lineNumberToInfo(oneBasedLine).absolutePosition;

./node_modules/typescript/lib/tsserverlibrary.js 169568                 return { line: oneBasedLine, offset: zeroBasedColumn + 1 };

./node_modules/typescript/lib/tsserverlibrary.js 169574                 return this.root.lineCount();

./node_modules/typescript/lib/tsserverlibrary.js 169576             LineIndex.prototype.lineNumberToInfo = function (oneBasedLine) {

./node_modules/typescript/lib/tsserverlibrary.js 169577                 var lineCount = this.getLineCount();

./node_modules/typescript/lib/tsserverlibrary.js 169578                 if (oneBasedLine <= lineCount) {

./node_modules/typescript/lib/tsserverlibrary.js 169579                     var _a = this.root.lineNumberToInfo(oneBasedLine, 0), position = _a.position, leaf = _a.leaf;

./node_modules/typescript/lib/tsserverlibrary.js 169580                     return { absolutePosition: position, lineText: leaf && leaf.text };

./node_modules/typescript/lib/tsserverlibrary.js 169583                     return { absolutePosition: this.root.charCount(), lineText: undefined };

./node_modules/typescript/lib/tsserverlibrary.js 169586             LineIndex.prototype.load = function (lines) {

./node_modules/typescript/lib/tsserverlibrary.js 169587                 if (lines.length > 0) {

./node_modules/typescript/lib/tsserverlibrary.js 169589                     for (var i = 0; i < lines.length; i++) {

./node_modules/typescript/lib/tsserverlibrary.js 169590                         leaves[i] = new LineLeaf(lines[i]);

./node_modules/typescript/lib/tsserverlibrary.js 169637                         this.load(LineIndex.linesFromText(newText).lines);

./node_modules/typescript/lib/tsserverlibrary.js 169664                         // check whether last characters deleted are line break

./node_modules/typescript/lib/tsserverlibrary.js 169666                         var _a = this.positionToColumnAndLineText(e), zeroBasedColumn = _a.zeroBasedColumn, lineText = _a.lineText;

./node_modules/typescript/lib/tsserverlibrary.js 169668                             // move range end just past line that will merge with previous line

./node_modules/typescript/lib/tsserverlibrary.js 169669                             deleteLength += lineText.length; // TODO: GH#18217

./node_modules/typescript/lib/tsserverlibrary.js 169671                             newText = newText ? newText + lineText : lineText;

./node_modules/typescript/lib/tsserverlibrary.js 169677                         var updatedText = walker.lineIndex.getText(0, walker.lineIndex.getLength());

./node_modules/typescript/lib/tsserverlibrary.js 169680                     return walker.lineIndex;

./node_modules/typescript/lib/tsserverlibrary.js 169684                 if (nodes.length < lineCollectionCapacity) {

./node_modules/typescript/lib/tsserverlibrary.js 169687                 var interiorNodes = new Array(Math.ceil(nodes.length / lineCollectionCapacity));

./node_modules/typescript/lib/tsserverlibrary.js 169690                     var end = Math.min(nodeIndex + lineCollectionCapacity, nodes.length);

./node_modules/typescript/lib/tsserverlibrary.js 169696             LineIndex.linesFromText = function (text) {

./node_modules/typescript/lib/tsserverlibrary.js 169697                 var lineMap = ts.computeLineStarts(text);

./node_modules/typescript/lib/tsserverlibrary.js 169698                 if (lineMap.length === 0) {

./node_modules/typescript/lib/tsserverlibrary.js 169699                     return { lines: [], lineMap: lineMap };

./node_modules/typescript/lib/tsserverlibrary.js 169701                 var lines = new Array(lineMap.length);

./node_modules/typescript/lib/tsserverlibrary.js 169702                 var lc = lineMap.length - 1;

./node_modules/typescript/lib/tsserverlibrary.js 169704                     lines[lmi] = text.substring(lineMap[lmi], lineMap[lmi + 1]);

./node_modules/typescript/lib/tsserverlibrary.js 169706                 var endText = text.substring(lineMap[lc]);

./node_modules/typescript/lib/tsserverlibrary.js 169708                     lines[lc] = endText;

./node_modules/typescript/lib/tsserverlibrary.js 169711                     lines.pop();

./node_modules/typescript/lib/tsserverlibrary.js 169713                 return { lines: lines, lineMap: lineMap };

./node_modules/typescript/lib/tsserverlibrary.js 169736                     this.totalLines += child.lineCount();

./node_modules/typescript/lib/tsserverlibrary.js 169812             // Output line number is absolute.

./node_modules/typescript/lib/tsserverlibrary.js 169813             LineNode.prototype.charOffsetToLineInfo = function (lineNumberAccumulator, relativePosition) {

./node_modules/typescript/lib/tsserverlibrary.js 169816                     return { oneBasedLine: lineNumberAccumulator, zeroBasedColumn: relativePosition, lineText: undefined };

./node_modules/typescript/lib/tsserverlibrary.js 169822                             return { oneBasedLine: lineNumberAccumulator, zeroBasedColumn: relativePosition, lineText: child.text };

./node_modules/typescript/lib/tsserverlibrary.js 169825                             return child.charOffsetToLineInfo(lineNumberAccumulator, relativePosition);

./node_modules/typescript/lib/tsserverlibrary.js 169830                         lineNumberAccumulator += child.lineCount();

./node_modules/typescript/lib/tsserverlibrary.js 169834                 var lineCount = this.lineCount();

./node_modules/typescript/lib/tsserverlibrary.js 169835                 if (lineCount === 0) { // it's empty! (and lineNumberToInfo expects a one-based line)

./node_modules/typescript/lib/tsserverlibrary.js 169836                     return { oneBasedLine: 1, zeroBasedColumn: 0, lineText: undefined };

./node_modules/typescript/lib/tsserverlibrary.js 169838                 var leaf = ts.Debug.checkDefined(this.lineNumberToInfo(lineCount, 0).leaf);

./node_modules/typescript/lib/tsserverlibrary.js 169839                 return { oneBasedLine: lineCount, zeroBasedColumn: leaf.charCount(), lineText: undefined };

./node_modules/typescript/lib/tsserverlibrary.js 169842              * Input line number is relative to the start of this node.

./node_modules/typescript/lib/tsserverlibrary.js 169843              * Output line number is relative to the child.

./node_modules/typescript/lib/tsserverlibrary.js 169846             LineNode.prototype.lineNumberToInfo = function (relativeOneBasedLine, positionAccumulator) {

./node_modules/typescript/lib/tsserverlibrary.js 169849                     var childLineCount = child.lineCount();

./node_modules/typescript/lib/tsserverlibrary.js 169851                         return child.isLeaf() ? { position: positionAccumulator, leaf: child } : child.lineNumberToInfo(relativeOneBasedLine, positionAccumulator);

./node_modules/typescript/lib/tsserverlibrary.js 169896                 if ((clen < lineCollectionCapacity) && (childIndex === (clen - 1)) && (nodeCount === 1)) {

./node_modules/typescript/lib/tsserverlibrary.js 169905                     while ((childIndex < lineCollectionCapacity) && (nodeIndex < nodeCount)) {

./node_modules/typescript/lib/tsserverlibrary.js 169913                         splitNodeCount = Math.ceil((nodeCount - nodeIndex) / lineCollectionCapacity);

./node_modules/typescript/lib/tsserverlibrary.js 169923                             if (splitNode.children.length === lineCollectionCapacity) {

./node_modules/typescript/lib/tsserverlibrary.js 169947                 ts.Debug.assert(this.children.length <= lineCollectionCapacity);

./node_modules/typescript/lib/tsserverlibrary.js 169952             LineNode.prototype.lineCount = function () {

./node_modules/typescript/lib/tsserverlibrary.js 169970             LineLeaf.prototype.lineCount = function () {

./node_modules/typescript/lib/tsserverlibrary.js 170637         // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserver.js 100     // The following is baselined as a literal template type without intervention

./node_modules/typescript/lib/tsserver.js 102     // eslint-disable-next-line @typescript-eslint/no-inferrable-types

./node_modules/typescript/lib/tsserver.js 119             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserver.js 128             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserver.js 2227      * Removes the leading and trailing white space and line terminator characters from a string.

./node_modules/typescript/lib/tsserver.js 2395             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 2407          * @deprecated Use `checkDefined` to check whether a value is defined inline. Use `assertIsDefined` to check whether

./node_modules/typescript/lib/tsserver.js 2424          * @deprecated Use `checkEachDefined` to check whether the elements of an array are defined inline. Use `assertEachIsDefined` to check whether

./node_modules/typescript/lib/tsserver.js 2596             if (!("__debugFlowFlags" in flowNode)) { // eslint-disable-line no-in-operator

./node_modules/typescript/lib/tsserver.js 2642             if (!("__tsDebuggerDisplay" in array)) { // eslint-disable-line no-in-operator

./node_modules/typescript/lib/tsserver.js 3273     // eslint-disable-next-line @typescript-eslint/naming-convention

./node_modules/typescript/lib/tsserver.js 3590                 + [__assign({ name: "process_name", args: { name: "tsc" } }, meta), __assign({ name: "thread_name", args: { name: "Main" } }, meta), __assign(__assign({ name: "TracingStartedInBrowser" }, meta), { cat: "disabled-by-default-devtools.timeline" })]

./node_modules/typescript/lib/tsserver.js 3698                     line: lc.line + 1,

./node_modules/typescript/lib/tsserver.js 3709             // Cleverness: no line break here so that the type ID will match the line number

./node_modules/typescript/lib/tsserver.js 3823         // We detect and preserve #! on the first line

./node_modules/typescript/lib/tsserver.js 4483         NodeBuilderFlags[NodeBuilderFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";

./node_modules/typescript/lib/tsserver.js 4524         TypeFormatFlags[TypeFormatFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";

./node_modules/typescript/lib/tsserver.js 5203         CharacterCodes[CharacterCodes["lineFeed"] = 10] = "lineFeed";

./node_modules/typescript/lib/tsserver.js 5205         CharacterCodes[CharacterCodes["lineSeparator"] = 8232] = "lineSeparator";

./node_modules/typescript/lib/tsserver.js 5450         /*@internal*/ EmitFlags[EmitFlags["IgnoreSourceNewlines"] = 134217728] = "IgnoreSourceNewlines";

./node_modules/typescript/lib/tsserver.js 5622          * Single line comment of the form

./node_modules/typescript/lib/tsserver.js 5629          * Multiline non-jsdoc pragma of the form

./node_modules/typescript/lib/tsserver.js 6396      * Called for command-line and server use cases.

./node_modules/typescript/lib/tsserver.js 6775     ts.sysLog = ts.noop; // eslint-disable-line prefer-const

./node_modules/typescript/lib/tsserver.js 7202     // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/tsserver.js 8770         Option_project_cannot_be_mixed_with_source_files_on_a_command_line: diag(5042, ts.DiagnosticCategory.Error, "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042", "Option 'project' cannot be mixed with source files on a command line."),

./node_modules/typescript/lib/tsserver.js 8773         Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: diag(5051, ts.DiagnosticCategory.Error, "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051", "Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided."),

./node_modules/typescript/lib/tsserver.js 8842         Insert_command_line_options_and_files_from_a_file: diag(6030, ts.DiagnosticCategory.Message, "Insert_command_line_options_and_files_from_a_file_6030", "Insert command line options and files from a file."),

./node_modules/typescript/lib/tsserver.js 8867         Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: diag(6060, ts.DiagnosticCategory.Message, "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060", "Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)."),

./node_modules/typescript/lib/tsserver.js 8869         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line: diag(6064, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'null' on command line."),

./node_modules/typescript/lib/tsserver.js 8954         Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap_to_be_set: diag(6152, ts.DiagnosticCategory.Message, "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152", "Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set."),

./node_modules/typescript/lib/tsserver.js 8973         Command_line_Options: diag(6171, ts.DiagnosticCategory.Message, "Command_line_Options_6171", "Command-line Options"),

./node_modules/typescript/lib/tsserver.js 9022         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line: diag(6230, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'false' or 'null' on command line."),

./node_modules/typescript/lib/tsserver.js 9076         Option_build_must_be_the_first_command_line_argument: diag(6369, ts.DiagnosticCategory.Error, "Option_build_must_be_the_first_command_line_argument_6369", "Option '--build' must be the first command line argument."),

./node_modules/typescript/lib/tsserver.js 9168         Set_the_newline_character_for_emitting_files: diag(6659, ts.DiagnosticCategory.Message, "Set_the_newline_character_for_emitting_files_6659", "Set the newline character for emitting files."),

./node_modules/typescript/lib/tsserver.js 9759      * Test for whether a single line comment with leading whitespace trimmed's text contains a directive.

./node_modules/typescript/lib/tsserver.js 9763      * Test for whether a multi-line comment with leading whitespace trimmed's last line contains a directive.

./node_modules/typescript/lib/tsserver.js 9825         var lineStart = 0;

./node_modules/typescript/lib/tsserver.js 9831                     if (text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserver.js 9835                 case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserver.js 9836                     result.push(lineStart);

./node_modules/typescript/lib/tsserver.js 9837                     lineStart = pos;

./node_modules/typescript/lib/tsserver.js 9841                         result.push(lineStart);

./node_modules/typescript/lib/tsserver.js 9842                         lineStart = pos;

./node_modules/typescript/lib/tsserver.js 9847         result.push(lineStart);

./node_modules/typescript/lib/tsserver.js 9851     function getPositionOfLineAndCharacter(sourceFile, line, character, allowEdits) {

./node_modules/typescript/lib/tsserver.js 9853             sourceFile.getPositionOfLineAndCharacter(line, character, allowEdits) :

./node_modules/typescript/lib/tsserver.js 9854             computePositionOfLineAndCharacter(getLineStarts(sourceFile), line, character, sourceFile.text, allowEdits);

./node_modules/typescript/lib/tsserver.js 9858     function computePositionOfLineAndCharacter(lineStarts, line, character, debugText, allowEdits) {

./node_modules/typescript/lib/tsserver.js 9859         if (line < 0 || line >= lineStarts.length) {

./node_modules/typescript/lib/tsserver.js 9861                 // Clamp line to nearest allowable value

./node_modules/typescript/lib/tsserver.js 9862                 line = line < 0 ? 0 : line >= lineStarts.length ? lineStarts.length - 1 : line;

./node_modules/typescript/lib/tsserver.js 9865                 ts.Debug.fail("Bad line number. Line: " + line + ", lineStarts.length: " + lineStarts.length + " , line map is correct? " + (debugText !== undefined ? ts.arraysEqual(lineStarts, computeLineStarts(debugText)) : "unknown"));

./node_modules/typescript/lib/tsserver.js 9868         var res = lineStarts[line] + character;

./node_modules/typescript/lib/tsserver.js 9873             return res > lineStarts[line + 1] ? lineStarts[line + 1] : typeof debugText === "string" && res > debugText.length ? debugText.length : res;

./node_modules/typescript/lib/tsserver.js 9875         if (line < lineStarts.length - 1) {

./node_modules/typescript/lib/tsserver.js 9876             ts.Debug.assert(res < lineStarts[line + 1]);

./node_modules/typescript/lib/tsserver.js 9879             ts.Debug.assert(res <= debugText.length); // Allow single character overflow for trailing newline

./node_modules/typescript/lib/tsserver.js 9886         return sourceFile.lineMap || (sourceFile.lineMap = computeLineStarts(sourceFile.text));

./node_modules/typescript/lib/tsserver.js 9890     function computeLineAndCharacterOfPosition(lineStarts, position) {

./node_modules/typescript/lib/tsserver.js 9891         var lineNumber = computeLineOfPosition(lineStarts, position);

./node_modules/typescript/lib/tsserver.js 9893             line: lineNumber,

./node_modules/typescript/lib/tsserver.js 9894             character: position - lineStarts[lineNumber]

./node_modules/typescript/lib/tsserver.js 9900      * We assume the first line starts at position 0 and 'position' is non-negative.

./node_modules/typescript/lib/tsserver.js 9902     function computeLineOfPosition(lineStarts, position, lowerBound) {

./node_modules/typescript/lib/tsserver.js 9903         var lineNumber = ts.binarySearch(lineStarts, position, ts.identity, ts.compareValues, lowerBound);

./node_modules/typescript/lib/tsserver.js 9904         if (lineNumber < 0) {

./node_modules/typescript/lib/tsserver.js 9906             // the binary search returns the 2's-complement of the next line start

./node_modules/typescript/lib/tsserver.js 9907             // e.g. if the line starts at [5, 10, 23, 80] and the position requested was 20

./node_modules/typescript/lib/tsserver.js 9910             // We want the index of the previous line start, so we subtract 1.

./node_modules/typescript/lib/tsserver.js 9912             lineNumber = ~lineNumber - 1;

./node_modules/typescript/lib/tsserver.js 9913             ts.Debug.assert(lineNumber !== -1, "position cannot precede the beginning of the file");

./node_modules/typescript/lib/tsserver.js 9915         return lineNumber;

./node_modules/typescript/lib/tsserver.js 9922         var lineStarts = getLineStarts(sourceFile);

./node_modules/typescript/lib/tsserver.js 9926         var lowerLine = computeLineOfPosition(lineStarts, lower);

./node_modules/typescript/lib/tsserver.js 9927         var upperLine = computeLineOfPosition(lineStarts, upper, lowerLine);

./node_modules/typescript/lib/tsserver.js 9939     /** Does not include line breaks. For that, see isWhiteSpaceLike. */

./node_modules/typescript/lib/tsserver.js 9942         // It is explicitly not a line-break as it isn't in the exact set specified by EcmaScript.

./node_modules/typescript/lib/tsserver.js 9959         // The ECMAScript line terminator characters are listed in Table 3.

./node_modules/typescript/lib/tsserver.js 9966         // Only the characters in Table 3 are treated as line terminators. Other new line or line

./node_modules/typescript/lib/tsserver.js 9967         // breaking characters are treated as white space but not as line terminators.

./node_modules/typescript/lib/tsserver.js 9968         return ch === 10 /* lineFeed */ ||

./node_modules/typescript/lib/tsserver.js 9970             ch === 8232 /* lineSeparator */ ||

./node_modules/typescript/lib/tsserver.js 9993             case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserver.js 10026                     if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserver.js 10030                 case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserver.js 10111         // Conflict markers must be at the start of a line.

./node_modules/typescript/lib/tsserver.js 10169      * Single-line comment ranges include the leading double-slash characters but not the ending

./node_modules/typescript/lib/tsserver.js 10170      * line break. Multi-line comment ranges include the leading slash-asterisk and trailing

./node_modules/typescript/lib/tsserver.js 10177      * @param trailing If false, whitespace is skipped until the first line break and comments

./node_modules/typescript/lib/tsserver.js 10179      *      between the given position and the next line break are returned.

./node_modules/typescript/lib/tsserver.js 10205                     if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserver.js 10209                 case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserver.js 10682                     if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserver.js 10781                 // when encountering a LineContinuation (i.e. a backslash and a line terminator sequence),

./node_modules/typescript/lib/tsserver.js 10782                 // the line terminator is interpreted to be "the empty code unit sequence".

./node_modules/typescript/lib/tsserver.js 10784                     if (pos < end && text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserver.js 10788                 case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserver.js 10789                 case 8232 /* lineSeparator */:

./node_modules/typescript/lib/tsserver.js 10989                     case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserver.js 10997                             if (ch === 13 /* carriageReturn */ && pos + 1 < end && text.charCodeAt(pos + 1) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserver.js 11089                             // decoration at the start of a JSDoc comment line

./node_modules/typescript/lib/tsserver.js 11126                         // Single-line comment

./node_modules/typescript/lib/tsserver.js 11143                         // Multi-line comment

./node_modules/typescript/lib/tsserver.js 11472                     // If we reach the end of a file, or hit a newline, then this is an unterminated

./node_modules/typescript/lib/tsserver.js 11516         function appendIfCommentDirective(commentDirectives, text, commentDirectiveRegEx, lineStart) {

./node_modules/typescript/lib/tsserver.js 11522                 range: { pos: lineStart, end: pos },

./node_modules/typescript/lib/tsserver.js 11551         function reScanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/tsserver.js 11552             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/tsserver.js 11554             return token = scanJsxToken(allowMultilineJsxText);

./node_modules/typescript/lib/tsserver.js 11575         function scanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/tsserver.js 11576             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/tsserver.js 11594             // First non-whitespace character on this line.

./node_modules/typescript/lib/tsserver.js 11596             // These initial values are special because the first line is:

./node_modules/typescript/lib/tsserver.js 11616                 // FirstNonWhitespace is 0, then we only see whitespaces so far. If we see a linebreak, we want to ignore that whitespaces.

./node_modules/typescript/lib/tsserver.js 11625                 else if (!allowMultilineJsxText && isLineBreak(char) && firstNonWhitespace > 0) {

./node_modules/typescript/lib/tsserver.js 11626                     // Stop JsxText on each line during formatting. This allows the formatter to

./node_modules/typescript/lib/tsserver.js 11627                     // indent each line correctly.

./node_modules/typescript/lib/tsserver.js 11711                     if (text.charCodeAt(pos) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserver.js 11715                 case 10 /* lineFeed */:

./node_modules/typescript/lib/tsserver.js 12020     ts.unchangedTextChangeRange = createTextChangeRange(createTextSpan(0, 0), 0); // eslint-disable-line prefer-const

./node_modules/typescript/lib/tsserver.js 12085             // which if the two $'s precedes the other, and we move that one forward until they line up.  in this case that

./node_modules/typescript/lib/tsserver.js 13769     function guessIndentation(lines) {

./node_modules/typescript/lib/tsserver.js 13771         for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {

./node_modules/typescript/lib/tsserver.js 13772             var line = lines_1[_i];

./node_modules/typescript/lib/tsserver.js 13773             if (!line.length) {

./node_modules/typescript/lib/tsserver.js 13777             for (; i < line.length && i < indentation; i++) {

./node_modules/typescript/lib/tsserver.js 13778                 if (!ts.isWhiteSpaceLike(line.charCodeAt(i))) {

./node_modules/typescript/lib/tsserver.js 13878             // Completely ignore indentation for string writers.  And map newlines to

./node_modules/typescript/lib/tsserver.js 14081     function getStartPositionOfLine(line, sourceFile) {

./node_modules/typescript/lib/tsserver.js 14082         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/tsserver.js 14083         return ts.getLineStarts(sourceFile)[line];

./node_modules/typescript/lib/tsserver.js 14090         return file.fileName + "(" + (loc.line + 1) + "," + (loc.character + 1) + ")";

./node_modules/typescript/lib/tsserver.js 14093     function getEndLinePosition(line, sourceFile) {

./node_modules/typescript/lib/tsserver.js 14094         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/tsserver.js 14095         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/tsserver.js 14096         var lineIndex = line;

./node_modules/typescript/lib/tsserver.js 14098         if (lineIndex + 1 === lineStarts.length) {

./node_modules/typescript/lib/tsserver.js 14099             // last line - return EOF

./node_modules/typescript/lib/tsserver.js 14103             // current line start

./node_modules/typescript/lib/tsserver.js 14104             var start = lineStarts[lineIndex];

./node_modules/typescript/lib/tsserver.js 14105             // take the start position of the next line - 1 = it should be some line break

./node_modules/typescript/lib/tsserver.js 14106             var pos = lineStarts[lineIndex + 1] - 1;

./node_modules/typescript/lib/tsserver.js 14108             // walk backwards skipping line breaks, stop the the beginning of current line.

./node_modules/typescript/lib/tsserver.js 14111             // $ <- end of line for this position should match the start position

./node_modules/typescript/lib/tsserver.js 14229             "" + ts.getLineAndCharacterOfPosition(sourceFile, commentDirective.range.end).line,

./node_modules/typescript/lib/tsserver.js 14237                 var line = _a[0], directive = _a[1];

./node_modules/typescript/lib/tsserver.js 14238                 return directive.type === 0 /* ExpectError */ && !usedLines.get(line);

./node_modules/typescript/lib/tsserver.js 14245         function markUsed(line) {

./node_modules/typescript/lib/tsserver.js 14246             if (!directivesByLine.has("" + line)) {

./node_modules/typescript/lib/tsserver.js 14249             usedLines.set("" + line, true);

./node_modules/typescript/lib/tsserver.js 14305             // strip space + asterisk at line start

./node_modules/typescript/lib/tsserver.js 14306             text = text.split(/\r\n|\n|\r/).map(function (line) { return ts.trimStringStart(line.replace(/^\s*\*/, "")); }).join("\n");

./node_modules/typescript/lib/tsserver.js 14355                 String: ["codePointAt", "includes", "endsWith", "normalize", "repeat", "startsWith", "anchor", "big", "blink", "bold", "fixed", "fontcolor", "fontsize", "italics", "link", "small", "strike", "sub", "sup"],

./node_modules/typescript/lib/tsserver.js 14847             var startLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.pos).line;

./node_modules/typescript/lib/tsserver.js 14848             var endLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.end).line;

./node_modules/typescript/lib/tsserver.js 14850                 // The arrow function spans multiple lines,

./node_modules/typescript/lib/tsserver.js 14851                 // make the error span be the first line, inclusive.

./node_modules/typescript/lib/tsserver.js 17471     // This consists of the first 19 unprintable ASCII characters, canonical escapes, lineSeparator,

./node_modules/typescript/lib/tsserver.js 17472     // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in

./node_modules/typescript/lib/tsserver.js 17478     // Template strings preserve simple LF newlines, still encode CRLF (or CR)

./node_modules/typescript/lib/tsserver.js 17515      * but augmented for a few select characters (e.g. lineSeparator, paragraphSeparator, nextLine)

./node_modules/typescript/lib/tsserver.js 17535     // This consists of the first 19 unprintable ASCII characters, JSX canonical escapes, lineSeparator,

./node_modules/typescript/lib/tsserver.js 17536     // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in

./node_modules/typescript/lib/tsserver.js 17601         var lineStart;

./node_modules/typescript/lib/tsserver.js 17602         var lineCount;

./node_modules/typescript/lib/tsserver.js 17603         var linePos;

./node_modules/typescript/lib/tsserver.js 17606             var lineStartsOfS = ts.computeLineStarts(s);

./node_modules/typescript/lib/tsserver.js 17607             if (lineStartsOfS.length > 1) {

./node_modules/typescript/lib/tsserver.js 17608                 lineCount = lineCount + lineStartsOfS.length - 1;

./node_modules/typescript/lib/tsserver.js 17609                 linePos = output.length - s.length + ts.last(lineStartsOfS);

./node_modules/typescript/lib/tsserver.js 17610                 lineStart = (linePos - output.length) === 0;

./node_modules/typescript/lib/tsserver.js 17613                 lineStart = false;

./node_modules/typescript/lib/tsserver.js 17618                 if (lineStart) {

./node_modules/typescript/lib/tsserver.js 17620                     lineStart = false;

./node_modules/typescript/lib/tsserver.js 17639             lineStart = true;

./node_modules/typescript/lib/tsserver.js 17640             lineCount = 0;

./node_modules/typescript/lib/tsserver.js 17641             linePos = 0;

./node_modules/typescript/lib/tsserver.js 17657             if (!lineStart || force) {

./node_modules/typescript/lib/tsserver.js 17659                 lineCount++;

./node_modules/typescript/lib/tsserver.js 17660                 linePos = output.length;

./node_modules/typescript/lib/tsserver.js 17661                 lineStart = true;

./node_modules/typescript/lib/tsserver.js 17666             return lineStart ? output.length : (output.length + newLine.length);

./node_modules/typescript/lib/tsserver.js 17678             getLine: function () { return lineCount; },

./node_modules/typescript/lib/tsserver.js 17679             getColumn: function () { return lineStart ? indent * getIndentSize() : output.length - linePos; },

./node_modules/typescript/lib/tsserver.js 17681             isAtStartOfLine: function () { return lineStart; },

./node_modules/typescript/lib/tsserver.js 17905         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/tsserver.js 17906         return ts.computeLineOfPosition(lineStarts, pos);

./node_modules/typescript/lib/tsserver.js 17909     function getLineOfLocalPositionFromLineMap(lineMap, pos) {

./node_modules/typescript/lib/tsserver.js 17910         return ts.computeLineOfPosition(lineMap, pos);

./node_modules/typescript/lib/tsserver.js 18056     function emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments) {

./node_modules/typescript/lib/tsserver.js 18057         emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, node.pos, leadingComments);

./node_modules/typescript/lib/tsserver.js 18060     function emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, pos, leadingComments) {

./node_modules/typescript/lib/tsserver.js 18061         // If the leading comments start on different line than the start of node, write new line

./node_modules/typescript/lib/tsserver.js 18063             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, leadingComments[0].pos)) {

./node_modules/typescript/lib/tsserver.js 18068     function emitNewLineBeforeLeadingCommentOfPosition(lineMap, writer, pos, commentPos) {

./node_modules/typescript/lib/tsserver.js 18069         // If the leading comments start on different line than the start of node, write new line

./node_modules/typescript/lib/tsserver.js 18071             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, commentPos)) {

./node_modules/typescript/lib/tsserver.js 18076     function emitComments(text, lineMap, writer, comments, leadingSeparator, trailingSeparator, newLine, writeComment) {

./node_modules/typescript/lib/tsserver.js 18088                 writeComment(text, lineMap, writer, comment.pos, comment.end, newLine);

./node_modules/typescript/lib/tsserver.js 18106     function emitDetachedComments(text, lineMap, writer, writeComment, node, newLine, removeComments) {

./node_modules/typescript/lib/tsserver.js 18129                     var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, lastComment.end);

./node_modules/typescript/lib/tsserver.js 18130                     var commentLine = getLineOfLocalPositionFromLineMap(lineMap, comment.pos);

./node_modules/typescript/lib/tsserver.js 18132                         // There was a blank line between the last comment and this comment.  This

./node_modules/typescript/lib/tsserver.js 18143                 // sure there is at least one blank line between it and the node.  If not, it's not

./node_modules/typescript/lib/tsserver.js 18145                 var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, ts.last(detachedComments).end);

./node_modules/typescript/lib/tsserver.js 18146                 var nodeLine = getLineOfLocalPositionFromLineMap(lineMap, ts.skipTrivia(text, node.pos));

./node_modules/typescript/lib/tsserver.js 18149                     emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments);

./node_modules/typescript/lib/tsserver.js 18150                     emitComments(text, lineMap, writer, detachedComments, /*leadingSeparator*/ false, /*trailingSeparator*/ true, newLine, writeComment);

./node_modules/typescript/lib/tsserver.js 18161     function writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/tsserver.js 18163             var firstCommentLineAndCharacter = ts.computeLineAndCharacterOfPosition(lineMap, commentPos);

./node_modules/typescript/lib/tsserver.js 18164             var lineCount = lineMap.length;

./node_modules/typescript/lib/tsserver.js 18166             for (var pos = commentPos, currentLine = firstCommentLineAndCharacter.line; pos < commentEnd; currentLine++) {

./node_modules/typescript/lib/tsserver.js 18167                 var nextLineStart = (currentLine + 1) === lineCount

./node_modules/typescript/lib/tsserver.js 18169                     : lineMap[currentLine + 1];

./node_modules/typescript/lib/tsserver.js 18171                     // If we are not emitting first line, we need to write the spaces to adjust the alignment

./node_modules/typescript/lib/tsserver.js 18173                         firstCommentLineIndent = calculateIndent(text, lineMap[firstCommentLineAndCharacter.line], commentPos);

./node_modules/typescript/lib/tsserver.js 18180                     //         /* starts at character 9 this is line 1

./node_modules/typescript/lib/tsserver.js 18181                     //    * starts at character pos 4 line                        --1  = 8 - 8 + 3

./node_modules/typescript/lib/tsserver.js 18186                     //     /* this is line 1 -- Assume current writer indent 8

./node_modules/typescript/lib/tsserver.js 18187                     //      * line                                                --3 = 8 - 4 + 5

./node_modules/typescript/lib/tsserver.js 18208                 // Write the comment line text

./node_modules/typescript/lib/tsserver.js 18214             // Single line comment of style //....

./node_modules/typescript/lib/tsserver.js 18230             // Empty string - make sure we write empty line

./node_modules/typescript/lib/tsserver.js 18723     var lineFeed = "\n";

./node_modules/typescript/lib/tsserver.js 18729                 return lineFeed;

./node_modules/typescript/lib/tsserver.js 19267     // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/tsserver.js 20301         // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 21711             inlineExpressions: inlineExpressions,

./node_modules/typescript/lib/tsserver.js 23507             // eslint-disable-next-line no-undef-init

./node_modules/typescript/lib/tsserver.js 25778         function inlineExpressions(expressions) {

./node_modules/typescript/lib/tsserver.js 26158                 // tslint:disable-next-line no-invalid-template-strings

./node_modules/typescript/lib/tsserver.js 26162                 // tslint:disable-next-line no-invalid-template-strings

./node_modules/typescript/lib/tsserver.js 26511     // tslint:disable-next-line variable-name

./node_modules/typescript/lib/tsserver.js 26840     function ignoreSourceNewlines(node) {

./node_modules/typescript/lib/tsserver.js 26841         getOrCreateEmitNode(node).flags |= 134217728 /* IgnoreSourceNewlines */;

./node_modules/typescript/lib/tsserver.js 26844     ts.ignoreSourceNewlines = ignoreSourceNewlines;

./node_modules/typescript/lib/tsserver.js 29399     function createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState) {

./node_modules/typescript/lib/tsserver.js 29401         return trampoline;

./node_modules/typescript/lib/tsserver.js 29402         function trampoline(node, outerState) {

./node_modules/typescript/lib/tsserver.js 29415     ts.createBinaryExpressionTrampoline = createBinaryExpressionTrampoline;

./node_modules/typescript/lib/tsserver.js 30571             // code from createNode is inlined here so createNode won't have to deal with special case of creating source files

./node_modules/typescript/lib/tsserver.js 30719         // reason about this side effect).  Mainstream VMs inline simple functions like this, so

./node_modules/typescript/lib/tsserver.js 31870             // Note: the newlines are important here.  For example, if that above code

./node_modules/typescript/lib/tsserver.js 31879             // line terminator after the identifier or keyword.

./node_modules/typescript/lib/tsserver.js 33157                 // if the next token is not on the same line as yield.  or we don't have an '*' or

./node_modules/typescript/lib/tsserver.js 34723             // directly as that might consume an expression on the following line.

./node_modules/typescript/lib/tsserver.js 34825                     // however, an identifier cannot be followed by another identifier on the same line. This is what we

./node_modules/typescript/lib/tsserver.js 34835                     // as the identifier 'namespace' on one line followed by the identifier 'n' on another.

./node_modules/typescript/lib/tsserver.js 35443                 // We need to ensure that any subsequent modifiers appear on the same line

./node_modules/typescript/lib/tsserver.js 36122                     // + 1 because the last index of \n is always one index before the first character in the line and coincidentally, if there is no \n before start, it is -1, which is also one index before the first character

./node_modules/typescript/lib/tsserver.js 36146                                     // NOTE: According to usejsdoc.org, a tag goes to end of line, except the last tag.

./node_modules/typescript/lib/tsserver.js 36147                                     // Real-world comments may break this rule, so "BeginningOfLine" will not be a real line beginning

./node_modules/typescript/lib/tsserver.js 36164                                     // If we've already seen an asterisk, then we can no longer parse a tag on this line

./node_modules/typescript/lib/tsserver.js 36169                                     // Ignore the first asterisk on a line

./node_modules/typescript/lib/tsserver.js 36194                                         removeLeadingNewlines(comments);

./node_modules/typescript/lib/tsserver.js 36205                                 // wasn't a tag, we can no longer parse a tag on this line until we hit the next

./node_modules/typescript/lib/tsserver.js 36206                                 // line break.

./node_modules/typescript/lib/tsserver.js 36222                 function removeLeadingNewlines(comments) {

./node_modules/typescript/lib/tsserver.js 36233                     // We must use infinite lookahead, as there could be any number of newlines :(

./node_modules/typescript/lib/tsserver.js 36459                     removeLeadingNewlines(comments);

./node_modules/typescript/lib/tsserver.js 36901                     //   > Multiple bounded generics cannot be declared on the same line. For the sake of clarity, if multiple templates share the same

./node_modules/typescript/lib/tsserver.js 36902                     //   > type bound they must be declared on separate lines.

./node_modules/typescript/lib/tsserver.js 37634             var multiLinePragmaRegEx = /@(\S+)(\s+.*)?$/gim; // Defined inline since it uses the "g" flag, which keeps a persistent index (for iterating)

./node_modules/typescript/lib/tsserver.js 37785      * A map of lib names to lib files. This map is used both for parsing the "lib" command line

./node_modules/typescript/lib/tsserver.js 37866             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 37880             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 37978             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 38016             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 38024             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 38031             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 38040             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 38049             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 38056             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 38063             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 38549             name: "inlineSourceMap",

./node_modules/typescript/lib/tsserver.js 38557             name: "inlineSources",

./node_modules/typescript/lib/tsserver.js 38663             description: ts.Diagnostics.Set_the_newline_character_for_emitting_files,

./node_modules/typescript/lib/tsserver.js 38894             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 38901             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 38908             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 38914             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsserver.js 39141                     errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line, opt.name));

./node_modules/typescript/lib/tsserver.js 39145                 errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line, opt.name));

./node_modules/typescript/lib/tsserver.js 39151             // Check to see if no argument was provided (e.g. "--locale" is the last command-line argument).

./node_modules/typescript/lib/tsserver.js 39567                     return validateValue(/*value*/ null); // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 39726         // There is a typeMap associated with this command-line option so use it to map value back to its name

./node_modules/typescript/lib/tsserver.js 39745                 // tsconfig only options cannot be specified via command line,

./node_modules/typescript/lib/tsserver.js 39747                 if (optionsNameMap.has(name) && (optionsNameMap.get(name).category === ts.Diagnostics.Command_line_Options || optionsNameMap.get(name).category === ts.Diagnostics.Output_Formatting)) {

./node_modules/typescript/lib/tsserver.js 39769                             // There is a typeMap associated with this command-line option so use it to map value back to its name

./node_modules/typescript/lib/tsserver.js 39782      * Generate tsconfig configuration when running command line "--init"

./node_modules/typescript/lib/tsserver.js 39783      * @param options commandlineOptions to be generated into tsconfig.json

./node_modules/typescript/lib/tsserver.js 39816             var categoriesToSkip = [ts.Diagnostics.Command_line_Options, ts.Diagnostics.Editor_Support, ts.Diagnostics.Compiler_Diagnostics, ts.Diagnostics.Backwards_Compatibility, ts.Diagnostics.Watch_and_Build_Modes, ts.Diagnostics.Output_Formatting];

./node_modules/typescript/lib/tsserver.js 39942         return x === undefined || x === null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 40444      * NOTE: used \ in place of / above to avoid issues with multiline comments.

./node_modules/typescript/lib/tsserver.js 40456      * NOTE: used \ in place of / above to avoid issues with multiline comments.

./node_modules/typescript/lib/tsserver.js 40851         if (typeof value !== typeOfTag || value === null) { // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 40853                 // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 41135                             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 42037                 // When baseUrl is not specified, the command line parser resolves relative paths to the config file location.

./node_modules/typescript/lib/tsserver.js 43564             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, /*foldState*/ undefined);

./node_modules/typescript/lib/tsserver.js 44133                     // typedef anchored to an A.B.C assignment - we need to bind into B's namespace under name C

./node_modules/typescript/lib/tsserver.js 45451                 //  but be sure to bail on recuring into the type if accept declines the symbol.

./node_modules/typescript/lib/tsserver.js 46590                 addErrorOrSuggestion(isError, "message" in message ? ts.createFileDiagnostic(file, 0, 0, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForFileFromMessageChain(file, message)); // eslint-disable-line no-in-operator

./node_modules/typescript/lib/tsserver.js 46593             addErrorOrSuggestion(isError, "message" in message ? ts.createDiagnosticForNode(location, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForNodeFromMessageChain(location, message)); // eslint-disable-line no-in-operator

./node_modules/typescript/lib/tsserver.js 47629             // generator functions and async functions are not inlined in control flow when immediately invoked

./node_modules/typescript/lib/tsserver.js 50205                     ts.setEmitFlags(typeLiteralNode, (context.flags & 1024 /* MultilineObjectLiterals */) ? 0 : 1 /* SingleLine */);

./node_modules/typescript/lib/tsserver.js 50873                     return ts.getSourceFileOfNode(ts.getNonAugmentationDeclaration(symbol)).fileName; // A resolver may not be provided for baselines and errors - in those cases we use the fileName in full

./node_modules/typescript/lib/tsserver.js 51331                     if (file && ts.isTupleTypeNode(node) && (ts.getLineAndCharacterOfPosition(file, node.pos).line === ts.getLineAndCharacterOfPosition(file, node.end).line)) {

./node_modules/typescript/lib/tsserver.js 51491                 function inlineExportModifiers(statements) {

./node_modules/typescript/lib/tsserver.js 51525                     statements = inlineExportModifiers(statements);

./node_modules/typescript/lib/tsserver.js 52291                             // Inlined JSON types exported with [module.]exports= will already emit an export=, so should use `declare`.

./node_modules/typescript/lib/tsserver.js 62268                             // We can't simply assume invariance, because `Unmeasurable` marks nonlinear relations, for example, a relation tained by

./node_modules/typescript/lib/tsserver.js 66903             var inlineLevel = 0;

./node_modules/typescript/lib/tsserver.js 67895                         // When narrowing a reference to a const variable, non-assigned parameter, or readonly property, we inline

./node_modules/typescript/lib/tsserver.js 67897                         if (!isMatchingReference(reference, expr) && inlineLevel < 5) {

./node_modules/typescript/lib/tsserver.js 67902                                     inlineLevel++;

./node_modules/typescript/lib/tsserver.js 67904                                     inlineLevel--;

./node_modules/typescript/lib/tsserver.js 68071                     // (because the const enum value will not be inlined), or if (2) the alias is an export

./node_modules/typescript/lib/tsserver.js 71059             //   1. if 'isolatedModules' is enabled, because the const enum value will not be inlined, and

./node_modules/typescript/lib/tsserver.js 75055             var trampoline = ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState);

./node_modules/typescript/lib/tsserver.js 75057                 var result = trampoline(node, checkMode);

./node_modules/typescript/lib/tsserver.js 78058                         //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag

./node_modules/typescript/lib/tsserver.js 78065                     //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag

./node_modules/typescript/lib/tsserver.js 81233                     // If not a value, we're interpreting the identifier as a type export, along the lines of (`export { Id as default }`)

./node_modules/typescript/lib/tsserver.js 82745                 // inline property\index accesses only for const enums

./node_modules/typescript/lib/tsserver.js 82847             return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/tsserver.js 82855             return nodeBuilder.typeToTypeNode(getReturnTypeOfSignature(signature), enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/tsserver.js 82863             return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */, tracker);

./node_modules/typescript/lib/tsserver.js 83790             var startLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.pos).line;

./node_modules/typescript/lib/tsserver.js 83791             var endLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.end).line;

./node_modules/typescript/lib/tsserver.js 83993                     // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion

./node_modules/typescript/lib/tsserver.js 85749                 if (end && (raw.generatedLine > end.line ||

./node_modules/typescript/lib/tsserver.js 85750                     (raw.generatedLine === end.line && raw.generatedCharacter > end.character))) {

./node_modules/typescript/lib/tsserver.js 85753                 if (start && (raw.generatedLine < start.line ||

./node_modules/typescript/lib/tsserver.js 85754                     (start.line === raw.generatedLine && raw.generatedCharacter < start.character))) {

./node_modules/typescript/lib/tsserver.js 85785                 var rawGeneratedLine = raw.generatedLine - (start ? start.line : 0);

./node_modules/typescript/lib/tsserver.js 85787                 var rawGeneratedCharacter = start && start.line === raw.generatedLine ? raw.generatedCharacter - start.character : raw.generatedCharacter;

./node_modules/typescript/lib/tsserver.js 85817                 // Emit line delimiters

./node_modules/typescript/lib/tsserver.js 85839                 // 3. Relative source line

./node_modules/typescript/lib/tsserver.js 85898     // Sometimes tools can see the following line as a source mapping url comment, so we mangle it a bit (the [M])

./node_modules/typescript/lib/tsserver.js 85901     function getLineInfo(text, lineStarts) {

./node_modules/typescript/lib/tsserver.js 85903             getLineCount: function () { return lineStarts.length; },

./node_modules/typescript/lib/tsserver.js 85904             getLineText: function (line) { return text.substring(lineStarts[line], lineStarts[line + 1]); }

./node_modules/typescript/lib/tsserver.js 85911     function tryGetSourceMappingURL(lineInfo) {

./node_modules/typescript/lib/tsserver.js 85912         for (var index = lineInfo.getLineCount() - 1; index >= 0; index--) {

./node_modules/typescript/lib/tsserver.js 85913             var line = lineInfo.getLineText(index);

./node_modules/typescript/lib/tsserver.js 85914             var comment = sourceMapCommentRegExp.exec(line);

./node_modules/typescript/lib/tsserver.js 85918             // If we see a non-whitespace/map comment-like line, break, to avoid scanning up the entire file

./node_modules/typescript/lib/tsserver.js 85919             else if (!line.match(whitespaceOrMapCommentRegExp)) {

./node_modules/typescript/lib/tsserver.js 85973                         // new line

./node_modules/typescript/lib/tsserver.js 85980                         // Next entry is on same line - no action needed

./node_modules/typescript/lib/tsserver.js 86513     function isSimpleInlineableExpression(expression) {

./node_modules/typescript/lib/tsserver.js 86516     ts.isSimpleInlineableExpression = isSimpleInlineableExpression;

./node_modules/typescript/lib/tsserver.js 86698         return context.factory.inlineExpressions(expressions) || context.factory.createOmittedExpression();

./node_modules/typescript/lib/tsserver.js 86751      * @param hoistTempVariables Indicates whether temporary variables should not be recorded in-line.

./node_modules/typescript/lib/tsserver.js 86785                 var value = context.factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/tsserver.js 86801             /*type*/ undefined, pendingExpressions_1 ? context.factory.inlineExpressions(ts.append(pendingExpressions_1, value)) : value);

./node_modules/typescript/lib/tsserver.js 86813                 value = context.factory.inlineExpressions(ts.append(pendingExpressions, value));

./node_modules/typescript/lib/tsserver.js 86839                     if (!ts.isSimpleInlineableExpression(initializer) && ts.isBindingOrAssignmentPattern(bindingTarget)) {

./node_modules/typescript/lib/tsserver.js 86999         if (initializer && !ts.isSimpleInlineableExpression(initializer))

./node_modules/typescript/lib/tsserver.js 87150         // Examples: `\n` is converted to "\\n", a template string with a newline to "\n".

./node_modules/typescript/lib/tsserver.js 87162         // Newline normalization:

./node_modules/typescript/lib/tsserver.js 88704                 return generateNameForComputedPropertyName && !ts.isSimpleInlineableExpression(name.expression)

./node_modules/typescript/lib/tsserver.js 88731                 if (!ts.isSimpleInlineableExpression(innerExpression)) {

./node_modules/typescript/lib/tsserver.js 88961                 return ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/tsserver.js 89925          * Tracks what computed name expressions originating from elided names must be inlined

./node_modules/typescript/lib/tsserver.js 90079                 node = factory.updateComputedPropertyName(node, factory.inlineExpressions(expressions));

./node_modules/typescript/lib/tsserver.js 90138             // If it's not inlineable, then we emit an expression after the class which assigns

./node_modules/typescript/lib/tsserver.js 90141             if (expr && !ts.isSimpleInlineableExpression(expr)) {

./node_modules/typescript/lib/tsserver.js 90255                             if (ts.isSimpleInlineableExpression(node.operand.argumentExpression)) {

./node_modules/typescript/lib/tsserver.js 90290             if (ts.isSimpleInlineableExpression(receiver)) {

./node_modules/typescript/lib/tsserver.js 90366                     factory.inlineExpressions(ts.compact(__spreadArray(__spreadArray([], pendingExpressions, true), [node], false))) :

./node_modules/typescript/lib/tsserver.js 90398                                 if (!ts.isSimpleInlineableExpression(setterName)) {

./node_modules/typescript/lib/tsserver.js 90549                 statements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/tsserver.js 90570             // then we want to output the pendingExpressions as statements, not as inlined

./node_modules/typescript/lib/tsserver.js 90600                         pendingStatements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/tsserver.js 90606                         return factory.inlineExpressions([factory.createAssignment(temp, classExpression), temp]);

./node_modules/typescript/lib/tsserver.js 90628                     return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/tsserver.js 90820             var propertyName = ts.isComputedPropertyName(property.name) && !ts.isSimpleInlineableExpression(property.name.expression)

./node_modules/typescript/lib/tsserver.js 91035          * value of the result or the expression itself if the value is either unused or safe to inline into multiple locations

./node_modules/typescript/lib/tsserver.js 91042                 var inlinable = ts.isSimpleInlineableExpression(innerExpression);

./node_modules/typescript/lib/tsserver.js 91689             return factory.inlineExpressions(ts.map(variables, transformInitializedVariable));

./node_modules/typescript/lib/tsserver.js 91975                 factory.createObjectLiteralExpression(accessors, /* multiline */ true)

./node_modules/typescript/lib/tsserver.js 92470                 factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), callValues]) :

./node_modules/typescript/lib/tsserver.js 93294                     var lineCol = ts.getLineAndCharacterOfPosition(originalFile, location.pos);

./node_modules/typescript/lib/tsserver.js 93297                         factory.createPropertyAssignment("lineNumber", factory.createNumericLiteral(lineCol.line + 1)),

./node_modules/typescript/lib/tsserver.js 93298                         factory.createPropertyAssignment("columnNumber", factory.createNumericLiteral(lineCol.character + 1))

./node_modules/typescript/lib/tsserver.js 93389                 // Always recreate the literal to escape any escape sequences or newlines which may be in the original jsx string and which

./node_modules/typescript/lib/tsserver.js 93410          * JSX trims whitespace at the end and beginning of lines, except that the

./node_modules/typescript/lib/tsserver.js 93411          * start/end of a tag is considered a start/end of a line only if that line is

./node_modules/typescript/lib/tsserver.js 93412          * on the same line as the closing tag. See examples in

./node_modules/typescript/lib/tsserver.js 93417          * - If there is only one line, return it.

./node_modules/typescript/lib/tsserver.js 93418          * - If there is only whitespace (but multiple lines), return `undefined`.

./node_modules/typescript/lib/tsserver.js 93419          * - Split the text into lines.

./node_modules/typescript/lib/tsserver.js 93420          * - 'trimRight' the first line, 'trimLeft' the last line, 'trim' middle lines.

./node_modules/typescript/lib/tsserver.js 93421          * - Decode entities on each line (individually).

./node_modules/typescript/lib/tsserver.js 93422          * - Remove empty lines and join the rest with " ".

./node_modules/typescript/lib/tsserver.js 93426             // First non-whitespace character on this line.

./node_modules/typescript/lib/tsserver.js 93428             // Last non-whitespace character on this line.

./node_modules/typescript/lib/tsserver.js 93430             // These initial values are special because the first line is:

./node_modules/typescript/lib/tsserver.js 93432             // but lastNonWhitespace = -1 as a special flag to indicate that we *don't* include the line if it's all whitespace.

./node_modules/typescript/lib/tsserver.js 93436                     // If we've seen any non-whitespace characters on this line, add the 'trim' of the line.

./node_modules/typescript/lib/tsserver.js 93437                     // (lastNonWhitespace === -1 is a special flag to detect whether the first line is all whitespace.)

./node_modules/typescript/lib/tsserver.js 93441                     // Reset firstNonWhitespace for the next line.

./node_modules/typescript/lib/tsserver.js 93453                 // Last line had a non-whitespace character. Emit the 'trimLeft', meaning keep trailing whitespace.

./node_modules/typescript/lib/tsserver.js 93455                 // Last line was all whitespace, so ignore it

./node_modules/typescript/lib/tsserver.js 93708         oline: 0x203E,

./node_modules/typescript/lib/tsserver.js 94558             // The assumption is that no prior step in the pipeline has added any prologue directives.

./node_modules/typescript/lib/tsserver.js 95189             var multiLine = false; // indicates whether the block *must* be emitted as multiple lines

./node_modules/typescript/lib/tsserver.js 95190             var singleLine = false; // indicates whether the block *may* be emitted as a single line

./node_modules/typescript/lib/tsserver.js 95212                 // If the original body was a multi-line block, this must be a multi-line block.

./node_modules/typescript/lib/tsserver.js 95246             // If we added any final generated statements, this must be a multi-line block

./node_modules/typescript/lib/tsserver.js 95360                     updated = ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(assignments)), node);

./node_modules/typescript/lib/tsserver.js 95676                 ? factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), values])

./node_modules/typescript/lib/tsserver.js 95738             // new line

./node_modules/typescript/lib/tsserver.js 95740             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/tsserver.js 96650          * @param multiLine A value indicating whether the result should be emitted on multiple lines.

./node_modules/typescript/lib/tsserver.js 97714                 return ts.setSourceMapRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/tsserver.js 97822             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/tsserver.js 97830                         emitWorker(1 /* Statement */, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/tsserver.js 97852                         emitWorker(1 /* Statement */, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/tsserver.js 97858             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/tsserver.js 97987          * @param multiLine Whether array literals created should be emitted on multiple lines.

./node_modules/typescript/lib/tsserver.js 98054             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/tsserver.js 98057                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(expressions)));

./node_modules/typescript/lib/tsserver.js 98217                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/tsserver.js 98399                     ? factory.inlineExpressions(ts.map(variables, transformInitializedVariable))

./node_modules/typescript/lib/tsserver.js 98516                     return createInlineBreak(label, /*location*/ node);

./node_modules/typescript/lib/tsserver.js 98535                     return createInlineBreak(label, /*location*/ node);

./node_modules/typescript/lib/tsserver.js 98545             return createInlineReturn(ts.visitNode(node.expression, visitor, ts.isExpression), 

./node_modules/typescript/lib/tsserver.js 98628                                 createInlineBreak(clauseLabels[i], /*location*/ clause.expression)

./node_modules/typescript/lib/tsserver.js 99219         function createInlineBreak(label, location) {

./node_modules/typescript/lib/tsserver.js 99232         function createInlineReturn(expression, location) {

./node_modules/typescript/lib/tsserver.js 100720                     var statement = ts.setOriginalNode(ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node), node);

./node_modules/typescript/lib/tsserver.js 101511                 /*type*/ undefined, factory.createObjectLiteralExpression(exportedNames, /*multiline*/ true))

./node_modules/typescript/lib/tsserver.js 101553             ], /*multiline*/ true));

./node_modules/typescript/lib/tsserver.js 101603                                     /*typeArguments*/ undefined, [factory.createObjectLiteralExpression(properties, /*multiline*/ true)])));

./node_modules/typescript/lib/tsserver.js 101792                 statements = ts.append(statements, ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node));

./node_modules/typescript/lib/tsserver.js 102242                 return expressions ? factory.inlineExpressions(expressions) : factory.createOmittedExpression();

./node_modules/typescript/lib/tsserver.js 103337     var declarationEmitNodeBuilderFlags = 1024 /* MultilineObjectLiterals */ |

./node_modules/typescript/lib/tsserver.js 104160             if (ts.isTupleTypeNode(input) && (ts.getLineAndCharacterOfPosition(currentSourceFile, input.pos).line === ts.getLineAndCharacterOfPosition(currentSourceFile, input.end).line)) {

./node_modules/typescript/lib/tsserver.js 105318         return (options.sourceMap && !options.inlineSourceMap) ? jsFilePath + ".map" : undefined;

./node_modules/typescript/lib/tsserver.js 105454         ts.Debug.assert(ts.contains(commandLine.fileNames, inputFileName), "Expected fileName to be present in command line");

./node_modules/typescript/lib/tsserver.js 105496         var sourceMapDataList = (compilerOptions.sourceMap || compilerOptions.inlineSourceMap || ts.getAreDeclarationMapsEnabled(compilerOptions)) ? [] : undefined;

./node_modules/typescript/lib/tsserver.js 105588                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/tsserver.js 105589                 inlineSources: compilerOptions.inlineSources,

./node_modules/typescript/lib/tsserver.js 105641                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/tsserver.js 105665                     // Explicitly do not passthru either `inline` option

./node_modules/typescript/lib/tsserver.js 105714                     writer.writeComment("//# " + "sourceMappingURL" + "=" + sourceMappingURL); // Tools can sometimes see this line as a source mapping url comment

./node_modules/typescript/lib/tsserver.js 105731             return (mapOptions.sourceMap || mapOptions.inlineSourceMap)

./node_modules/typescript/lib/tsserver.js 105759             if (mapOptions.inlineSourceMap) {

./node_modules/typescript/lib/tsserver.js 105877         // error if no source map or for now if inline sourcemap

./node_modules/typescript/lib/tsserver.js 105878         if ((sourceMapFilePath && !sourceMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/tsserver.js 105879             return sourceMapFilePath || "inline sourcemap decoding";

./node_modules/typescript/lib/tsserver.js 105885         // error if no source map or for now if inline sourcemap

./node_modules/typescript/lib/tsserver.js 105886         if ((declarationMapPath && !declarationMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/tsserver.js 105887             return declarationMapPath || "inline sourcemap decoding";

./node_modules/typescript/lib/tsserver.js 105961     var PipelinePhase;

./node_modules/typescript/lib/tsserver.js 105962     (function (PipelinePhase) {

./node_modules/typescript/lib/tsserver.js 105963         PipelinePhase[PipelinePhase["Notification"] = 0] = "Notification";

./node_modules/typescript/lib/tsserver.js 105964         PipelinePhase[PipelinePhase["Substitution"] = 1] = "Substitution";

./node_modules/typescript/lib/tsserver.js 105965         PipelinePhase[PipelinePhase["Comments"] = 2] = "Comments";

./node_modules/typescript/lib/tsserver.js 105966         PipelinePhase[PipelinePhase["SourceMaps"] = 3] = "SourceMaps";

./node_modules/typescript/lib/tsserver.js 105967         PipelinePhase[PipelinePhase["Emit"] = 4] = "Emit";

./node_modules/typescript/lib/tsserver.js 105968     })(PipelinePhase || (PipelinePhase = {}));

./node_modules/typescript/lib/tsserver.js 105985         var preserveSourceNewlines = printerOptions.preserveSourceNewlines; // Can be overridden inside nodes with the `IgnoreSourceNewlines` emit flag.

./node_modules/typescript/lib/tsserver.js 106214             pipelineEmit(hint, node, /*parenthesizerRule*/ undefined);

./node_modules/typescript/lib/tsserver.js 106251             pipelineEmit(4 /* Unspecified */, node, parenthesizerRule);

./node_modules/typescript/lib/tsserver.js 106257             pipelineEmit(2 /* IdentifierName */, node, /*parenthesizerRule*/ undefined);

./node_modules/typescript/lib/tsserver.js 106262             pipelineEmit(1 /* Expression */, node, parenthesizerRule);

./node_modules/typescript/lib/tsserver.js 106265             pipelineEmit(ts.isStringLiteral(node) ? 6 /* JsxAttributeValue */ : 4 /* Unspecified */, node);

./node_modules/typescript/lib/tsserver.js 106268             if (preserveSourceNewlines && (ts.getEmitFlags(node) & 134217728 /* IgnoreSourceNewlines */)) {

./node_modules/typescript/lib/tsserver.js 106269                 preserveSourceNewlines = false;

./node_modules/typescript/lib/tsserver.js 106272         function afterEmitNode(savedPreserveSourceNewlines) {

./node_modules/typescript/lib/tsserver.js 106273             preserveSourceNewlines = savedPreserveSourceNewlines;

./node_modules/typescript/lib/tsserver.js 106275         function pipelineEmit(emitHint, node, parenthesizerRule) {

./node_modules/typescript/lib/tsserver.js 106277             var pipelinePhase = getPipelinePhase(0 /* Notification */, emitHint, node);

./node_modules/typescript/lib/tsserver.js 106278             pipelinePhase(emitHint, node);

./node_modules/typescript/lib/tsserver.js 106291         function getPipelinePhase(phase, emitHint, node) {

./node_modules/typescript/lib/tsserver.js 106295                         return pipelineEmitWithNotification;

./node_modules/typescript/lib/tsserver.js 106303                         return pipelineEmitWithSubstitution;

./node_modules/typescript/lib/tsserver.js 106308                         return pipelineEmitWithComments;

./node_modules/typescript/lib/tsserver.js 106313                         return pipelineEmitWithSourceMaps;

./node_modules/typescript/lib/tsserver.js 106317                     return pipelineEmitWithHint;

./node_modules/typescript/lib/tsserver.js 106322         function getNextPipelinePhase(currentPhase, emitHint, node) {

./node_modules/typescript/lib/tsserver.js 106323             return getPipelinePhase(currentPhase + 1, emitHint, node);

./node_modules/typescript/lib/tsserver.js 106325         function pipelineEmitWithNotification(hint, node) {

./node_modules/typescript/lib/tsserver.js 106326             var pipelinePhase = getNextPipelinePhase(0 /* Notification */, hint, node);

./node_modules/typescript/lib/tsserver.js 106327             onEmitNode(hint, node, pipelinePhase);

./node_modules/typescript/lib/tsserver.js 106329         function pipelineEmitWithHint(hint, node) {

./node_modules/typescript/lib/tsserver.js 106331             if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsserver.js 106332                 var savedPreserveSourceNewlines = preserveSourceNewlines;

./node_modules/typescript/lib/tsserver.js 106334                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/tsserver.js 106335                 afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/tsserver.js 106338                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/tsserver.js 106344         function pipelineEmitWithHintWorker(hint, node) {

./node_modules/typescript/lib/tsserver.js 106799         function pipelineEmitWithSubstitution(hint, node) {

./node_modules/typescript/lib/tsserver.js 106800             var pipelinePhase = getNextPipelinePhase(1 /* Substitution */, hint, node);

./node_modules/typescript/lib/tsserver.js 106804             pipelinePhase(hint, node);

./node_modules/typescript/lib/tsserver.js 106899             if ((printerOptions.sourceMap || printerOptions.inlineSourceMap)

./node_modules/typescript/lib/tsserver.js 107274             pipelineEmit(3 /* MappedTypeParameter */, node.typeParameter);

./node_modules/typescript/lib/tsserver.js 107370             var linesBeforeDot = getLinesBetweenNodes(node, node.expression, token);

./node_modules/typescript/lib/tsserver.js 107371             var linesAfterDot = getLinesBetweenNodes(node, token, node.name);

./node_modules/typescript/lib/tsserver.js 107372             writeLinesAndIndent(linesBeforeDot, /*writeSpaceIfNotIndenting*/ false);

./node_modules/typescript/lib/tsserver.js 107386             writeLinesAndIndent(linesAfterDot, /*writeSpaceIfNotIndenting*/ false);

./node_modules/typescript/lib/tsserver.js 107388             decreaseIndentIf(linesBeforeDot, linesAfterDot);

./node_modules/typescript/lib/tsserver.js 107535             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, /*foldState*/ undefined);

./node_modules/typescript/lib/tsserver.js 107539                     state.preserveSourceNewlinesStack[state.stackIndex] = preserveSourceNewlines;

./node_modules/typescript/lib/tsserver.js 107555                         preserveSourceNewlinesStack: [undefined],

./node_modules/typescript/lib/tsserver.js 107570                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, operatorToken);

./node_modules/typescript/lib/tsserver.js 107571                 var linesAfterOperator = getLinesBetweenNodes(node, operatorToken, node.right);

./node_modules/typescript/lib/tsserver.js 107572                 writeLinesAndIndent(linesBeforeOperator, isCommaOperator);

./node_modules/typescript/lib/tsserver.js 107576                 writeLinesAndIndent(linesAfterOperator, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/tsserver.js 107582                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, node.operatorToken);

./node_modules/typescript/lib/tsserver.js 107583                 var linesAfterOperator = getLinesBetweenNodes(node, node.operatorToken, node.right);

./node_modules/typescript/lib/tsserver.js 107584                 decreaseIndentIf(linesBeforeOperator, linesAfterOperator);

./node_modules/typescript/lib/tsserver.js 107586                     var savedPreserveSourceNewlines = state.preserveSourceNewlinesStack[state.stackIndex];

./node_modules/typescript/lib/tsserver.js 107592                     afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/tsserver.js 107605                 var pipelinePhase = getPipelinePhase(0 /* Notification */, 1 /* Expression */, next);

./node_modules/typescript/lib/tsserver.js 107606                 if (pipelinePhase === pipelineEmitWithSubstitution) {

./node_modules/typescript/lib/tsserver.js 107609                     pipelinePhase = getNextPipelinePhase(1 /* Substitution */, 1 /* Expression */, next);

./node_modules/typescript/lib/tsserver.js 107612                 if (pipelinePhase === pipelineEmitWithComments ||

./node_modules/typescript/lib/tsserver.js 107613                     pipelinePhase === pipelineEmitWithSourceMaps ||

./node_modules/typescript/lib/tsserver.js 107614                     pipelinePhase === pipelineEmitWithHint) {

./node_modules/typescript/lib/tsserver.js 107620                 pipelinePhase(1 /* Expression */, next);

./node_modules/typescript/lib/tsserver.js 107624             var linesBeforeQuestion = getLinesBetweenNodes(node, node.condition, node.questionToken);

./node_modules/typescript/lib/tsserver.js 107625             var linesAfterQuestion = getLinesBetweenNodes(node, node.questionToken, node.whenTrue);

./node_modules/typescript/lib/tsserver.js 107626             var linesBeforeColon = getLinesBetweenNodes(node, node.whenTrue, node.colonToken);

./node_modules/typescript/lib/tsserver.js 107627             var linesAfterColon = getLinesBetweenNodes(node, node.colonToken, node.whenFalse);

./node_modules/typescript/lib/tsserver.js 107629             writeLinesAndIndent(linesBeforeQuestion, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/tsserver.js 107631             writeLinesAndIndent(linesAfterQuestion, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/tsserver.js 107633             decreaseIndentIf(linesBeforeQuestion, linesAfterQuestion);

./node_modules/typescript/lib/tsserver.js 107634             writeLinesAndIndent(linesBeforeColon, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/tsserver.js 107636             writeLinesAndIndent(linesAfterColon, /*writeSpaceIfNotIndenting*/ true);

./node_modules/typescript/lib/tsserver.js 107638             decreaseIndentIf(linesBeforeColon, linesAfterColon);

./node_modules/typescript/lib/tsserver.js 107750             if (ts.isBlock(node.statement) && !preserveSourceNewlines) {

./node_modules/typescript/lib/tsserver.js 107840                 emitTrailingCommentsOfPosition(pos, /*prefixSpace*/ !isJsxExprContext, /*forceNoNewline*/ isJsxExprContext);

./node_modules/typescript/lib/tsserver.js 107957             // We must emit a function body as a single-line body in the following case:

./node_modules/typescript/lib/tsserver.js 107959             // We must emit a function body as a multi-line body in the following cases:

./node_modules/typescript/lib/tsserver.js 107960             // * The body is explicitly marked as multi-line.

./node_modules/typescript/lib/tsserver.js 107961             // * A non-synthesized body's start and end position are on different lines.

./node_modules/typescript/lib/tsserver.js 107962             // * Any statement in the body starts on a new line.

./node_modules/typescript/lib/tsserver.js 108330                 var isMultiline = currentSourceFile && !ts.nodeIsSynthesized(node) && ts.getLineAndCharacterOfPosition(currentSourceFile, node.pos).line !== ts.getLineAndCharacterOfPosition(currentSourceFile, node.end).line;

./node_modules/typescript/lib/tsserver.js 108331                 if (isMultiline) {

./node_modules/typescript/lib/tsserver.js 108338                 if (isMultiline) {

./node_modules/typescript/lib/tsserver.js 108367                 // treat synthesized nodes as located on the same line for emit purposes

./node_modules/typescript/lib/tsserver.js 108450                     var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/tsserver.js 108451                     for (var _a = 0, lines_2 = lines; _a < lines_2.length; _a++) {

./node_modules/typescript/lib/tsserver.js 108452                         var line = lines_2[_a];

./node_modules/typescript/lib/tsserver.js 108457                         write(line);

./node_modules/typescript/lib/tsserver.js 108880                     pipelineEmit(5 /* EmbeddedStatement */, node);

./node_modules/typescript/lib/tsserver.js 108986                 // Write a line terminator if the parent node was multi-line

./node_modules/typescript/lib/tsserver.js 108987                 if (format & 1 /* MultiLine */ && !(preserveSourceNewlines && (!parentNode || ts.rangeIsOnSingleLine(parentNode, currentSourceFile)))) {

./node_modules/typescript/lib/tsserver.js 108996                 // Write the opening line terminator or leading whitespace.

./node_modules/typescript/lib/tsserver.js 109028                         //          /* End of parameter a */ -> this comment isn't considered to be trailing comment of parameter "a" due to newline

./node_modules/typescript/lib/tsserver.js 109035                         // Write either a line terminator or whitespace to separate the elements.

./node_modules/typescript/lib/tsserver.js 109038                             // If a synthesized node in a single-line list starts on a new

./node_modules/typescript/lib/tsserver.js 109039                             // line, we should increase the indent.

./node_modules/typescript/lib/tsserver.js 109101                 // Write the closing line terminator or closing whitespace.

./node_modules/typescript/lib/tsserver.js 109192             else if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsserver.js 109193                 var lines = getLinesBetweenNodes(parentNode, prevChildNode, nextChildNode);

./node_modules/typescript/lib/tsserver.js 109194                 if (lines) {

./node_modules/typescript/lib/tsserver.js 109195                     writeLine(lines);

./node_modules/typescript/lib/tsserver.js 109206             var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/tsserver.js 109207             var indentation = ts.guessIndentation(lines);

./node_modules/typescript/lib/tsserver.js 109208             for (var _a = 0, lines_3 = lines; _a < lines_3.length; _a++) {

./node_modules/typescript/lib/tsserver.js 109209                 var lineText = lines_3[_a];

./node_modules/typescript/lib/tsserver.js 109210                 var line = indentation ? lineText.slice(indentation) : lineText;

./node_modules/typescript/lib/tsserver.js 109211                 if (line.length) {

./node_modules/typescript/lib/tsserver.js 109213                     write(line);

./node_modules/typescript/lib/tsserver.js 109217         function writeLinesAndIndent(lineCount, writeSpaceIfNotIndenting) {

./node_modules/typescript/lib/tsserver.js 109218             if (lineCount) {

./node_modules/typescript/lib/tsserver.js 109220                 writeLine(lineCount);

./node_modules/typescript/lib/tsserver.js 109239             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/tsserver.js 109249                     // line terminators have already been written as the separating line terminators of the

./node_modules/typescript/lib/tsserver.js 109257                     // The outer list is the list of class members, with one line terminator between the

./node_modules/typescript/lib/tsserver.js 109258                     // constructor and the method. The constructor is written, the separating line terminator

./node_modules/typescript/lib/tsserver.js 109260                     // list, so we look for its leading line terminators. If we didn't know that we had already

./node_modules/typescript/lib/tsserver.js 109261                     // written a newline as part of the parent list, it would appear that we need to write a

./node_modules/typescript/lib/tsserver.js 109262                     // leading newline to start the modifiers.

./node_modules/typescript/lib/tsserver.js 109273                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsserver.js 109285             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/tsserver.js 109294                     if (preserveSourceNewlines && siblingNodePositionsAreComparable(previousNode, nextNode)) {

./node_modules/typescript/lib/tsserver.js 109297                     // If `preserveSourceNewlines` is `false` we do not intend to preserve the effective lines between the

./node_modules/typescript/lib/tsserver.js 109298                     // previous and next node. Instead we naively check whether nodes are on separate lines within the

./node_modules/typescript/lib/tsserver.js 109299                     // same node parent. If so, we intend to preserve a single line terminator. This is less precise and

./node_modules/typescript/lib/tsserver.js 109300                     // expensive than checking with `preserveSourceNewlines` as above, but the goal is not to preserve the

./node_modules/typescript/lib/tsserver.js 109301                     // effective source lines between two sibling nodes.

./node_modules/typescript/lib/tsserver.js 109302                     else if (!preserveSourceNewlines && originalNodesHaveSameParent(previousNode, nextNode)) {

./node_modules/typescript/lib/tsserver.js 109305                     // If the two nodes are not comparable, add a line terminator based on the format that can indicate

./node_modules/typescript/lib/tsserver.js 109306                     // whether new lines are preferred or not.

./node_modules/typescript/lib/tsserver.js 109319             if (format & 2 /* PreserveLines */ || preserveSourceNewlines) {

./node_modules/typescript/lib/tsserver.js 109328                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsserver.js 109344             // If 'preserveSourceNewlines' is disabled, we should never call this function

./node_modules/typescript/lib/tsserver.js 109346             ts.Debug.assert(!!preserveSourceNewlines);

./node_modules/typescript/lib/tsserver.js 109347             // We start by measuring the line difference from a position to its adjacent comments,

./node_modules/typescript/lib/tsserver.js 109348             // so that this is counted as a one-line difference, not two:

./node_modules/typescript/lib/tsserver.js 109353             var lines = getLineDifference(/*includeComments*/ true);

./node_modules/typescript/lib/tsserver.js 109354             if (lines === 0) {

./node_modules/typescript/lib/tsserver.js 109355                 // However, if the line difference considering comments was 0, we might have this:

./node_modules/typescript/lib/tsserver.js 109361                 // a one-line difference, not zero.

./node_modules/typescript/lib/tsserver.js 109364             return lines;

./node_modules/typescript/lib/tsserver.js 109367             var leadingNewlines = preserveSourceNewlines && getLeadingLineTerminatorCount(parent, [node], 0 /* None */);

./node_modules/typescript/lib/tsserver.js 109368             if (leadingNewlines) {

./node_modules/typescript/lib/tsserver.js 109369                 writeLinesAndIndent(leadingNewlines, /*writeLinesIfNotIndenting*/ false);

./node_modules/typescript/lib/tsserver.js 109371             return !!leadingNewlines;

./node_modules/typescript/lib/tsserver.js 109374             var trailingNewlines = preserveSourceNewlines && getClosingLineTerminatorCount(parent, [node], 0 /* None */);

./node_modules/typescript/lib/tsserver.js 109375             if (trailingNewlines) {

./node_modules/typescript/lib/tsserver.js 109376                 writeLine(trailingNewlines);

./node_modules/typescript/lib/tsserver.js 109396             // Always use a newline for synthesized code if the synthesizer desires it.

./node_modules/typescript/lib/tsserver.js 109401                 if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsserver.js 109814         function pipelineEmitWithComments(hint, node) {

./node_modules/typescript/lib/tsserver.js 109815             var pipelinePhase = getNextPipelinePhase(2 /* Comments */, hint, node);

./node_modules/typescript/lib/tsserver.js 109820             pipelinePhase(hint, node);

./node_modules/typescript/lib/tsserver.js 109890             if (comment.hasLeadingNewline || comment.kind === 2 /* SingleLineCommentTrivia */) {

./node_modules/typescript/lib/tsserver.js 109912             var lineMap = comment.kind === 3 /* MultiLineCommentTrivia */ ? ts.computeLineStarts(text) : undefined;

./node_modules/typescript/lib/tsserver.js 109913             ts.writeCommentRange(text, lineMap, writer, 0, text.length, newLine);

./node_modules/typescript/lib/tsserver.js 110046         function emitTrailingCommentsOfPosition(pos, prefixSpace, forceNoNewline) {

./node_modules/typescript/lib/tsserver.js 110051             forEachTrailingCommentToEmit(pos, prefixSpace ? emitTrailingComment : forceNoNewline ? emitTrailingCommentOfPositionNoNewline : emitTrailingCommentOfPosition);

./node_modules/typescript/lib/tsserver.js 110054         function emitTrailingCommentOfPositionNoNewline(commentPos, commentEnd, kind) {

./node_modules/typescript/lib/tsserver.js 110060                 writer.writeLine(); // still write a newline for single-line comments, so closing tokens aren't written on the same line

./node_modules/typescript/lib/tsserver.js 110117         function emitComment(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/tsserver.js 110121             ts.writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine);

./node_modules/typescript/lib/tsserver.js 110139         function pipelineEmitWithSourceMaps(hint, node) {

./node_modules/typescript/lib/tsserver.js 110140             var pipelinePhase = getNextPipelinePhase(3 /* SourceMaps */, hint, node);

./node_modules/typescript/lib/tsserver.js 110142             pipelinePhase(hint, node);

./node_modules/typescript/lib/tsserver.js 110201             var _a = ts.getLineAndCharacterOfPosition(sourceMapSource, pos), sourceLine = _a.line, sourceCharacter = _a.character;

./node_modules/typescript/lib/tsserver.js 110260             if (printerOptions.inlineSources) {

./node_modules/typescript/lib/tsserver.js 111101             var _a = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start), line = _a.line, character = _a.character; // TODO: GH#18217

./node_modules/typescript/lib/tsserver.js 111104             return relativeFileName + "(" + (line + 1) + "," + (character + 1) + "): " + errorMessage;

./node_modules/typescript/lib/tsserver.js 111128             case ts.DiagnosticCategory.Suggestion: return ts.Debug.fail("Should never get an Info diagnostic on the command line.");

./node_modules/typescript/lib/tsserver.js 111138         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character;

./node_modules/typescript/lib/tsserver.js 111139         var _b = ts.getLineAndCharacterOfPosition(file, start + length), lastLine = _b.line, lastLineChar = _b.character;

./node_modules/typescript/lib/tsserver.js 111140         var lastLineInFile = ts.getLineAndCharacterOfPosition(file, file.text.length).line;

./node_modules/typescript/lib/tsserver.js 111149             // If the error spans over 5 lines, we'll only show the first 2 and last 2 lines,

./node_modules/typescript/lib/tsserver.js 111150             // so we'll skip ahead to the second-to-last line.

./node_modules/typescript/lib/tsserver.js 111155             var lineStart = ts.getPositionOfLineAndCharacter(file, i, 0);

./node_modules/typescript/lib/tsserver.js 111156             var lineEnd = i < lastLineInFile ? ts.getPositionOfLineAndCharacter(file, i + 1, 0) : file.text.length;

./node_modules/typescript/lib/tsserver.js 111157             var lineContent = file.text.slice(lineStart, lineEnd);

./node_modules/typescript/lib/tsserver.js 111158             lineContent = ts.trimStringEnd(lineContent); // trim from end

./node_modules/typescript/lib/tsserver.js 111159             lineContent = lineContent.replace(/\t/g, " "); // convert tabs to single spaces

./node_modules/typescript/lib/tsserver.js 111160             // Output the gutter and the actual contents of the line.

./node_modules/typescript/lib/tsserver.js 111162             context += lineContent + host.getNewLine();

./node_modules/typescript/lib/tsserver.js 111163             // Output the gutter and the error span for the line using tildes.

./node_modules/typescript/lib/tsserver.js 111167                 // If we're on the last line, then limit it to the last character of the last line.

./node_modules/typescript/lib/tsserver.js 111168                 // Otherwise, we'll just squiggle the rest of the line, giving 'slice' no end position.

./node_modules/typescript/lib/tsserver.js 111170                 context += lineContent.slice(0, firstLineChar).replace(/\S/g, " ");

./node_modules/typescript/lib/tsserver.js 111171                 context += lineContent.slice(firstLineChar, lastCharForLine).replace(/./g, "~");

./node_modules/typescript/lib/tsserver.js 111174                 context += lineContent.slice(0, lastLineChar).replace(/./g, "~");

./node_modules/typescript/lib/tsserver.js 111177                 // Squiggle the entire line.

./node_modules/typescript/lib/tsserver.js 111178                 context += lineContent.replace(/./g, "~");

./node_modules/typescript/lib/tsserver.js 111187         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character; // TODO: GH#18217

./node_modules/typescript/lib/tsserver.js 111574         structureIsReused = tryReuseStructureFromOldProgram(); // eslint-disable-line prefer-const

./node_modules/typescript/lib/tsserver.js 111676         // Release commandlines that new program does not use

./node_modules/typescript/lib/tsserver.js 112490          * @returns The line index marked as preceding the diagnostic, or -1 if none was.

./node_modules/typescript/lib/tsserver.js 112497             // Start out with the line just before the text

./node_modules/typescript/lib/tsserver.js 112498             var lineStarts = ts.getLineStarts(file);

./node_modules/typescript/lib/tsserver.js 112499             var line = ts.computeLineAndCharacterOfPosition(lineStarts, start).line - 1; // TODO: GH#18217

./node_modules/typescript/lib/tsserver.js 112500             while (line >= 0) {

./node_modules/typescript/lib/tsserver.js 112501                 // As soon as that line is known to have a comment directive, use that

./node_modules/typescript/lib/tsserver.js 112502                 if (directives.markUsed(line)) {

./node_modules/typescript/lib/tsserver.js 112503                     return line;

./node_modules/typescript/lib/tsserver.js 112505                 // Stop searching if the line is not empty and not a comment

./node_modules/typescript/lib/tsserver.js 112506                 var lineText = file.text.slice(lineStarts[line], lineStarts[line + 1]).trim();

./node_modules/typescript/lib/tsserver.js 112507                 if (lineText !== "" && !/^(\s*)\/\/(.*)$/.test(lineText)) {

./node_modules/typescript/lib/tsserver.js 112510                 line--;

./node_modules/typescript/lib/tsserver.js 112853                 while (r.exec(file.text) !== null) { // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 113454             if (options.inlineSourceMap) {

./node_modules/typescript/lib/tsserver.js 113456                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "sourceMap", "inlineSourceMap");

./node_modules/typescript/lib/tsserver.js 113459                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "mapRoot", "inlineSourceMap");

./node_modules/typescript/lib/tsserver.js 113525             if (!options.sourceMap && !options.inlineSourceMap) {

./node_modules/typescript/lib/tsserver.js 113526                 if (options.inlineSources) {

./node_modules/typescript/lib/tsserver.js 113527                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "inlineSources");

./node_modules/typescript/lib/tsserver.js 113530                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "sourceRoot");

./node_modules/typescript/lib/tsserver.js 115729             // eslint-disable-next-line no-empty

./node_modules/typescript/lib/tsserver.js 116715             // eslint-disable-next-line prefer-const

./node_modules/typescript/lib/tsserver.js 117879         var parsedConfigs; // Parsed commandline and watching cached for referenced projects

./node_modules/typescript/lib/tsserver.js 120226         SymbolDisplayPartKind[SymbolDisplayPartKind["lineBreak"] = 6] = "lineBreak";

./node_modules/typescript/lib/tsserver.js 120248         /** Single or multi-line comments */

./node_modules/typescript/lib/tsserver.js 120914         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/tsserver.js 120915         var line = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/tsserver.js 120916         return lineStarts[line];

./node_modules/typescript/lib/tsserver.js 122388         var lineStart;

./node_modules/typescript/lib/tsserver.js 122437             if (lineStart) {

./node_modules/typescript/lib/tsserver.js 122443                 lineStart = false;

./node_modules/typescript/lib/tsserver.js 122464             displayParts.push(lineBreakPart());

./node_modules/typescript/lib/tsserver.js 122465             lineStart = true;

./node_modules/typescript/lib/tsserver.js 122469             lineStart = true;

./node_modules/typescript/lib/tsserver.js 122629     function lineBreakPart() {

./node_modules/typescript/lib/tsserver.js 122630         return displayPart("\n", ts.SymbolDisplayPartKind.lineBreak);

./node_modules/typescript/lib/tsserver.js 122632     ts.lineBreakPart = lineBreakPart;

./node_modules/typescript/lib/tsserver.js 122646             typechecker.writeType(type, enclosingDeclaration, flags | 1024 /* MultilineObjectLiterals */ | 16384 /* UseAliasDefinedOutsideCurrentScope */, writer);

./node_modules/typescript/lib/tsserver.js 122659         flags |= 16384 /* UseAliasDefinedOutsideCurrentScope */ | 1024 /* MultilineObjectLiterals */ | 32 /* WriteTypeArgumentsOfSignature */ | 8192 /* OmitParameterModifiers */;

./node_modules/typescript/lib/tsserver.js 122807             if (text.charCodeAt(i) === 10 /* lineFeed */)

./node_modules/typescript/lib/tsserver.js 123060         var startLine = sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line;

./node_modules/typescript/lib/tsserver.js 123061         var endLine = sourceFile.getLineAndCharacterOfPosition(nextToken.getStart(sourceFile)).line;

./node_modules/typescript/lib/tsserver.js 123830             // lines, just as we do with the end-of-line state. However, this is a burden for implementers,

./node_modules/typescript/lib/tsserver.js 123832             // flatten any nesting when the template stack is non-empty and encode it in the end-of-line state.

./node_modules/typescript/lib/tsserver.js 123834             //  1) When template strings are nested across different lines:

./node_modules/typescript/lib/tsserver.js 123838             //     Where on the second line, you will get the closing of a template,

./node_modules/typescript/lib/tsserver.js 123841             //  2) When substitution expressions have curly braces and the curly brace falls on the next line:

./node_modules/typescript/lib/tsserver.js 123845             //     Where on the second line, you will get the 'return' keyword,

./node_modules/typescript/lib/tsserver.js 124000                 // Check to see if we finished up on a multiline string literal.

./node_modules/typescript/lib/tsserver.js 124009                 // If we have an odd number of backslashes, then the multiline string is unclosed

./node_modules/typescript/lib/tsserver.js 124015                 // Check to see if the multiline comment was unclosed.

./node_modules/typescript/lib/tsserver.js 124118         // (and a newline).  That way when we lex we'll think we're still in a string literal.

./node_modules/typescript/lib/tsserver.js 124120         // If we're in a multiline comment, then prepend: /*

./node_modules/typescript/lib/tsserver.js 124121         // (and a newline).  That way when we lex we'll think we're still in a multiline comment.

./node_modules/typescript/lib/tsserver.js 124409                         // Don't bother with newlines/whitespace.

./node_modules/typescript/lib/tsserver.js 124429                         // for the ||||||| and ======== markers, add a comment for the first line,

./node_modules/typescript/lib/tsserver.js 124430                         // and then lex all subsequent lines up until the end of the conflict marker.

./node_modules/typescript/lib/tsserver.js 124567             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserver.js 124626             // Classify the line that the ||||||| or ======= marker is on as a comment.

./node_modules/typescript/lib/tsserver.js 126619                         var lineStart = ts.getLineStartPositionForPosition(position, sourceFile);

./node_modules/typescript/lib/tsserver.js 126620                         if (!/[^\*|\s(/)]/.test(sourceFile.text.substring(lineStart, position))) {

./node_modules/typescript/lib/tsserver.js 127868                     // If we are sure that the previous property declaration is terminated according to newline or semicolon...

./node_modules/typescript/lib/tsserver.js 128329                         if (ts.getLineAndCharacterOfPosition(sourceFile, contextToken.getEnd()).line !== ts.getLineAndCharacterOfPosition(sourceFile, position).line && ts.isObjectTypeDeclaration(location)) {

./node_modules/typescript/lib/tsserver.js 128933             // (i.e. the keywords are separated by no comments, no newlines).

./node_modules/typescript/lib/tsserver.js 131214                 var _a = "kind" in relatedSymbol ? relatedSymbol : { kind: undefined, symbol: relatedSymbol }, kind = _a.kind, symbol = _a.symbol; // eslint-disable-line no-in-operator

./node_modules/typescript/lib/tsserver.js 131933                 // get the text from printing the node on a single line without comments...

./node_modules/typescript/lib/tsserver.js 133060             return ts.flatten(ts.intersperse(parts, [ts.lineBreakPart()]));

./node_modules/typescript/lib/tsserver.js 133243          * - The line is all whitespace up to 'position' before performing the insertion.

./node_modules/typescript/lib/tsserver.js 133276             // * The opening comment line

./node_modules/typescript/lib/tsserver.js 133277             // * the first line (without a param) for the object's untagged info (this is also where the caret ends up)

./node_modules/typescript/lib/tsserver.js 133278             // * the '@param'-tagged lines

./node_modules/typescript/lib/tsserver.js 133281             // * the closing comment line

./node_modules/typescript/lib/tsserver.js 133282             // * if the caret was directly in front of the object, then we add an extra line and indentation.

./node_modules/typescript/lib/tsserver.js 133296             var lineStart = ts.getLineStartPositionForPosition(position, sourceFile);

./node_modules/typescript/lib/tsserver.js 133297             var pos = lineStart;

./node_modules/typescript/lib/tsserver.js 133300             return text.slice(lineStart, pos);

./node_modules/typescript/lib/tsserver.js 133523          * matches because of the newline, whereas

./node_modules/typescript/lib/tsserver.js 134000                 if ((!ts.isClassDeclaration(a.node) && !ts.isClassDeclaration(b.node)) // If neither outline node is a class

./node_modules/typescript/lib/tsserver.js 134035                 // We merge if the outline node previous to b (bIndex - 1) is already part of the current class

./node_modules/typescript/lib/tsserver.js 134036                 // We do this so that statements between class members that do not generate outline nodes do not split up the class outline:

./node_modules/typescript/lib/tsserver.js 134037                 // Ex This should produce one outline node C:

./node_modules/typescript/lib/tsserver.js 134039                 // Ex This will produce 3 outline nodes: C, a, C

./node_modules/typescript/lib/tsserver.js 134173                     // We may get a string with newlines or other whitespace in the case of an object dereference

./node_modules/typescript/lib/tsserver.js 134392             // Replaces ECMAScript line terminators and removes the trailing `\` from each line:

./node_modules/typescript/lib/tsserver.js 134888             var lineStarts = sourceFile.getLineStarts();

./node_modules/typescript/lib/tsserver.js 134889             for (var _i = 0, lineStarts_1 = lineStarts; _i < lineStarts_1.length; _i++) {

./node_modules/typescript/lib/tsserver.js 134890                 var currentLineStart = lineStarts_1[_i];

./node_modules/typescript/lib/tsserver.js 134891                 var lineEnd = sourceFile.getLineEndOfPosition(currentLineStart);

./node_modules/typescript/lib/tsserver.js 134892                 var lineText = sourceFile.text.substring(currentLineStart, lineEnd);

./node_modules/typescript/lib/tsserver.js 134893                 var result = isRegionDelimiter(lineText);

./node_modules/typescript/lib/tsserver.js 134898                     var span = ts.createTextSpanFromBounds(sourceFile.text.indexOf("//", currentLineStart), lineEnd);

./node_modules/typescript/lib/tsserver.js 134904                         region.textSpan.length = lineEnd - region.textSpan.start;

./node_modules/typescript/lib/tsserver.js 134905                         region.hintSpan.length = lineEnd - region.textSpan.start;

./node_modules/typescript/lib/tsserver.js 134912         function isRegionDelimiter(lineText) {

./node_modules/typescript/lib/tsserver.js 134915             lineText = ts.trimStringStart(lineText);

./node_modules/typescript/lib/tsserver.js 134916             if (!ts.startsWith(lineText, "\/\/")) {

./node_modules/typescript/lib/tsserver.js 134917                 return null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 134919             lineText = ts.trimString(lineText.slice(2));

./node_modules/typescript/lib/tsserver.js 134920             return regionDelimiterRegExp.exec(lineText);

./node_modules/typescript/lib/tsserver.js 134935                         // never fold region delimiters into single-line comment regions

./node_modules/typescript/lib/tsserver.js 134942                         // For single line comments, combine consecutive ones (2 or more) into

./node_modules/typescript/lib/tsserver.js 134961                 // Only outline spans of two or more consecutive single line comments

./node_modules/typescript/lib/tsserver.js 135092                 // Otherwise, the collapsed section will include the end of the previous line.

./node_modules/typescript/lib/tsserver.js 136136                         // Blocks with braces, brackets, parens, or JSX tags on separate lines should be

./node_modules/typescript/lib/tsserver.js 137379         // Dont support sourcemaps that contain inlined sources

./node_modules/typescript/lib/tsserver.js 137384     function createSourceFileLike(text, lineMap) {

./node_modules/typescript/lib/tsserver.js 137387             lineMap: lineMap,

./node_modules/typescript/lib/tsserver.js 137841                                     displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/tsserver.js 138020                             displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/tsserver.js 138175                     displayParts.push(ts.lineBreakPart());

./node_modules/typescript/lib/tsserver.js 138446                     var startLine = this.sourceFile.getLineAndCharacterOfPosition(this.currentTokenSpan.pos).line;

./node_modules/typescript/lib/tsserver.js 138447                     var endLine = this.sourceFile.getLineAndCharacterOfPosition(this.nextTokenSpan.pos).line;

./node_modules/typescript/lib/tsserver.js 138465                 var startLine = this.sourceFile.getLineAndCharacterOfPosition(node.getStart(this.sourceFile)).line;

./node_modules/typescript/lib/tsserver.js 138466                 var endLine = this.sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line;

./node_modules/typescript/lib/tsserver.js 138473                     var startLine = this.sourceFile.getLineAndCharacterOfPosition(openBrace.getEnd()).line;

./node_modules/typescript/lib/tsserver.js 138474                     var endLine = this.sourceFile.getLineAndCharacterOfPosition(closeBrace.getStart(this.sourceFile)).line;

./node_modules/typescript/lib/tsserver.js 138638                         // move past new line

./node_modules/typescript/lib/tsserver.js 138677                         return scanner.reScanJsxToken(/* allowMultilineJsxText */ false);

./node_modules/typescript/lib/tsserver.js 138779             var anyTokenIncludingMultilineComments = tokenRangeFrom(__spreadArray(__spreadArray([], allTokens, true), [3 /* MultiLineCommentTrivia */], false));

./node_modules/typescript/lib/tsserver.js 138797             var functionOpenBraceLeftTokenRange = anyTokenIncludingMultilineComments;

./node_modules/typescript/lib/tsserver.js 138837                 // For functions and control block place } on a new line [multi-line rule]

./node_modules/typescript/lib/tsserver.js 138838                 rule("NewLineBeforeCloseBraceInBlockContext", anyTokenIncludingMultilineComments, 19 /* CloseBraceToken */, [isMultilineBlockContext], 8 /* InsertNewLine */),

./node_modules/typescript/lib/tsserver.js 138839                 // Space/new line after }.

./node_modules/typescript/lib/tsserver.js 138851                 // Insert new line after { and before } in multi-line contexts.

./node_modules/typescript/lib/tsserver.js 138852                 rule("NewLineAfterOpenBraceInBlockContext", 18 /* OpenBraceToken */, anyToken, [isMultilineBlockContext], 8 /* InsertNewLine */),

./node_modules/typescript/lib/tsserver.js 138974                 // Insert a space after { and before } in single-line contexts, but remove space from empty object literals {}.

./node_modules/typescript/lib/tsserver.js 139004                 rule("NewLineBeforeOpenBraceInControl", controlOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForControlBlocks"), isControlDeclContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/tsserver.js 139007                 rule("NewLineBeforeOpenBraceInFunction", functionOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForFunctions"), isFunctionDeclContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/tsserver.js 139009                 rule("NewLineBeforeOpenBraceInTypeScriptDeclWithBlock", typeScriptOpenBraceLeftTokenRange, 18 /* OpenBraceToken */, [isOptionEnabled("placeOpenBraceOnNewLineForFunctions"), isTypeScriptDeclWithBlockContext, isBeforeMultilineBlockContext], 8 /* InsertNewLine */, 1 /* CanDeleteNewLines */),

./node_modules/typescript/lib/tsserver.js 139050          * @param flags whether the rule deletes a line or not, defaults to no-op

./node_modules/typescript/lib/tsserver.js 139172         function isBeforeMultilineBlockContext(context) {

./node_modules/typescript/lib/tsserver.js 139175         function isMultilineBlockContext(context) {

./node_modules/typescript/lib/tsserver.js 139440             var startLine = context.sourceFile.getLineAndCharacterOfPosition(context.currentTokenSpan.pos).line;

./node_modules/typescript/lib/tsserver.js 139441             var endLine = context.sourceFile.getLineAndCharacterOfPosition(nextTokenStart).line;

./node_modules/typescript/lib/tsserver.js 139641             var line = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/tsserver.js 139642             if (line === 0) {

./node_modules/typescript/lib/tsserver.js 139645             // After the enter key, the cursor is now at a new line. The new line may or may not contain non-whitespace characters.

./node_modules/typescript/lib/tsserver.js 139646             // If the new line has only whitespaces, we won't want to format this line, because that would remove the indentation as

./node_modules/typescript/lib/tsserver.js 139648             //  1. the end of the previous line

./node_modules/typescript/lib/tsserver.js 139649             //  2. the last non-whitespace character in the current line

./node_modules/typescript/lib/tsserver.js 139650             var endOfFormatSpan = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/tsserver.js 139654             // if the character at the end of the span is a line break, we shouldn't include it, because it indicates we don't want to

./node_modules/typescript/lib/tsserver.js 139655             // touch the current line at all. Also, on some OSes the line break consists of two characters (\r\n), we should test if the

./node_modules/typescript/lib/tsserver.js 139656             // previous character before the end of format span is line break character as well.

./node_modules/typescript/lib/tsserver.js 139661                 // get start position for the previous line

./node_modules/typescript/lib/tsserver.js 139662                 pos: ts.getStartPositionOfLine(line - 1, sourceFile),

./node_modules/typescript/lib/tsserver.js 139714             // format from the beginning of the line

./node_modules/typescript/lib/tsserver.js 139855          * If we hit Enter at $ we want line '    b ||' to be indented.

./node_modules/typescript/lib/tsserver.js 139856          * Formatting will be applied to the last two lines.

./node_modules/typescript/lib/tsserver.js 139857          * Node that fully encloses these lines is binary expression 'a ||...'.

./node_modules/typescript/lib/tsserver.js 139860          * that some parent node on the same line does - like if statement in this case.

./node_modules/typescript/lib/tsserver.js 139861          * Note that we are considering parents only from the same line with initial node -

./node_modules/typescript/lib/tsserver.js 139862          * if parent is on the different line - its delta was already contributed

./node_modules/typescript/lib/tsserver.js 139869                 var line = sourceFile.getLineAndCharacterOfPosition(n.getStart(sourceFile)).line;

./node_modules/typescript/lib/tsserver.js 139870                 if (previousLine !== -1 /* Unknown */ && line !== previousLine) {

./node_modules/typescript/lib/tsserver.js 139876                 previousLine = line;

./node_modules/typescript/lib/tsserver.js 139915                 var startLine = sourceFile.getLineAndCharacterOfPosition(enclosingNode.getStart(sourceFile)).line;

./node_modules/typescript/lib/tsserver.js 139918                     undecoratedStartLine = sourceFile.getLineAndCharacterOfPosition(ts.getNonDecoratorTokenPosOfNode(enclosingNode, sourceFile)).line;

./node_modules/typescript/lib/tsserver.js 139951                     var startLine = sourceFile.getLineAndCharacterOfPosition(startPos).line;

./node_modules/typescript/lib/tsserver.js 139966                     // if node is located on the same line with the parent

./node_modules/typescript/lib/tsserver.js 139977                         // - we need to get the indentation on last line and the delta of parent

./node_modules/typescript/lib/tsserver.js 140042                     getIndentationForToken: function (line, kind, container, suppressDelta) {

./node_modules/typescript/lib/tsserver.js 140043                         return !suppressDelta && shouldAddDelta(line, kind, container) ? indentation + getDelta(container) : indentation;

./node_modules/typescript/lib/tsserver.js 140047                     recomputeIndentation: function (lineAdded, parent) {

./node_modules/typescript/lib/tsserver.js 140049                             indentation += lineAdded ? options.indentSize : -options.indentSize;

./node_modules/typescript/lib/tsserver.js 140054                 function shouldAddDelta(line, kind, container) {

./node_modules/typescript/lib/tsserver.js 140081                     // if token line equals to the line of containing node (this is a first token in the node) - use node indentation

./node_modules/typescript/lib/tsserver.js 140082                     return nodeStartLine !== line

./node_modules/typescript/lib/tsserver.js 140126                         processPair(token, sourceFile.getLineAndCharacterOfPosition(token.pos).line, node, previousRange, previousRangeStartLine, previousParent, contextNode, nodeDynamicIndentation);

./node_modules/typescript/lib/tsserver.js 140131                     var childStartLine = sourceFile.getLineAndCharacterOfPosition(childStartPos).line;

./node_modules/typescript/lib/tsserver.js 140134                         undecoratedChildStartLine = sourceFile.getLineAndCharacterOfPosition(ts.getNonDecoratorTokenPosOfNode(child, sourceFile)).line;

./node_modules/typescript/lib/tsserver.js 140203                                 startLine = sourceFile.getLineAndCharacterOfPosition(tokenInfo.token.pos).line;

./node_modules/typescript/lib/tsserver.js 140234                             var commaTokenLine = sourceFile.getLineAndCharacterOfPosition(tokenInfo.token.pos).line;

./node_modules/typescript/lib/tsserver.js 140257                     var lineAction = 0 /* None */;

./node_modules/typescript/lib/tsserver.js 140264                         lineAction = processRange(currentTokenInfo.token, tokenStart, parent, childContextNode, dynamicIndentation);

./node_modules/typescript/lib/tsserver.js 140267                             if (lineAction === 0 /* None */) {

./node_modules/typescript/lib/tsserver.js 140268                                 // indent token only if end line of previous range does not match start line of the token

./node_modules/typescript/lib/tsserver.js 140269                                 var prevEndLine = savePreviousRange && sourceFile.getLineAndCharacterOfPosition(savePreviousRange.end).line;

./node_modules/typescript/lib/tsserver.js 140270                                 indentToken = lastTriviaWasNewLine && tokenStart.line !== prevEndLine;

./node_modules/typescript/lib/tsserver.js 140273                                 indentToken = lineAction === 1 /* LineAdded */;

./node_modules/typescript/lib/tsserver.js 140282                             dynamicIndentation.getIndentationForToken(tokenStart.line, currentTokenInfo.token.kind, container, !!isListEndToken) :

./node_modules/typescript/lib/tsserver.js 140287                             indentNextTokenOrTrivia = indentTriviaItems(currentTokenInfo.leadingTrivia, commentIndentation_1, indentNextTokenOrTrivia, function (item) { return insertIndentation(item.pos, commentIndentation_1, /*lineAdded*/ false); });

./node_modules/typescript/lib/tsserver.js 140291                             insertIndentation(currentTokenInfo.token.pos, tokenIndentation, lineAction === 1 /* LineAdded */);

./node_modules/typescript/lib/tsserver.js 140292                             lastIndentedLine = tokenStart.line;

./node_modules/typescript/lib/tsserver.js 140307                                 indentMultilineComment(triviaItem, commentIndentation, /*firstLineIsIndented*/ !indentNextTokenOrTrivia);

./node_modules/typescript/lib/tsserver.js 140335                 var lineAction = 0 /* None */;

./node_modules/typescript/lib/tsserver.js 140338                         // trim whitespaces starting from the beginning of the span up to the current line

./node_modules/typescript/lib/tsserver.js 140340                         trimTrailingWhitespacesForLines(originalStart.line, rangeStart.line);

./node_modules/typescript/lib/tsserver.js 140343                         lineAction =

./node_modules/typescript/lib/tsserver.js 140344                             processPair(range, rangeStart.line, parent, previousRange, previousRangeStartLine, previousParent, contextNode, dynamicIndentation);

./node_modules/typescript/lib/tsserver.js 140349                 previousRangeStartLine = rangeStart.line;

./node_modules/typescript/lib/tsserver.js 140350                 return lineAction;

./node_modules/typescript/lib/tsserver.js 140356                 var lineAction = 0 /* None */;

./node_modules/typescript/lib/tsserver.js 140361                         lineAction = applyRuleEdits(rule, previousItem, previousStartLine, currentItem, currentStartLine);

./node_modules/typescript/lib/tsserver.js 140362                         switch (lineAction) {

./node_modules/typescript/lib/tsserver.js 140364                                 // Handle the case where the next line is moved to be the end of this line.

./node_modules/typescript/lib/tsserver.js 140365                                 // In this case we don't indent the next line in the next pass.

./node_modules/typescript/lib/tsserver.js 140367                                     dynamicIndentation.recomputeIndentation(/*lineAddedByFormatting*/ false, contextNode);

./node_modules/typescript/lib/tsserver.js 140371                                 // Handle the case where token2 is moved to the new line.

./node_modules/typescript/lib/tsserver.js 140373                                 // sameLineIndent flag to notify the indenter that the indentation is within the line.

./node_modules/typescript/lib/tsserver.js 140375                                     dynamicIndentation.recomputeIndentation(/*lineAddedByFormatting*/ true, contextNode);

./node_modules/typescript/lib/tsserver.js 140379                                 ts.Debug.assert(lineAction === 0 /* None */);

./node_modules/typescript/lib/tsserver.js 140381                         // We need to trim trailing whitespace between the tokens if they were on different lines, and no rule was applied to put them on the same line

./node_modules/typescript/lib/tsserver.js 140389                     // We need to trim trailing whitespace between the tokens if they were on different lines, and no rule was applied to put them on the same line

./node_modules/typescript/lib/tsserver.js 140392                 return lineAction;

./node_modules/typescript/lib/tsserver.js 140394             function insertIndentation(pos, indentation, lineAdded) {

./node_modules/typescript/lib/tsserver.js 140396                 if (lineAdded) {

./node_modules/typescript/lib/tsserver.js 140397                     // new line is added before the token by the formatting rules

./node_modules/typescript/lib/tsserver.js 140403                     var startLinePosition = ts.getStartPositionOfLine(tokenStart.line, sourceFile);

./node_modules/typescript/lib/tsserver.js 140424             function indentMultilineComment(commentRange, indentation, firstLineIsIndented, indentFinalLine) {

./node_modules/typescript/lib/tsserver.js 140426                 // split comment in lines

./node_modules/typescript/lib/tsserver.js 140427                 var startLine = sourceFile.getLineAndCharacterOfPosition(commentRange.pos).line;

./node_modules/typescript/lib/tsserver.js 140428                 var endLine = sourceFile.getLineAndCharacterOfPosition(commentRange.end).line;

./node_modules/typescript/lib/tsserver.js 140431                         // treat as single line comment

./node_modules/typescript/lib/tsserver.js 140432                         insertIndentation(commentRange.pos, indentation, /*lineAdded*/ false);

./node_modules/typescript/lib/tsserver.js 140438                 for (var line = startLine; line < endLine; line++) {

./node_modules/typescript/lib/tsserver.js 140439                     var endOfLine = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/tsserver.js 140441                     startPos = ts.getStartPositionOfLine(line + 1, sourceFile);

./node_modules/typescript/lib/tsserver.js 140472             function trimTrailingWhitespacesForLines(line1, line2, range) {

./node_modules/typescript/lib/tsserver.js 140473                 for (var line = line1; line < line2; line++) {

./node_modules/typescript/lib/tsserver.js 140474                     var lineStartPosition = ts.getStartPositionOfLine(line, sourceFile);

./node_modules/typescript/lib/tsserver.js 140475                     var lineEndPosition = ts.getEndLinePosition(line, sourceFile);

./node_modules/typescript/lib/tsserver.js 140477                     if (range && (ts.isComment(range.kind) || ts.isStringOrRegularExpressionOrTemplateLiteral(range.kind)) && range.pos <= lineEndPosition && range.end > lineEndPosition) {

./node_modules/typescript/lib/tsserver.js 140480                     var whitespaceStart = getTrailingWhitespaceStartPosition(lineStartPosition, lineEndPosition);

./node_modules/typescript/lib/tsserver.js 140482                         ts.Debug.assert(whitespaceStart === lineStartPosition || !ts.isWhiteSpaceSingleLine(sourceFile.text.charCodeAt(whitespaceStart - 1)));

./node_modules/typescript/lib/tsserver.js 140483                         recordDelete(whitespaceStart, lineEndPosition + 1 - whitespaceStart);

./node_modules/typescript/lib/tsserver.js 140502              * Trimming will be done for lines after the previous range

./node_modules/typescript/lib/tsserver.js 140506                 var startLine = sourceFile.getLineAndCharacterOfPosition(startPosition).line;

./node_modules/typescript/lib/tsserver.js 140507                 var endLine = sourceFile.getLineAndCharacterOfPosition(originalRange.end).line;

./node_modules/typescript/lib/tsserver.js 140542                         // exit early if we on different lines and rule cannot change number of newlines

./node_modules/typescript/lib/tsserver.js 140543                         // if line1 and line2 are on subsequent lines then no edits are required - ok to exit

./node_modules/typescript/lib/tsserver.js 140544                         // if line1 and line2 are separated with more than one newline - ok to exit since we cannot delete extra new lines

./node_modules/typescript/lib/tsserver.js 140548                         // edit should not be applied if we have one line feed between elements

./node_modules/typescript/lib/tsserver.js 140549                         var lineDelta = currentStartLine - previousStartLine;

./node_modules/typescript/lib/tsserver.js 140550                         if (lineDelta !== 1) {

./node_modules/typescript/lib/tsserver.js 140556                         // exit early if we on different lines and rule cannot change number of newlines

./node_modules/typescript/lib/tsserver.js 140590             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 140598                 // The end marker of a single-line comment does not include the newline character.

./node_modules/typescript/lib/tsserver.js 140603                 // But for closed multi-line comments, we don't want to be inside the comment in the following case:

./node_modules/typescript/lib/tsserver.js 140607                 // However, unterminated multi-line comments *do* contain their end.

./node_modules/typescript/lib/tsserver.js 140609                 // Internally, we represent the end of the comment at the newline and closing '/', respectively.

./node_modules/typescript/lib/tsserver.js 140718              * `true` when we need to assume `position` is on a newline.

./node_modules/typescript/lib/tsserver.js 140727              * When inserting some text after an open brace, we would like to get indentation as if a newline was already there.

./node_modules/typescript/lib/tsserver.js 140741                 // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 140754                 var lineAtPosition = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/tsserver.js 140755                 // indentation is first non-whitespace character in a previous line

./node_modules/typescript/lib/tsserver.js 140756                 // for block indentation, we should look for a line which contains something that's not

./node_modules/typescript/lib/tsserver.js 140773                 return getSmartIndent(sourceFile, position, precedingToken, lineAtPosition, assumeNewLineBeforeCloseBrace, options);

./node_modules/typescript/lib/tsserver.js 140777                 var previousLine = ts.getLineAndCharacterOfPosition(sourceFile, position).line - 1;

./node_modules/typescript/lib/tsserver.js 140778                 var commentStartLine = ts.getLineAndCharacterOfPosition(sourceFile, enclosingCommentRange.pos).line;

./node_modules/typescript/lib/tsserver.js 140792                 // move backwards until we find a line with a non-whitespace character,

./node_modules/typescript/lib/tsserver.js 140793                 // then find the first non-whitespace character for that line.

./node_modules/typescript/lib/tsserver.js 140802                 var lineStart = ts.getLineStartPositionForPosition(current, sourceFile);

./node_modules/typescript/lib/tsserver.js 140803                 return findFirstNonWhitespaceColumn(lineStart, current, sourceFile, options);

./node_modules/typescript/lib/tsserver.js 140805             function getSmartIndent(sourceFile, position, precedingToken, lineAtPosition, assumeNewLineBeforeCloseBrace, options) {

./node_modules/typescript/lib/tsserver.js 140813                         var nextTokenKind = nextTokenIsCurlyBraceOnSameLineAsCursor(precedingToken, current, lineAtPosition, sourceFile);

./node_modules/typescript/lib/tsserver.js 140817                             : lineAtPosition !== currentStart.line ? options.indentSize : 0;

./node_modules/typescript/lib/tsserver.js 140821                     // do not consider parent-child line sharing yet:

./node_modules/typescript/lib/tsserver.js 140823                     //    | preceding node 'a' does share line with its parent but indentation is expected

./node_modules/typescript/lib/tsserver.js 140847                 // * parent and child nodes start on the same line, or

./node_modules/typescript/lib/tsserver.js 140848                 // * parent is an IfStatement and child starts on the same line as an 'else clause'.

./node_modules/typescript/lib/tsserver.js 140856                     var parentAndChildShareLine = containingListOrParentStart.line === currentStart.line ||

./node_modules/typescript/lib/tsserver.js 140857                         childStartsOnTheSameLineWithElseInIfStatement(parent, current, currentStart.line, sourceFile);

./node_modules/typescript/lib/tsserver.js 140861                         // A list indents its children if the children begin on a later line than the list itself:

./node_modules/typescript/lib/tsserver.js 140877                         var listIndentsChild = !!firstListChild && getStartLineAndCharacterForNode(firstListChild, sourceFile).line > containingListOrParentStart.line;

./node_modules/typescript/lib/tsserver.js 140888                     // increase indentation if parent node wants its content to be indented and parent and child nodes don't start on the same line

./node_modules/typescript/lib/tsserver.js 140900                     var useTrueStart = isArgumentAndStartLineOverlapsExpressionBeingCalled(parent, current, currentStart.line, sourceFile);

./node_modules/typescript/lib/tsserver.js 140932                 // - parent and child are not on the same line

./node_modules/typescript/lib/tsserver.js 140946             function nextTokenIsCurlyBraceOnSameLineAsCursor(precedingToken, current, lineAtPosition, sourceFile) {

./node_modules/typescript/lib/tsserver.js 140956                     // close braces are indented at the parent level if they are located on the same line with cursor

./node_modules/typescript/lib/tsserver.js 140957                     // this means that if new line will be added at $ position, this case will be indented

./node_modules/typescript/lib/tsserver.js 140964                     var nextTokenStartLine = getStartLineAndCharacterForNode(nextToken, sourceFile).line;

./node_modules/typescript/lib/tsserver.js 140965                     return lineAtPosition === nextTokenStartLine ? 2 /* CloseBrace */ : 0 /* Unknown */;

./node_modules/typescript/lib/tsserver.js 140977                 var expressionOfCallExpressionEndLine = ts.getLineAndCharacterOfPosition(sourceFile, expressionOfCallExpressionEnd).line;

./node_modules/typescript/lib/tsserver.js 140985                     var elseKeywordStartLine = getStartLineAndCharacterForNode(elseKeyword, sourceFile).line;

./node_modules/typescript/lib/tsserver.js 140991             // A multiline conditional typically increases the indentation of its whenTrue and whenFalse children:

./node_modules/typescript/lib/tsserver.js 140997             // However, that indentation does not apply if the subexpressions themselves span multiple lines,

./node_modules/typescript/lib/tsserver.js 141003             //   whenTrue: 'multiline object literal'

./node_modules/typescript/lib/tsserver.js 141005             //   whenFalse('multiline parenthesized expression')

./node_modules/typescript/lib/tsserver.js 141010             // we check for the whenTrue branch beginning on the line that the condition ends, and the whenFalse

./node_modules/typescript/lib/tsserver.js 141011             // branch beginning on the line that the whenTrue branch ends.

./node_modules/typescript/lib/tsserver.js 141014                     var conditionEndLine = ts.getLineAndCharacterOfPosition(sourceFile, parent.condition.end).line;

./node_modules/typescript/lib/tsserver.js 141023                         //   ? 1 : (          L1: whenTrue indented because it's on a new line

./node_modules/typescript/lib/tsserver.js 141025                         //   );                   and one because of the parentheses spanning multiple lines

./node_modules/typescript/lib/tsserver.js 141026                         var trueStartLine = getStartLineAndCharacterForNode(parent.whenTrue, sourceFile).line;

./node_modules/typescript/lib/tsserver.js 141027                         var trueEndLine = ts.getLineAndCharacterOfPosition(sourceFile, parent.whenTrue.end).line;

./node_modules/typescript/lib/tsserver.js 141046                     var lineOfPreviousNode = ts.getLineAndCharacterOfPosition(sourceFile, previousNode.getEnd()).line;

./node_modules/typescript/lib/tsserver.js 141047                     if (childStartLine === lineOfPreviousNode) {

./node_modules/typescript/lib/tsserver.js 141139                 // walk toward the start of the list starting from current node and check if the line is the same for all items.

./node_modules/typescript/lib/tsserver.js 141140                 // if end line for item [i - 1] differs from the start line for item [i] - find column of the first non-whitespace character on the line of item [i]

./node_modules/typescript/lib/tsserver.js 141141                 var lineAndCharacter = getStartLineAndCharacterForNode(node, sourceFile);

./node_modules/typescript/lib/tsserver.js 141146                     // skip list items that ends on the same line with the current list element

./node_modules/typescript/lib/tsserver.js 141147                     var prevEndLine = sourceFile.getLineAndCharacterOfPosition(list[i].end).line;

./node_modules/typescript/lib/tsserver.js 141148                     if (prevEndLine !== lineAndCharacter.line) {

./node_modules/typescript/lib/tsserver.js 141149                         return findColumnForFirstNonWhitespaceCharacterInLine(lineAndCharacter, sourceFile, options);

./node_modules/typescript/lib/tsserver.js 141151                     lineAndCharacter = getStartLineAndCharacterForNode(list[i], sourceFile);

./node_modules/typescript/lib/tsserver.js 141155             function findColumnForFirstNonWhitespaceCharacterInLine(lineAndCharacter, sourceFile, options) {

./node_modules/typescript/lib/tsserver.js 141156                 var lineStart = sourceFile.getPositionOfLineAndCharacter(lineAndCharacter.line, 0);

./node_modules/typescript/lib/tsserver.js 141157                 return findFirstNonWhitespaceColumn(lineStart, lineStart + lineAndCharacter.character, sourceFile, options);

./node_modules/typescript/lib/tsserver.js 141160              * Character is the actual index of the character since the beginning of the line.

./node_modules/typescript/lib/tsserver.js 141308                 var startLine = sourceFile.getLineAndCharacterOfPosition(rangeStart).line;

./node_modules/typescript/lib/tsserver.js 141309                 var endLine = sourceFile.getLineAndCharacterOfPosition(range.end).line;

./node_modules/typescript/lib/tsserver.js 141347              * if there are no line breaks between the node and the previous token,

./node_modules/typescript/lib/tsserver.js 141356              * Only delete trivia on the same line as getStart().

./node_modules/typescript/lib/tsserver.js 141425                 // full start and start of the node are on the same line

./node_modules/typescript/lib/tsserver.js 141443             // get start position of the line following the line that contains fullstart position

./node_modules/typescript/lib/tsserver.js 141447             // skip whitespaces/newlines

./node_modules/typescript/lib/tsserver.js 141451         /** Return the end position of a multiline comment of it is on another line; otherwise returns `undefined`; */

./node_modules/typescript/lib/tsserver.js 141452         function getEndPositionOfMultilineTrailingComment(sourceFile, node, options) {

./node_modules/typescript/lib/tsserver.js 141456                 // If the trailing comment is a multiline comment that extends to the next lines,

./node_modules/typescript/lib/tsserver.js 141463                         // Single line can break the loop as trivia will only be this line.

./node_modules/typescript/lib/tsserver.js 141464                         // Comments on subsequest lines are also ignored.

./node_modules/typescript/lib/tsserver.js 141468                         // Get the end line of the comment and compare against the end line of the node.

./node_modules/typescript/lib/tsserver.js 141469                         // If the comment end line position and the multiline comment extends to multiple lines,

./node_modules/typescript/lib/tsserver.js 141495             var multilineEndPosition = getEndPositionOfMultilineTrailingComment(sourceFile, node, options);

./node_modules/typescript/lib/tsserver.js 141496             if (multilineEndPosition) {

./node_modules/typescript/lib/tsserver.js 141497                 return multilineEndPosition;

./node_modules/typescript/lib/tsserver.js 141556                 // When deleting multiple nodes we need to track if the end position is including multiline trailing comments.

./node_modules/typescript/lib/tsserver.js 141562                     hasTrailingComment = !!getEndPositionOfMultilineTrailingComment(sourceFile, node, options);

./node_modules/typescript/lib/tsserver.js 141609                 return !!getEndPositionOfMultilineTrailingComment(sourceFile, oldNode, configurableEnd);

./node_modules/typescript/lib/tsserver.js 141667             ChangeTracker.prototype.insertCommentBeforeLine = function (sourceFile, lineNumber, position, commentText) {

./node_modules/typescript/lib/tsserver.js 141668                 var lineStartPosition = ts.getStartPositionOfLine(lineNumber, sourceFile);

./node_modules/typescript/lib/tsserver.js 141669                 var startPosition = ts.getFirstNonSpaceCharacterPosition(sourceFile.text, lineStartPosition);

./node_modules/typescript/lib/tsserver.js 141670                 // First try to see if we can put the comment on the previous line.

./node_modules/typescript/lib/tsserver.js 141673                 // Otherwise, add an extra new line immediately before the error span.

./node_modules/typescript/lib/tsserver.js 141676                 var indent = sourceFile.text.slice(lineStartPosition, startPosition);

./node_modules/typescript/lib/tsserver.js 141798              * new lines and must share the same indentation.

./node_modules/typescript/lib/tsserver.js 141806                         // each indented member must be on a new line

./node_modules/typescript/lib/tsserver.js 141830                 // - Always insert leading newline.

./node_modules/typescript/lib/tsserver.js 141836                 // - Only insert a trailing newline if body is single-line and there are no other insertions for the node.

./node_modules/typescript/lib/tsserver.js 141947                     // use next sibling as an anchor

./node_modules/typescript/lib/tsserver.js 141956                         // in multiline case it will work as

./node_modules/typescript/lib/tsserver.js 141976                     var multilineList = false;

./node_modules/typescript/lib/tsserver.js 141980                     // - determine if list is a multiline

./node_modules/typescript/lib/tsserver.js 141982                         // if list has only one element then we'll format is as multiline if node has comment in trailing trivia, or as singleline otherwise

./node_modules/typescript/lib/tsserver.js 141991                         // determine if list is multiline by checking lines of after element and element that precedes it.

./node_modules/typescript/lib/tsserver.js 141993                         multilineList = afterMinusOneStartLinePosition !== afterStartLinePosition;

./node_modules/typescript/lib/tsserver.js 141996                         // in this case we'll always treat containing list as multiline

./node_modules/typescript/lib/tsserver.js 141997                         multilineList = true;

./node_modules/typescript/lib/tsserver.js 141999                     if (multilineList) {

./node_modules/typescript/lib/tsserver.js 142004                         // insert element before the line break on the line that contains 'after' element

./node_modules/typescript/lib/tsserver.js 142161                 // strip initial indentation (spaces or tabs) if text will be inserted in the middle of the line

./node_modules/typescript/lib/tsserver.js 142197                     preserveSourceNewlines: true,

./node_modules/typescript/lib/tsserver.js 142437                     // There was a blank line between the last comment and this comment.

./node_modules/typescript/lib/tsserver.js 142439                     var commentLine = sourceFile.getLineAndCharacterOfPosition(range.pos).line;

./node_modules/typescript/lib/tsserver.js 142440                     var lastCommentEndLine = sourceFile.getLineAndCharacterOfPosition(lastComment.range.end).line;

./node_modules/typescript/lib/tsserver.js 142446                         firstNodeLine = sourceFile.getLineAndCharacterOfPosition(sourceFile.statements[0].getStart()).line;

./node_modules/typescript/lib/tsserver.js 142447                     var commentEndLine = sourceFile.getLineAndCharacterOfPosition(range.end).line;

./node_modules/typescript/lib/tsserver.js 142463                         if (position < text.length && charCode === 13 /* carriageReturn */ && text.charCodeAt(position) === 10 /* lineFeed */) {

./node_modules/typescript/lib/tsserver.js 144261             // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserver.js 144473                 // useNonAdjustedEndPosition to ensure we don't eat the newline after the statement.

./node_modules/typescript/lib/tsserver.js 144663                             // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion

./node_modules/typescript/lib/tsserver.js 147922             // If label is on a separate line, just delete the rest of that line, but not the indentation of the labeled statement.

./node_modules/typescript/lib/tsserver.js 149303             var lineNumber = ts.getLineAndCharacterOfPosition(sourceFile, position).line;

./node_modules/typescript/lib/tsserver.js 149304             // Only need to add `// @ts-ignore` for a line once.

./node_modules/typescript/lib/tsserver.js 149305             if (!seenLines || ts.tryAddToSet(seenLines, lineNumber)) {

./node_modules/typescript/lib/tsserver.js 149306                 changes.insertCommentBeforeLine(sourceFile, lineNumber, position, " @ts-ignore");

./node_modules/typescript/lib/tsserver.js 149635             /*multiline*/ true);

./node_modules/typescript/lib/tsserver.js 151505                                     hasLeadingNewline: true,

./node_modules/typescript/lib/tsserver.js 152564                         // CONSIDER: could detect that each is on a separate line (See `extractConstant_VariableList_MultipleLines` in `extractConstants.ts`)

./node_modules/typescript/lib/tsserver.js 153431                 if (file && ts.isTupleTypeNode(node) && (ts.getLineAndCharacterOfPosition(file, node.pos).line === ts.getLineAndCharacterOfPosition(file, node.end).line)) {

./node_modules/typescript/lib/tsserver.js 153442             changes.insertNodeBefore(file, firstStatement, ts.ignoreSourceNewlines(newTypeNode), /* blankLineBetween */ true);

./node_modules/typescript/lib/tsserver.js 153453             changes.insertNodeBefore(file, firstStatement, ts.ignoreSourceNewlines(newTypeNode), /* blankLineBetween */ true);

./node_modules/typescript/lib/tsserver.js 155503             // eslint-disable-next-line debug-assert

./node_modules/typescript/lib/tsserver.js 155960                     doc = doc.length === 0 ? inheritedDocs.slice() : inheritedDocs.concat(ts.lineBreakPart(), doc);

./node_modules/typescript/lib/tsserver.js 155992         SourceFileObject.prototype.getPositionOfLineAndCharacter = function (line, character, allowEdits) {

./node_modules/typescript/lib/tsserver.js 155993             return ts.computePositionOfLineAndCharacter(ts.getLineStarts(this), line, character, this.text, allowEdits);

./node_modules/typescript/lib/tsserver.js 155996             var line = this.getLineAndCharacterOfPosition(pos).line;

./node_modules/typescript/lib/tsserver.js 155997             var lineStarts = this.getLineStarts();

./node_modules/typescript/lib/tsserver.js 155999             if (line + 1 >= lineStarts.length) {

./node_modules/typescript/lib/tsserver.js 156003                 lastCharPos = lineStarts[line + 1] - 1;

./node_modules/typescript/lib/tsserver.js 156006             // if the new line is "\r\n", we should return the last non-new-line-character position

./node_modules/typescript/lib/tsserver.js 157177                 lineStarts: sourceFile.getLineStarts(),

./node_modules/typescript/lib/tsserver.js 157178                 firstLine: sourceFile.getLineAndCharacterOfPosition(textRange.pos).line,

./node_modules/typescript/lib/tsserver.js 157179                 lastLine: sourceFile.getLineAndCharacterOfPosition(textRange.end).line

./node_modules/typescript/lib/tsserver.js 157185             var _a = getLinesForRange(sourceFile, textRange), lineStarts = _a.lineStarts, firstLine = _a.firstLine, lastLine = _a.lastLine;

./node_modules/typescript/lib/tsserver.js 157188             var lineTextStarts = new ts.Map();

./node_modules/typescript/lib/tsserver.js 157190             var isJsx = ts.isInsideJsxElement(sourceFile, lineStarts[firstLine]);

./node_modules/typescript/lib/tsserver.js 157192             // Check each line before any text changes.

./node_modules/typescript/lib/tsserver.js 157194                 var lineText = sourceFile.text.substring(lineStarts[i], sourceFile.getLineEndOfPosition(lineStarts[i]));

./node_modules/typescript/lib/tsserver.js 157195                 // Find the start of text and the left-most character. No-op on empty lines.

./node_modules/typescript/lib/tsserver.js 157196                 var regExec = firstNonWhitespaceCharacterRegex.exec(lineText);

./node_modules/typescript/lib/tsserver.js 157199                     lineTextStarts.set(i.toString(), regExec.index);

./node_modules/typescript/lib/tsserver.js 157200                     if (lineText.substr(regExec.index, openComment.length) !== openComment) {

./node_modules/typescript/lib/tsserver.js 157207                 // If the range is multiline and ends on a beginning of a line, don't comment/uncomment.

./node_modules/typescript/lib/tsserver.js 157208                 if (firstLine !== lastLine && lineStarts[i] === textRange.end) {

./node_modules/typescript/lib/tsserver.js 157211                 var lineTextStart = lineTextStarts.get(i.toString());

./node_modules/typescript/lib/tsserver.js 157212                 // If the line is not an empty line; otherwise no-op.

./node_modules/typescript/lib/tsserver.js 157213                 if (lineTextStart !== undefined) {

./node_modules/typescript/lib/tsserver.js 157215                         textChanges.push.apply(textChanges, toggleMultilineComment(fileName, { pos: lineStarts[i] + leftMostPosition, end: sourceFile.getLineEndOfPosition(lineStarts[i]) }, isCommenting, isJsx));

./node_modules/typescript/lib/tsserver.js 157222                                 start: lineStarts[i] + leftMostPosition

./node_modules/typescript/lib/tsserver.js 157226                     else if (sourceFile.text.substr(lineStarts[i] + lineTextStart, openComment.length) === openComment) {

./node_modules/typescript/lib/tsserver.js 157231                                 start: lineStarts[i] + lineTextStart

./node_modules/typescript/lib/tsserver.js 157239         function toggleMultilineComment(fileName, textRange, insertComment, isInsideJsx) {

./node_modules/typescript/lib/tsserver.js 157249             var openMultiline = isJsx ? "{/*" : "/*";

./node_modules/typescript/lib/tsserver.js 157250             var closeMultiline = isJsx ? "*/}" : "*/";

./node_modules/typescript/lib/tsserver.js 157251             var openMultilineRegex = isJsx ? "\\{\\/\\*" : "\\/\\*";

./node_modules/typescript/lib/tsserver.js 157252             var closeMultilineRegex = isJsx ? "\\*\\/\\}" : "\\*\\/";

./node_modules/typescript/lib/tsserver.js 157256                 var offset = text.substr(pos, openMultiline.length) === openMultiline ? openMultiline.length : 0;

./node_modules/typescript/lib/tsserver.js 157273                     var newPos = text.substring(pos, textRange.end).search("(" + openMultilineRegex + ")|(" + closeMultilineRegex + ")");

./node_modules/typescript/lib/tsserver.js 157277                     pos = newPos === -1 ? textRange.end + 1 : pos + newPos + closeMultiline.length;

./node_modules/typescript/lib/tsserver.js 157289                 if (text.substr(firstPos, openMultiline.length) !== openMultiline) {

./node_modules/typescript/lib/tsserver.js 157291                         newText: openMultiline,

./node_modules/typescript/lib/tsserver.js 157300                     if (text.substr(positions[i] - closeMultiline.length, closeMultiline.length) !== closeMultiline) {

./node_modules/typescript/lib/tsserver.js 157302                             newText: closeMultiline,

./node_modules/typescript/lib/tsserver.js 157309                     if (text.substr(positions[i], openMultiline.length) !== openMultiline) {

./node_modules/typescript/lib/tsserver.js 157311                             newText: openMultiline,

./node_modules/typescript/lib/tsserver.js 157322                         newText: closeMultiline,

./node_modules/typescript/lib/tsserver.js 157334                     var from = pos_2 - closeMultiline.length > 0 ? pos_2 - closeMultiline.length : 0;

./node_modules/typescript/lib/tsserver.js 157335                     var offset = text.substr(from, closeMultiline.length) === closeMultiline ? closeMultiline.length : 0;

./node_modules/typescript/lib/tsserver.js 157339                             length: openMultiline.length,

./node_modules/typescript/lib/tsserver.js 157350             // If there is a selection that is on the same line, add multiline.

./node_modules/typescript/lib/tsserver.js 157352                 ? toggleMultilineComment(fileName, textRange, /*insertComment*/ true)

./node_modules/typescript/lib/tsserver.js 157373                             textChanges.push.apply(textChanges, toggleMultilineComment(fileName, { end: commentRange.end, pos: commentRange.pos + 1 }, /*insertComment*/ false));

./node_modules/typescript/lib/tsserver.js 157487                 // text up to the end of the line (or */).

./node_modules/typescript/lib/tsserver.js 157491                 // match the literal portion up to the end of the line or end of comment.

./node_modules/typescript/lib/tsserver.js 157502                 //  'm' is so we can find matches in a multi-line input.

./node_modules/typescript/lib/tsserver.js 157564                 return { line: 0, character: 0 };

./node_modules/typescript/lib/tsserver.js 157653             toggleMultilineComment: toggleMultilineComment,

./node_modules/typescript/lib/tsserver.js 157816             var lineOfPosition = sourceFile.getLineAndCharacterOfPosition(position).line;

./node_modules/typescript/lib/tsserver.js 157817             if (sourceFile.getLineAndCharacterOfPosition(tokenAtLocation.getStart(sourceFile)).line > lineOfPosition) {

./node_modules/typescript/lib/tsserver.js 157818                 // Get previous token if the token is returned starts on new line

./node_modules/typescript/lib/tsserver.js 157821                 // token at position will return let keyword on second line as the token but we would like to use

./node_modules/typescript/lib/tsserver.js 157822                 // token on same line if trailing trivia (comments or white spaces on same line) part of the last token on that line

./node_modules/typescript/lib/tsserver.js 157824                 // It's a blank line

./node_modules/typescript/lib/tsserver.js 157825                 if (!preceding || sourceFile.getLineAndCharacterOfPosition(preceding.getEnd()).line !== lineOfPosition) {

./node_modules/typescript/lib/tsserver.js 157846                 if (node && lineOfPosition === sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line) {

./node_modules/typescript/lib/tsserver.js 158198                         // Set on parent if on same line otherwise on first statement

./node_modules/typescript/lib/tsserver.js 158204                         // Set span on previous token if it starts on same line otherwise on the first statement of the block

./node_modules/typescript/lib/tsserver.js 158440 var debugObjectHost = (function () { return this; })(); // eslint-disable-line prefer-const

./node_modules/typescript/lib/tsserver.js 158539             // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 158725             this.languageService = null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 158731             this.logger = null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 158739             this.forwardJSONCall("refresh(" + throwOnError + ")", function () { return null; } // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 158746                 return null; // eslint-disable-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 159024         LanguageServiceShimObject.prototype.toggleMultilineComment = function (fileName, textRange) {

./node_modules/typescript/lib/tsserver.js 159026             return this.forwardJSONCall("toggleMultilineComment('" + fileName + "', '" + JSON.stringify(textRange) + "')", function () { return _this.languageService.toggleMultilineComment(fileName, textRange); });

./node_modules/typescript/lib/tsserver.js 159257         // The previous line should have made `globalThis` globally

./node_modules/typescript/lib/tsserver.js 159393             "readline",

./node_modules/typescript/lib/tsserver.js 159881         /** Put stringified JSON on the next line, indented. */

./node_modules/typescript/lib/tsserver.js 160046                 CommandTypes["ToggleMultilineComment"] = "toggleMultilineComment";

./node_modules/typescript/lib/tsserver.js 160048                 CommandTypes["ToggleMultilineCommentFull"] = "toggleMultilineComment-full";

./node_modules/typescript/lib/tsserver.js 160224                 this.lineMap = undefined;

./node_modules/typescript/lib/tsserver.js 160233                 this.lineMap = undefined;

./node_modules/typescript/lib/tsserver.js 160303             TextStorage.prototype.getAbsolutePositionAndLineText = function (line) {

./node_modules/typescript/lib/tsserver.js 160304                 return this.switchToScriptVersionCache().getAbsolutePositionAndLineText(line);

./node_modules/typescript/lib/tsserver.js 160307              *  @param line 0 based index

./node_modules/typescript/lib/tsserver.js 160309             TextStorage.prototype.lineToTextSpan = function (line) {

./node_modules/typescript/lib/tsserver.js 160311                     var lineMap = this.getLineMap();

./node_modules/typescript/lib/tsserver.js 160312                     var start = lineMap[line]; // -1 since line is 1-based

./node_modules/typescript/lib/tsserver.js 160313                     var end = line + 1 < lineMap.length ? lineMap[line + 1] : this.text.length;

./node_modules/typescript/lib/tsserver.js 160316                 return this.svc.lineToTextSpan(line);

./node_modules/typescript/lib/tsserver.js 160319              * @param line 1 based index

./node_modules/typescript/lib/tsserver.js 160322             TextStorage.prototype.lineOffsetToPosition = function (line, offset, allowEdits) {

./node_modules/typescript/lib/tsserver.js 160324                     return ts.computePositionOfLineAndCharacter(this.getLineMap(), line - 1, offset - 1, this.text, allowEdits);

./node_modules/typescript/lib/tsserver.js 160326                 // TODO: assert this offset is actually on the line

./node_modules/typescript/lib/tsserver.js 160327                 return this.svc.lineOffsetToPosition(line, offset);

./node_modules/typescript/lib/tsserver.js 160331                     var _a = ts.computeLineAndCharacterOfPosition(this.getLineMap(), position), line = _a.line, character = _a.character;

./node_modules/typescript/lib/tsserver.js 160332                     return { line: line + 1, offset: character + 1 };

./node_modules/typescript/lib/tsserver.js 160382                 return this.lineMap || (this.lineMap = ts.computeLineStarts(this.getOrLoadText()));

./node_modules/typescript/lib/tsserver.js 160389                         getLineText: function (line) { return _this.svc.getAbsolutePositionAndLineText(line + 1).lineText; }

./node_modules/typescript/lib/tsserver.js 160392                 var lineMap = this.getLineMap();

./node_modules/typescript/lib/tsserver.js 160393                 return ts.getLineInfo(this.text, lineMap);

./node_modules/typescript/lib/tsserver.js 160664             ScriptInfo.prototype.getAbsolutePositionAndLineText = function (line) {

./node_modules/typescript/lib/tsserver.js 160665                 return this.textStorage.getAbsolutePositionAndLineText(line);

./node_modules/typescript/lib/tsserver.js 160685              *  @param line 1 based index

./node_modules/typescript/lib/tsserver.js 160687             ScriptInfo.prototype.lineToTextSpan = function (line) {

./node_modules/typescript/lib/tsserver.js 160688                 return this.textStorage.lineToTextSpan(line);

./node_modules/typescript/lib/tsserver.js 160690             ScriptInfo.prototype.lineOffsetToPosition = function (line, offset, allowEdits) {

./node_modules/typescript/lib/tsserver.js 160691                 return this.textStorage.lineOffsetToPosition(line, offset, allowEdits);

./node_modules/typescript/lib/tsserver.js 160727             ts.Debug.assert(typeof location.line === "number", "Expected line " + location.line + " to be a number.");

./node_modules/typescript/lib/tsserver.js 160729             ts.Debug.assert(location.line > 0, "Expected line to be non-" + (location.line === 0 ? "zero" : "negative"));

./node_modules/typescript/lib/tsserver.js 162101                         // Skip empty names from odd commandline parses

./node_modules/typescript/lib/tsserver.js 162165                         // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserver.js 162594                 // Ensure we have upto date parsed command line

./node_modules/typescript/lib/tsserver.js 164295                     version: ts.version, // eslint-disable-line @typescript-eslint/no-unnecessary-qualifier

./node_modules/typescript/lib/tsserver.js 165095                 // Key doesnt matter since its only for text and lines

./node_modules/typescript/lib/tsserver.js 165106                             var lineOffset = info.positionToLineOffset(pos);

./node_modules/typescript/lib/tsserver.js 165107                             return { line: lineOffset.line - 1, character: lineOffset.offset - 1 };

./node_modules/typescript/lib/tsserver.js 165109                         getPositionOfLineAndCharacter: function (line, character, allowEdits) { return info.lineOffsetToPosition(line + 1, character + 1, allowEdits); }

./node_modules/typescript/lib/tsserver.js 166447         function convertToLocation(lineAndCharacter) {

./node_modules/typescript/lib/tsserver.js 166448             return { line: lineAndCharacter.line + 1, offset: lineAndCharacter.character + 1 };

./node_modules/typescript/lib/tsserver.js 166901                         var response = { version: ts.version }; // eslint-disable-line @typescript-eslint/no-unnecessary-qualifier

./node_modules/typescript/lib/tsserver.js 166948                                 var start = scriptInfo.lineOffsetToPosition(change.start.line, change.start.offset);

./node_modules/typescript/lib/tsserver.js 166949                                 var end = scriptInfo.lineOffsetToPosition(change.end.line, change.end.offset);

./node_modules/typescript/lib/tsserver.js 167259                     _a[server.CommandNames.ToggleMultilineComment] = function (request) {

./node_modules/typescript/lib/tsserver.js 167260                         return _this.requiredResponse(_this.toggleMultilineComment(request.arguments, /*simplifiedResult*/ true));

./node_modules/typescript/lib/tsserver.js 167262                     _a[server.CommandNames.ToggleMultilineCommentFull] = function (request) {

./node_modules/typescript/lib/tsserver.js 167263                         return _this.requiredResponse(_this.toggleMultilineComment(request.arguments, /*simplifiedResult*/ false));

./node_modules/typescript/lib/tsserver.js 167446                         catch (_b) { } // eslint-disable-line no-empty

./node_modules/typescript/lib/tsserver.js 167794                     start: { line: start.line + 1, offset: start.character + 1 },

./node_modules/typescript/lib/tsserver.js 167795                     end: { line: end.line + 1, offset: end.character + 1 }

./node_modules/typescript/lib/tsserver.js 168034                 return args.position !== undefined ? args.position : scriptInfo.lineOffsetToPosition(args.line, args.offset);

./node_modules/typescript/lib/tsserver.js 168143                 var startPosition = scriptInfo.lineOffsetToPosition(args.line, args.offset);

./node_modules/typescript/lib/tsserver.js 168144                 var endPosition = scriptInfo.lineOffsetToPosition(args.endLine, args.endOffset);

./node_modules/typescript/lib/tsserver.js 168170                 var position = scriptInfo.lineOffsetToPosition(args.line, args.offset);

./node_modules/typescript/lib/tsserver.js 168174                 // the position is on a line containing only whitespace.

./node_modules/typescript/lib/tsserver.js 168177                 // only to the previous line.  If all this is true, then

./node_modules/typescript/lib/tsserver.js 168178                 // add edits necessary to properly indent the current line.

./node_modules/typescript/lib/tsserver.js 168180                     var _b = scriptInfo.getAbsolutePositionAndLineText(args.line), lineText = _b.lineText, absolutePosition = _b.absolutePosition;

./node_modules/typescript/lib/tsserver.js 168181                     if (lineText && lineText.search("\\S") < 0) {

./node_modules/typescript/lib/tsserver.js 168185                         for (i = 0, len = lineText.length; i < len; i++) {

./node_modules/typescript/lib/tsserver.js 168186                             if (lineText.charAt(i) === " ") {

./node_modules/typescript/lib/tsserver.js 168189                             else if (lineText.charAt(i) === "\t") {

./node_modules/typescript/lib/tsserver.js 168338                 var start = scriptInfo.lineOffsetToPosition(args.line, args.offset);

./node_modules/typescript/lib/tsserver.js 168339                 var end = scriptInfo.lineOffsetToPosition(args.endLine, args.endOffset);

./node_modules/typescript/lib/tsserver.js 168479                 return locationOrSpan.line !== undefined;

./node_modules/typescript/lib/tsserver.js 168492                     return loc.position !== undefined ? loc.position : scriptInfo.lineOffsetToPosition(loc.line, loc.offset);

./node_modules/typescript/lib/tsserver.js 168600                     startPosition = scriptInfo.lineOffsetToPosition(args.startLine, args.startOffset);

./node_modules/typescript/lib/tsserver.js 168608                     endPosition = scriptInfo.lineOffsetToPosition(args.endLine, args.endOffset);

./node_modules/typescript/lib/tsserver.js 168727             Session.prototype.toggleMultilineComment = function (args, simplifiedResult) {

./node_modules/typescript/lib/tsserver.js 168732                 var textChanges = languageService.toggleMultilineComment(file, textRange);

./node_modules/typescript/lib/tsserver.js 168975             return { line: lc.line + 1, offset: lc.character + 1 };

./node_modules/typescript/lib/tsserver.js 168981             return { fileName: textChanges.fileName, textChanges: [{ start: { line: 0, offset: 0 }, end: { line: 0, offset: 0 }, newText: change.newText }] };

./node_modules/typescript/lib/tsserver.js 168986             var _a = ts.computeLineAndCharacterOfPosition(ts.computeLineStarts(newText), renameLocation), line = _a.line, character = _a.character;

./node_modules/typescript/lib/tsserver.js 168987             return { line: line + 1, offset: character + 1 };

./node_modules/typescript/lib/tsserver.js 169007             var lineSpan = scriptInfo.lineToTextSpan(span.start.line - 1);

./node_modules/typescript/lib/tsserver.js 169008             var lineText = scriptInfo.getSnapshot().getText(lineSpan.start, ts.textSpanEnd(lineSpan)).replace(/\r|\n/g, "");

./node_modules/typescript/lib/tsserver.js 169009             return __assign(__assign({ file: fileName }, span), { lineText: lineText, isWriteAccess: isWriteAccess, isDefinition: isDefinition });

./node_modules/typescript/lib/tsserver.js 169025         var lineCollectionCapacity = 4;

./node_modules/typescript/lib/tsserver.js 169038                 this.lineIndex = new LineIndex();

./node_modules/typescript/lib/tsserver.js 169043                 this.lineIndex.root = new LineNode();

./node_modules/typescript/lib/tsserver.js 169044                 this.startPath = [this.lineIndex.root];

./node_modules/typescript/lib/tsserver.js 169045                 this.stack = [this.lineIndex.root];

./node_modules/typescript/lib/tsserver.js 169062                 var lm = LineIndex.linesFromText(insertedText);

./node_modules/typescript/lib/tsserver.js 169063                 var lines = lm.lines;

./node_modules/typescript/lib/tsserver.js 169064                 if (lines.length > 1 && lines[lines.length - 1] === "") {

./node_modules/typescript/lib/tsserver.js 169065                     lines.pop();

./node_modules/typescript/lib/tsserver.js 169086                 if (lines.length > 0) {

./node_modules/typescript/lib/tsserver.js 169087                     leafNode.text = lines[0];

./node_modules/typescript/lib/tsserver.js 169088                     if (lines.length > 1) {

./node_modules/typescript/lib/tsserver.js 169089                         var insertedNodes = new Array(lines.length - 1);

./node_modules/typescript/lib/tsserver.js 169091                         for (var i = 1; i < lines.length; i++) {

./node_modules/typescript/lib/tsserver.js 169092                             insertedNodes[i - 1] = new LineLeaf(lines[i]);

./node_modules/typescript/lib/tsserver.js 169104                             newRoot.add(this.lineIndex.root);

./node_modules/typescript/lib/tsserver.js 169105                             insertedNodes = newRoot.insertAt(this.lineIndex.root, insertedNodes);

./node_modules/typescript/lib/tsserver.js 169107                             this.lineIndex.root = newRoot;

./node_modules/typescript/lib/tsserver.js 169109                         this.lineIndex.root.updateCounts();

./node_modules/typescript/lib/tsserver.js 169125                 return this.lineIndex;

./node_modules/typescript/lib/tsserver.js 169127             EditWalker.prototype.post = function (_relativeStart, _relativeLength, lineCollection) {

./node_modules/typescript/lib/tsserver.js 169129                 // if range is on single line, we will never make this state transition

./node_modules/typescript/lib/tsserver.js 169130                 if (lineCollection === this.lineCollectionAtBranch) {

./node_modules/typescript/lib/tsserver.js 169136             EditWalker.prototype.pre = function (_relativeStart, _relativeLength, lineCollection, _parent, nodeType) {

./node_modules/typescript/lib/tsserver.js 169140                     // if range is on single line, we will never make this state transition

./node_modules/typescript/lib/tsserver.js 169143                     this.lineCollectionAtBranch = lineCollection;

./node_modules/typescript/lib/tsserver.js 169157                             currentNode.add(lineCollection);

./node_modules/typescript/lib/tsserver.js 169165                             child = fresh(lineCollection);

./node_modules/typescript/lib/tsserver.js 169172                             child = fresh(lineCollection);

./node_modules/typescript/lib/tsserver.js 169177                             if (!lineCollection.isLeaf()) {

./node_modules/typescript/lib/tsserver.js 169178                                 child = fresh(lineCollection);

./node_modules/typescript/lib/tsserver.js 169192                             if (!lineCollection.isLeaf()) {

./node_modules/typescript/lib/tsserver.js 169193                                 child = fresh(lineCollection);

./node_modules/typescript/lib/tsserver.js 169202                             currentNode.add(lineCollection);

./node_modules/typescript/lib/tsserver.js 169286                 return this._getSnapshot().index.lineNumberToInfo(oneBasedLine);

./node_modules/typescript/lib/tsserver.js 169288             ScriptVersionCache.prototype.lineOffsetToPosition = function (line, column) {

./node_modules/typescript/lib/tsserver.js 169289                 return this._getSnapshot().index.absolutePositionOfStartOfLine(line) + (column - 1);

./node_modules/typescript/lib/tsserver.js 169294             ScriptVersionCache.prototype.lineToTextSpan = function (line) {

./node_modules/typescript/lib/tsserver.js 169296                 var _a = index.lineNumberToInfo(line + 1), lineText = _a.lineText, absolutePosition = _a.absolutePosition;

./node_modules/typescript/lib/tsserver.js 169297                 var len = lineText !== undefined ? lineText.length : index.absolutePositionOfStartOfLine(line + 2) - absolutePosition;

./node_modules/typescript/lib/tsserver.js 169328                 var lm = LineIndex.linesFromText(script);

./node_modules/typescript/lib/tsserver.js 169329                 snap.index.load(lm.lines);

./node_modules/typescript/lib/tsserver.js 169370                 return this.lineNumberToInfo(oneBasedLine).absolutePosition;

./node_modules/typescript/lib/tsserver.js 169374                 return { line: oneBasedLine, offset: zeroBasedColumn + 1 };

./node_modules/typescript/lib/tsserver.js 169380                 return this.root.lineCount();

./node_modules/typescript/lib/tsserver.js 169382             LineIndex.prototype.lineNumberToInfo = function (oneBasedLine) {

./node_modules/typescript/lib/tsserver.js 169383                 var lineCount = this.getLineCount();

./node_modules/typescript/lib/tsserver.js 169384                 if (oneBasedLine <= lineCount) {

./node_modules/typescript/lib/tsserver.js 169385                     var _a = this.root.lineNumberToInfo(oneBasedLine, 0), position = _a.position, leaf = _a.leaf;

./node_modules/typescript/lib/tsserver.js 169386                     return { absolutePosition: position, lineText: leaf && leaf.text };

./node_modules/typescript/lib/tsserver.js 169389                     return { absolutePosition: this.root.charCount(), lineText: undefined };

./node_modules/typescript/lib/tsserver.js 169392             LineIndex.prototype.load = function (lines) {

./node_modules/typescript/lib/tsserver.js 169393                 if (lines.length > 0) {

./node_modules/typescript/lib/tsserver.js 169395                     for (var i = 0; i < lines.length; i++) {

./node_modules/typescript/lib/tsserver.js 169396                         leaves[i] = new LineLeaf(lines[i]);

./node_modules/typescript/lib/tsserver.js 169443                         this.load(LineIndex.linesFromText(newText).lines);

./node_modules/typescript/lib/tsserver.js 169470                         // check whether last characters deleted are line break

./node_modules/typescript/lib/tsserver.js 169472                         var _a = this.positionToColumnAndLineText(e), zeroBasedColumn = _a.zeroBasedColumn, lineText = _a.lineText;

./node_modules/typescript/lib/tsserver.js 169474                             // move range end just past line that will merge with previous line

./node_modules/typescript/lib/tsserver.js 169475                             deleteLength += lineText.length; // TODO: GH#18217

./node_modules/typescript/lib/tsserver.js 169477                             newText = newText ? newText + lineText : lineText;

./node_modules/typescript/lib/tsserver.js 169483                         var updatedText = walker.lineIndex.getText(0, walker.lineIndex.getLength());

./node_modules/typescript/lib/tsserver.js 169486                     return walker.lineIndex;

./node_modules/typescript/lib/tsserver.js 169490                 if (nodes.length < lineCollectionCapacity) {

./node_modules/typescript/lib/tsserver.js 169493                 var interiorNodes = new Array(Math.ceil(nodes.length / lineCollectionCapacity));

./node_modules/typescript/lib/tsserver.js 169496                     var end = Math.min(nodeIndex + lineCollectionCapacity, nodes.length);

./node_modules/typescript/lib/tsserver.js 169502             LineIndex.linesFromText = function (text) {

./node_modules/typescript/lib/tsserver.js 169503                 var lineMap = ts.computeLineStarts(text);

./node_modules/typescript/lib/tsserver.js 169504                 if (lineMap.length === 0) {

./node_modules/typescript/lib/tsserver.js 169505                     return { lines: [], lineMap: lineMap };

./node_modules/typescript/lib/tsserver.js 169507                 var lines = new Array(lineMap.length);

./node_modules/typescript/lib/tsserver.js 169508                 var lc = lineMap.length - 1;

./node_modules/typescript/lib/tsserver.js 169510                     lines[lmi] = text.substring(lineMap[lmi], lineMap[lmi + 1]);

./node_modules/typescript/lib/tsserver.js 169512                 var endText = text.substring(lineMap[lc]);

./node_modules/typescript/lib/tsserver.js 169514                     lines[lc] = endText;

./node_modules/typescript/lib/tsserver.js 169517                     lines.pop();

./node_modules/typescript/lib/tsserver.js 169519                 return { lines: lines, lineMap: lineMap };

./node_modules/typescript/lib/tsserver.js 169542                     this.totalLines += child.lineCount();

./node_modules/typescript/lib/tsserver.js 169618             // Output line number is absolute.

./node_modules/typescript/lib/tsserver.js 169619             LineNode.prototype.charOffsetToLineInfo = function (lineNumberAccumulator, relativePosition) {

./node_modules/typescript/lib/tsserver.js 169622                     return { oneBasedLine: lineNumberAccumulator, zeroBasedColumn: relativePosition, lineText: undefined };

./node_modules/typescript/lib/tsserver.js 169628                             return { oneBasedLine: lineNumberAccumulator, zeroBasedColumn: relativePosition, lineText: child.text };

./node_modules/typescript/lib/tsserver.js 169631                             return child.charOffsetToLineInfo(lineNumberAccumulator, relativePosition);

./node_modules/typescript/lib/tsserver.js 169636                         lineNumberAccumulator += child.lineCount();

./node_modules/typescript/lib/tsserver.js 169640                 var lineCount = this.lineCount();

./node_modules/typescript/lib/tsserver.js 169641                 if (lineCount === 0) { // it's empty! (and lineNumberToInfo expects a one-based line)

./node_modules/typescript/lib/tsserver.js 169642                     return { oneBasedLine: 1, zeroBasedColumn: 0, lineText: undefined };

./node_modules/typescript/lib/tsserver.js 169644                 var leaf = ts.Debug.checkDefined(this.lineNumberToInfo(lineCount, 0).leaf);

./node_modules/typescript/lib/tsserver.js 169645                 return { oneBasedLine: lineCount, zeroBasedColumn: leaf.charCount(), lineText: undefined };

./node_modules/typescript/lib/tsserver.js 169648              * Input line number is relative to the start of this node.

./node_modules/typescript/lib/tsserver.js 169649              * Output line number is relative to the child.

./node_modules/typescript/lib/tsserver.js 169652             LineNode.prototype.lineNumberToInfo = function (relativeOneBasedLine, positionAccumulator) {

./node_modules/typescript/lib/tsserver.js 169655                     var childLineCount = child.lineCount();

./node_modules/typescript/lib/tsserver.js 169657                         return child.isLeaf() ? { position: positionAccumulator, leaf: child } : child.lineNumberToInfo(relativeOneBasedLine, positionAccumulator);

./node_modules/typescript/lib/tsserver.js 169702                 if ((clen < lineCollectionCapacity) && (childIndex === (clen - 1)) && (nodeCount === 1)) {

./node_modules/typescript/lib/tsserver.js 169711                     while ((childIndex < lineCollectionCapacity) && (nodeIndex < nodeCount)) {

./node_modules/typescript/lib/tsserver.js 169719                         splitNodeCount = Math.ceil((nodeCount - nodeIndex) / lineCollectionCapacity);

./node_modules/typescript/lib/tsserver.js 169729                             if (splitNode.children.length === lineCollectionCapacity) {

./node_modules/typescript/lib/tsserver.js 169753                 ts.Debug.assert(this.children.length <= lineCollectionCapacity);

./node_modules/typescript/lib/tsserver.js 169758             LineNode.prototype.lineCount = function () {

./node_modules/typescript/lib/tsserver.js 169776             LineLeaf.prototype.lineCount = function () {

./node_modules/typescript/lib/tsserver.js 170637         // eslint-disable-next-line no-in-operator

./node_modules/typescript/lib/tsserver.js 171001                         // eslint-disable-next-line no-null/no-null

./node_modules/typescript/lib/tsserver.js 171206             var readline = require("readline");

./node_modules/typescript/lib/tsserver.js 171207             var rl = readline.createInterface({

./node_modules/typescript/lib/tsserver.js 171499                     rl.on("line", function (input) {

./node_modules/typescript/lib/tsc.js 2996                 + [__assign({ name: "process_name", args: { name: "tsc" } }, meta), __assign({ name: "thread_name", args: { name: "Main" } }, meta), __assign(__assign({ name: "TracingStartedInBrowser" }, meta), { cat: "disabled-by-default-devtools.timeline" })]

./node_modules/typescript/lib/tsc.js 3082                     line: lc.line + 1,

./node_modules/typescript/lib/tsc.js 6014         Option_project_cannot_be_mixed_with_source_files_on_a_command_line: diag(5042, ts.DiagnosticCategory.Error, "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042", "Option 'project' cannot be mixed with source files on a command line."),

./node_modules/typescript/lib/tsc.js 6017         Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: diag(5051, ts.DiagnosticCategory.Error, "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051", "Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided."),

./node_modules/typescript/lib/tsc.js 6086         Insert_command_line_options_and_files_from_a_file: diag(6030, ts.DiagnosticCategory.Message, "Insert_command_line_options_and_files_from_a_file_6030", "Insert command line options and files from a file."),

./node_modules/typescript/lib/tsc.js 6111         Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: diag(6060, ts.DiagnosticCategory.Message, "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060", "Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)."),

./node_modules/typescript/lib/tsc.js 6113         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line: diag(6064, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'null' on command line."),

./node_modules/typescript/lib/tsc.js 6198         Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap_to_be_set: diag(6152, ts.DiagnosticCategory.Message, "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152", "Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set."),

./node_modules/typescript/lib/tsc.js 6217         Command_line_Options: diag(6171, ts.DiagnosticCategory.Message, "Command_line_Options_6171", "Command-line Options"),

./node_modules/typescript/lib/tsc.js 6266         Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line: diag(6230, ts.DiagnosticCategory.Error, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'false' or 'null' on command line."),

./node_modules/typescript/lib/tsc.js 6320         Option_build_must_be_the_first_command_line_argument: diag(6369, ts.DiagnosticCategory.Error, "Option_build_must_be_the_first_command_line_argument_6369", "Option '--build' must be the first command line argument."),

./node_modules/typescript/lib/tsc.js 6412         Set_the_newline_character_for_emitting_files: diag(6659, ts.DiagnosticCategory.Message, "Set_the_newline_character_for_emitting_files_6659", "Set the newline character for emitting files."),

./node_modules/typescript/lib/tsc.js 7008         var lineStart = 0;

./node_modules/typescript/lib/tsc.js 7018                     result.push(lineStart);

./node_modules/typescript/lib/tsc.js 7019                     lineStart = pos;

./node_modules/typescript/lib/tsc.js 7023                         result.push(lineStart);

./node_modules/typescript/lib/tsc.js 7024                         lineStart = pos;

./node_modules/typescript/lib/tsc.js 7029         result.push(lineStart);

./node_modules/typescript/lib/tsc.js 7033     function getPositionOfLineAndCharacter(sourceFile, line, character, allowEdits) {

./node_modules/typescript/lib/tsc.js 7035             sourceFile.getPositionOfLineAndCharacter(line, character, allowEdits) :

./node_modules/typescript/lib/tsc.js 7036             computePositionOfLineAndCharacter(getLineStarts(sourceFile), line, character, sourceFile.text, allowEdits);

./node_modules/typescript/lib/tsc.js 7039     function computePositionOfLineAndCharacter(lineStarts, line, character, debugText, allowEdits) {

./node_modules/typescript/lib/tsc.js 7040         if (line < 0 || line >= lineStarts.length) {

./node_modules/typescript/lib/tsc.js 7042                 line = line < 0 ? 0 : line >= lineStarts.length ? lineStarts.length - 1 : line;

./node_modules/typescript/lib/tsc.js 7045                 ts.Debug.fail("Bad line number. Line: " + line + ", lineStarts.length: " + lineStarts.length + " , line map is correct? " + (debugText !== undefined ? ts.arraysEqual(lineStarts, computeLineStarts(debugText)) : "unknown"));

./node_modules/typescript/lib/tsc.js 7048         var res = lineStarts[line] + character;

./node_modules/typescript/lib/tsc.js 7050             return res > lineStarts[line + 1] ? lineStarts[line + 1] : typeof debugText === "string" && res > debugText.length ? debugText.length : res;

./node_modules/typescript/lib/tsc.js 7052         if (line < lineStarts.length - 1) {

./node_modules/typescript/lib/tsc.js 7053             ts.Debug.assert(res < lineStarts[line + 1]);

./node_modules/typescript/lib/tsc.js 7062         return sourceFile.lineMap || (sourceFile.lineMap = computeLineStarts(sourceFile.text));

./node_modules/typescript/lib/tsc.js 7065     function computeLineAndCharacterOfPosition(lineStarts, position) {

./node_modules/typescript/lib/tsc.js 7066         var lineNumber = computeLineOfPosition(lineStarts, position);

./node_modules/typescript/lib/tsc.js 7068             line: lineNumber,

./node_modules/typescript/lib/tsc.js 7069             character: position - lineStarts[lineNumber]

./node_modules/typescript/lib/tsc.js 7073     function computeLineOfPosition(lineStarts, position, lowerBound) {

./node_modules/typescript/lib/tsc.js 7074         var lineNumber = ts.binarySearch(lineStarts, position, ts.identity, ts.compareValues, lowerBound);

./node_modules/typescript/lib/tsc.js 7075         if (lineNumber < 0) {

./node_modules/typescript/lib/tsc.js 7076             lineNumber = ~lineNumber - 1;

./node_modules/typescript/lib/tsc.js 7077             ts.Debug.assert(lineNumber !== -1, "position cannot precede the beginning of the file");

./node_modules/typescript/lib/tsc.js 7079         return lineNumber;

./node_modules/typescript/lib/tsc.js 7085         var lineStarts = getLineStarts(sourceFile);

./node_modules/typescript/lib/tsc.js 7089         var lowerLine = computeLineOfPosition(lineStarts, lower);

./node_modules/typescript/lib/tsc.js 7090         var upperLine = computeLineOfPosition(lineStarts, upper, lowerLine);

./node_modules/typescript/lib/tsc.js 8564         function appendIfCommentDirective(commentDirectives, text, commentDirectiveRegEx, lineStart) {

./node_modules/typescript/lib/tsc.js 8570                 range: { pos: lineStart, end: pos },

./node_modules/typescript/lib/tsc.js 8596         function reScanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/tsc.js 8597             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/tsc.js 8599             return token = scanJsxToken(allowMultilineJsxText);

./node_modules/typescript/lib/tsc.js 8620         function scanJsxToken(allowMultilineJsxText) {

./node_modules/typescript/lib/tsc.js 8621             if (allowMultilineJsxText === void 0) { allowMultilineJsxText = true; }

./node_modules/typescript/lib/tsc.js 8661                 else if (!allowMultilineJsxText && isLineBreak(char) && firstNonWhitespace > 0) {

./node_modules/typescript/lib/tsc.js 10420     function guessIndentation(lines) {

./node_modules/typescript/lib/tsc.js 10422         for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {

./node_modules/typescript/lib/tsc.js 10423             var line = lines_1[_i];

./node_modules/typescript/lib/tsc.js 10424             if (!line.length) {

./node_modules/typescript/lib/tsc.js 10428             for (; i < line.length && i < indentation; i++) {

./node_modules/typescript/lib/tsc.js 10429                 if (!ts.isWhiteSpaceLike(line.charCodeAt(i))) {

./node_modules/typescript/lib/tsc.js 10707     function getStartPositionOfLine(line, sourceFile) {

./node_modules/typescript/lib/tsc.js 10708         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/tsc.js 10709         return ts.getLineStarts(sourceFile)[line];

./node_modules/typescript/lib/tsc.js 10715         return file.fileName + "(" + (loc.line + 1) + "," + (loc.character + 1) + ")";

./node_modules/typescript/lib/tsc.js 10718     function getEndLinePosition(line, sourceFile) {

./node_modules/typescript/lib/tsc.js 10719         ts.Debug.assert(line >= 0);

./node_modules/typescript/lib/tsc.js 10720         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/tsc.js 10721         var lineIndex = line;

./node_modules/typescript/lib/tsc.js 10723         if (lineIndex + 1 === lineStarts.length) {

./node_modules/typescript/lib/tsc.js 10727             var start = lineStarts[lineIndex];

./node_modules/typescript/lib/tsc.js 10728             var pos = lineStarts[lineIndex + 1] - 1;

./node_modules/typescript/lib/tsc.js 10816             "" + ts.getLineAndCharacterOfPosition(sourceFile, commentDirective.range.end).line,

./node_modules/typescript/lib/tsc.js 10824                 var line = _a[0], directive = _a[1];

./node_modules/typescript/lib/tsc.js 10825                 return directive.type === 0 && !usedLines.get(line);

./node_modules/typescript/lib/tsc.js 10832         function markUsed(line) {

./node_modules/typescript/lib/tsc.js 10833             if (!directivesByLine.has("" + line)) {

./node_modules/typescript/lib/tsc.js 10836             usedLines.set("" + line, true);

./node_modules/typescript/lib/tsc.js 10883             text = text.split(/\r\n|\n|\r/).map(function (line) { return ts.trimStringStart(line.replace(/^\s*\*/, "")); }).join("\n");

./node_modules/typescript/lib/tsc.js 10925                 String: ["codePointAt", "includes", "endsWith", "normalize", "repeat", "startsWith", "anchor", "big", "blink", "bold", "fixed", "fontcolor", "fontsize", "italics", "link", "small", "strike", "sub", "sup"],

./node_modules/typescript/lib/tsc.js 11374             var startLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.pos).line;

./node_modules/typescript/lib/tsc.js 11375             var endLine = ts.getLineAndCharacterOfPosition(sourceFile, node.body.end).line;

./node_modules/typescript/lib/tsc.js 13719         var lineStart;

./node_modules/typescript/lib/tsc.js 13720         var lineCount;

./node_modules/typescript/lib/tsc.js 13721         var linePos;

./node_modules/typescript/lib/tsc.js 13724             var lineStartsOfS = ts.computeLineStarts(s);

./node_modules/typescript/lib/tsc.js 13725             if (lineStartsOfS.length > 1) {

./node_modules/typescript/lib/tsc.js 13726                 lineCount = lineCount + lineStartsOfS.length - 1;

./node_modules/typescript/lib/tsc.js 13727                 linePos = output.length - s.length + ts.last(lineStartsOfS);

./node_modules/typescript/lib/tsc.js 13728                 lineStart = (linePos - output.length) === 0;

./node_modules/typescript/lib/tsc.js 13731                 lineStart = false;

./node_modules/typescript/lib/tsc.js 13736                 if (lineStart) {

./node_modules/typescript/lib/tsc.js 13738                     lineStart = false;

./node_modules/typescript/lib/tsc.js 13757             lineStart = true;

./node_modules/typescript/lib/tsc.js 13758             lineCount = 0;

./node_modules/typescript/lib/tsc.js 13759             linePos = 0;

./node_modules/typescript/lib/tsc.js 13775             if (!lineStart || force) {

./node_modules/typescript/lib/tsc.js 13777                 lineCount++;

./node_modules/typescript/lib/tsc.js 13778                 linePos = output.length;

./node_modules/typescript/lib/tsc.js 13779                 lineStart = true;

./node_modules/typescript/lib/tsc.js 13784             return lineStart ? output.length : (output.length + newLine.length);

./node_modules/typescript/lib/tsc.js 13796             getLine: function () { return lineCount; },

./node_modules/typescript/lib/tsc.js 13797             getColumn: function () { return lineStart ? indent * getIndentSize() : output.length - linePos; },

./node_modules/typescript/lib/tsc.js 13799             isAtStartOfLine: function () { return lineStart; },

./node_modules/typescript/lib/tsc.js 14005         var lineStarts = ts.getLineStarts(sourceFile);

./node_modules/typescript/lib/tsc.js 14006         return ts.computeLineOfPosition(lineStarts, pos);

./node_modules/typescript/lib/tsc.js 14009     function getLineOfLocalPositionFromLineMap(lineMap, pos) {

./node_modules/typescript/lib/tsc.js 14010         return ts.computeLineOfPosition(lineMap, pos);

./node_modules/typescript/lib/tsc.js 14139     function emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments) {

./node_modules/typescript/lib/tsc.js 14140         emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, node.pos, leadingComments);

./node_modules/typescript/lib/tsc.js 14143     function emitNewLineBeforeLeadingCommentsOfPosition(lineMap, writer, pos, leadingComments) {

./node_modules/typescript/lib/tsc.js 14145             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, leadingComments[0].pos)) {

./node_modules/typescript/lib/tsc.js 14150     function emitNewLineBeforeLeadingCommentOfPosition(lineMap, writer, pos, commentPos) {

./node_modules/typescript/lib/tsc.js 14152             getLineOfLocalPositionFromLineMap(lineMap, pos) !== getLineOfLocalPositionFromLineMap(lineMap, commentPos)) {

./node_modules/typescript/lib/tsc.js 14157     function emitComments(text, lineMap, writer, comments, leadingSeparator, trailingSeparator, newLine, writeComment) {

./node_modules/typescript/lib/tsc.js 14169                 writeComment(text, lineMap, writer, comment.pos, comment.end, newLine);

./node_modules/typescript/lib/tsc.js 14183     function emitDetachedComments(text, lineMap, writer, writeComment, node, newLine, removeComments) {

./node_modules/typescript/lib/tsc.js 14200                     var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, lastComment.end);

./node_modules/typescript/lib/tsc.js 14201                     var commentLine = getLineOfLocalPositionFromLineMap(lineMap, comment.pos);

./node_modules/typescript/lib/tsc.js 14210                 var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, ts.last(detachedComments).end);

./node_modules/typescript/lib/tsc.js 14211                 var nodeLine = getLineOfLocalPositionFromLineMap(lineMap, ts.skipTrivia(text, node.pos));

./node_modules/typescript/lib/tsc.js 14213                     emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments);

./node_modules/typescript/lib/tsc.js 14214                     emitComments(text, lineMap, writer, detachedComments, false, true, newLine, writeComment);

./node_modules/typescript/lib/tsc.js 14225     function writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/tsc.js 14227             var firstCommentLineAndCharacter = ts.computeLineAndCharacterOfPosition(lineMap, commentPos);

./node_modules/typescript/lib/tsc.js 14228             var lineCount = lineMap.length;

./node_modules/typescript/lib/tsc.js 14230             for (var pos = commentPos, currentLine = firstCommentLineAndCharacter.line; pos < commentEnd; currentLine++) {

./node_modules/typescript/lib/tsc.js 14231                 var nextLineStart = (currentLine + 1) === lineCount

./node_modules/typescript/lib/tsc.js 14233                     : lineMap[currentLine + 1];

./node_modules/typescript/lib/tsc.js 14236                         firstCommentLineIndent = calculateIndent(text, lineMap[firstCommentLineAndCharacter.line], commentPos);

./node_modules/typescript/lib/tsc.js 14719     var lineFeed = "\n";

./node_modules/typescript/lib/tsc.js 14725                 return lineFeed;

./node_modules/typescript/lib/tsc.js 17321             inlineExpressions: inlineExpressions,

./node_modules/typescript/lib/tsc.js 20748         function inlineExpressions(expressions) {

./node_modules/typescript/lib/tsc.js 21599     function ignoreSourceNewlines(node) {

./node_modules/typescript/lib/tsc.js 21603     ts.ignoreSourceNewlines = ignoreSourceNewlines;

./node_modules/typescript/lib/tsc.js 23647     function createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState) {

./node_modules/typescript/lib/tsc.js 23649         return trampoline;

./node_modules/typescript/lib/tsc.js 23650         function trampoline(node, outerState) {

./node_modules/typescript/lib/tsc.js 23663     ts.createBinaryExpressionTrampoline = createBinaryExpressionTrampoline;

./node_modules/typescript/lib/tsc.js 29173                                         removeLeadingNewlines(comments);

./node_modules/typescript/lib/tsc.js 29197                 function removeLeadingNewlines(comments) {

./node_modules/typescript/lib/tsc.js 29423                     removeLeadingNewlines(comments);

./node_modules/typescript/lib/tsc.js 30581             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 30595             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 30693             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 30729             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 30737             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 30744             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 30753             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 30762             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 30769             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 30776             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 31251             name: "inlineSourceMap",

./node_modules/typescript/lib/tsc.js 31259             name: "inlineSources",

./node_modules/typescript/lib/tsc.js 31362             description: ts.Diagnostics.Set_the_newline_character_for_emitting_files,

./node_modules/typescript/lib/tsc.js 31579             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 31586             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 31593             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 31599             category: ts.Diagnostics.Command_line_Options,

./node_modules/typescript/lib/tsc.js 31812                     errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line, opt.name));

./node_modules/typescript/lib/tsc.js 31816                 errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line, opt.name));

./node_modules/typescript/lib/tsc.js 32351                 if (optionsNameMap.has(name) && (optionsNameMap.get(name).category === ts.Diagnostics.Command_line_Options || optionsNameMap.get(name).category === ts.Diagnostics.Output_Formatting)) {

./node_modules/typescript/lib/tsc.js 32410             var categoriesToSkip = [ts.Diagnostics.Command_line_Options, ts.Diagnostics.Editor_Support, ts.Diagnostics.Compiler_Diagnostics, ts.Diagnostics.Backwards_Compatibility, ts.Diagnostics.Watch_and_Build_Modes, ts.Diagnostics.Output_Formatting];

./node_modules/typescript/lib/tsc.js 35603             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, undefined);

./node_modules/typescript/lib/tsc.js 42304                     if (file && ts.isTupleTypeNode(node) && (ts.getLineAndCharacterOfPosition(file, node.pos).line === ts.getLineAndCharacterOfPosition(file, node.end).line)) {

./node_modules/typescript/lib/tsc.js 42437                 function inlineExportModifiers(statements) {

./node_modules/typescript/lib/tsc.js 42467                     statements = inlineExportModifiers(statements);

./node_modules/typescript/lib/tsc.js 55861             var inlineLevel = 0;

./node_modules/typescript/lib/tsc.js 56694                         if (!isMatchingReference(reference, expr) && inlineLevel < 5) {

./node_modules/typescript/lib/tsc.js 56699                                     inlineLevel++;

./node_modules/typescript/lib/tsc.js 56701                                     inlineLevel--;

./node_modules/typescript/lib/tsc.js 62804             var trampoline = ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState);

./node_modules/typescript/lib/tsc.js 62806                 var result = trampoline(node, checkMode);

./node_modules/typescript/lib/tsc.js 70388             var startLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.pos).line;

./node_modules/typescript/lib/tsc.js 70389             var endLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.end).line;

./node_modules/typescript/lib/tsc.js 72187                 if (end && (raw.generatedLine > end.line ||

./node_modules/typescript/lib/tsc.js 72188                     (raw.generatedLine === end.line && raw.generatedCharacter > end.character))) {

./node_modules/typescript/lib/tsc.js 72191                 if (start && (raw.generatedLine < start.line ||

./node_modules/typescript/lib/tsc.js 72192                     (start.line === raw.generatedLine && raw.generatedCharacter < start.character))) {

./node_modules/typescript/lib/tsc.js 72221                 var rawGeneratedLine = raw.generatedLine - (start ? start.line : 0);

./node_modules/typescript/lib/tsc.js 72223                 var rawGeneratedCharacter = start && start.line === raw.generatedLine ? raw.generatedCharacter - start.character : raw.generatedCharacter;

./node_modules/typescript/lib/tsc.js 72318     function getLineInfo(text, lineStarts) {

./node_modules/typescript/lib/tsc.js 72320             getLineCount: function () { return lineStarts.length; },

./node_modules/typescript/lib/tsc.js 72321             getLineText: function (line) { return text.substring(lineStarts[line], lineStarts[line + 1]); }

./node_modules/typescript/lib/tsc.js 72325     function tryGetSourceMappingURL(lineInfo) {

./node_modules/typescript/lib/tsc.js 72326         for (var index = lineInfo.getLineCount() - 1; index >= 0; index--) {

./node_modules/typescript/lib/tsc.js 72327             var line = lineInfo.getLineText(index);

./node_modules/typescript/lib/tsc.js 72328             var comment = sourceMapCommentRegExp.exec(line);

./node_modules/typescript/lib/tsc.js 72332             else if (!line.match(whitespaceOrMapCommentRegExp)) {

./node_modules/typescript/lib/tsc.js 72882     function isSimpleInlineableExpression(expression) {

./node_modules/typescript/lib/tsc.js 72885     ts.isSimpleInlineableExpression = isSimpleInlineableExpression;

./node_modules/typescript/lib/tsc.js 73009         return context.factory.inlineExpressions(expressions) || context.factory.createOmittedExpression();

./node_modules/typescript/lib/tsc.js 73083                 var value = context.factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/tsc.js 73097             var variable = context.factory.createVariableDeclaration(name, undefined, undefined, pendingExpressions_1 ? context.factory.inlineExpressions(ts.append(pendingExpressions_1, value)) : value);

./node_modules/typescript/lib/tsc.js 73109                 value = context.factory.inlineExpressions(ts.append(pendingExpressions, value));

./node_modules/typescript/lib/tsc.js 73123                     if (!ts.isSimpleInlineableExpression(initializer) && ts.isBindingOrAssignmentPattern(bindingTarget)) {

./node_modules/typescript/lib/tsc.js 73250         if (initializer && !ts.isSimpleInlineableExpression(initializer))

./node_modules/typescript/lib/tsc.js 74309                 return generateNameForComputedPropertyName && !ts.isSimpleInlineableExpression(name.expression)

./node_modules/typescript/lib/tsc.js 74325                 if (!ts.isSimpleInlineableExpression(innerExpression)) {

./node_modules/typescript/lib/tsc.js 74469                 return ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/tsc.js 75190                 node = factory.updateComputedPropertyName(node, factory.inlineExpressions(expressions));

./node_modules/typescript/lib/tsc.js 75239             if (expr && !ts.isSimpleInlineableExpression(expr)) {

./node_modules/typescript/lib/tsc.js 75343                             if (ts.isSimpleInlineableExpression(node.operand.argumentExpression)) {

./node_modules/typescript/lib/tsc.js 75378             if (ts.isSimpleInlineableExpression(receiver)) {

./node_modules/typescript/lib/tsc.js 75444                     factory.inlineExpressions(ts.compact(__spreadArray(__spreadArray([], pendingExpressions, true), [node], false))) :

./node_modules/typescript/lib/tsc.js 75472                                 if (!ts.isSimpleInlineableExpression(setterName)) {

./node_modules/typescript/lib/tsc.js 75613                 statements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/tsc.js 75650                         pendingStatements.push(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/tsc.js 75656                         return factory.inlineExpressions([factory.createAssignment(temp, classExpression), temp]);

./node_modules/typescript/lib/tsc.js 75674                     return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/tsc.js 75818             var propertyName = ts.isComputedPropertyName(property.name) && !ts.isSimpleInlineableExpression(property.name.expression)

./node_modules/typescript/lib/tsc.js 76008                 var inlinable = ts.isSimpleInlineableExpression(innerExpression);

./node_modules/typescript/lib/tsc.js 76554             return factory.inlineExpressions(ts.map(variables, transformInitializedVariable));

./node_modules/typescript/lib/tsc.js 77180                 factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), callValues]) :

./node_modules/typescript/lib/tsc.js 77908                     var lineCol = ts.getLineAndCharacterOfPosition(originalFile, location.pos);

./node_modules/typescript/lib/tsc.js 77911                         factory.createPropertyAssignment("lineNumber", factory.createNumericLiteral(lineCol.line + 1)),

./node_modules/typescript/lib/tsc.js 77912                         factory.createPropertyAssignment("columnNumber", factory.createNumericLiteral(lineCol.character + 1))

./node_modules/typescript/lib/tsc.js 78270         oline: 0x203E,

./node_modules/typescript/lib/tsc.js 79339                     updated = ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(assignments)), node);

./node_modules/typescript/lib/tsc.js 79540                 ? factory.inlineExpressions([factory.createAssignment(errorRecord, factory.createVoidZero()), values])

./node_modules/typescript/lib/tsc.js 79584             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/tsc.js 80750                 return ts.setSourceMapRange(factory.createExpressionStatement(factory.inlineExpressions(ts.map(variables, transformInitializedVariable))), node);

./node_modules/typescript/lib/tsc.js 80805             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/tsc.js 80813                         emitWorker(1, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/tsc.js 80829                         emitWorker(1, [factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions))]);

./node_modules/typescript/lib/tsc.js 80835             return factory.inlineExpressions(pendingExpressions);

./node_modules/typescript/lib/tsc.js 80922             return factory.inlineExpressions(expressions);

./node_modules/typescript/lib/tsc.js 80925                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(expressions)));

./node_modules/typescript/lib/tsc.js 81049                     emitStatement(factory.createExpressionStatement(factory.inlineExpressions(pendingExpressions)));

./node_modules/typescript/lib/tsc.js 81174                     ? factory.inlineExpressions(ts.map(variables, transformInitializedVariable))

./node_modules/typescript/lib/tsc.js 81256                     return createInlineBreak(label, node);

./node_modules/typescript/lib/tsc.js 81274                     return createInlineBreak(label, node);

./node_modules/typescript/lib/tsc.js 81283             return createInlineReturn(ts.visitNode(node.expression, visitor, ts.isExpression), node);

./node_modules/typescript/lib/tsc.js 81321                                 createInlineBreak(clauseLabels[i], clause.expression)

./node_modules/typescript/lib/tsc.js 81757         function createInlineBreak(label, location) {

./node_modules/typescript/lib/tsc.js 81764         function createInlineReturn(expression, location) {

./node_modules/typescript/lib/tsc.js 82761                     var statement = ts.setOriginalNode(ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node), node);

./node_modules/typescript/lib/tsc.js 83411                 statements = ts.append(statements, ts.setTextRange(factory.createExpressionStatement(factory.inlineExpressions(expressions)), node));

./node_modules/typescript/lib/tsc.js 83678                 return expressions ? factory.inlineExpressions(expressions) : factory.createOmittedExpression();

./node_modules/typescript/lib/tsc.js 85273             if (ts.isTupleTypeNode(input) && (ts.getLineAndCharacterOfPosition(currentSourceFile, input.pos).line === ts.getLineAndCharacterOfPosition(currentSourceFile, input.end).line)) {

./node_modules/typescript/lib/tsc.js 86260         return (options.sourceMap && !options.inlineSourceMap) ? jsFilePath + ".map" : undefined;

./node_modules/typescript/lib/tsc.js 86382         ts.Debug.assert(ts.contains(commandLine.fileNames, inputFileName), "Expected fileName to be present in command line");

./node_modules/typescript/lib/tsc.js 86421         var sourceMapDataList = (compilerOptions.sourceMap || compilerOptions.inlineSourceMap || ts.getAreDeclarationMapsEnabled(compilerOptions)) ? [] : undefined;

./node_modules/typescript/lib/tsc.js 86509                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/tsc.js 86510                 inlineSources: compilerOptions.inlineSources,

./node_modules/typescript/lib/tsc.js 86555                 inlineSourceMap: compilerOptions.inlineSourceMap,

./node_modules/typescript/lib/tsc.js 86639             return (mapOptions.sourceMap || mapOptions.inlineSourceMap)

./node_modules/typescript/lib/tsc.js 86662             if (mapOptions.inlineSourceMap) {

./node_modules/typescript/lib/tsc.js 86768         if ((sourceMapFilePath && !sourceMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/tsc.js 86769             return sourceMapFilePath || "inline sourcemap decoding";

./node_modules/typescript/lib/tsc.js 86774         if ((declarationMapPath && !declarationMapText) || config.options.inlineSourceMap)

./node_modules/typescript/lib/tsc.js 86775             return declarationMapPath || "inline sourcemap decoding";

./node_modules/typescript/lib/tsc.js 86862         var preserveSourceNewlines = printerOptions.preserveSourceNewlines;

./node_modules/typescript/lib/tsc.js 87085             pipelineEmit(hint, node, undefined);

./node_modules/typescript/lib/tsc.js 87122             pipelineEmit(4, node, parenthesizerRule);

./node_modules/typescript/lib/tsc.js 87128             pipelineEmit(2, node, undefined);

./node_modules/typescript/lib/tsc.js 87133             pipelineEmit(1, node, parenthesizerRule);

./node_modules/typescript/lib/tsc.js 87136             pipelineEmit(ts.isStringLiteral(node) ? 6 : 4, node);

./node_modules/typescript/lib/tsc.js 87139             if (preserveSourceNewlines && (ts.getEmitFlags(node) & 134217728)) {

./node_modules/typescript/lib/tsc.js 87140                 preserveSourceNewlines = false;

./node_modules/typescript/lib/tsc.js 87143         function afterEmitNode(savedPreserveSourceNewlines) {

./node_modules/typescript/lib/tsc.js 87144             preserveSourceNewlines = savedPreserveSourceNewlines;

./node_modules/typescript/lib/tsc.js 87146         function pipelineEmit(emitHint, node, parenthesizerRule) {

./node_modules/typescript/lib/tsc.js 87148             var pipelinePhase = getPipelinePhase(0, emitHint, node);

./node_modules/typescript/lib/tsc.js 87149             pipelinePhase(emitHint, node);

./node_modules/typescript/lib/tsc.js 87162         function getPipelinePhase(phase, emitHint, node) {

./node_modules/typescript/lib/tsc.js 87166                         return pipelineEmitWithNotification;

./node_modules/typescript/lib/tsc.js 87173                         return pipelineEmitWithSubstitution;

./node_modules/typescript/lib/tsc.js 87177                         return pipelineEmitWithComments;

./node_modules/typescript/lib/tsc.js 87181                         return pipelineEmitWithSourceMaps;

./node_modules/typescript/lib/tsc.js 87184                     return pipelineEmitWithHint;

./node_modules/typescript/lib/tsc.js 87189         function getNextPipelinePhase(currentPhase, emitHint, node) {

./node_modules/typescript/lib/tsc.js 87190             return getPipelinePhase(currentPhase + 1, emitHint, node);

./node_modules/typescript/lib/tsc.js 87192         function pipelineEmitWithNotification(hint, node) {

./node_modules/typescript/lib/tsc.js 87193             var pipelinePhase = getNextPipelinePhase(0, hint, node);

./node_modules/typescript/lib/tsc.js 87194             onEmitNode(hint, node, pipelinePhase);

./node_modules/typescript/lib/tsc.js 87196         function pipelineEmitWithHint(hint, node) {

./node_modules/typescript/lib/tsc.js 87198             if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsc.js 87199                 var savedPreserveSourceNewlines = preserveSourceNewlines;

./node_modules/typescript/lib/tsc.js 87201                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/tsc.js 87202                 afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/tsc.js 87205                 pipelineEmitWithHintWorker(hint, node);

./node_modules/typescript/lib/tsc.js 87210         function pipelineEmitWithHintWorker(hint, node) {

./node_modules/typescript/lib/tsc.js 87633         function pipelineEmitWithSubstitution(hint, node) {

./node_modules/typescript/lib/tsc.js 87634             var pipelinePhase = getNextPipelinePhase(1, hint, node);

./node_modules/typescript/lib/tsc.js 87638             pipelinePhase(hint, node);

./node_modules/typescript/lib/tsc.js 87716             if ((printerOptions.sourceMap || printerOptions.inlineSourceMap)

./node_modules/typescript/lib/tsc.js 88065             pipelineEmit(3, node.typeParameter);

./node_modules/typescript/lib/tsc.js 88155             var linesBeforeDot = getLinesBetweenNodes(node, node.expression, token);

./node_modules/typescript/lib/tsc.js 88156             var linesAfterDot = getLinesBetweenNodes(node, token, node.name);

./node_modules/typescript/lib/tsc.js 88157             writeLinesAndIndent(linesBeforeDot, false);

./node_modules/typescript/lib/tsc.js 88171             writeLinesAndIndent(linesAfterDot, false);

./node_modules/typescript/lib/tsc.js 88173             decreaseIndentIf(linesBeforeDot, linesAfterDot);

./node_modules/typescript/lib/tsc.js 88301             return ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, undefined);

./node_modules/typescript/lib/tsc.js 88305                     state.preserveSourceNewlinesStack[state.stackIndex] = preserveSourceNewlines;

./node_modules/typescript/lib/tsc.js 88321                         preserveSourceNewlinesStack: [undefined],

./node_modules/typescript/lib/tsc.js 88336                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, operatorToken);

./node_modules/typescript/lib/tsc.js 88337                 var linesAfterOperator = getLinesBetweenNodes(node, operatorToken, node.right);

./node_modules/typescript/lib/tsc.js 88338                 writeLinesAndIndent(linesBeforeOperator, isCommaOperator);

./node_modules/typescript/lib/tsc.js 88342                 writeLinesAndIndent(linesAfterOperator, true);

./node_modules/typescript/lib/tsc.js 88348                 var linesBeforeOperator = getLinesBetweenNodes(node, node.left, node.operatorToken);

./node_modules/typescript/lib/tsc.js 88349                 var linesAfterOperator = getLinesBetweenNodes(node, node.operatorToken, node.right);

./node_modules/typescript/lib/tsc.js 88350                 decreaseIndentIf(linesBeforeOperator, linesAfterOperator);

./node_modules/typescript/lib/tsc.js 88352                     var savedPreserveSourceNewlines = state.preserveSourceNewlinesStack[state.stackIndex];

./node_modules/typescript/lib/tsc.js 88358                     afterEmitNode(savedPreserveSourceNewlines);

./node_modules/typescript/lib/tsc.js 88371                 var pipelinePhase = getPipelinePhase(0, 1, next);

./node_modules/typescript/lib/tsc.js 88372                 if (pipelinePhase === pipelineEmitWithSubstitution) {

./node_modules/typescript/lib/tsc.js 88375                     pipelinePhase = getNextPipelinePhase(1, 1, next);

./node_modules/typescript/lib/tsc.js 88378                 if (pipelinePhase === pipelineEmitWithComments ||

./node_modules/typescript/lib/tsc.js 88379                     pipelinePhase === pipelineEmitWithSourceMaps ||

./node_modules/typescript/lib/tsc.js 88380                     pipelinePhase === pipelineEmitWithHint) {

./node_modules/typescript/lib/tsc.js 88386                 pipelinePhase(1, next);

./node_modules/typescript/lib/tsc.js 88390             var linesBeforeQuestion = getLinesBetweenNodes(node, node.condition, node.questionToken);

./node_modules/typescript/lib/tsc.js 88391             var linesAfterQuestion = getLinesBetweenNodes(node, node.questionToken, node.whenTrue);

./node_modules/typescript/lib/tsc.js 88392             var linesBeforeColon = getLinesBetweenNodes(node, node.whenTrue, node.colonToken);

./node_modules/typescript/lib/tsc.js 88393             var linesAfterColon = getLinesBetweenNodes(node, node.colonToken, node.whenFalse);

./node_modules/typescript/lib/tsc.js 88395             writeLinesAndIndent(linesBeforeQuestion, true);

./node_modules/typescript/lib/tsc.js 88397             writeLinesAndIndent(linesAfterQuestion, true);

./node_modules/typescript/lib/tsc.js 88399             decreaseIndentIf(linesBeforeQuestion, linesAfterQuestion);

./node_modules/typescript/lib/tsc.js 88400             writeLinesAndIndent(linesBeforeColon, true);

./node_modules/typescript/lib/tsc.js 88402             writeLinesAndIndent(linesAfterColon, true);

./node_modules/typescript/lib/tsc.js 88404             decreaseIndentIf(linesBeforeColon, linesAfterColon);

./node_modules/typescript/lib/tsc.js 88506             if (ts.isBlock(node.statement) && !preserveSourceNewlines) {

./node_modules/typescript/lib/tsc.js 89070                 var isMultiline = currentSourceFile && !ts.nodeIsSynthesized(node) && ts.getLineAndCharacterOfPosition(currentSourceFile, node.pos).line !== ts.getLineAndCharacterOfPosition(currentSourceFile, node.end).line;

./node_modules/typescript/lib/tsc.js 89071                 if (isMultiline) {

./node_modules/typescript/lib/tsc.js 89078                 if (isMultiline) {

./node_modules/typescript/lib/tsc.js 89169                     var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/tsc.js 89170                     for (var _a = 0, lines_2 = lines; _a < lines_2.length; _a++) {

./node_modules/typescript/lib/tsc.js 89171                         var line = lines_2[_a];

./node_modules/typescript/lib/tsc.js 89176                         write(line);

./node_modules/typescript/lib/tsc.js 89584                     pipelineEmit(5, node);

./node_modules/typescript/lib/tsc.js 89690                 if (format & 1 && !(preserveSourceNewlines && (!parentNode || ts.rangeIsOnSingleLine(parentNode, currentSourceFile)))) {

./node_modules/typescript/lib/tsc.js 89870             else if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsc.js 89871                 var lines = getLinesBetweenNodes(parentNode, prevChildNode, nextChildNode);

./node_modules/typescript/lib/tsc.js 89872                 if (lines) {

./node_modules/typescript/lib/tsc.js 89873                     writeLine(lines);

./node_modules/typescript/lib/tsc.js 89884             var lines = text.split(/\r\n?|\n/g);

./node_modules/typescript/lib/tsc.js 89885             var indentation = ts.guessIndentation(lines);

./node_modules/typescript/lib/tsc.js 89886             for (var _a = 0, lines_3 = lines; _a < lines_3.length; _a++) {

./node_modules/typescript/lib/tsc.js 89887                 var lineText = lines_3[_a];

./node_modules/typescript/lib/tsc.js 89888                 var line = indentation ? lineText.slice(indentation) : lineText;

./node_modules/typescript/lib/tsc.js 89889                 if (line.length) {

./node_modules/typescript/lib/tsc.js 89891                     write(line);

./node_modules/typescript/lib/tsc.js 89895         function writeLinesAndIndent(lineCount, writeSpaceIfNotIndenting) {

./node_modules/typescript/lib/tsc.js 89896             if (lineCount) {

./node_modules/typescript/lib/tsc.js 89898                 writeLine(lineCount);

./node_modules/typescript/lib/tsc.js 89913             if (format & 2 || preserveSourceNewlines) {

./node_modules/typescript/lib/tsc.js 89931                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsc.js 89943             if (format & 2 || preserveSourceNewlines) {

./node_modules/typescript/lib/tsc.js 89951                     if (preserveSourceNewlines && siblingNodePositionsAreComparable(previousNode, nextNode)) {

./node_modules/typescript/lib/tsc.js 89954                     else if (!preserveSourceNewlines && originalNodesHaveSameParent(previousNode, nextNode)) {

./node_modules/typescript/lib/tsc.js 89969             if (format & 2 || preserveSourceNewlines) {

./node_modules/typescript/lib/tsc.js 89978                     if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsc.js 89994             ts.Debug.assert(!!preserveSourceNewlines);

./node_modules/typescript/lib/tsc.js 89995             var lines = getLineDifference(true);

./node_modules/typescript/lib/tsc.js 89996             if (lines === 0) {

./node_modules/typescript/lib/tsc.js 89999             return lines;

./node_modules/typescript/lib/tsc.js 90002             var leadingNewlines = preserveSourceNewlines && getLeadingLineTerminatorCount(parent, [node], 0);

./node_modules/typescript/lib/tsc.js 90003             if (leadingNewlines) {

./node_modules/typescript/lib/tsc.js 90004                 writeLinesAndIndent(leadingNewlines, false);

./node_modules/typescript/lib/tsc.js 90006             return !!leadingNewlines;

./node_modules/typescript/lib/tsc.js 90009             var trailingNewlines = preserveSourceNewlines && getClosingLineTerminatorCount(parent, [node], 0);

./node_modules/typescript/lib/tsc.js 90010             if (trailingNewlines) {

./node_modules/typescript/lib/tsc.js 90011                 writeLine(trailingNewlines);

./node_modules/typescript/lib/tsc.js 90035                 if (preserveSourceNewlines) {

./node_modules/typescript/lib/tsc.js 90384         function pipelineEmitWithComments(hint, node) {

./node_modules/typescript/lib/tsc.js 90385             var pipelinePhase = getNextPipelinePhase(2, hint, node);

./node_modules/typescript/lib/tsc.js 90390             pipelinePhase(hint, node);

./node_modules/typescript/lib/tsc.js 90446             if (comment.hasLeadingNewline || comment.kind === 2) {

./node_modules/typescript/lib/tsc.js 90468             var lineMap = comment.kind === 3 ? ts.computeLineStarts(text) : undefined;

./node_modules/typescript/lib/tsc.js 90469             ts.writeCommentRange(text, lineMap, writer, 0, text.length, newLine);

./node_modules/typescript/lib/tsc.js 90590         function emitTrailingCommentsOfPosition(pos, prefixSpace, forceNoNewline) {

./node_modules/typescript/lib/tsc.js 90595             forEachTrailingCommentToEmit(pos, prefixSpace ? emitTrailingComment : forceNoNewline ? emitTrailingCommentOfPositionNoNewline : emitTrailingCommentOfPosition);

./node_modules/typescript/lib/tsc.js 90598         function emitTrailingCommentOfPositionNoNewline(commentPos, commentEnd, kind) {

./node_modules/typescript/lib/tsc.js 90656         function emitComment(text, lineMap, writer, commentPos, commentEnd, newLine) {

./node_modules/typescript/lib/tsc.js 90660             ts.writeCommentRange(text, lineMap, writer, commentPos, commentEnd, newLine);

./node_modules/typescript/lib/tsc.js 90672         function pipelineEmitWithSourceMaps(hint, node) {

./node_modules/typescript/lib/tsc.js 90673             var pipelinePhase = getNextPipelinePhase(3, hint, node);

./node_modules/typescript/lib/tsc.js 90675             pipelinePhase(hint, node);

./node_modules/typescript/lib/tsc.js 90721             var _a = ts.getLineAndCharacterOfPosition(sourceMapSource, pos), sourceLine = _a.line, sourceCharacter = _a.character;

./node_modules/typescript/lib/tsc.js 90769             if (printerOptions.inlineSources) {

./node_modules/typescript/lib/tsc.js 91526             var _a = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start), line = _a.line, character = _a.character;

./node_modules/typescript/lib/tsc.js 91529             return relativeFileName + "(" + (line + 1) + "," + (character + 1) + "): " + errorMessage;

./node_modules/typescript/lib/tsc.js 91552             case ts.DiagnosticCategory.Suggestion: return ts.Debug.fail("Should never get an Info diagnostic on the command line.");

./node_modules/typescript/lib/tsc.js 91561         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character;

./node_modules/typescript/lib/tsc.js 91562         var _b = ts.getLineAndCharacterOfPosition(file, start + length), lastLine = _b.line, lastLineChar = _b.character;

./node_modules/typescript/lib/tsc.js 91563         var lastLineInFile = ts.getLineAndCharacterOfPosition(file, file.text.length).line;

./node_modules/typescript/lib/tsc.js 91576             var lineStart = ts.getPositionOfLineAndCharacter(file, i, 0);

./node_modules/typescript/lib/tsc.js 91577             var lineEnd = i < lastLineInFile ? ts.getPositionOfLineAndCharacter(file, i + 1, 0) : file.text.length;

./node_modules/typescript/lib/tsc.js 91578             var lineContent = file.text.slice(lineStart, lineEnd);

./node_modules/typescript/lib/tsc.js 91579             lineContent = ts.trimStringEnd(lineContent);

./node_modules/typescript/lib/tsc.js 91580             lineContent = lineContent.replace(/\t/g, " ");

./node_modules/typescript/lib/tsc.js 91582             context += lineContent + host.getNewLine();

./node_modules/typescript/lib/tsc.js 91587                 context += lineContent.slice(0, firstLineChar).replace(/\S/g, " ");

./node_modules/typescript/lib/tsc.js 91588                 context += lineContent.slice(firstLineChar, lastCharForLine).replace(/./g, "~");

./node_modules/typescript/lib/tsc.js 91591                 context += lineContent.slice(0, lastLineChar).replace(/./g, "~");

./node_modules/typescript/lib/tsc.js 91594                 context += lineContent.replace(/./g, "~");

./node_modules/typescript/lib/tsc.js 91602         var _a = ts.getLineAndCharacterOfPosition(file, start), firstLine = _a.line, firstLineChar = _a.character;

./node_modules/typescript/lib/tsc.js 92704             var lineStarts = ts.getLineStarts(file);

./node_modules/typescript/lib/tsc.js 92705             var line = ts.computeLineAndCharacterOfPosition(lineStarts, start).line - 1;

./node_modules/typescript/lib/tsc.js 92706             while (line >= 0) {

./node_modules/typescript/lib/tsc.js 92707                 if (directives.markUsed(line)) {

./node_modules/typescript/lib/tsc.js 92708                     return line;

./node_modules/typescript/lib/tsc.js 92710                 var lineText = file.text.slice(lineStarts[line], lineStarts[line + 1]).trim();

./node_modules/typescript/lib/tsc.js 92711                 if (lineText !== "" && !/^(\s*)\/\/(.*)$/.test(lineText)) {

./node_modules/typescript/lib/tsc.js 92714                 line--;

./node_modules/typescript/lib/tsc.js 93560             if (options.inlineSourceMap) {

./node_modules/typescript/lib/tsc.js 93562                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "sourceMap", "inlineSourceMap");

./node_modules/typescript/lib/tsc.js 93565                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, "mapRoot", "inlineSourceMap");

./node_modules/typescript/lib/tsc.js 93629             if (!options.sourceMap && !options.inlineSourceMap) {

./node_modules/typescript/lib/tsc.js 93630                 if (options.inlineSources) {

./node_modules/typescript/lib/tsc.js 93631                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "inlineSources");

./node_modules/typescript/lib/tsc.js 93634                     createDiagnosticForOptionName(ts.Diagnostics.Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided, "sourceRoot");

./node_modules/typescript/lib/tsc.js 99441             var lineCount = ts.getLineStarts(file).length;

./node_modules/typescript/lib/tsc.js 99442             counts.set(key, counts.get(key) + lineCount);

./node_modules/typescript/lib/tsc.js 99601             if (option.category === ts.Diagnostics.Command_line_Options)

./node_modules/typescript/lib/tsc.js 99681         var lines = [];

./node_modules/typescript/lib/tsc.js 99685             lines = __spreadArray(__spreadArray([], lines, true), tmp, true);

./node_modules/typescript/lib/tsc.js 99687         if (lines[lines.length - 2] !== sys.newLine) {

./node_modules/typescript/lib/tsc.js 99688             lines.push(sys.newLine);

./node_modules/typescript/lib/tsc.js 99690         return lines;

./node_modules/typescript/lib/tsc.js 99737         var cliCommands = simpleOptions.filter(function (opt) { return opt.isCommandLineOnly || opt.category === ts.Diagnostics.Command_line_Options; });

./node_modules/typescript/lib/tsc.js 99741             var line = output_1[_i];

./node_modules/typescript/lib/tsc.js 99742             sys.write(line);

./node_modules/typescript/lib/tsc.js 99759             var line = output_2[_i];

./node_modules/typescript/lib/tsc.js 99760             sys.write(line);

./node_modules/typescript/lib/tsc.js 99767             var line = output_3[_i];

./node_modules/typescript/lib/tsc.js 99768             sys.write(line);

./node_modules/typescript/lib/tsc.js 99804             reportDiagnostic(ts.createCompilerDiagnostic(ts.Diagnostics.Option_build_must_be_the_first_command_line_argument));

./node_modules/typescript/lib/tsc.js 99833                 reportDiagnostic(ts.createCompilerDiagnostic(ts.Diagnostics.Option_project_cannot_be_mixed_with_source_files_on_a_command_line));

./node_modules/typescript/lib/tsc.js 100111             var lineCounts = countLines(program);

./node_modules/typescript/lib/tsc.js 100114                 for (var _i = 0, _a = ts.arrayFrom(lineCounts.keys()); _i < _a.length; _i++) {

./node_modules/typescript/lib/tsc.js 100116                     reportCountStatistic("Lines of " + key, lineCounts.get(key));

./node_modules/typescript/lib/tsc.js 100124                 reportCountStatistic("Lines", ts.reduceLeftIterator(lineCounts.values(), function (sum, count) { return sum + count; }, 0));

./node_modules/typescript/lib/tsc.js 100208 // This file actually uses arguments passed on commandline and executes it

./node_modules/typescript/lib/ko/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "명령줄 옵션",

./node_modules/typescript/lib/ko/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "단일 파일 내에서 소스 맵과 함께 소스를 내보냅니다. '--inlineSourceMap' 또는 '--sourceMap'을 설정해야 합니다.",

./node_modules/typescript/lib/ko/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "파일에서 명령줄 옵션 및 파일을 삽입합니다.",

./node_modules/typescript/lib/ko/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "'{0}' 옵션은 'tsconfig. json' 파일에만 지정하거나 명령줄에서 'false' 또는 'null'로 설정할 수 있습니다.",

./node_modules/typescript/lib/ko/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "'{0}' 옵션은 'tsconfig. json' 파일에만 지정하거나 명령줄에서 'null'로 설정할 수 있습니다.",

./node_modules/typescript/lib/ko/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "'{0}' 옵션은 '--inlineSourceMap' 옵션 또는 '--sourceMap' 옵션이 제공되는 경우에만 사용할 수 있습니다.",

./node_modules/typescript/lib/ko/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "'--build' 옵션은 첫 번째 명령줄 인수여야 합니다.",

./node_modules/typescript/lib/ko/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "명령줄에서 'project' 옵션을 원본 파일과 혼합하여 사용할 수 없습니다.",

./node_modules/typescript/lib/ko/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "파일을 내보내기 위한 줄 바꿈 문자를 설정합니다.",

./node_modules/typescript/lib/ko/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "파일을 내보낼 때 사용할 줄 시퀀스의 끝 지정: 'CRLF'(dos) 또는 'LF'(unix).",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 13   "A_class_can_only_implement_an_object_type_or_intersection_of_object_types_with_statically_known_memb_2422": "Bir sınıf, yalnızca statik olarak bilinen üyelere sahip bir nesne türünü veya nesne türlerinin bir kesişimini uygulayabilir.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 231   "An_interface_can_only_extend_an_object_type_or_intersection_of_object_types_with_statically_known_me_2312": "Arabirim, yalnızca statik olarak bilinen üyelere sahip bir nesne türünü veya nesne türlerinin bir kesişimini genişletebilir.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 264   "Base_constructor_return_type_0_is_not_an_object_type_or_intersection_of_object_types_with_statically_2509": "'{0}' temel oluşturucu dönüş türü, statik olarak bilinen üyelere sahip bir nesne türü veya nesne türlerinin bir kesişimi değil.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "Komut Satırı Seçenekleri",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "Kaynağı, kaynak eşlemeleri ile birlikte tek bir dosya içinde gösterin; '--inlineSourceMap' veya '--sourceMap' öğesinin ayarlanmasını gerektirir.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "Dosyadaki komut satırı seçeneklerini ve dosyaları ekleyin.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 960   "Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1_2353": "Nesne sabit değeri yalnızca bilinen özellikleri belirtebilir ve '{0}', '{1}' türünde değil.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 961   "Object_literal_may_only_specify_known_properties_but_0_does_not_exist_in_type_1_Did_you_mean_to_writ_2561": "Nesne sabit değerinde yalnızca bilinen özellikler belirtilebilir, ancak '{0}', '{1}' türünde yok. '{2}' yazmak mı istediniz?",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "'{0}' seçeneği, yalnızca 'tsconfig.json' dosyasında belirtilebilir veya komut satırında 'false' veya 'null' olarak ayarlanabilir.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "'{0}' seçeneği, yalnızca 'tsconfig.json' dosyasında belirtilebilir veya komut satırında 'null' olarak ayarlanabilir.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "'{0} seçeneği yalnızca '--inlineSourceMap' veya '--sourceMap' seçeneği sağlandığında kullanılabilir.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "'--build' seçeneği ilk komut satırı bağımsız değişkeni olmalıdır.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "'project' seçeneği, komut satırındaki kaynak dosyalarıyla karıştırılamaz.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "Dosyaları yaymak için yeni satır karakterini ayarlayın.",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 1266   "Show_what_would_be_built_or_deleted_if_specified_with_clean_6367": "Nelerin derleneceğini (veya '--clean' ile belirtilmişse silineceğini) göster",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "Dosyalar gösterilirken kullanılacak satır sonu dizisini belirtin: 'CRLF' (dos) veya 'LF' (unix).",

./node_modules/typescript/lib/tr/diagnosticMessages.generated.json 1652   "_0_cannot_be_compiled_under_isolatedModules_because_it_is_considered_a_global_script_file_Add_an_imp_1208": "'{0}', genel betik dosyası olarak kabul edildiğinden '--isolatedModules' altında derlenemiyor. Bunu bir modül haline getirmek için içeri aktarma, dışarı aktarma veya boş 'export {}' deyimi ekleyin.",

./node_modules/typescript/lib/cs/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "Možnosti příkazového řádku",

./node_modules/typescript/lib/cs/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "Vygeneruje zdroj spolu se zdrojovými mapováními v jednom souboru. Vyžaduje, aby byla nastavená možnost --inlineSourceMap nebo --sourceMap.",

./node_modules/typescript/lib/cs/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "Vložte parametry příkazového řádku a soubory ze souboru.",

./node_modules/typescript/lib/cs/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "Možnost {0} jde zadat jenom v souboru tsconfig.json nebo nastavit na příkazovém řádku na hodnotu false nebo null.",

./node_modules/typescript/lib/cs/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "Možnost {0} jde zadat jenom v souboru tsconfig.json nebo nastavit na příkazovém řádku na hodnotu null.",

./node_modules/typescript/lib/cs/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "Možnost {0} jde použít jenom při zadání možnosti --inlineSourceMap nebo možnosti --sourceMap.",

./node_modules/typescript/lib/cs/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "Možnost --build musí být prvním argumentem příkazového řádku.",

./node_modules/typescript/lib/cs/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "Možnost project se na příkazovém řádku nedá kombinovat se zdrojovým souborem.",

./node_modules/typescript/lib/cs/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "Nastavte pro generované soubory znak nového řádku.",

./node_modules/typescript/lib/cs/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "Zdejte sekvenci konce řádku, která se má použít při generování souborů: CRLF (dos) nebo LF (unix).",

./node_modules/typescript/lib/pl/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "Opcje wiersza polecenia",

./node_modules/typescript/lib/pl/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "Emituj źródło razem z mapami źródeł w pojedynczym pliku; wymaga ustawienia opcji „--inlineSourceMap” lub „--sourceMap”.",

./node_modules/typescript/lib/pl/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "Wstaw opcje wiersza polecenia i pliki z pliku.",

./node_modules/typescript/lib/pl/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "Opcję „{0}” można określić tylko w pliku „tsconfig.json” albo ustawić na wartość „false” lub „null” w wierszu polecenia.",

./node_modules/typescript/lib/pl/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "Opcję „{0}” można określić tylko w pliku „tsconfig.json” albo ustawić na wartość „null” w wierszu polecenia.",

./node_modules/typescript/lib/pl/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "Opcja „{0}” może być używana tylko w przypadku podania opcji „--inlineSourceMap” lub „--sourceMap”.",

./node_modules/typescript/lib/pl/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "Opcja „--build” musi być pierwszym argumentem wiersza polecenia.",

./node_modules/typescript/lib/pl/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "Nie można mieszać opcji „project” z plikami źródłowymi w wierszu polecenia.",

./node_modules/typescript/lib/pl/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "Określ znak nowego wiersza dla emisji plików.",

./node_modules/typescript/lib/pl/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "Określ sekwencję końca wiersza, która ma być używana podczas emitowania plików: „CRLF” (dos) lub „LF” (unix).",

./node_modules/typescript/lib/ru/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "Параметры командной строки",

./node_modules/typescript/lib/ru/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "Порождать источник вместе с сопоставителями с исходным кодом в одном файле (нужно задать параметр --inlineSourceMap или --sourceMap).",

./node_modules/typescript/lib/ru/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "Вставка параметров командной строки и файлов из файла.",

./node_modules/typescript/lib/ru/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "Параметр \"{0}\" можно указать только в файле \"tsconfig.json\" либо задать значение \"false\" или \"null\" для этого параметра в командной строке.",

./node_modules/typescript/lib/ru/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "Параметр \"{0}\" можно указать только в файле \"tsconfig.json\" либо задать значение \"null\" для этого параметра в командной строке.",

./node_modules/typescript/lib/ru/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "Параметр \"{0}\" можно использовать только при указании \"--inlineSourceMap\" или \"--sourceMap\".",

./node_modules/typescript/lib/ru/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "Параметр \"--build\" должен быть первым аргументом командной строки.",

./node_modules/typescript/lib/ru/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "Параметр project не может быть указан вместе с исходными файлами в командной строке.",

./node_modules/typescript/lib/ru/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "Установка символа новой строки для созданных файлов.",

./node_modules/typescript/lib/ru/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "Укажите окончание последовательности строки для использования при порождении файлов: CRLF (DOS) или LF (UNIX).",

./node_modules/typescript/lib/zh-tw/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "命令列選項",

./node_modules/typescript/lib/zh-tw/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "使用單一檔案發出來源與來源對應。必須設定 '--inlineSourceMap' 或 '--sourceMap'。",

./node_modules/typescript/lib/zh-tw/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "從檔案插入命令列選項與檔案。",

./node_modules/typescript/lib/zh-tw/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "只能在 'tsconfig.json' 檔案中指定 '{0}' 選項，或在命令列上將其設定為 'false' 或 'null'。",

./node_modules/typescript/lib/zh-tw/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "只能在 'tsconfig.json' 檔案中指定 '{0}' 選項，或在命令列上將其設定為 'null'。",

./node_modules/typescript/lib/zh-tw/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "只有在已提供選項 '--inlineSourceMap' 或選項 '--sourceMap' 時，才可使用選項 '{0}'。",

./node_modules/typescript/lib/zh-tw/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "選項 '--build' 必須是第一個命令列引數。",

./node_modules/typescript/lib/zh-tw/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "在命令列上，'project' 選項不得與原始程式檔並用。",

./node_modules/typescript/lib/zh-tw/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "設定發出檔案的新行字元。",

./node_modules/typescript/lib/zh-tw/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "指定發出檔案時要用的行尾順序: 'CRLF' (DOS) 或 'LF' (UNIX)。",

./node_modules/typescript/lib/zh-cn/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "命令行选项",

./node_modules/typescript/lib/zh-cn/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "在单个文件内发出源以及源映射；需要设置 \"--inlineSourceMap\" 或 \"--sourceMap\"。",

./node_modules/typescript/lib/zh-cn/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "从文件插入命令行选项和文件。",

./node_modules/typescript/lib/zh-cn/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "选项“{0}”只能在 \"tsconfig.json\" 文件中指定，或者在命令行上设置为 \"false\" 或 \"null\"。",

./node_modules/typescript/lib/zh-cn/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "选项“{0}”只能在 \"tsconfig.json\" 文件中指定或在命令行上设置为 \"null\"。",

./node_modules/typescript/lib/zh-cn/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "仅当提供了选项 \"--inlineSourceMap\" 或选项 \"--sourceMap\" 时，才能使用选项“{0}”。",

./node_modules/typescript/lib/zh-cn/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "选项 '--build' 必须是第一个命令行参数。",

./node_modules/typescript/lib/zh-cn/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "选项 \"project\" 在命令行上不能与源文件混合使用。",

./node_modules/typescript/lib/zh-cn/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "设置发出文件的换行符。",

./node_modules/typescript/lib/zh-cn/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "指定发出文件时要使用的行序列结尾: \"CRLF\" (dos)或 \"LF\" (unix)。",

./node_modules/typescript/lib/pt-br/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "Opções da Linha de Comando",

./node_modules/typescript/lib/pt-br/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "Emitir a origem ao lado dos sourcemaps em um arquivo único; a definição requer '--inlineSourceMap' ou '--sourceMap'.",

./node_modules/typescript/lib/pt-br/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "Inserir opções e arquivos de linha de comando de um arquivo.",

./node_modules/typescript/lib/pt-br/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "A opção '{0}' somente pode ser especificada no arquivo 'tsconfig.json' ou definida como 'false' ou 'null' na linha de comando.",

./node_modules/typescript/lib/pt-br/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "A opção '{0}' somente pode ser especificada no arquivo 'tsconfig.json' ou definida como 'null' na linha de comando.",

./node_modules/typescript/lib/pt-br/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "A opção '{0} só pode ser usada quando qualquer uma das opções '--inlineSourceMap' ou '--sourceMap' é fornecida.",

./node_modules/typescript/lib/pt-br/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "A opção '--build' precisa ser o primeiro argumento da linha de comando.",

./node_modules/typescript/lib/pt-br/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "A opção 'project' não pode ser mesclada com arquivos de origem em uma linha de comando.",

./node_modules/typescript/lib/pt-br/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "Definir o caractere de nova linha para a emissão de arquivos.",

./node_modules/typescript/lib/pt-br/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "Especifique o fim da sequência de linha a ser usado ao emitir arquivos: 'CRLF' (dos) ou 'LF' (unix).",

./node_modules/typescript/lib/de/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "Befehlszeilenoptionen",

./node_modules/typescript/lib/de/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "Geben Sie die Quelle zusammen mit den Quellzuordnungen innerhalb einer einzelnen Datei aus; hierfür muss \"--inlineSourceMap\" oder \"--sourceMap\" festgelegt sein.",

./node_modules/typescript/lib/de/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "Fügt Befehlszeilenoptionen und Dateien aus einer Datei ein.",

./node_modules/typescript/lib/de/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "Die Option \"{0}\" kann nur in der Datei \"tsconfig.json\" angegeben oder in der Befehlszeile auf FALSE oder NULL festgelegt werden.",

./node_modules/typescript/lib/de/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "Die Option \"{0}\" kann nur in der Datei \"tsconfig.json\" angegeben oder in der Befehlszeile auf NULL festgelegt werden.",

./node_modules/typescript/lib/de/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "Die Option \"{0}\" kann nur verwendet werden, wenn die Option \"-inlineSourceMap\" oder \"-sourceMap\" angegeben wird.",

./node_modules/typescript/lib/de/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "Die Option \"--build\" muss das erste Befehlszeilenargument sein.",

./node_modules/typescript/lib/de/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "Die Option \"project\" darf nicht mit Quelldateien in einer Befehlszeile kombiniert werden.",

./node_modules/typescript/lib/de/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "Legen Sie das Zeilenumbruchzeichen für Ausgabedateien fest.",

./node_modules/typescript/lib/de/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "Geben Sie die Zeilenendesequenz an, die beim Ausgeben von Dateien verwendet werden soll: \"CRLF\" (DOS) oder \"LF\" (Unix).",

./node_modules/typescript/lib/ja/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "コマンド ライン オプション",

./node_modules/typescript/lib/ja/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "単一ファイル内でソースマップと共にソースを生成します。'--inlineSourceMap' または '--sourceMap' を設定する必要があります。",

./node_modules/typescript/lib/ja/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "コマンド ライン オプションとファイルをファイルから挿入します。",

./node_modules/typescript/lib/ja/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "オプション '{0}' は、'tsconfig.json' ファイルで指定することか、コマンド ラインで 'false' または 'null' に設定することしかできません。",

./node_modules/typescript/lib/ja/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "オプション '{0}' は、'tsconfig.json' ファイルで指定することか、コマンド ラインで 'null' に設定することしかできません。",

./node_modules/typescript/lib/ja/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "オプション '{0} を使用できるのは、オプション '--inlineSourceMap' またはオプション '--sourceMap' のいずれかを指定した場合のみです。",

./node_modules/typescript/lib/ja/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "オプション '--build' は最初のコマンド ライン引数である必要があります。",

./node_modules/typescript/lib/ja/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "オプション 'project' をコマンド ライン上でソース ファイルと一緒に指定することはできません。",

./node_modules/typescript/lib/ja/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "ファイルを生成するための改行文字を設定します。",

./node_modules/typescript/lib/ja/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "ファイルの生成時に使用する行シーケンスの末尾を指定します: 'CRLF' (dos) または 'LF' (unix)。",

./node_modules/typescript/lib/es/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "Opciones de la línea de comandos",

./node_modules/typescript/lib/es/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "Emitir el origen junto a los mapas de origen en un solo archivo; requiere que se establezca \"--inlineSourceMap\" o \"--sourceMap\".",

./node_modules/typescript/lib/es/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "Inserte opciones de la línea de comandos y archivos desde un archivo.",

./node_modules/typescript/lib/es/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "La opción \"{0}\" solo puede especificarse en el archivo \"tsconfig.json\" o establecerse en \"false\" o \"null\" en la línea de comandos.",

./node_modules/typescript/lib/es/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "La opción \"{0}\" solo puede especificarse en el archivo \"tsconfig.json\" o establecerse en \"null\" en la línea de comandos.",

./node_modules/typescript/lib/es/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "La opción '{0}' solo se puede usar cuando se proporciona '--inlineSourceMap' o '--sourceMap'.",

./node_modules/typescript/lib/es/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "La opción \"--build\" debe ser el primer argumento de la línea de comandos.",

./node_modules/typescript/lib/es/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "La opción \"project\" no se puede combinar con archivos de origen en una línea de comandos.",

./node_modules/typescript/lib/es/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "Establezca el carácter de nueva línea para emitir archivos.",

./node_modules/typescript/lib/es/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "Especifique la secuencia de final de línea que debe usarse para emitir archivos: 'CRLF' (Dos) o 'LF' (Unix).",

./node_modules/typescript/lib/it/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "Opzioni della riga di comando",

./node_modules/typescript/lib/it/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "Crea l'origine unitamente ai mapping di origine all'interno di un unico file. Richiede l'impostazione di '--inlineSourceMap' o '--sourceMap'.",

./node_modules/typescript/lib/it/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "Inserisce i file e le opzioni della riga di comando da un file.",

./node_modules/typescript/lib/it/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "L'opzione '{0}' può essere specificata solo nel file 'tsconfig.json' oppure impostata su 'false' o 'null' sulla riga di comando.",

./node_modules/typescript/lib/it/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "L'opzione '{0}' può essere specificata solo nel file 'tsconfig.json' oppure impostata su 'null' sulla riga di comando.",

./node_modules/typescript/lib/it/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "L'opzione '{0}' può essere usata solo quando si specifica l'opzione '--inlineSourceMap' o '--sourceMap'.",

./node_modules/typescript/lib/it/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "L'opzione '--build' deve essere il primo argomento della riga di comando.",

./node_modules/typescript/lib/it/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "Non è possibile combinare l'opzione 'project' con file di origine in una riga di comando.",

./node_modules/typescript/lib/it/diagnosticMessages.generated.json 1055   "Prefix_0_with_an_underscore_90025": "Anteporre un carattere di sottolineatura a '{0}'",

./node_modules/typescript/lib/it/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "Imposta il carattere di nuova riga per la creazione di file.",

./node_modules/typescript/lib/it/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "Specifica la sequenza di fine riga da usare per la creazione dei file, ovvero 'CRLF' (in DOS) o 'LF' (in UNIX).",

./node_modules/typescript/lib/fr/diagnosticMessages.generated.json 388   "Command_line_Options_6171": "Options de ligne de commande",

./node_modules/typescript/lib/fr/diagnosticMessages.generated.json 590   "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152": "Émettez la source aux côtés des mappages de sources dans un fichier unique. Nécessite la définition de '--inlineSourceMap' ou '--sourceMap'.",

./node_modules/typescript/lib/fr/diagnosticMessages.generated.json 815   "Insert_command_line_options_and_files_from_a_file_6030": "Insérer les options de ligne de commande et les fichiers à partir d'un fichier texte.",

./node_modules/typescript/lib/fr/diagnosticMessages.generated.json 982   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230": "Vous pouvez spécifier l'option '{0}' uniquement dans le fichier 'tsconfig.json', ou lui affecter la valeur 'false' ou 'null' sur la ligne de commande.",

./node_modules/typescript/lib/fr/diagnosticMessages.generated.json 983   "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064": "Vous pouvez spécifier l'option '{0}' uniquement dans le fichier 'tsconfig.json', ou lui affecter la valeur 'null' sur la ligne de commande.",

./node_modules/typescript/lib/fr/diagnosticMessages.generated.json 984   "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051": "L'option '{0}' peut être utilisée uniquement quand l'option '--inlineSourceMap' ou l'option '--sourceMap' est spécifiée.",

./node_modules/typescript/lib/fr/diagnosticMessages.generated.json 991   "Option_build_must_be_the_first_command_line_argument_6369": "L'option '--build' doit être le premier argument de ligne de commande.",

./node_modules/typescript/lib/fr/diagnosticMessages.generated.json 995   "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042": "Impossible d'associer l'option 'project' à des fichiers sources sur une ligne de commande.",

./node_modules/typescript/lib/fr/diagnosticMessages.generated.json 1260   "Set_the_newline_character_for_emitting_files_6659": "Définissez le caractère de nouvelle ligne pour l’émission de fichiers.",

./node_modules/typescript/lib/fr/diagnosticMessages.generated.json 1310   "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060": "Spécifiez la séquence de fin de ligne à utiliser durant l'émission des fichiers : 'CRLF' (Dos) ou 'LF' (Unix).",

./node_modules/style-loader/dist/utils.js 271 } // eslint-disable-next-line import/prefer-default-export
./node_modules/style-loader/dist/runtime/isEqualLocals.js 12       // eslint-disable-next-line no-continue

./node_modules/style-loader/dist/runtime/isEqualLocals.js 23       // eslint-disable-next-line no-continue

./node_modules/style-loader/dist/runtime/singletonStyleDomAPI.js 79   // eslint-disable-next-line no-undef,no-use-before-define

./node_modules/style-loader/dist/runtime/singletonStyleDomAPI.js 81   var styleElement = // eslint-disable-next-line no-undef,no-use-before-define

./node_modules/mime/mime.js 50   // Read file and split into lines

./node_modules/mime/mime.js 53       lines = content.split(/[\r\n]+/);

./node_modules/mime/mime.js 55   lines.forEach(function(line) {

./node_modules/mime/mime.js 57     var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);

./node_modules/is-number/package.json 9     "Olsten Larck (https://i.am.charlike.online)",

./node_modules/regjsgen/regjsgen.js 139     assertType(node.type, 'anchor');

./node_modules/regjsgen/regjsgen.js 156     assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');

./node_modules/regjsgen/regjsgen.js 190     assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');

./node_modules/regjsgen/regjsgen.js 304     assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|unicodePropertyEscape|value|dot');

./node_modules/regjsgen/regjsgen.js 371     'anchor': generateAnchor,

./node_modules/http-proxy-middleware/package.json 4   "description": "The one-liner node.js proxy middleware for connect, express and browser-sync",

./node_modules/webpack-dev-server/bin/process-arguments.js 26       // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 42           // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 44           // eslint-disable-next-line no-plusplus

./node_modules/webpack-dev-server/bin/process-arguments.js 52         // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 66       // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 68       // eslint-disable-next-line no-multi-assign

./node_modules/webpack-dev-server/bin/process-arguments.js 80     // eslint-disable-next-line no-plusplus

./node_modules/webpack-dev-server/bin/process-arguments.js 88     // eslint-disable-next-line no-shadow

./node_modules/webpack-dev-server/bin/process-arguments.js 91     // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 93       // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 97       // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 100       // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 104       // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 111       // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 113       // eslint-disable-next-line no-plusplus

./node_modules/webpack-dev-server/bin/process-arguments.js 121     // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 144   // eslint-disable-next-line default-case

./node_modules/webpack-dev-server/bin/process-arguments.js 247   // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 257   // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/process-arguments.js 288       // eslint-disable-next-line no-continue

./node_modules/webpack-dev-server/bin/process-arguments.js 320       // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/bin/webpack-dev-server.js 9  * @param {string[]} args command line arguments

./node_modules/webpack-dev-server/bin/webpack-dev-server.js 58     // eslint-disable-next-line no-cond-assign

./node_modules/webpack-dev-server/bin/webpack-dev-server.js 74   // eslint-disable-next-line import/no-dynamic-require

./node_modules/webpack-dev-server/bin/webpack-dev-server.js 76   // eslint-disable-next-line import/no-dynamic-require

./node_modules/webpack-dev-server/bin/webpack-dev-server.js 105   const readLine = require("readline");

./node_modules/webpack-dev-server/client/index.js 14   // eslint-disable-next-line camelcase

./node_modules/webpack-dev-server/client/overlay.js 52     containerElement.style.lineHeight = "1.2";

./node_modules/webpack-dev-server/client/overlay.js 120     var file = item.file || ""; // eslint-disable-next-line no-nested-ternary

./node_modules/webpack-dev-server/client/socket.js 6 var Client = // eslint-disable-next-line camelcase, no-nested-ternary

./node_modules/webpack-dev-server/client/socket.js 7 typeof __webpack_dev_server_client__ !== "undefined" ? // eslint-disable-next-line camelcase

./node_modules/webpack-dev-server/client/socket.js 30       // eslint-disable-next-line no-mixed-operators, no-restricted-properties

./node_modules/webpack-dev-server/client/modules/logger/index.js 418     var regExp = new RegExp("[\\\\/]".concat(item.replace( // eslint-disable-next-line no-useless-escape

./node_modules/webpack-dev-server/client/modules/logger/index.js 501         if (!debug) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 504           // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 541           // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 543             // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 555         if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 558           // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 567         if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 570           // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 592         // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 594           // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 601         // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 603           // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 610         if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/logger/index.js 613           // eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack-dev-server/client/modules/sockjs-client/index.js 554               // Check for cyclic structures. This is a linear search; performance

./node_modules/webpack-dev-server/client/modules/sockjs-client/index.js 700                 // Skip whitespace tokens, including tabs, carriage returns, line

./node_modules/webpack-dev-server/client/modules/sockjs-client/index.js 1671   // their place in line from the /first/ time they're set from

./node_modules/webpack-dev-server/client/modules/sockjs-client/index.js 2961           flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.extended ? 'x' : '') + (separator.sticky ? 'y' : ''),

./node_modules/webpack-dev-server/client/modules/sockjs-client/index.js 4527 //   http://ajaxian.com/archives/100-line-ajax-wrapper

./node_modules/webpack-dev-server/client/modules/sockjs-client/index.js 5070 // eslint-disable-next-line no-control-regex, no-misleading-character-class

./node_modules/webpack-dev-server/client/modules/sockjs-client/index.js 5683 // eslint-disable-next-line complexity

./node_modules/webpack-dev-server/client/modules/sockjs-client/index.js 5948           match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

./node_modules/webpack-dev-server/client/modules/sockjs-client/index.js 6712 // eslint-disable-next-line import/no-extraneous-dependencies

./node_modules/webpack-dev-server/node_modules/ipaddr.js/lib/ipaddr.js 709         // in line with RFC 5952 (see https://tools.ietf.org/html/rfc5952#section-4)

./node_modules/webpack-dev-server/lib/Server.js 52   // eslint-disable-next-line class-methods-use-this

./node_modules/webpack-dev-server/lib/Server.js 104         // eslint-disable-next-line no-empty

./node_modules/webpack-dev-server/lib/Server.js 110         // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/lib/Server.js 140           // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/lib/Server.js 287           // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/lib/Server.js 376             // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/lib/Server.js 393   // eslint-disable-next-line class-methods-use-this

./node_modules/webpack-dev-server/lib/Server.js 523           // eslint-disable-next-line no-continue

./node_modules/webpack-dev-server/lib/Server.js 975             // eslint-disable-next-line import/no-dynamic-require

./node_modules/webpack-dev-server/lib/Server.js 1012             // eslint-disable-next-line import/no-dynamic-require

./node_modules/webpack-dev-server/lib/Server.js 1069       // eslint-disable-next-line no-shadow

./node_modules/webpack-dev-server/lib/Server.js 1121         // eslint-disable-next-line no-process-exit

./node_modules/webpack-dev-server/lib/Server.js 1150     // eslint-disable-next-line func-names

./node_modules/webpack-dev-server/lib/Server.js 1158     // eslint-disable-next-line new-cap

./node_modules/webpack-dev-server/lib/Server.js 1592         // eslint-disable-next-line no-nested-ternary

./node_modules/webpack-dev-server/lib/Server.js 1597           : // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/lib/Server.js 1660               // eslint-disable-next-line no-nested-ternary

./node_modules/webpack-dev-server/lib/Server.js 1872         // eslint-disable-next-line guard-for-in

./node_modules/webpack-dev-server/lib/Server.js 1971   // eslint-disable-next-line class-methods-use-this

./node_modules/webpack-dev-server/lib/Server.js 2042     // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/lib/Server.js 2048       // eslint-disable-next-line no-nested-ternary

./node_modules/webpack-dev-server/lib/Server.js 2053         : // eslint-disable-next-line no-undefined

./node_modules/webpack-dev-server/lib/servers/SockJSServer.js 16   // eslint-disable-next-line func-names

./node_modules/webpack-dev-server/lib/servers/SockJSServer.js 41       log: (severity, line) => {

./node_modules/webpack-dev-server/lib/servers/SockJSServer.js 43           this.server.logger.error(line);

./node_modules/webpack-dev-server/lib/servers/SockJSServer.js 45           this.server.logger.log(line);

./node_modules/webpack-dev-server/lib/servers/SockJSServer.js 47           this.server.logger.debug(line);

./node_modules/postcss/lib/lazy-result.js 123         if (!opts.map.inline) opts.map.inline = false

./node_modules/postcss/lib/warning.js 10       this.line = pos.line

./node_modules/postcss/lib/map-generator.js 41   isInline() {

./node_modules/postcss/lib/map-generator.js 42     if (typeof this.mapOpts.inline !== 'undefined') {

./node_modules/postcss/lib/map-generator.js 43       return this.mapOpts.inline

./node_modules/postcss/lib/map-generator.js 52       return this.previous().some(i => i.inline)

./node_modules/postcss/lib/map-generator.js 116     if (this.isInline()) {

./node_modules/postcss/lib/map-generator.js 140     if (this.isInline()) {

./node_modules/postcss/lib/map-generator.js 173     if (this.isInline()) {

./node_modules/postcss/lib/map-generator.js 223     let line = 1

./node_modules/postcss/lib/map-generator.js 229       generated: { line: 0, column: 0 },

./node_modules/postcss/lib/map-generator.js 230       original: { line: 0, column: 0 }

./node_modules/postcss/lib/map-generator.js 233     let lines, last

./node_modules/postcss/lib/map-generator.js 238         mapping.generated.line = line

./node_modules/postcss/lib/map-generator.js 242           mapping.original.line = node.source.start.line

./node_modules/postcss/lib/map-generator.js 247           mapping.original.line = 1

./node_modules/postcss/lib/map-generator.js 253       lines = str.match(/\n/g)

./node_modules/postcss/lib/map-generator.js 254       if (lines) {

./node_modules/postcss/lib/map-generator.js 255         line += lines.length

./node_modules/postcss/lib/map-generator.js 267             mapping.original.line = node.source.end.line

./node_modules/postcss/lib/map-generator.js 269             mapping.generated.line = line

./node_modules/postcss/lib/map-generator.js 274             mapping.original.line = 1

./node_modules/postcss/lib/map-generator.js 276             mapping.generated.line = line

./node_modules/postcss/lib/previous-map.js 20     this.inline = this.startWith(this.annotation, 'data:')

./node_modules/postcss/lib/previous-map.js 71   decodeInline(text) {

./node_modules/postcss/lib/previous-map.js 125     } else if (this.inline) {

./node_modules/postcss/lib/previous-map.js 126       return this.decodeInline(this.annotation)

./node_modules/postcss/lib/css-syntax-error.js 8   constructor(message, line, column, source, file, plugin) {

./node_modules/postcss/lib/css-syntax-error.js 22     if (typeof line !== 'undefined' && typeof column !== 'undefined') {

./node_modules/postcss/lib/css-syntax-error.js 23       this.line = line

./node_modules/postcss/lib/css-syntax-error.js 37     if (typeof this.line !== 'undefined') {

./node_modules/postcss/lib/css-syntax-error.js 38       this.message += ':' + this.line + ':' + this.column

./node_modules/postcss/lib/css-syntax-error.js 52     let lines = css.split(/\r?\n/)

./node_modules/postcss/lib/css-syntax-error.js 53     let start = Math.max(this.line - 3, 0)

./node_modules/postcss/lib/css-syntax-error.js 54     let end = Math.min(this.line + 2, lines.length)

./node_modules/postcss/lib/css-syntax-error.js 67     return lines

./node_modules/postcss/lib/css-syntax-error.js 69       .map((line, index) => {

./node_modules/postcss/lib/css-syntax-error.js 72         if (number === this.line) {

./node_modules/postcss/lib/css-syntax-error.js 75             line.slice(0, this.column - 1).replace(/[^\t]/g, ' ')

./node_modules/postcss/lib/css-syntax-error.js 76           return mark('>') + aside(gutter) + line + '\n ' + spacing + mark('^')

./node_modules/postcss/lib/css-syntax-error.js 78         return ' ' + aside(gutter) + line

./node_modules/postcss/lib/parser.js 21     this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }

./node_modules/postcss/lib/parser.js 382       line: pos.line,

./node_modules/postcss/lib/parser.js 527     throw this.input.error('Unclosed block', pos.line, pos.column)

./node_modules/postcss/lib/processor.js 58               'one of the syntax/parser/stringifier options as outlined ' +

./node_modules/postcss/lib/input.js 64     let lastLine, lineToIndex

./node_modules/postcss/lib/input.js 66       let lines = this.css.split('\n')

./node_modules/postcss/lib/input.js 67       lineToIndex = new Array(lines.length)

./node_modules/postcss/lib/input.js 70       for (let i = 0, l = lines.length; i < l; i++) {

./node_modules/postcss/lib/input.js 71         lineToIndex[i] = prevIndex

./node_modules/postcss/lib/input.js 72         prevIndex += lines[i].length + 1

./node_modules/postcss/lib/input.js 75       this[fromOffsetCache] = lineToIndex

./node_modules/postcss/lib/input.js 77       lineToIndex = this[fromOffsetCache]

./node_modules/postcss/lib/input.js 79     lastLine = lineToIndex[lineToIndex.length - 1]

./node_modules/postcss/lib/input.js 83       min = lineToIndex.length - 1

./node_modules/postcss/lib/input.js 85       let max = lineToIndex.length - 2

./node_modules/postcss/lib/input.js 89         if (offset < lineToIndex[mid]) {

./node_modules/postcss/lib/input.js 91         } else if (offset >= lineToIndex[mid + 1]) {

./node_modules/postcss/lib/input.js 100       line: min + 1,

./node_modules/postcss/lib/input.js 101       col: offset - lineToIndex[min] + 1

./node_modules/postcss/lib/input.js 105   error(message, line, column, opts = {}) {

./node_modules/postcss/lib/input.js 108       let pos = this.fromOffset(line)

./node_modules/postcss/lib/input.js 109       line = pos.line

./node_modules/postcss/lib/input.js 112     let origin = this.origin(line, column)

./node_modules/postcss/lib/input.js 116         origin.line,

./node_modules/postcss/lib/input.js 125         line,

./node_modules/postcss/lib/input.js 133     result.input = { line, column, source: this.css }

./node_modules/postcss/lib/input.js 144   origin(line, column) {

./node_modules/postcss/lib/input.js 148     let from = consumer.originalPositionFor({ line, column })

./node_modules/postcss/lib/input.js 164       line: from.line,

./node_modules/postcss/lib/node.js 60       return this.source.input.error(message, pos.line, pos.column, opts)

./node_modules/postcss/lib/node.js 230     let line = this.source.start.line

./node_modules/postcss/lib/node.js 235         line += 1

./node_modules/postcss/lib/node.js 241     return { line, column }

./node_modules/postcss/lib/node.js 298         `$&${s.input.from}:${s.start.line}:${s.start.column}$&`

./node_modules/execa/index.js 5 const stripFinalNewline = require('strip-final-newline');

./node_modules/execa/index.js 36 		stripFinalNewline: true,

./node_modules/execa/index.js 67 	if (options.stripFinalNewline) {

./node_modules/execa/index.js 68 		return stripFinalNewline(value);

./node_modules/execa/package.json 50 		"strip-final-newline": "^2.0.0"

./node_modules/deep-equal/index.js 31   // eslint-disable-next-line no-use-before-define

./node_modules/deep-equal/test/cmp.js 173 // eslint-disable-next-line max-statements

./node_modules/deep-equal/test/cmp.js 209 // eslint-disable-next-line max-statements

./node_modules/core-js-compat/entries.json 174     "es.string.anchor",

./node_modules/core-js-compat/entries.json 548     "es.string.anchor",

./node_modules/core-js-compat/entries.json 1525     "es.string.anchor",

./node_modules/core-js-compat/entries.json 1539   "core-js/es/string/anchor": [

./node_modules/core-js-compat/entries.json 1540     "es.string.anchor"

./node_modules/core-js-compat/entries.json 1678     "es.string.anchor",

./node_modules/core-js-compat/entries.json 1692   "core-js/es/string/virtual/anchor": [

./node_modules/core-js-compat/entries.json 1693     "es.string.anchor"

./node_modules/core-js-compat/entries.json 2502     "es.string.anchor",

./node_modules/core-js-compat/entries.json 4330     "es.string.anchor",

./node_modules/core-js-compat/entries.json 4348   "core-js/features/string/anchor": [

./node_modules/core-js-compat/entries.json 4349     "es.string.anchor"

./node_modules/core-js-compat/entries.json 4494     "es.string.anchor",

./node_modules/core-js-compat/entries.json 4512   "core-js/features/string/virtual/anchor": [

./node_modules/core-js-compat/entries.json 4513     "es.string.anchor"

./node_modules/core-js-compat/entries.json 5794   "core-js/modules/es.string.anchor": [

./node_modules/core-js-compat/entries.json 5795     "es.string.anchor"

./node_modules/core-js-compat/entries.json 7055     "es.string.anchor",

./node_modules/core-js-compat/entries.json 8083     "es.string.anchor",

./node_modules/core-js-compat/entries.json 8097   "core-js/stable/string/anchor": [

./node_modules/core-js-compat/entries.json 8098     "es.string.anchor"

./node_modules/core-js-compat/entries.json 8236     "es.string.anchor",

./node_modules/core-js-compat/entries.json 8250   "core-js/stable/string/virtual/anchor": [

./node_modules/core-js-compat/entries.json 8251     "es.string.anchor"

./node_modules/core-js-compat/modules.json 173   "es.string.anchor",

./node_modules/core-js-compat/data.json 2521   "es.string.anchor": {

./node_modules/core-js-compat/modules-by-versions.json 154     "es.string.anchor",

./node_modules/number-allocator/node_modules/debug/src/common.js 102 					// Now we need to remove `args[index]` since it's inlined in the `format`

./node_modules/number-allocator/node_modules/debug/src/browser.js 114 // eslint-disable-next-line complexity

./node_modules/number-allocator/node_modules/debug/src/node.js 31 	// eslint-disable-next-line import/no-extraneous-dependencies

./node_modules/number-allocator/node_modules/debug/src/node.js 245  * Map %o to `util.inspect()`, all on a single line.

./node_modules/number-allocator/node_modules/debug/src/node.js 257  * Map %O to `util.inspect()`, allowing multiple lines if needed.

./node_modules/function-bind/.jscs.json 112 		"lineBreakAfterOpeningBraces": true,

./node_modules/function-bind/.jscs.json 113 		"lineBreakBeforeClosingBraces": true

./node_modules/function-bind/.jscs.json 118 	"validateNewlineAfterArrayElements": {

./node_modules/function-bind/.jscs.json 135 	"requireAlignedMultilineParams": false,

./node_modules/function-bind/.jscs.json 168     "requireNewlineBeforeSingleStatementsInIf": false,

./node_modules/terser/tools/domprops.js 1188     "MozOutlineRadius",

./node_modules/terser/tools/domprops.js 1189     "MozOutlineRadiusBottomleft",

./node_modules/terser/tools/domprops.js 1190     "MozOutlineRadiusBottomright",

./node_modules/terser/tools/domprops.js 1191     "MozOutlineRadiusTopleft",

./node_modules/terser/tools/domprops.js 1192     "MozOutlineRadiusTopright",

./node_modules/terser/tools/domprops.js 1290     "OfflineAudioCompletionEvent",

./node_modules/terser/tools/domprops.js 1291     "OfflineAudioContext",

./node_modules/terser/tools/domprops.js 1292     "OfflineResourceList",

./node_modules/terser/tools/domprops.js 1609     "SVGPolylineElement",

./node_modules/terser/tools/domprops.js 2079     "alignmentBaseline",

./node_modules/terser/tools/domprops.js 2095     "anchor",

./node_modules/terser/tools/domprops.js 2096     "anchorNode",

./node_modules/terser/tools/domprops.js 2097     "anchorOffset",

./node_modules/terser/tools/domprops.js 2098     "anchors",

./node_modules/terser/tools/domprops.js 2227     "baselineShift",

./node_modules/terser/tools/domprops.js 2724     "curve",

./node_modules/terser/tools/domprops.js 2852     "dominant-baseline",

./node_modules/terser/tools/domprops.js 2853     "dominantBaseline",

./node_modules/terser/tools/domprops.js 3581     "line",

./node_modules/terser/tools/domprops.js 3582     "line-height",

./node_modules/terser/tools/domprops.js 3583     "lineAlign",

./node_modules/terser/tools/domprops.js 3584     "lineBreak",

./node_modules/terser/tools/domprops.js 3585     "lineCap",

./node_modules/terser/tools/domprops.js 3586     "lineDashOffset",

./node_modules/terser/tools/domprops.js 3587     "lineHeight",

./node_modules/terser/tools/domprops.js 3588     "lineJoin",

./node_modules/terser/tools/domprops.js 3589     "lineNumber",

./node_modules/terser/tools/domprops.js 3590     "lineTo",

./node_modules/terser/tools/domprops.js 3591     "lineWidth",

./node_modules/terser/tools/domprops.js 3592     "linearRampToValueAtTime",

./node_modules/terser/tools/domprops.js 3593     "lineno",

./node_modules/terser/tools/domprops.js 3983     "multiline",

./node_modules/terser/tools/domprops.js 4230     "onoffline",

./node_modules/terser/tools/domprops.js 4231     "ononline",

./node_modules/terser/tools/domprops.js 4357     "outline",

./node_modules/terser/tools/domprops.js 4358     "outline-color",

./node_modules/terser/tools/domprops.js 4359     "outline-offset",

./node_modules/terser/tools/domprops.js 4360     "outline-style",

./node_modules/terser/tools/domprops.js 4361     "outline-width",

./node_modules/terser/tools/domprops.js 4362     "outlineColor",

./node_modules/terser/tools/domprops.js 4363     "outlineOffset",

./node_modules/terser/tools/domprops.js 4364     "outlineStyle",

./node_modules/terser/tools/domprops.js 4365     "outlineWidth",

./node_modules/terser/tools/domprops.js 5083     "stroke-linecap",

./node_modules/terser/tools/domprops.js 5084     "stroke-linejoin",

./node_modules/terser/tools/domprops.js 5163     "text-anchor",

./node_modules/terser/tools/domprops.js 5166     "text-decoration-line",

./node_modules/terser/tools/domprops.js 5177     "textBaseline",

./node_modules/terser/tools/domprops.js 5185     "textDecorationOverline",

./node_modules/terser/tools/domprops.js 5187     "textDecorationUnderline",

./node_modules/terser/tools/domprops.js 5199     "textUnderlinePosition",

./node_modules/terser/tools/domprops.js 5526     "webkitOfflineAudioContext",

./node_modules/regjsparser/parser.js 275         type: 'anchor',

./node_modules/regjsparser/parser.js 557       var anchor = parseAnchor();

./node_modules/regjsparser/parser.js 559       if (anchor) {

./node_modules/regjsparser/parser.js 560         return anchor;

./node_modules/regjsparser/parser.js 1476       // Output a bit of context and a line pointing to where our error is.

./node_modules/regjsparser/parser.js 1478       // We are assuming that there are no actual newlines in the content as this is a regular expression.

./node_modules/ansi-regex/package.json 43 		"command-line",

./node_modules/json5/dist/index.js 15 	  // eslint-disable-next-line no-new-func

./node_modules/json5/dist/index.js 17 	if (typeof __g == 'number') { __g = global; } // eslint-disable-line no-undef

./node_modules/json5/dist/index.js 22 	if (typeof __e == 'number') { __e = core; } // eslint-disable-line no-undef

./node_modules/json5/dist/index.js 284 	 // eslint-disable-line no-unused-vars

./node_modules/json5/dist/index.js 349 	var line;

./node_modules/json5/dist/index.js 360 	    line = 1;

./node_modules/json5/dist/index.js 437 	        line++;

./node_modules/json5/dist/index.js 1032 	        line: line,

./node_modules/json5/dist/index.js 1369 	        return syntaxError(("JSON5: invalid end of input at " + line + ":" + column))

./node_modules/json5/dist/index.js 1372 	    return syntaxError(("JSON5: invalid character '" + (formatChar(c)) + "' at " + line + ":" + column))

./node_modules/json5/dist/index.js 1376 	    return syntaxError(("JSON5: invalid end of input at " + line + ":" + column))

./node_modules/json5/dist/index.js 1382 	//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)

./node_modules/json5/dist/index.js 1386 	//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)

./node_modules/json5/dist/index.js 1391 	    return syntaxError(("JSON5: invalid identifier character at " + line + ":" + column))

./node_modules/json5/dist/index.js 1428 	    err.lineNumber = line;

./node_modules/json5/dist/index.mjs 48 let line;

./node_modules/json5/dist/index.mjs 59     line = 1;

./node_modules/json5/dist/index.mjs 136         line++;

./node_modules/json5/dist/index.mjs 731         line,

./node_modules/json5/dist/index.mjs 1066         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)

./node_modules/json5/dist/index.mjs 1069     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)

./node_modules/json5/dist/index.mjs 1073     return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)

./node_modules/json5/dist/index.mjs 1079 //         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)

./node_modules/json5/dist/index.mjs 1083 //     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)

./node_modules/json5/dist/index.mjs 1088     return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`)

./node_modules/json5/dist/index.mjs 1125     err.lineNumber = line;

./node_modules/json5/lib/register.js 4 // eslint-disable-next-line node/no-deprecated-api

./node_modules/json5/lib/parse.js 7 let line

./node_modules/json5/lib/parse.js 18     line = 1

./node_modules/json5/lib/parse.js 95         line++

./node_modules/json5/lib/parse.js 690         line,

./node_modules/json5/lib/parse.js 1025         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)

./node_modules/json5/lib/parse.js 1028     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)

./node_modules/json5/lib/parse.js 1032     return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)

./node_modules/json5/lib/parse.js 1038 //         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)

./node_modules/json5/lib/parse.js 1042 //     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)

./node_modules/json5/lib/parse.js 1047     return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`)

./node_modules/json5/lib/parse.js 1084     err.lineNumber = line

./node_modules/webpack-cli/node_modules/commander/index.js 313    * Wrap the given string to width characters per line, with lines after the first indented.

./node_modules/webpack-cli/node_modules/commander/index.js 325     // Detect manually wrapped and indented strings by searching for line breaks

./node_modules/webpack-cli/node_modules/commander/index.js 328     // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).

./node_modules/webpack-cli/node_modules/commander/index.js 337     const lines = columnText.match(regex) || [];

./node_modules/webpack-cli/node_modules/commander/index.js 338     return leadingStr + lines.map((line, i) => {

./node_modules/webpack-cli/node_modules/commander/index.js 339       if (line.slice(-1) === '\n') {

./node_modules/webpack-cli/node_modules/commander/index.js 340         line = line.slice(0, line.length - 1);

./node_modules/webpack-cli/node_modules/commander/index.js 342       return ((i > 0) ? indentString : '') + line.trimRight();

./node_modules/webpack-cli/node_modules/commander/index.js 363     this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.

./node_modules/webpack-cli/node_modules/commander/index.js 889       // Expecting this line is not reached.

./node_modules/webpack-cli/node_modules/commander/index.js 1098   * the option must be specified on the command line. (Otherwise the same as .option().)

./node_modules/webpack-cli/node_modules/commander/index.js 1130    * Allow unknown options on the command line.

./node_modules/webpack-cli/node_modules/commander/index.js 1141    * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.

./node_modules/webpack-cli/node_modules/commander/index.js 1154    * The default behaviour is non-positional and global options may appear anywhere on the command line.

./node_modules/webpack-cli/node_modules/commander/package.json 4   "description": "the complete solution for node.js command-line programs",

./node_modules/webpack-cli/lib/webpack-cli.js 183       const readline = require("readline");

./node_modules/webpack-cli/lib/webpack-cli.js 184       const rl = readline.createInterface({

./node_modules/webpack-cli/lib/webpack-cli.js 2248     // eslint-disable-next-line prefer-const

./node_modules/webpack-cli/lib/webpack-cli.js 2318         // Avoid extra empty line when `stats: 'none'`

./node_modules/webpack-cli/lib/plugins/CLIPlugin.js 24     // eslint-disable-next-line node/no-extraneous-require

./node_modules/mqtt/bin/pub.js 38   sender._write = function (line, enc, cb) {

./node_modules/mqtt/bin/pub.js 39     client.publish(args.topic, line.trim(), args, cb)

./node_modules/mqtt/bin/pub.js 55     boolean: ['stdin', 'retain', 'help', 'insecure', 'multiline'],

./node_modules/mqtt/bin/pub.js 67       multiline: 'M',

./node_modules/mqtt/bin/pub.js 129     if (args.multiline) {

./node_modules/mqtt/dist/mqtt.js 1119       debug('_setupReconnect :: emit `offline` state')

./node_modules/mqtt/dist/mqtt.js 1120       this.emit('offline')

./node_modules/mqtt/dist/mqtt.js 1220     debug('_sendPacket :: client not connected. Storing packet offline.')

./node_modules/mqtt/dist/mqtt.js 2112 // eslint-disable-next-line camelcase

./node_modules/mqtt/dist/mqtt.js 2900 // eslint-disable-next-line camelcase

./node_modules/mqtt/dist/mqtt.js 2952     // eslint-disable-next-line

./node_modules/mqtt/dist/mqtt.js 4021   if (+length != length) { // eslint-disable-line eqeqeq

./node_modules/mqtt/dist/mqtt.js 5472   return obj !== obj // eslint-disable-line no-self-compare

./node_modules/mqtt/dist/mqtt.js 5591 // eslint-disable-next-line complexity

./node_modules/mqtt/dist/mqtt.js 5851 					// Now we need to remove `args[index]` since it's inlined in the `format`

./node_modules/mqtt/dist/mqtt.js 15004     // a few lines down. This is needed to support once('readable').

./node_modules/mqtt/dist/mqtt.js 16931 function pipeline() {

./node_modules/mqtt/dist/mqtt.js 16958 module.exports = pipeline;

./node_modules/mqtt/dist/mqtt.js 16999 exports.pipeline = require('./lib/internal/streams/pipeline.js');

./node_modules/mqtt/dist/mqtt.js 17001 },{"./lib/_stream_duplex.js":56,"./lib/_stream_passthrough.js":57,"./lib/_stream_readable.js":58,"./lib/_stream_transform.js":59,"./lib/_stream_writable.js":60,"./lib/internal/streams/end-of-stream.js":64,"./lib/internal/streams/pipeline.js":66}],70:[function(require,module,exports){

./node_modules/mqtt/lib/client.js 1117       debug('_setupReconnect :: emit `offline` state')

./node_modules/mqtt/lib/client.js 1118       this.emit('offline')

./node_modules/mqtt/lib/client.js 1218     debug('_sendPacket :: client not connected. Storing packet offline.')

./node_modules/mqtt/lib/connect/index.js 11 // eslint-disable-next-line camelcase

./node_modules/mqtt/lib/connect/index.js 63     // eslint-disable-next-line

./node_modules/mqtt/lib/connect/ws.js 16 // eslint-disable-next-line camelcase

./node_modules/http-parser-js/http-parser.js 23   this.line = '';

./node_modules/http-parser-js/http-parser.js 37 // Note: *not* starting with kOnHeaders=0 line the Node parser, because any

./node_modules/http-parser-js/http-parser.js 190       var line = this.line + chunk.toString(HTTPParser.encoding, this.offset, i);

./node_modules/http-parser-js/http-parser.js 191       if (line.charAt(line.length - 1) === '\r') {

./node_modules/http-parser-js/http-parser.js 192         line = line.substr(0, line.length - 1);

./node_modules/http-parser-js/http-parser.js 194       this.line = '';

./node_modules/http-parser-js/http-parser.js 196       return line;

./node_modules/http-parser-js/http-parser.js 199   //line split over multiple chunks

./node_modules/http-parser-js/http-parser.js 200   this.line += chunk.toString(HTTPParser.encoding, this.offset, this.end);

./node_modules/http-parser-js/http-parser.js 206 HTTPParser.prototype.parseHeader = function (line, headers) {

./node_modules/http-parser-js/http-parser.js 207   if (line.indexOf('\r') !== -1) {

./node_modules/http-parser-js/http-parser.js 211   var match = headerExp.exec(line);

./node_modules/http-parser-js/http-parser.js 217     var matchContinue = headerContinueExp.exec(line);

./node_modules/http-parser-js/http-parser.js 229   var line = this.consumeLine();

./node_modules/http-parser-js/http-parser.js 230   if (!line) {

./node_modules/http-parser-js/http-parser.js 233   var match = requestExp.exec(line);

./node_modules/http-parser-js/http-parser.js 250   var line = this.consumeLine();

./node_modules/http-parser-js/http-parser.js 251   if (!line) {

./node_modules/http-parser-js/http-parser.js 254   var match = responseExp.exec(line);

./node_modules/http-parser-js/http-parser.js 284   var line = this.consumeLine();

./node_modules/http-parser-js/http-parser.js 285   if (line === undefined) {

./node_modules/http-parser-js/http-parser.js 289   if (line) {

./node_modules/http-parser-js/http-parser.js 290     this.parseHeader(line, info.headers);

./node_modules/http-parser-js/http-parser.js 379   var line = this.consumeLine();

./node_modules/http-parser-js/http-parser.js 380   if (line === undefined) {

./node_modules/http-parser-js/http-parser.js 383   this.body_bytes = parseInt(line, 16);

./node_modules/http-parser-js/http-parser.js 402   var line = this.consumeLine();

./node_modules/http-parser-js/http-parser.js 403   if (line === undefined) {

./node_modules/http-parser-js/http-parser.js 406   assert.equal(line, '');

./node_modules/http-parser-js/http-parser.js 411   var line = this.consumeLine();

./node_modules/http-parser-js/http-parser.js 412   if (line === undefined) {

./node_modules/http-parser-js/http-parser.js 415   if (line) {

./node_modules/http-parser-js/http-parser.js 416     this.parseHeader(line, this.trailers);

./node_modules/p-timeout/index.js 45 		// eslint-disable-next-line promise/prefer-await-to-then

./node_modules/postcss-modules-local-by-default/src/index.js 348       $linear: 1,

./node_modules/ajv/dist/ajv.bundle.js 202   // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html

./node_modules/ajv/dist/ajv.bundle.js 324  * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution

./node_modules/ajv/dist/ajv.bundle.js 489         v = resolve.inlineRef(localSchema, opts.inlineRefs)

./node_modules/ajv/dist/ajv.bundle.js 521             ? { code: code, schema: refVal, inline: true }

./node_modules/ajv/dist/ajv.bundle.js 573       , inline = rule.definition.inline

./node_modules/ajv/dist/ajv.bundle.js 582     } else if (inline) {

./node_modules/ajv/dist/ajv.bundle.js 583       validate = inline.call(self, it, rule.keyword, schema, parentSchema);

./node_modules/ajv/dist/ajv.bundle.js 700 resolve.inlineRef = inlineRef;

./node_modules/ajv/dist/ajv.bundle.js 709  * @return {Object|Function} schema object (if the schema can be inlined) or validation function

./node_modules/ajv/dist/ajv.bundle.js 721     return inlineRef(refVal.schema, this._opts.inlineRefs)

./node_modules/ajv/dist/ajv.bundle.js 737     v = inlineRef(schema, this._opts.inlineRefs)

./node_modules/ajv/dist/ajv.bundle.js 843 function inlineRef(schema, limit) {

./node_modules/ajv/dist/ajv.bundle.js 1364     statements: ['inline'],

./node_modules/ajv/dist/ajv.bundle.js 2107   var $compile, $inline, $macro, $ruleValidate, $validateCode;

./node_modules/ajv/dist/ajv.bundle.js 2118     $inline = $rDef.inline;

./node_modules/ajv/dist/ajv.bundle.js 2126   if (!($inline || $macro)) {

./node_modules/ajv/dist/ajv.bundle.js 2138   if ($inline) {

./node_modules/ajv/dist/ajv.bundle.js 2249     if ($inline) {

./node_modules/ajv/dist/ajv.bundle.js 3787     } else if ($refVal.inline) {

./node_modules/ajv/lib/definition_schema.js 14     statements: ['inline'],

./node_modules/ajv/lib/dot/custom.jst 12   var $compile, $inline, $macro, $ruleValidate, $validateCode;

./node_modules/ajv/lib/dot/custom.jst 29     $inline = $rDef.inline;

./node_modules/ajv/lib/dot/custom.jst 45 {{? !($inline || $macro) }}{{=$ruleErrs}} = null;{{?}}

./node_modules/ajv/lib/dot/custom.jst 65 {{## def.extendErrors:_inline:

./node_modules/ajv/lib/dot/custom.jst 70     {{# _inline ? 'if (\{\{=$ruleErr\}\}.schemaPath === undefined) {' : '' }}

./node_modules/ajv/lib/dot/custom.jst 72     {{# _inline ? '}' : '' }}

./node_modules/ajv/lib/dot/custom.jst 93 {{? $inline }}

./node_modules/ajv/lib/dot/custom.jst 157     {{? $inline }}

./node_modules/ajv/lib/dot/ref.jst 39   {{?? $refVal.inline }}

./node_modules/ajv/lib/compile/formats.js 45   // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html

./node_modules/ajv/lib/compile/index.js 28  * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution

./node_modules/ajv/lib/compile/index.js 193         v = resolve.inlineRef(localSchema, opts.inlineRefs)

./node_modules/ajv/lib/compile/index.js 225             ? { code: code, schema: refVal, inline: true }

./node_modules/ajv/lib/compile/index.js 277       , inline = rule.definition.inline

./node_modules/ajv/lib/compile/index.js 286     } else if (inline) {

./node_modules/ajv/lib/compile/index.js 287       validate = inline.call(self, it, rule.keyword, schema, parentSchema);

./node_modules/ajv/lib/compile/resolve.js 15 resolve.inlineRef = inlineRef;

./node_modules/ajv/lib/compile/resolve.js 24  * @return {Object|Function} schema object (if the schema can be inlined) or validation function

./node_modules/ajv/lib/compile/resolve.js 36     return inlineRef(refVal.schema, this._opts.inlineRefs)

./node_modules/ajv/lib/compile/resolve.js 52     v = inlineRef(schema, this._opts.inlineRefs)

./node_modules/ajv/lib/compile/resolve.js 158 function inlineRef(schema, limit) {

./node_modules/ajv/lib/dotjs/custom.js 26   var $compile, $inline, $macro, $ruleValidate, $validateCode;

./node_modules/ajv/lib/dotjs/custom.js 37     $inline = $rDef.inline;

./node_modules/ajv/lib/dotjs/custom.js 45   if (!($inline || $macro)) {

./node_modules/ajv/lib/dotjs/custom.js 57   if ($inline) {

./node_modules/ajv/lib/dotjs/custom.js 168     if ($inline) {

./node_modules/ajv/lib/dotjs/ref.js 64     } else if ($refVal.inline) {

./node_modules/get-stream/index.js 7 const streamPipelinePromisified = promisify(stream.pipeline);

./node_modules/get-stream/index.js 41 				await streamPipelinePromisified(inputStream, stream);

./node_modules/color-name/index.js 88 	"linen": [250, 240, 230],

./node_modules/color-name/.eslintrc.json 12         "linebreak-style": 0,

./node_modules/regexp.prototype.flags/implementation.js 17 	if (this.multiline) {

./node_modules/regexp.prototype.flags/test/tests.js 72 		st.equal(flags({ __proto__: { multiline: true } }), 'm');

./node_modules/to-fast-properties/index.js 11 	// against the inline property cache of a function, e.g. fastProto.property:

./node_modules/to-fast-properties/index.js 22 // Initialize the inline property cache of FastObject

./node_modules/body-parser/node_modules/debug/src/node.js 82  * Map %o to `util.inspect()`, all on a single line.

./node_modules/body-parser/node_modules/debug/src/node.js 94  * Map %o to `util.inspect()`, allowing multiple lines if needed.

./node_modules/body-parser/node_modules/debug/src/debug.js 103         // now we need to remove `args[index]` since it's inlined in the `format`

./node_modules/body-parser/lib/types/json.js 36  *            %x0A /              ; Line feed or New line

./node_modules/body-parser/lib/types/json.js 40 var FIRST_CHAR_REGEXP = /^[\x20\x09\x0a\x0d]*(.)/ // eslint-disable-line no-control-regex

./node_modules/babel-plugin-polyfill-corejs2/esm/index.mjs 55   anchor: globalOnly(["es6.string.anchor"]),

./node_modules/babel-plugin-polyfill-corejs2/lib/built-in-definitions.js 61   anchor: globalOnly(["es6.string.anchor"]),

./node_modules/buffer-indexof/test/test.js 17   t.equals(bindexOf(b,newLineBuffer),2,'should find newlines');

./node_modules/buffer-indexof/test/test.js 21   t.equals(bindexOf(b,newLineBuffer,3),5,"should find newlines after offset");

./node_modules/buffer-indexof/test/test.js 25   t.equals(bindexOf(b,newLineBuffer,6),-1,"should not find newlines where none are.");

./node_modules/open/index.js 63 			return await mapper(item); // eslint-disable-line no-await-in-loop

./node_modules/pretty-error/lib/PrettyError.js 456                   line: item.line

./node_modules/pretty-error/lib/nodePaths.js 2 module.exports = ['_debugger.js', '_http_agent.js', '_http_client.js', '_http_common.js', '_http_incoming.js', '_http_outgoing.js', '_http_server.js', '_linklist.js', '_stream_duplex.js', '_stream_passthrough.js', '_stream_readable.js', '_stream_transform.js', '_stream_writable.js', '_tls_legacy.js', '_tls_wrap.js', 'assert.js', 'buffer.js', 'child_process.js', 'cluster.js', 'console.js', 'constants.js', 'crypto.js', 'dgram.js', 'dns.js', 'domain.js', 'events.js', 'freelist.js', 'fs.js', 'http.js', 'https.js', 'module.js', 'net.js', 'os.js', 'path.js', 'punycode.js', 'querystring.js', 'readline.js', 'repl.js', 'smalloc.js', 'stream.js', 'string_decoder.js', 'sys.js', 'timers.js', 'tls.js', 'tty.js', 'url.js', 'util.js', 'vm.js', 'zlib.js', 'node.js'];

./node_modules/pretty-error/lib/ParsedError.js 39     var i, len, line, message, messageLines, reachedTrace, ref;

./node_modules/pretty-error/lib/ParsedError.js 44       line = ref[i];

./node_modules/pretty-error/lib/ParsedError.js 45       if (line.trim() === '') {

./node_modules/pretty-error/lib/ParsedError.js 49         this._trace.push(this._parseTraceItem(line));

./node_modules/pretty-error/lib/ParsedError.js 51         if (line.match(/^\s*at\s.+/)) {

./node_modules/pretty-error/lib/ParsedError.js 53           this._trace.push(this._parseTraceItem(line));

./node_modules/pretty-error/lib/ParsedError.js 54         } else if (!this._message.split('\n'.indexOf(line))) {

./node_modules/pretty-error/lib/ParsedError.js 55           messageLines.push(line);

./node_modules/pretty-error/lib/ParsedError.js 69     var addr, col, d, dir, file, jsCol, jsLine, line, m, original, packageName, packages, path, r, remaining, shortenedAddr, shortenedPath, what;

./node_modules/pretty-error/lib/ParsedError.js 87     line = null;

./node_modules/pretty-error/lib/ParsedError.js 112       line = m[1];

./node_modules/pretty-error/lib/ParsedError.js 134       jsLine = line;

./node_modules/pretty-error/lib/ParsedError.js 150       line: parseInt(line),

./node_modules/pretty-error/lib/defaultStyle.js 45     'pretty-error > trace > item > header > pointer > line': {

./node_modules/default-gateway/linux.js 15   (stdout || "").trim().split("\n").some(line => {

./node_modules/default-gateway/linux.js 16     const results = /default( via .+?)?( dev .+?)( |$)/.exec(line) || [];

./node_modules/default-gateway/freebsd.js 15   (stdout || "").trim().split("\n").some(line => {

./node_modules/default-gateway/freebsd.js 16     const [target, gateway, _, iface] = line.split(/ +/) || [];

./node_modules/default-gateway/win32.js 22   for (let line of (gwTable || "").trim().split(/\r?\n/).splice(1)) {

./node_modules/default-gateway/win32.js 23     line = line.trim();

./node_modules/default-gateway/win32.js 24     const [_, gwArr, gwCostsArr, id, ipMetric] = /({.+?}) +?({.+?}) +?([0-9]+) +?([0-9]+)/g.exec(line) || [];

./node_modules/default-gateway/win32.js 44   const line = (ifTable || "").trim().split("\n")[1];

./node_modules/default-gateway/win32.js 46   let [mac, name] = line.trim().split(/\s+/);

./node_modules/default-gateway/darwin.js 20   (stdout || "").trim().split("\n").some(line => {

./node_modules/default-gateway/darwin.js 21     const results = line.split(/ +/) || [];

./node_modules/default-gateway/sunos.js 15   (stdout || "").trim().split("\n").some(line => {

./node_modules/default-gateway/sunos.js 16     const results = line.split(/ +/) || [];

./node_modules/default-gateway/openbsd.js 15   (stdout || "").trim().split("\n").some(line => {

./node_modules/default-gateway/openbsd.js 16     const results = line.split(/ +/) || [];

./node_modules/default-gateway/android.js 14   (stdout || "").trim().split("\n").some(line => {

./node_modules/default-gateway/android.js 15     const [_, gateway, iface] = /default via (.+?) dev (.+?)( |$)/.exec(line) || [];

./node_modules/@webpack-cli/info/lib/index.js 8     // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any

./node_modules/@webpack-cli/configtest/lib/index.js 5     // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any

./node_modules/@webpack-cli/configtest/lib/index.js 35                 // eslint-disable-next-line @typescript-eslint/no-explicit-any

./node_modules/@webpack-cli/serve/lib/index.js 6     // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any

./node_modules/@webpack-cli/serve/lib/index.js 10             // eslint-disable-next-line @typescript-eslint/no-var-requires

./node_modules/@webpack-cli/serve/lib/index.js 27             // eslint-disable-next-line @typescript-eslint/ban-ts-comment

./node_modules/@webpack-cli/serve/lib/index.js 30                 // eslint-disable-next-line @typescript-eslint/ban-ts-comment

./node_modules/@webpack-cli/serve/lib/index.js 69             // eslint-disable-next-line @typescript-eslint/no-explicit-any

./node_modules/@webpack-cli/serve/lib/index.js 71             // eslint-disable-next-line @typescript-eslint/no-explicit-any

./node_modules/@webpack-cli/serve/lib/index.js 73             // eslint-disable-next-line @typescript-eslint/no-explicit-any

./node_modules/@webpack-cli/serve/lib/index.js 127             // eslint-disable-next-line @typescript-eslint/no-var-requires

./node_modules/@webpack-cli/serve/lib/index.js 132                 // eslint-disable-next-line @typescript-eslint/no-var-requires

./node_modules/ansi-styles/index.js 28 			underline: [4, 24],

./node_modules/ansi-styles/package.json 41 		"command-line",

./node_modules/babel-loader/node_modules/schema-utils/dist/ValidationError.js 720           // eslint-disable-next-line no-param-reassign

./node_modules/babel-loader/node_modules/schema-utils/dist/ValidationError.js 729       // eslint-disable-next-line no-param-reassign

./node_modules/babel-loader/node_modules/schema-utils/dist/ValidationError.js 753       // eslint-disable-next-line no-param-reassign

./node_modules/babel-loader/node_modules/schema-utils/dist/ValidationError.js 782           } = error; // eslint-disable-next-line default-case

./node_modules/babel-loader/node_modules/schema-utils/dist/validate.js 79         // eslint-disable-next-line no-param-reassign

./node_modules/babel-loader/node_modules/schema-utils/dist/validate.js 137         } // eslint-disable-next-line no-undefined, no-param-reassign

./node_modules/babel-loader/node_modules/schema-utils/dist/keywords/absolutePath.js 23     // eslint-disable-next-line no-undefined

./node_modules/babel-loader/node_modules/schema-utils/dist/keywords/absolutePath.js 26     // eslint-disable-next-line no-undefined

./node_modules/babel-loader/lib/index.js 168       if (options.sourceMaps === "inline") {

./node_modules/babel-loader/lib/index.js 169         // Babel has this weird behavior where if you set "inline", we

./node_modules/babel-loader/lib/index.js 170         // inline the sourcemap, and set 'result.map = null'. This results

./node_modules/babel-loader/lib/index.js 174         // behavior here so "inline" just behaves like 'true'.

./node_modules/relateurl/lib/parse/path.js 53 			// "..?var", "..#anchor", etc ... not "..index.html"

./node_modules/terser-webpack-plugin/dist/index.js 61  * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment

./node_modules/terser-webpack-plugin/dist/index.js 263     if (error.line) {

./node_modules/terser-webpack-plugin/dist/index.js 265         line: error.line,

./node_modules/terser-webpack-plugin/dist/index.js 271         builtError = new Error(`${file} from Terser plugin\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\n${error.stack.split("\n").slice(1).join("\n")}` : ""}`);

./node_modules/terser-webpack-plugin/dist/index.js 278       builtError = new Error(`${file} from Terser plugin\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\n${error.stack.split("\n").slice(1).join("\n")}` : ""}`);

./node_modules/terser-webpack-plugin/dist/index.js 337       if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined

./node_modules/terser-webpack-plugin/dist/index.js 376       numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return

./node_modules/terser-webpack-plugin/dist/index.js 484             compilation.errors.push(TerserPlugin.buildError(error, name, // eslint-disable-next-line no-undefined

./node_modules/terser-webpack-plugin/dist/index.js 485             hasSourceMap ? compilation.requestShortener : undefined, hasSourceMap ? new _sourceMap.SourceMapConsumer(inputSourceMap) : // eslint-disable-next-line no-undefined

./node_modules/terser-webpack-plugin/dist/index.js 509             item => TerserPlugin.buildError(item, name, // eslint-disable-next-line no-undefined

./node_modules/terser-webpack-plugin/dist/index.js 510             hasSourceMap ? compilation.requestShortener : undefined, hasSourceMap ? new _sourceMap.SourceMapConsumer(inputSourceMap) : // eslint-disable-next-line no-undefined

./node_modules/terser-webpack-plugin/dist/index.js 519             const firstNewlinePosition = output.code.indexOf("\n");

./node_modules/terser-webpack-plugin/dist/index.js 520             shebang = output.code.substring(0, firstNewlinePosition);

./node_modules/terser-webpack-plugin/dist/index.js 521             output.code = output.code.substring(firstNewlinePosition + 1);

./node_modules/terser-webpack-plugin/dist/minify.js 36   // eslint-disable-next-line no-param-reassign

./node_modules/terser-webpack-plugin/dist/minify.js 37   const evaluatedOptions = // eslint-disable-next-line no-new-func

./node_modules/terser-webpack-plugin/dist/utils.js 194       // eslint-disable-next-line no-undefined

./node_modules/terser-webpack-plugin/dist/utils.js 198   }; // eslint-disable-next-line global-require

./node_modules/terser-webpack-plugin/dist/utils.js 232     // eslint-disable-next-line no-undefined

./node_modules/terser-webpack-plugin/dist/utils.js 246     // eslint-disable-next-line global-require

./node_modules/terser-webpack-plugin/dist/utils.js 373     // eslint-disable-next-line no-param-reassign

./node_modules/terser-webpack-plugin/dist/utils.js 374     delete minimizerOptions.ecma; // eslint-disable-next-line no-param-reassign

./node_modules/terser-webpack-plugin/dist/utils.js 391       // eslint-disable-next-line no-undefined

./node_modules/terser-webpack-plugin/dist/utils.js 398   }; // eslint-disable-next-line global-require, import/no-extraneous-dependencies

./node_modules/terser-webpack-plugin/dist/utils.js 424     // eslint-disable-next-line no-undefined

./node_modules/terser-webpack-plugin/dist/utils.js 440     // eslint-disable-next-line global-require, import/no-extraneous-dependencies

./node_modules/terser-webpack-plugin/dist/utils.js 475       // eslint-disable-next-line no-undefined

./node_modules/terser-webpack-plugin/dist/utils.js 478   }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require

./node_modules/terser-webpack-plugin/dist/utils.js 516     // eslint-disable-next-line global-require, import/no-extraneous-dependencies

./node_modules/terser-webpack-plugin/dist/utils.js 539     // eslint-disable-next-line no-param-reassign

./node_modules/terser-webpack-plugin/dist/utils.js 543       // eslint-disable-next-line no-param-reassign

./node_modules/terser-webpack-plugin/dist/utils.js 545     } // eslint-disable-next-line no-param-reassign

./node_modules/terser-webpack-plugin/dist/utils.js 552       legalComments: "inline",

./node_modules/terser-webpack-plugin/dist/utils.js 556   }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require

./node_modules/terser-webpack-plugin/dist/utils.js 574     // eslint-disable-next-line no-undefined

./node_modules/terser-webpack-plugin/dist/utils.js 588     // eslint-disable-next-line global-require, import/no-extraneous-dependencies

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 243 var lineTerminatorEscape = {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 251     // V8 does not escape line terminators in regexp patterns in node 12

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 257         return (escaped ? "" : "\\") + lineTerminatorEscape[match];

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 535     constructor(message, filename, line, col, pos) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 541         this.line = line;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 547 function js_error(message, filename, line, col, pos) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 548     throw new JS_Parse_Error(message, filename, line, col, pos);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 563         line            : 1,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 564         tokline         : 0,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 567         newline_before  : false,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 592             S.newline_before = S.newline_before || !in_string;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 593             ++S.line;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 635         S.tokline = S.line;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 652         const line     = S.tokline;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 655         const nlb      = S.newline_before;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 664         S.newline_before = false;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 665         const tok = new AST_Token(type, value, line, col, pos, nlb, comments_before, comments_after, file);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 684         js_error(err, filename, S.tokline, S.tokcol, S.tokpos);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 780           case 10  : return ""; // newline

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 782             if (peek() == "\n") { // DOS newline

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 881     function skip_line_comment(type) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 897     var skip_multiline_comment = with_eof_error("Unterminated multiline comment", function() {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 904         S.newline_before = S.newline_before || text.includes("\n");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 959             parse_error("Unexpected line terminator");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 999             return skip_line_comment("comment1");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1002             return skip_multiline_comment();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1062             skip_line_comment("comment5");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1070                     skip_line_comment("comment3");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1073                 if (looking_at("-->") && S.newline_before) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1075                     skip_line_comment("comment4");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1270     function croak(msg, line, col, pos) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1274                  line != null ? line : ctx.tokline,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1280         croak(msg, token.line, token.col);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1298     function has_newline_before(token) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1304             && (is("eof") || is("punc", "}") || has_newline_before(S.token));

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1360                         || has_newline_before(token)

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1497                 if (has_newline_before(S.token))

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1498                     croak("Illegal newline after 'throw'");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1573                           ref.line, ref.col, ref.pos);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1684         if (has_newline_before(S.token)) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 1685             croak("Unexpected newline before arrow (=>)");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 2105                 S.prev.line, S.prev.col, S.prev.pos);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 2119                 S.prev.line, S.prev.col, S.prev.pos);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 2126         // behind yield on the same line.

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 2128         // If nothing follows on the same line of the yieldExpression,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 2431             croak("Invalid function parameter", ex.start.line, ex.start.col);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 3293         while (is("operator") && UNARY_POSTFIX.has(S.token.value) && !has_newline_before(S.token)) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 3309                 croak("Invalid use of " + op + " operator", token.line, token.col, token.pos);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 3313                 croak("Calling delete on expression not allowed in strict mode", expr.start.line, expr.start.col, expr.start.pos);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 3595     constructor(type, value, line, col, pos, nlb, comments_before, comments_after, file) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 3600         this.line = line;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 6666             start && start.line || 0,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 6682             end && end.line || 0,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 6769         if (start.line) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 6771                 start: {line: start.line, column: start.col},

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 6772                 end: end.endline ? {line: end.endline, column: end.endcol} : null

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 6914     // multiline comment

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 6933         inline_script        : true,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 6936         max_line_len         : false,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 6983     var current_line = 1;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7061         if (options.inline_script) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7084     var might_add_newline = 0;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7085     var need_newline_indented = false;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7087     var newline_insert = -1;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7102                     mapping.line, mapping.col,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7103                     mapping.token.line, mapping.token.col,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7113     var ensure_line_len = options.max_line_len ? function() {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7114         if (current_col > options.max_line_len) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7115             if (might_add_newline) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7116                 var left = OUTPUT.slice(0, might_add_newline);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7117                 var right = OUTPUT.slice(might_add_newline);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7121                         mapping.line++;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7126                 current_line++;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7131         if (might_add_newline) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7132             might_add_newline = 0;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7142         if (need_newline_indented && ch) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7143             need_newline_indented = false;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7155         newline_insert = -1;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7166                     ensure_line_len();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7170                         current_line++;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7203                 line: current_line,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7207             if (!might_add_newline) do_add_mapping();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7214         current_line += n;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7217             ensure_line_len();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7248     var newline = options.beautify ? function() {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7249         if (newline_insert < 0) return print("\n");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7250         if (OUTPUT[newline_insert] != "\n") {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7251             OUTPUT = OUTPUT.slice(0, newline_insert) + "\n" + OUTPUT.slice(newline_insert);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7253             current_line++;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7255         newline_insert++;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7256     } : options.max_line_len ? function() {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7257         ensure_line_len();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7258         might_add_newline = OUTPUT.length;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7279         newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7321         if (might_add_newline) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7322             ensure_line_len();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7359         // There cannot be a newline between return and its value.

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7472             if (need_newline_indented) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7475                 need_newline_indented = false;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7487                 need_newline_indented = true;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7496         if (OUTPUT.length > insert) newline_insert = insert;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7511         newline         : newline,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7548         line            : function() { return current_line; },

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7894                     output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 7895                     if (is_toplevel) output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 8272                     output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 8277         output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 8281             output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 8516                     output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 8658                     output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 8663             output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 8697                     output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 8702             output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 8974             output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 9553                     node.start.line,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 9569             if (!sym) throw new Error(string_template("Undefined label {name} [{line},{col}]", {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 9571                 line: node.start.line,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 9580                 node.start.line,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 12081     throw new Error(string_template("Cannot evaluate a statement [{file}:{line},{col}]", this.start));

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 12301     "multiline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 13813                     // The following two line fix is a duplicate of the fix at

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 14480             var line = block.body[i];

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 14481             if (line instanceof AST_Var && declarations_only(line)) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 14482                 decls.push(line);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 14486                 stat = line;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 14777             inline        : !false_by_default,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 14819         if (this.options["inline"] === true) this.options["inline"] = 3;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 16562     inline_array_like_spread(self.args);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 16883     var can_inline = is_regular_func && compressor.option("inline") && !self.is_callee_pure(compressor);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 16884     if (can_inline && stat instanceof AST_Return) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 16929     if (can_inline) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 16953                     // we simply don't inline into DefaultAssign.

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 16970     if (can_inline && has_annotation(self, _INLINE)) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 17022         if (compressor.option("inline") < 3) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 17027             var line = body[i];

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 17028             if (line instanceof AST_Var) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 17029                 if (stat && !line.definitions.every((var_def) =>

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 17036             } else if (!(line instanceof AST_EmptyStatement)) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 17037                 stat = line;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 17111         var inline = compressor.option("inline");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 17112         if (!can_inject_vars(block_scoped, inline >= 3 && safe_to_inject)) return false;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 17113         if (!can_inject_args(block_scoped, inline >= 2 && safe_to_inject)) return false;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 17164         for (var i = 0, lines = fn.body.length; i < lines; i++) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 18845 function inline_array_like_spread(elements) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 18869     inline_array_like_spread(self.elements);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 18873 function inline_object_prop_spread(props, compressor) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 18906     inline_object_prop_spread(self.properties, compressor);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19217         orig_line_diff : 0,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19218         dest_line_diff : 0,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19237     function add(source, gen_line, gen_col, orig_line, orig_col, name) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19240                 line: orig_line,

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19247             orig_line = info.line;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19252             generated : { line: gen_line + options.dest_line_diff, column: gen_col },

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19253             original  : { line: orig_line + options.orig_line_diff, column: orig_col },

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19325     "-moz-outline-radius",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19326     "-moz-outline-radius-bottomleft",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19327     "-moz-outline-radius-bottomright",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19328     "-moz-outline-radius-topleft",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19329     "-moz-outline-radius-topright",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19389     "-webkit-line-clamp",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 19476     "AnimationTimeline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 20282     "DocumentTimeline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 20578     "IdleDeadline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 20876     "MozOutlineRadius",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 20877     "MozOutlineRadiusBottomleft",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 20878     "MozOutlineRadiusBottomright",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 20879     "MozOutlineRadiusTopleft",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 20880     "MozOutlineRadiusTopright",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 20982     "OfflineAudioCompletionEvent",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 20983     "OfflineAudioContext",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 20984     "OfflineResourceList",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 21446     "SVGPolylineElement",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22165     "alignmentBaseline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22189     "anchor",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22190     "anchorNode",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22191     "anchorOffset",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22192     "anchors",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22393     "baselineShift",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22475     "border-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22476     "border-inline-color",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22477     "border-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22478     "border-inline-end-color",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22479     "border-inline-end-style",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22480     "border-inline-end-width",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22481     "border-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22482     "border-inline-start-color",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22483     "border-inline-start-style",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22484     "border-inline-start-width",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22485     "border-inline-style",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22486     "border-inline-width",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22538     "borderInline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22539     "borderInlineColor",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22540     "borderInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22541     "borderInlineEndColor",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22542     "borderInlineEndStyle",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22543     "borderInlineEndWidth",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22544     "borderInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22545     "borderInlineStartColor",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22546     "borderInlineStartStyle",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22547     "borderInlineStartWidth",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22548     "borderInlineStyle",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 22549     "borderInlineWidth",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 23078     "curve",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 23250     "dominant-baseline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 23251     "dominantBaseline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24083     "inline-size",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24084     "inlineSize",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24085     "inlineVerticalFieldOfView",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24115     "inset-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24116     "inset-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24117     "inset-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24121     "insetInline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24122     "insetInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24123     "insetInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24324     "line",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24325     "line-break",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24326     "line-height",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24327     "lineAlign",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24328     "lineBreak",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24329     "lineCap",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24330     "lineDashOffset",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24331     "lineHeight",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24332     "lineJoin",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24333     "lineNumber",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24334     "lineTo",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24335     "lineWidth",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24336     "linearAcceleration",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24337     "linearRampToValueAtTime",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24338     "linearVelocity",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24339     "lineno",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24340     "lines",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24420     "margin-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24421     "margin-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24422     "margin-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24431     "marginInline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24432     "marginInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24433     "marginInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24487     "max-inline-size",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24498     "maxInlineSize",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24537     "min-inline-size",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24542     "minInlineSize",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24798     "multiline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 24881     "offset-anchor",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25100     "onoffline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25101     "ononline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25275     "outline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25276     "outline-color",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25277     "outline-offset",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25278     "outline-style",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25279     "outline-width",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25280     "outlineColor",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25281     "outlineOffset",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25282     "outlineStyle",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25283     "outlineWidth",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25288     "overflow-anchor",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25290     "overflow-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25296     "overflowInline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25304     "overscroll-behavior-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25309     "overscrollBehaviorInline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25333     "padding-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25334     "padding-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25335     "padding-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25343     "paddingInline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25344     "paddingInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25345     "paddingInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25466     "playsInline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25883     "scroll-margin-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25884     "scroll-margin-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25885     "scroll-margin-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25894     "scroll-padding-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25895     "scroll-padding-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25896     "scroll-padding-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25918     "scrollMarginInline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25919     "scrollMarginInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25920     "scrollMarginInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25931     "scrollPaddingInline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25932     "scrollPaddingInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 25933     "scrollPaddingInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26301     "stroke-linecap",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26302     "stroke-linejoin",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26401     "text-anchor",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26405     "text-decoration-line",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26420     "text-underline-offset",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26421     "text-underline-position",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26426     "textBaseline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26435     "textDecorationOverline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26439     "textDecorationUnderline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26456     "textUnderlineOffset",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26457     "textUnderlinePosition",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26471     "timeline",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26472     "timelineTime",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 26928     "webkitOfflineAudioContext",

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27310     // only function declarations after this line

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27392         console.warn("inline source map not found");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27532                 if (options.sourceMap && options.sourceMap.content == "inline") {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27534                         throw new Error("inline source map only works with singular input");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27605             if (options.sourceMap.url == "inline") {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27689     if (!program.output && program.sourceMap && program.sourceMap.url != "inline") {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27760         } else if (program.sourceMap && program.sourceMap.content == "inline") {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27761             fatal("ERROR: inline source map only works with built-in parser");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27816         if (content && content !== "inline") {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27851                 print_error("Parse error at " + ex.filename + ":" + ex.line + "," + ex.col);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27853                 var lines = files[ex.filename].split(/\r?\n/);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27854                 var line = lines[ex.line - 1];

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27855                 if (!line && !col) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27856                     line = lines[ex.line - 2];

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27857                     col = line.length;

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27859                 if (line) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27862                         line = line.slice(col - limit);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27865                     print_error(line.slice(0, 80));

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27866                     print_error(line.slice(0, col).replace(/\S/g, " ") + "^");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 27926             if (options.sourceMap && options.sourceMap.url !== "inline" && result.map) {

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 28045         var lines = [];

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 28051             lines.push("  " + tokens[0] + padding.slice(tokens[0].length - 2) + tokens[1]);

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 28053         return lines.join("\n");

./node_modules/terser-webpack-plugin/node_modules/terser/dist/bundle.min.js 28088                         out.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 155  * memoization is a dumb-simple, linear least-recently-used cache.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 437  * mappings with the same original source/line/column, but different generated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 438  * line and column the same. Useful when searching for a mapping with a

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 476  * mappings with the same generated line and column, but different

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 477  * source/name/original line and column the same. Useful when searching for a

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 598   // can implement the source URL resolution algorithm as outlined in

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 680           line: mapping.generatedLine,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 692           line: mapping.originalLine,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 722    * Add a single mapping from original source line and column to the generated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 723    * source's line and column for this source map being created. The mapping

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 726    *   - generated: An object with the generated line and column positions.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 727    *   - original: An object with the original line and column positions.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 756       generatedLine: generated.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 758       originalLine: original != null && original.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 836           line: mapping.originalLine,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 848           mapping.originalLine = original.line;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 897     // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 901     if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 903             "original.line and original.column are not numbers -- you probably meant to omit " +

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 909     if (aGenerated && "line" in aGenerated && "column" in aGenerated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 910         && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 914     } else if (aGenerated && "line" in aGenerated && "column" in aGenerated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 915              && aOriginal && "line" in aOriginal && "column" in aOriginal

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 916              && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 917              && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 975         // lines are stored 0-based in SourceMap spec version 3

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1131 // eslint-disable-next-line no-unused-vars

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1374   const lineA = mappingA.generatedLine;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1375   const lineB = mappingB.generatedLine;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1378   return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1455 const base64VLQ = __webpack_require__(2); // eslint-disable-line no-unused-vars

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1547    * Iterate over each mapping between an original source/line/column and a

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1548    * generated line/column in this source map.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1558    *        iterate over the mappings sorted by the generated file's line/column

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1559    *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1567    * Returns all generated line and column information for the original source,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1568    * line, and column provided. If no column is provided, returns all mappings

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1569    * corresponding to a either the line we are searching for or the next

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1570    * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1571    * corresponding to the given line and either the column we are searching for

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1577    *   - line: The line number in the original source.  The line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1583    *   - line: The line number in the generated source, or null.  The

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1584    *    line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1788           msg += "the mappings contained a negative line, column, source index, or name index";

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1845     const originalLine = util.getArg(aArgs, "line");

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1870           line: m.generatedLine,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1909    * Returns the original source, line, and column information for the generated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1910    * source's line and column positions provided. The only argument is an object

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1913    *   - line: The line number in the generated source.  The line number

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1926    *   - line: The line number in the original source, or null.  The

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1927    *     line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1934       generatedLine: util.getArg(aArgs, "line"),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1976           line: util.getArg(mapping, "originalLine", null),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 1985       line: null,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2054    * Returns the generated line and column information for the original source,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2055    * line, and column positions provided. The only argument is an object with

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2059    *   - line: The line number in the original source.  The line number

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2071    *   - line: The line number in the generated source, or null.  The

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2072    *     line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2081         line: null,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2089       originalLine: util.getArg(aArgs, "line"),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2124           line: util.getArg(mapping, "generatedLine", null),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2132       line: null,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2158  *       begins to apply, defined as an object with a "line" and "column"

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2174  *      offset: {line:100, column:10},

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2214         line: -1,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2224         const offsetLine = util.getArg(offset, "line");

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2227         if (offsetLine < lastOffset.line ||

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2228             (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2263   //       generatedLine: The line number in the generated code,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2267   //       originalLine: The line number in the original source that

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2339    * Returns the original source, line, and column information for the generated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2340    * source's line and column positions provided. The only argument is an object

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2343    *   - line: The line number in the generated source.  The line number

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2351    *   - line: The line number in the original source, or null.  The

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2352    *     line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2359       generatedLine: util.getArg(aArgs, "line"),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2380         line: null,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2387       line: needle.generatedLine -

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2428    * Returns the generated line and column information for the original source,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2429    * line, and column positions provided. The only argument is an object with

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2433    *   - line: The line number in the original source.  The line number

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2440    *   - line: The line number in the generated source, or null.  The

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2441    *     line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2457           line: generatedPosition.line +

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2460             (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2469       line: null,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2588     const line = util.getArg(aArgs, "line");

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2593     // the given line, provided such a mapping exists.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2596       originalLine: line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2628         // a mapping for a different line than the one we found. Since

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2630         // the line we found.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2637             line: util.getArg(mapping, "generatedLine", null),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2648         // a mapping for a different line than the one we were searching for.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2650         // the line we are searching for.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2652                mapping.originalLine === line &&

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2659             line: util.getArg(mapping, "generatedLine", null),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2774  * mappings between original and generated line/col pairs are single points,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2873             // JS uses 1-based line numbers, wasm uses 0-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2884               // JS uses 1-based line numbers, wasm uses 0-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2953 // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2957 // Newline character code for charCodeAt() comparisons

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2967  * snippets of generated JavaScript source code while maintaining the line and

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2970  * @param aLine The original line number.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 2981     this.line = aLine == null ? null : aLine;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3002     // All even indices of this array are one line of the generated code,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3003     // while all odd indices are the newlines between two adjacent lines

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3009       const lineContents = getNextLine();

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3010       // The last line of a file might not have a newline.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3012       return lineContents + newLine;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3032         // First check if there is a new line in between.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3034           // Associate first line with "lastMapping"

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3040           // There is no new line in between.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3057       // Each line is added as separate string.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3073         // Associate the remaining code in the current line with "lastMapping"

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3076       // and add the remaining lines without any mapping

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3156    * snippet and the its original associated source's line/column location.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3168                       line: this.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3265       line: 1,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3277           && original.line !== null

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3280           || lastOriginalLine !== original.line

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3286               line: original.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3290               line: generated.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3297         lastOriginalLine = original.line;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3304             line: generated.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3313           generated.line++;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3323                 line: original.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/dist/source-map.js 3327                 line: generated.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/mapping-list.js 16   const lineA = mappingA.generatedLine;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/mapping-list.js 17   const lineB = mappingB.generatedLine;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/mapping-list.js 20   return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/wasm.js 44             // JS uses 1-based line numbers, wasm uses 0-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/wasm.js 55               // JS uses 1-based line numbers, wasm uses 0-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 11 const base64VLQ = require("./base64-vlq"); // eslint-disable-line no-unused-vars

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 103    * Iterate over each mapping between an original source/line/column and a

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 104    * generated line/column in this source map.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 114    *        iterate over the mappings sorted by the generated file's line/column

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 115    *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 123    * Returns all generated line and column information for the original source,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 124    * line, and column provided. If no column is provided, returns all mappings

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 125    * corresponding to a either the line we are searching for or the next

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 126    * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 127    * corresponding to the given line and either the column we are searching for

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 133    *   - line: The line number in the original source.  The line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 139    *   - line: The line number in the generated source, or null.  The

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 140    *    line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 344           msg += "the mappings contained a negative line, column, source index, or name index";

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 401     const originalLine = util.getArg(aArgs, "line");

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 426           line: m.generatedLine,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 465    * Returns the original source, line, and column information for the generated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 466    * source's line and column positions provided. The only argument is an object

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 469    *   - line: The line number in the generated source.  The line number

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 482    *   - line: The line number in the original source, or null.  The

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 483    *     line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 490       generatedLine: util.getArg(aArgs, "line"),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 532           line: util.getArg(mapping, "originalLine", null),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 541       line: null,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 610    * Returns the generated line and column information for the original source,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 611    * line, and column positions provided. The only argument is an object with

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 615    *   - line: The line number in the original source.  The line number

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 627    *   - line: The line number in the generated source, or null.  The

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 628    *     line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 637         line: null,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 645       originalLine: util.getArg(aArgs, "line"),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 680           line: util.getArg(mapping, "generatedLine", null),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 688       line: null,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 714  *       begins to apply, defined as an object with a "line" and "column"

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 730  *      offset: {line:100, column:10},

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 770         line: -1,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 780         const offsetLine = util.getArg(offset, "line");

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 783         if (offsetLine < lastOffset.line ||

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 784             (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 819   //       generatedLine: The line number in the generated code,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 823   //       originalLine: The line number in the original source that

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 895    * Returns the original source, line, and column information for the generated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 896    * source's line and column positions provided. The only argument is an object

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 899    *   - line: The line number in the generated source.  The line number

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 907    *   - line: The line number in the original source, or null.  The

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 908    *     line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 915       generatedLine: util.getArg(aArgs, "line"),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 936         line: null,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 943       line: needle.generatedLine -

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 984    * Returns the generated line and column information for the original source,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 985    * line, and column positions provided. The only argument is an object with

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 989    *   - line: The line number in the original source.  The line number

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 996    *   - line: The line number in the generated source, or null.  The

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 997    *     line number is 1-based.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1013           line: generatedPosition.line +

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1016             (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1025       line: null,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1144     const line = util.getArg(aArgs, "line");

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1149     // the given line, provided such a mapping exists.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1152       originalLine: line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1184         // a mapping for a different line than the one we found. Since

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1186         // the line we found.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1193             line: util.getArg(mapping, "generatedLine", null),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1204         // a mapping for a different line than the one we were searching for.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1206         // the line we are searching for.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1208                mapping.originalLine === line &&

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-consumer.js 1215             line: util.getArg(mapping, "generatedLine", null),

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 49           line: mapping.generatedLine,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 61           line: mapping.originalLine,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 91    * Add a single mapping from original source line and column to the generated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 92    * source's line and column for this source map being created. The mapping

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 95    *   - generated: An object with the generated line and column positions.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 96    *   - original: An object with the original line and column positions.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 125       generatedLine: generated.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 127       originalLine: original != null && original.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 205           line: mapping.originalLine,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 217           mapping.originalLine = original.line;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 266     // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 270     if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 272             "original.line and original.column are not numbers -- you probably meant to omit " +

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 278     if (aGenerated && "line" in aGenerated && "column" in aGenerated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 279         && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 283     } else if (aGenerated && "line" in aGenerated && "column" in aGenerated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 284              && aOriginal && "line" in aOriginal && "column" in aOriginal

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 285              && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 286              && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-map-generator.js 344         // lines are stored 0-based in SourceMap spec version 3

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/binary-search.js 70  * mappings between original and generated line/col pairs are single points,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/util.js 76  * memoization is a dumb-simple, linear least-recently-used cache.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/util.js 358  * mappings with the same original source/line/column, but different generated

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/util.js 359  * line and column the same. Useful when searching for a mapping with a

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/util.js 397  * mappings with the same generated line and column, but different

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/util.js 398  * source/name/original line and column the same. Useful when searching for a

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/util.js 519   // can implement the source URL resolution algorithm as outlined in

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/base64-vlq.js 81 // eslint-disable-next-line no-unused-vars

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 11 // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 15 // Newline character code for charCodeAt() comparisons

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 25  * snippets of generated JavaScript source code while maintaining the line and

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 28  * @param aLine The original line number.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 39     this.line = aLine == null ? null : aLine;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 60     // All even indices of this array are one line of the generated code,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 61     // while all odd indices are the newlines between two adjacent lines

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 67       const lineContents = getNextLine();

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 68       // The last line of a file might not have a newline.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 70       return lineContents + newLine;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 90         // First check if there is a new line in between.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 92           // Associate first line with "lastMapping"

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 98           // There is no new line in between.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 115       // Each line is added as separate string.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 131         // Associate the remaining code in the current line with "lastMapping"

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 134       // and add the remaining lines without any mapping

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 214    * snippet and the its original associated source's line/column location.

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 226                       line: this.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 323       line: 1,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 335           && original.line !== null

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 338           || lastOriginalLine !== original.line

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 344               line: original.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 348               line: generated.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 355         lastOriginalLine = original.line;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 362             line: generated.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 371           generated.line++;

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 381                 line: original.line,

./node_modules/terser-webpack-plugin/node_modules/terser/node_modules/source-map/lib/source-node.js 385                 line: generated.line,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/mozilla-ast.js 1175             start && start.line || 0,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/mozilla-ast.js 1191             end && end.line || 0,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/mozilla-ast.js 1278         if (start.line) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/mozilla-ast.js 1280                 start: {line: start.line, column: start.col},

./node_modules/terser-webpack-plugin/node_modules/terser/lib/mozilla-ast.js 1281                 end: end.endline ? {line: end.endline, column: end.endcol} : null

./node_modules/terser-webpack-plugin/node_modules/terser/lib/minify.js 32         console.warn("inline source map not found");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/minify.js 172                 if (options.sourceMap && options.sourceMap.content == "inline") {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/minify.js 174                         throw new Error("inline source map only works with singular input");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/minify.js 251             if (options.sourceMap.url == "inline") {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/ast.js 108     constructor(type, value, line, col, pos, nlb, comments_before, comments_after, file) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/ast.js 113         this.line = line;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 172     // multiline comment

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 191         inline_script        : true,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 194         max_line_len         : false,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 241     var current_line = 1;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 319         if (options.inline_script) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 342     var might_add_newline = 0;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 343     var need_newline_indented = false;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 345     var newline_insert = -1;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 360                     mapping.line, mapping.col,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 361                     mapping.token.line, mapping.token.col,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 371     var ensure_line_len = options.max_line_len ? function() {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 372         if (current_col > options.max_line_len) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 373             if (might_add_newline) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 374                 var left = OUTPUT.slice(0, might_add_newline);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 375                 var right = OUTPUT.slice(might_add_newline);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 379                         mapping.line++;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 384                 current_line++;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 389         if (might_add_newline) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 390             might_add_newline = 0;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 400         if (need_newline_indented && ch) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 401             need_newline_indented = false;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 413         newline_insert = -1;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 424                     ensure_line_len();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 428                         current_line++;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 461                 line: current_line,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 465             if (!might_add_newline) do_add_mapping();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 472         current_line += n;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 475             ensure_line_len();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 506     var newline = options.beautify ? function() {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 507         if (newline_insert < 0) return print("\n");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 508         if (OUTPUT[newline_insert] != "\n") {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 509             OUTPUT = OUTPUT.slice(0, newline_insert) + "\n" + OUTPUT.slice(newline_insert);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 511             current_line++;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 513         newline_insert++;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 514     } : options.max_line_len ? function() {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 515         ensure_line_len();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 516         might_add_newline = OUTPUT.length;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 537         newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 579         if (might_add_newline) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 580             ensure_line_len();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 617         // There cannot be a newline between return and its value.

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 730             if (need_newline_indented) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 733                 need_newline_indented = false;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 745                 need_newline_indented = true;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 754         if (OUTPUT.length > insert) newline_insert = insert;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 769         newline         : newline,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 806         line            : function() { return current_line; },

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 1152                     output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 1153                     if (is_toplevel) output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 1530                     output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 1535         output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 1539             output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 1774                     output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 1916                     output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 1921             output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 1955                     output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 1960             output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/output.js 2232             output.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 370     constructor(message, filename, line, col, pos) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 376         this.line = line;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 382 function js_error(message, filename, line, col, pos) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 383     throw new JS_Parse_Error(message, filename, line, col, pos);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 398         line            : 1,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 399         tokline         : 0,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 402         newline_before  : false,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 427             S.newline_before = S.newline_before || !in_string;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 428             ++S.line;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 470         S.tokline = S.line;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 487         const line     = S.tokline;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 490         const nlb      = S.newline_before;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 499         S.newline_before = false;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 500         const tok = new AST_Token(type, value, line, col, pos, nlb, comments_before, comments_after, file);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 519         js_error(err, filename, S.tokline, S.tokcol, S.tokpos);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 615           case 10  : return ""; // newline

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 617             if (peek() == "\n") { // DOS newline

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 716     function skip_line_comment(type) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 732     var skip_multiline_comment = with_eof_error("Unterminated multiline comment", function() {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 739         S.newline_before = S.newline_before || text.includes("\n");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 794             parse_error("Unexpected line terminator");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 834             return skip_line_comment("comment1");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 837             return skip_multiline_comment();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 897             skip_line_comment("comment5");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 905                     skip_line_comment("comment3");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 908                 if (looking_at("-->") && S.newline_before) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 910                     skip_line_comment("comment4");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1105     function croak(msg, line, col, pos) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1109                  line != null ? line : ctx.tokline,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1115         croak(msg, token.line, token.col);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1133     function has_newline_before(token) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1139             && (is("eof") || is("punc", "}") || has_newline_before(S.token));

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1195                         || has_newline_before(token)

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1332                 if (has_newline_before(S.token))

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1333                     croak("Illegal newline after 'throw'");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1408                           ref.line, ref.col, ref.pos);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1519         if (has_newline_before(S.token)) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1520             croak("Unexpected newline before arrow (=>)");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1940                 S.prev.line, S.prev.col, S.prev.pos);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1954                 S.prev.line, S.prev.col, S.prev.pos);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1961         // behind yield on the same line.

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 1963         // If nothing follows on the same line of the yieldExpression,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 2266             croak("Invalid function parameter", ex.start.line, ex.start.col);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 3128         while (is("operator") && UNARY_POSTFIX.has(S.token.value) && !has_newline_before(S.token)) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 3144                 croak("Invalid use of " + op + " operator", token.line, token.col, token.pos);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/parse.js 3148                 croak("Calling delete on expression not allowed in strict mode", expr.start.line, expr.start.col, expr.start.pos);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 68     if (!program.output && program.sourceMap && program.sourceMap.url != "inline") {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 139         } else if (program.sourceMap && program.sourceMap.content == "inline") {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 140             fatal("ERROR: inline source map only works with built-in parser");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 195         if (content && content !== "inline") {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 230                 print_error("Parse error at " + ex.filename + ":" + ex.line + "," + ex.col);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 232                 var lines = files[ex.filename].split(/\r?\n/);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 233                 var line = lines[ex.line - 1];

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 234                 if (!line && !col) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 235                     line = lines[ex.line - 2];

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 236                     col = line.length;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 238                 if (line) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 241                         line = line.slice(col - limit);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 244                     print_error(line.slice(0, 80));

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 245                     print_error(line.slice(0, col).replace(/\S/g, " ") + "^");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 305             if (options.sourceMap && options.sourceMap.url !== "inline" && result.map) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 424         var lines = [];

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 430             lines.push("  " + tokens[0] + padding.slice(tokens[0].length - 2) + tokens[1]);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 432         return lines.join("\n");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/cli.js 467                         out.newline();

./node_modules/terser-webpack-plugin/node_modules/terser/lib/scope.js 340                     node.start.line,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/scope.js 356             if (!sym) throw new Error(string_template("Undefined label {name} [{line},{col}]", {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/scope.js 358                 line: node.start.line,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/scope.js 367                 node.start.line,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/sourcemap.js 58         orig_line_diff : 0,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/sourcemap.js 59         dest_line_diff : 0,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/sourcemap.js 78     function add(source, gen_line, gen_col, orig_line, orig_col, name) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/sourcemap.js 81                 line: orig_line,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/sourcemap.js 88             orig_line = info.line;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/sourcemap.js 93             generated : { line: gen_line + options.dest_line_diff, column: gen_col },

./node_modules/terser-webpack-plugin/node_modules/terser/lib/sourcemap.js 94             original  : { line: orig_line + options.orig_line_diff, column: orig_col },

./node_modules/terser-webpack-plugin/node_modules/terser/lib/propmangle.js 300     // only function declarations after this line

./node_modules/terser-webpack-plugin/node_modules/terser/lib/utils/index.js 235 var lineTerminatorEscape = {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/utils/index.js 243     // V8 does not escape line terminators in regexp patterns in node 12

./node_modules/terser-webpack-plugin/node_modules/terser/lib/utils/index.js 249         return (escaped ? "" : "\\") + lineTerminatorEscape[match];

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 254             inline        : !false_by_default,

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 296         if (this.options["inline"] === true) this.options["inline"] = 3;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2039     inline_array_like_spread(self.args);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2360     var can_inline = is_regular_func && compressor.option("inline") && !self.is_callee_pure(compressor);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2361     if (can_inline && stat instanceof AST_Return) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2406     if (can_inline) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2430                     // we simply don't inline into DefaultAssign.

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2447     if (can_inline && has_annotation(self, _INLINE)) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2499         if (compressor.option("inline") < 3) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2504             var line = body[i];

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2505             if (line instanceof AST_Var) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2506                 if (stat && !line.definitions.every((var_def) =>

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2513             } else if (!(line instanceof AST_EmptyStatement)) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2514                 stat = line;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2588         var inline = compressor.option("inline");

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2589         if (!can_inject_vars(block_scoped, inline >= 3 && safe_to_inject)) return false;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2590         if (!can_inject_args(block_scoped, inline >= 2 && safe_to_inject)) return false;

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 2641         for (var i = 0, lines = fn.body.length; i < lines; i++) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 4322 function inline_array_like_spread(elements) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 4346     inline_array_like_spread(self.elements);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 4350 function inline_object_prop_spread(props, compressor) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/index.js 4383     inline_object_prop_spread(self.properties, compressor);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/evaluate.js 118     throw new Error(string_template("Cannot evaluate a statement [{file}:{line},{col}]", this.start));

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/evaluate.js 338     "multiline",

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/tighten-body.js 569                     // The following two line fix is a duplicate of the fix at

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/tighten-body.js 1236             var line = block.body[i];

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/tighten-body.js 1237             if (line instanceof AST_Var && declarations_only(line)) {

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/tighten-body.js 1238                 decls.push(line);

./node_modules/terser-webpack-plugin/node_modules/terser/lib/compress/tighten-body.js 1242                 stat = line;

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 55     "-moz-outline-radius",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 56     "-moz-outline-radius-bottomleft",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 57     "-moz-outline-radius-bottomright",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 58     "-moz-outline-radius-topleft",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 59     "-moz-outline-radius-topright",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 119     "-webkit-line-clamp",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 206     "AnimationTimeline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 1012     "DocumentTimeline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 1308     "IdleDeadline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 1606     "MozOutlineRadius",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 1607     "MozOutlineRadiusBottomleft",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 1608     "MozOutlineRadiusBottomright",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 1609     "MozOutlineRadiusTopleft",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 1610     "MozOutlineRadiusTopright",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 1712     "OfflineAudioCompletionEvent",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 1713     "OfflineAudioContext",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 1714     "OfflineResourceList",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 2176     "SVGPolylineElement",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 2895     "alignmentBaseline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 2919     "anchor",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 2920     "anchorNode",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 2921     "anchorOffset",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 2922     "anchors",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3123     "baselineShift",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3205     "border-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3206     "border-inline-color",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3207     "border-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3208     "border-inline-end-color",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3209     "border-inline-end-style",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3210     "border-inline-end-width",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3211     "border-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3212     "border-inline-start-color",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3213     "border-inline-start-style",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3214     "border-inline-start-width",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3215     "border-inline-style",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3216     "border-inline-width",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3268     "borderInline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3269     "borderInlineColor",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3270     "borderInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3271     "borderInlineEndColor",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3272     "borderInlineEndStyle",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3273     "borderInlineEndWidth",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3274     "borderInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3275     "borderInlineStartColor",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3276     "borderInlineStartStyle",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3277     "borderInlineStartWidth",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3278     "borderInlineStyle",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3279     "borderInlineWidth",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3808     "curve",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3980     "dominant-baseline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 3981     "dominantBaseline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 4813     "inline-size",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 4814     "inlineSize",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 4815     "inlineVerticalFieldOfView",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 4845     "inset-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 4846     "inset-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 4847     "inset-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 4851     "insetInline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 4852     "insetInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 4853     "insetInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5054     "line",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5055     "line-break",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5056     "line-height",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5057     "lineAlign",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5058     "lineBreak",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5059     "lineCap",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5060     "lineDashOffset",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5061     "lineHeight",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5062     "lineJoin",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5063     "lineNumber",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5064     "lineTo",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5065     "lineWidth",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5066     "linearAcceleration",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5067     "linearRampToValueAtTime",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5068     "linearVelocity",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5069     "lineno",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5070     "lines",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5150     "margin-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5151     "margin-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5152     "margin-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5161     "marginInline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5162     "marginInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5163     "marginInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5217     "max-inline-size",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5228     "maxInlineSize",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5267     "min-inline-size",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5272     "minInlineSize",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5528     "multiline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5611     "offset-anchor",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5830     "onoffline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 5831     "ononline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6005     "outline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6006     "outline-color",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6007     "outline-offset",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6008     "outline-style",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6009     "outline-width",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6010     "outlineColor",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6011     "outlineOffset",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6012     "outlineStyle",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6013     "outlineWidth",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6018     "overflow-anchor",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6020     "overflow-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6026     "overflowInline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6034     "overscroll-behavior-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6039     "overscrollBehaviorInline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6063     "padding-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6064     "padding-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6065     "padding-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6073     "paddingInline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6074     "paddingInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6075     "paddingInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6196     "playsInline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6613     "scroll-margin-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6614     "scroll-margin-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6615     "scroll-margin-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6624     "scroll-padding-inline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6625     "scroll-padding-inline-end",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6626     "scroll-padding-inline-start",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6648     "scrollMarginInline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6649     "scrollMarginInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6650     "scrollMarginInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6661     "scrollPaddingInline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6662     "scrollPaddingInlineEnd",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 6663     "scrollPaddingInlineStart",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7031     "stroke-linecap",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7032     "stroke-linejoin",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7131     "text-anchor",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7135     "text-decoration-line",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7150     "text-underline-offset",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7151     "text-underline-position",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7156     "textBaseline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7165     "textDecorationOverline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7169     "textDecorationUnderline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7186     "textUnderlineOffset",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7187     "textUnderlinePosition",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7201     "timeline",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7202     "timelineTime",

./node_modules/terser-webpack-plugin/node_modules/terser/tools/domprops.js 7658     "webkitOfflineAudioContext",

./node_modules/babel-plugin-dynamic-import-node/utils.js 5 // eslint-disable-next-line import/no-unresolved

./node_modules/debug/src/common.js 102 					// Now we need to remove `args[index]` since it's inlined in the `format`

./node_modules/debug/src/browser.js 114 // eslint-disable-next-line complexity

./node_modules/debug/src/node.js 31 	// eslint-disable-next-line import/no-extraneous-dependencies

./node_modules/debug/src/node.js 245  * Map %o to `util.inspect()`, all on a single line.

./node_modules/debug/src/node.js 257  * Map %O to `util.inspect()`, allowing multiple lines if needed.

./node_modules/select-hose/.jshintrc 35     "maxlen"        : false,    // {int} Max number of characters per line

./node_modules/select-hose/.jshintrc 51     "lastsemic"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block

./node_modules/select-hose/.jshintrc 52     "laxbreak"      : false,     // true: Tolerate possibly unsafe line breakings

./node_modules/select-hose/.jshintrc 55     "multistr"      : false,     // true: Tolerate multi-line strings

./node_modules/select-hose/.jscsrc 6   "disallowNewlineBeforeBlockStatements": true,

./node_modules/acorn/dist/acorn.mjs 42 // eslint-disable-next-line comma-spacing

./node_modules/acorn/dist/acorn.mjs 44 // eslint-disable-next-line comma-spacing

./node_modules/acorn/dist/acorn.mjs 47 // This has a complexity linear to the value of the code. The

./node_modules/acorn/dist/acorn.mjs 240 // Matches a whole line break (where CRLF is considered a single

./node_modules/acorn/dist/acorn.mjs 241 // line break). Used to count lines.

./node_modules/acorn/dist/acorn.mjs 243 var lineBreak = /\r\n?|\n|\u2028|\u2029/;

./node_modules/acorn/dist/acorn.mjs 244 var lineBreakG = new RegExp(lineBreak.source, "g");

./node_modules/acorn/dist/acorn.mjs 275 var Position = function Position(line, col) {

./node_modules/acorn/dist/acorn.mjs 276   this.line = line;

./node_modules/acorn/dist/acorn.mjs 281   return new Position(this.line, this.column + n)

./node_modules/acorn/dist/acorn.mjs 292 // want to find the line/column position for a given character

./node_modules/acorn/dist/acorn.mjs 297   for (var line = 1, cur = 0;;) {

./node_modules/acorn/dist/acorn.mjs 298     lineBreakG.lastIndex = cur;

./node_modules/acorn/dist/acorn.mjs 299     var match = lineBreakG.exec(input);

./node_modules/acorn/dist/acorn.mjs 301       ++line;

./node_modules/acorn/dist/acorn.mjs 304       return new Position(line, offset - cur)

./node_modules/acorn/dist/acorn.mjs 327   // enabled, it is given the location as a `{line, column}` object

./node_modules/acorn/dist/acorn.mjs 353   // is allowed and treated as a line comment.

./node_modules/acorn/dist/acorn.mjs 356   // `start` and `end` properties in `{line, column}` form (with

./node_modules/acorn/dist/acorn.mjs 357   // line being 1-based and column 0-based) will be attached to the

./node_modules/acorn/dist/acorn.mjs 373   // passed, the full `{line, column}` locations of the start and

./node_modules/acorn/dist/acorn.mjs 379   // the `loc` object, which holds line/column data. To also add a

./node_modules/acorn/dist/acorn.mjs 505     this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;

./node_modules/acorn/dist/acorn.mjs 506     this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;

./node_modules/acorn/dist/acorn.mjs 508     this.pos = this.lineStart = 0;

./node_modules/acorn/dist/acorn.mjs 519   // And, if locations are used, the {line, column} object

./node_modules/acorn/dist/acorn.mjs 548   // If enabled, skip leading hashbang line.

./node_modules/acorn/dist/acorn.mjs 644         (lineBreak.test(spaceAfter[0]) &&

./node_modules/acorn/dist/acorn.mjs 694     lineBreak.test(this.input.slice(this.lastTokEnd, this.start))

./node_modules/acorn/dist/acorn.mjs 840   return !lineBreak.test(this.input.slice(this.pos, next)) &&

./node_modules/acorn/dist/acorn.mjs 1098   if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))

./node_modules/acorn/dist/acorn.mjs 1099     { this.raise(this.lastTokEnd, "Illegal newline after throw"); }

./node_modules/acorn/dist/acorn.mjs 2205     { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }

./node_modules/acorn/dist/acorn.mjs 2278       !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&

./node_modules/acorn/dist/acorn.mjs 3008     !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))

./node_modules/acorn/dist/acorn.mjs 3406   message += " (" + loc.line + ":" + loc.column + ")";

./node_modules/acorn/dist/acorn.mjs 3416     return new Position(this.curLine, this.pos - this.lineStart)

./node_modules/acorn/dist/acorn.mjs 4770     lineBreakG.lastIndex = start;

./node_modules/acorn/dist/acorn.mjs 4772     while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {

./node_modules/acorn/dist/acorn.mjs 4774       this.lineStart = match.index + match[0].length;

./node_modules/acorn/dist/acorn.mjs 4812         this.lineStart = this.pos;

./node_modules/acorn/dist/acorn.mjs 4856 // than characters, and because operator parsing has been inlined

./node_modules/acorn/dist/acorn.mjs 4920         (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {

./node_modules/acorn/dist/acorn.mjs 4921       // A `-->` line comment

./node_modules/acorn/dist/acorn.mjs 4942     // `<!--`, an XML-style comment that should be interpreted as a line comment

./node_modules/acorn/dist/acorn.mjs 5034   // Operators are parsed inline in tiny state machines. '=' (61) is

./node_modules/acorn/dist/acorn.mjs 5084     if (lineBreak.test(ch)) { this.raise(start, "Unterminated regular expression"); }

./node_modules/acorn/dist/acorn.mjs 5257         this.lineStart = this.pos;

./node_modules/acorn/dist/acorn.mjs 5332         this.lineStart = this.pos;

./node_modules/acorn/dist/acorn.mjs 5380     if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }

./node_modules/acorn/dist/acorn.mjs 5421       // Unicode new line characters after \ get removed from output in both

./node_modules/acorn/dist/acorn.mjs 5505   lineBreak: lineBreak,

./node_modules/acorn/dist/acorn.mjs 5506   lineBreakG: lineBreakG,

./node_modules/acorn/dist/acorn.mjs 5536 export { Node, Parser, Position, SourceLocation, TokContext, Token, TokenType, defaultOptions, getLineInfo, isIdentifierChar, isIdentifierStart, isNewLine, keywords$1 as keywordTypes, lineBreak, lineBreakG, nonASCIIwhitespace, parse, parseExpressionAt, types$1 as tokContexts, types as tokTypes, tokenizer, version };

./node_modules/acorn/dist/acorn.js 48   // eslint-disable-next-line comma-spacing

./node_modules/acorn/dist/acorn.js 50   // eslint-disable-next-line comma-spacing

./node_modules/acorn/dist/acorn.js 53   // This has a complexity linear to the value of the code. The

./node_modules/acorn/dist/acorn.js 246   // Matches a whole line break (where CRLF is considered a single

./node_modules/acorn/dist/acorn.js 247   // line break). Used to count lines.

./node_modules/acorn/dist/acorn.js 249   var lineBreak = /\r\n?|\n|\u2028|\u2029/;

./node_modules/acorn/dist/acorn.js 250   var lineBreakG = new RegExp(lineBreak.source, "g");

./node_modules/acorn/dist/acorn.js 281   var Position = function Position(line, col) {

./node_modules/acorn/dist/acorn.js 282     this.line = line;

./node_modules/acorn/dist/acorn.js 287     return new Position(this.line, this.column + n)

./node_modules/acorn/dist/acorn.js 298   // want to find the line/column position for a given character

./node_modules/acorn/dist/acorn.js 303     for (var line = 1, cur = 0;;) {

./node_modules/acorn/dist/acorn.js 304       lineBreakG.lastIndex = cur;

./node_modules/acorn/dist/acorn.js 305       var match = lineBreakG.exec(input);

./node_modules/acorn/dist/acorn.js 307         ++line;

./node_modules/acorn/dist/acorn.js 310         return new Position(line, offset - cur)

./node_modules/acorn/dist/acorn.js 333     // enabled, it is given the location as a `{line, column}` object

./node_modules/acorn/dist/acorn.js 359     // is allowed and treated as a line comment.

./node_modules/acorn/dist/acorn.js 362     // `start` and `end` properties in `{line, column}` form (with

./node_modules/acorn/dist/acorn.js 363     // line being 1-based and column 0-based) will be attached to the

./node_modules/acorn/dist/acorn.js 379     // passed, the full `{line, column}` locations of the start and

./node_modules/acorn/dist/acorn.js 385     // the `loc` object, which holds line/column data. To also add a

./node_modules/acorn/dist/acorn.js 511       this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;

./node_modules/acorn/dist/acorn.js 512       this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;

./node_modules/acorn/dist/acorn.js 514       this.pos = this.lineStart = 0;

./node_modules/acorn/dist/acorn.js 525     // And, if locations are used, the {line, column} object

./node_modules/acorn/dist/acorn.js 554     // If enabled, skip leading hashbang line.

./node_modules/acorn/dist/acorn.js 650           (lineBreak.test(spaceAfter[0]) &&

./node_modules/acorn/dist/acorn.js 700       lineBreak.test(this.input.slice(this.lastTokEnd, this.start))

./node_modules/acorn/dist/acorn.js 846     return !lineBreak.test(this.input.slice(this.pos, next)) &&

./node_modules/acorn/dist/acorn.js 1104     if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))

./node_modules/acorn/dist/acorn.js 1105       { this.raise(this.lastTokEnd, "Illegal newline after throw"); }

./node_modules/acorn/dist/acorn.js 2211       { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }

./node_modules/acorn/dist/acorn.js 2284         !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&

./node_modules/acorn/dist/acorn.js 3014       !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))

./node_modules/acorn/dist/acorn.js 3412     message += " (" + loc.line + ":" + loc.column + ")";

./node_modules/acorn/dist/acorn.js 3422       return new Position(this.curLine, this.pos - this.lineStart)

./node_modules/acorn/dist/acorn.js 4776       lineBreakG.lastIndex = start;

./node_modules/acorn/dist/acorn.js 4778       while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {

./node_modules/acorn/dist/acorn.js 4780         this.lineStart = match.index + match[0].length;

./node_modules/acorn/dist/acorn.js 4818           this.lineStart = this.pos;

./node_modules/acorn/dist/acorn.js 4862   // than characters, and because operator parsing has been inlined

./node_modules/acorn/dist/acorn.js 4926           (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {

./node_modules/acorn/dist/acorn.js 4927         // A `-->` line comment

./node_modules/acorn/dist/acorn.js 4948       // `<!--`, an XML-style comment that should be interpreted as a line comment

./node_modules/acorn/dist/acorn.js 5040     // Operators are parsed inline in tiny state machines. '=' (61) is

./node_modules/acorn/dist/acorn.js 5090       if (lineBreak.test(ch)) { this.raise(start, "Unterminated regular expression"); }

./node_modules/acorn/dist/acorn.js 5263           this.lineStart = this.pos;

./node_modules/acorn/dist/acorn.js 5338           this.lineStart = this.pos;

./node_modules/acorn/dist/acorn.js 5386       if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }

./node_modules/acorn/dist/acorn.js 5427         // Unicode new line characters after \ get removed from output in both

./node_modules/acorn/dist/acorn.js 5511     lineBreak: lineBreak,

./node_modules/acorn/dist/acorn.js 5512     lineBreakG: lineBreakG,

./node_modules/acorn/dist/acorn.js 5555   exports.lineBreak = lineBreak;

./node_modules/acorn/dist/acorn.js 5556   exports.lineBreakG = lineBreakG;

./node_modules/clean-stack/index.js 13 		.filter(line => {

./node_modules/clean-stack/index.js 14 			const pathMatches = line.match(extractPathRegex);

./node_modules/clean-stack/index.js 31 		.filter(line => line.trim() !== '')

./node_modules/clean-stack/index.js 32 		.map(line => {

./node_modules/clean-stack/index.js 34 				return line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')));

./node_modules/clean-stack/index.js 37 			return line;

./node_modules/slash/index.js 4 	const hasNonAscii = /[^\u0000-\u0080]+/.test(path); // eslint-disable-line no-control-regex

./node_modules/indent-string/package.json 4 	"description": "Indent each line in a string",

./node_modules/indent-string/package.json 27 		"line",

./node_modules/eslint-scope/lib/referencer.js 460     BreakStatement() {} // eslint-disable-line class-methods-use-this

./node_modules/eslint-scope/lib/referencer.js 462     ContinueStatement() {} // eslint-disable-line class-methods-use-this

./node_modules/eslint-scope/lib/referencer.js 621     MetaProperty() { // eslint-disable-line class-methods-use-this

./node_modules/eslint-scope/lib/scope.js 345     __isValidResolution(ref, variable) { // eslint-disable-line class-methods-use-this, no-unused-vars

./node_modules/eslint-scope/lib/scope.js 496     isArgumentsMaterialized() { // eslint-disable-line class-methods-use-this

./node_modules/eslint-scope/lib/scope.js 505     isThisMaterialized() { // eslint-disable-line class-methods-use-this

./node_modules/eslint-scope/lib/scope-manager.js 187     attach() { } // eslint-disable-line class-methods-use-this

./node_modules/eslint-scope/lib/scope-manager.js 189     detach() { } // eslint-disable-line class-methods-use-this

./node_modules/htmlparser2/lib/Tokenizer.js 824                 // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition

./node_modules/renderkid/node_modules/strip-ansi/package.json 47     "command-line",

./node_modules/renderkid/node_modules/ansi-regex/package.json 44     "command-line",

./node_modules/renderkid/lib/Layout.js 95     linePrependor: {

./node_modules/renderkid/lib/Layout.js 100     lineAppendor: {

./node_modules/renderkid/lib/RenderKid.js 10 var AnsiPainter, Layout, RenderKid, Styles, blockStyleApplier, cloneAndMergeDeep, inlineStyleApplier, isPlainObject, stripAnsi, terminalWidth, tools;

./node_modules/renderkid/lib/RenderKid.js 11 inlineStyleApplier = require('./renderKid/styleApplier/inline');

./node_modules/renderkid/lib/RenderKid.js 144           this._renderInlineNode(node, parentNode, parentBlock);

./node_modules/renderkid/lib/RenderKid.js 152         text = text.replace(/\s+/g, ' '); // let's only trim if the parent is an inline element

./node_modules/renderkid/lib/RenderKid.js 154         if ((parentNode != null ? (ref = parentNode.styles) != null ? ref.display : void 0 : void 0) !== 'inline') {

./node_modules/renderkid/lib/RenderKid.js 190       key: "_renderInlineNode",

./node_modules/renderkid/lib/RenderKid.js 191       value: function _renderInlineNode(node, parentNode, parentBlock) {

./node_modules/renderkid/lib/RenderKid.js 194         var _inlineStyleApplier$a = inlineStyleApplier.applyTo(node, this._getStyleFor(node));

./node_modules/renderkid/lib/RenderKid.js 196         before = _inlineStyleApplier$a.before;

./node_modules/renderkid/lib/RenderKid.js 197         after = _inlineStyleApplier$a.after;

./node_modules/renderkid/lib/layout/Block.js 38       this._linePrependor = new this._config.linePrependor.fn(this._config.linePrependor.options);

./node_modules/renderkid/lib/layout/Block.js 39       this._lineAppendor = new this._config.lineAppendor.fn(this._config.lineAppendor.options);

./node_modules/renderkid/lib/layout/Block.js 174         this._writeInline(str);

./node_modules/renderkid/lib/layout/Block.js 186         return this._linePrependor.render(fromParent);

./node_modules/renderkid/lib/layout/Block.js 198         return this._lineAppendor.render(fromParent);

./node_modules/renderkid/lib/layout/Block.js 211       key: "_writeInline",

./node_modules/renderkid/lib/layout/Block.js 212       value: function _writeInline(str) {

./node_modules/renderkid/lib/layout/Block.js 213         var i, j, k, l, lineBreaksToAppend, m, ref, ref1, ref2, remaining; // special characters (such as <bg-white>) don't require

./node_modules/renderkid/lib/layout/Block.js 224         remaining = str; // we might need to add a few line breaks at the end of the text.

./node_modules/renderkid/lib/layout/Block.js 226         lineBreaksToAppend = 0; // if text starts with line breaks...

./node_modules/renderkid/lib/layout/Block.js 229           // ... we want to write the exact same number of line breaks

./node_modules/renderkid/lib/layout/Block.js 236         } // and if the text ends with line breaks...

./node_modules/renderkid/lib/layout/Block.js 240           // we want to write the exact same number of line breaks

./node_modules/renderkid/lib/layout/Block.js 242           lineBreaksToAppend = m[0].length;

./node_modules/renderkid/lib/layout/Block.js 248           // anything other than a break line...

./node_modules/renderkid/lib/layout/Block.js 253             remaining = remaining.substr(m[0].length, remaining.length); // for any number of line breaks we find inside the text...

./node_modules/renderkid/lib/layout/Block.js 255             // ... we write one less break line to the layout.

./node_modules/renderkid/lib/layout/Block.js 262         } // if we had line breaks to append to the layout...

./node_modules/renderkid/lib/layout/Block.js 265         if (lineBreaksToAppend > 0) {

./node_modules/renderkid/lib/layout/Block.js 266           // ... we append the exact same number of line breaks to the layout.

./node_modules/renderkid/lib/layout/Block.js 267           for (i = l = 1, ref2 = lineBreaksToAppend; 1 <= ref2 ? l <= ref2 : l >= ref2; i = 1 <= ref2 ? ++l : --l) {

./node_modules/renderkid/lib/layout/Block.js 271       } // wraps a line into multiple lines if necessary, adds horizontal margins,

./node_modules/renderkid/lib/layout/Block.js 277         var line, lineContent, lineContentLength, remaining, roomLeft, toAppend, toAppendLength, toPrepend, toPrependLength; // we'll be cutting from our string as we go

./node_modules/renderkid/lib/layout/Block.js 292           roomLeft = this._layout._config.terminalWidth - (toPrependLength + toAppendLength); // how much room each line of content will have

./node_modules/renderkid/lib/layout/Block.js 294           lineContentLength = Math.min(this._config.width, roomLeft); // cut line content, only for the amount needed

./node_modules/renderkid/lib/layout/Block.js 296           lineContent = remaining.cut(0, lineContentLength, true); // line will consist of both margins and the content

./node_modules/renderkid/lib/layout/Block.js 298           line = toPrepend + lineContent.str + toAppend; // send it off to layout

./node_modules/renderkid/lib/layout/Block.js 300           this._layout._appendLine(line);

./node_modules/renderkid/lib/layout/Block.js 327     linePrependor: {

./node_modules/renderkid/lib/layout/Block.js 328       fn: require('./block/linePrependor/Default'),

./node_modules/renderkid/lib/layout/Block.js 333     lineAppendor: {

./node_modules/renderkid/lib/layout/Block.js 334       fn: require('./block/lineAppendor/Default'),

./node_modules/renderkid/lib/layout/Block.js 339     lineWrapper: {

./node_modules/renderkid/lib/layout/Block.js 340       fn: require('./block/lineWrapper/Default'),

./node_modules/renderkid/lib/layout/Block.js 342         lineWidth: null

./node_modules/renderkid/lib/layout/SpecialString.js 62         var buffer, bufferLength, justSkippedSkipChar, lines;

./node_modules/renderkid/lib/layout/SpecialString.js 65         lines = [];

./node_modules/renderkid/lib/layout/SpecialString.js 70             lines.push(buffer);

./node_modules/renderkid/lib/layout/SpecialString.js 85           lines.push(buffer);

./node_modules/renderkid/lib/layout/SpecialString.js 88         return lines;

./node_modules/renderkid/lib/layout/block/lineAppendor/_LineAppendor.js 17     this._lineNo = 0;

./node_modules/renderkid/lib/layout/block/lineAppendor/_LineAppendor.js 23       this._lineNo++;

./node_modules/renderkid/lib/layout/block/linePrependor/Default.js 49         if (this._lineNo === 0 && (bullet = this._config.bullet)) {

./node_modules/renderkid/lib/layout/block/linePrependor/_LinePrependor.js 17     this._lineNo = -1;

./node_modules/renderkid/lib/layout/block/linePrependor/_LinePrependor.js 23       this._lineNo++;

./node_modules/renderkid/lib/renderKid/Styles.js 89       display: 'inline'

./node_modules/renderkid/lib/renderKid/styles/rule/declarationBlock/Display.js 64   Display._allowed = ['inline', 'block', 'none'];

./node_modules/renderkid/lib/renderKid/styleApplier/inline.js 4 var _common, inlineStyleApplier, self, tools;

./node_modules/renderkid/lib/renderKid/styleApplier/inline.js 8 module.exports = inlineStyleApplier = self = {

./node_modules/renderkid/lib/renderKid/styleApplier/block.js 25         linePrependor: {

./node_modules/renderkid/lib/renderKid/styleApplier/block.js 35         lineAppendor: {

./node_modules/renderkid/lib/renderKid/styleApplier/block.js 80         linePrependor: {

./node_modules/websocket-driver/lib/websocket/driver/headers.js 11   this._lines = [];

./node_modules/websocket-driver/lib/websocket/driver/headers.js 23     this._lines.push(name + ': ' + value + '\r\n');

./node_modules/websocket-driver/lib/websocket/driver/headers.js 28   return this._lines.join('');

./node_modules/html-webpack-plugin/lib/child-compiler.js 36     this.compilationPromise; // eslint-disable-line

./node_modules/html-webpack-plugin/lib/child-compiler.js 40     this.compilationStartedTimestamp; // eslint-disable-line

./node_modules/html-webpack-plugin/lib/child-compiler.js 44     this.compilationEndedTimestamp; // eslint-disable-line

./node_modules/bonjour/test/service.js 23     new Service({ type: 'http', port: 3000 }) // eslint-disable-line no-new

./node_modules/bonjour/test/service.js 30     new Service({ name: 'Foo Bar', port: 3000 }) // eslint-disable-line no-new

./node_modules/bonjour/test/service.js 37     new Service({ name: 'Foo Bar', type: 'http' }) // eslint-disable-line no-new

./node_modules/bonjour/lib/browser.js 24  * An internal list of online services is kept which starts out empty. When

./node_modules/webpack/bin/webpack.js 5  * @param {string[]} args command line arguments

./node_modules/webpack/bin/webpack.js 66 	// eslint-disable-next-line node/no-missing-require

./node_modules/webpack/bin/webpack.js 68 	// eslint-disable-next-line node/no-missing-require

./node_modules/webpack/bin/webpack.js 93 	const readLine = require("readline");

./node_modules/webpack/schemas/WebpackOptions.json 96         "#/definitions/AssetInlineGeneratorOptions",

./node_modules/webpack/schemas/WebpackOptions.json 116     "AssetInlineGeneratorOptions": {

./node_modules/webpack/schemas/WebpackOptions.json 117       "description": "Generator options for asset/inline modules.",

./node_modules/webpack/schemas/WebpackOptions.json 140       "description": "Function that executes for module and should return whenever asset should be inlined as DataUrl.",

./node_modules/webpack/schemas/WebpackOptions.json 150           "description": "Maximum size of asset that should be inline as modules. Default: 8kb.",

./node_modules/webpack/schemas/WebpackOptions.json 351       "description": "A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).",

./node_modules/webpack/schemas/WebpackOptions.json 358           "pattern": "^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$"

./node_modules/webpack/schemas/WebpackOptions.json 1140         "asset/inline": {

./node_modules/webpack/schemas/WebpackOptions.json 1141           "$ref": "#/definitions/AssetInlineGeneratorOptions"

./node_modules/webpack/schemas/WebpackOptions.json 1305           "description": "Only appends lines to the output. Avoids updating existing output e. g. for status messages. This option is only used when no custom console is provided.",

./node_modules/webpack/schemas/WebpackOptions.json 2971         "asset/inline": {

./node_modules/webpack/schemas/WebpackOptions.json 4024       "description": "Prefixes every line of the source in the bundle with this string.",

./node_modules/webpack/schemas/plugins/SourceMapDevToolPlugin.json 84       "description": "Defines the output filename of the SourceMap (will be inlined if no value is provided).",

./node_modules/webpack/schemas/plugins/SourceMapDevToolPlugin.json 87           "description": "Disable separate SourceMap file and inline SourceMap as DataUrl.",

./node_modules/webpack/schemas/plugins/asset/AssetInlineGeneratorOptions.json 2   "$ref": "../../WebpackOptions.json#/definitions/AssetInlineGeneratorOptions"

./node_modules/webpack/lib/EvalSourceMapDevToolPlugin.js 172 				hooks.inlineInRuntimeBailout.tap(

./node_modules/webpack/lib/ModuleParseError.js 55 			typeof err.loc.line === "number"

./node_modules/webpack/lib/ModuleParseError.js 57 			var lineNumber = err.loc.line;

./node_modules/webpack/lib/ModuleParseError.js 67 				const start = Math.max(0, lineNumber - 3);

./node_modules/webpack/lib/ModuleParseError.js 68 				const linesBefore = sourceLines.slice(start, lineNumber - 1);

./node_modules/webpack/lib/ModuleParseError.js 69 				const theLine = sourceLines[lineNumber - 1];

./node_modules/webpack/lib/ModuleParseError.js 70 				const linesAfter = sourceLines.slice(lineNumber, lineNumber + 2);

./node_modules/webpack/lib/ModuleParseError.js 73 					linesBefore.map(l => `\n| ${l}`).join("") +

./node_modules/webpack/lib/ModuleParseError.js 75 					linesAfter.map(l => `\n| ${l}`).join("");

./node_modules/webpack/lib/MultiCompiler.js 252 			const lines = Array.from(edges)

./node_modules/webpack/lib/MultiCompiler.js 255 			lines.unshift("Circular dependency found in compiler dependencies.");

./node_modules/webpack/lib/MultiCompiler.js 256 			errors.unshift(lines.join("\n"));

./node_modules/webpack/lib/Compilation.js 1163 						// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/Compilation.js 1165 							// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/Compilation.js 1178 						// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/Compilation.js 1180 							// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/Compilation.js 1587 					// eslint-disable-next-line no-self-assign

./node_modules/webpack/lib/Compilation.js 5109  * Only assets of different types should be inlined.

./node_modules/webpack/lib/Dependency.js 32  * @property {number} line

./node_modules/webpack/lib/Dependency.js 133 			loc.start = { line: this._locSL, column: this._locSC };

./node_modules/webpack/lib/Dependency.js 136 			loc.end = { line: this._locEL, column: this._locEC };

./node_modules/webpack/lib/Dependency.js 149 			this._locSL = loc.start.line || 0;

./node_modules/webpack/lib/Dependency.js 156 			this._locEL = loc.end.line || 0;

./node_modules/webpack/lib/formatLocation.js 17 		if ("line" in pos && "column" in pos) {

./node_modules/webpack/lib/formatLocation.js 18 			return `${pos.line}:${pos.column}`;

./node_modules/webpack/lib/formatLocation.js 19 		} else if ("line" in pos) {

./node_modules/webpack/lib/formatLocation.js 20 			return `${pos.line}:?`;

./node_modules/webpack/lib/formatLocation.js 35 				typeof loc.start.line === "number" &&

./node_modules/webpack/lib/formatLocation.js 37 				typeof loc.end.line === "number" &&

./node_modules/webpack/lib/formatLocation.js 39 				loc.start.line === loc.end.line

./node_modules/webpack/lib/formatLocation.js 44 				typeof loc.start.line === "number" &&

./node_modules/webpack/lib/formatLocation.js 47 				typeof loc.end.line === "number" &&

./node_modules/webpack/lib/formatLocation.js 50 				return `${loc.start.line}-${loc.end.line}`;

./node_modules/webpack/lib/CommentCompilationWarning.js 17 	 * @param {DependencyLocation} loc affected lines of code

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 18 const ImportMetaHotDeclineDependency = require("./dependencies/ImportMetaHotDeclineDependency");

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 20 const ModuleHotDeclineDependency = require("./dependencies/ModuleHotDeclineDependency");

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 140 		const createDeclineHandler = (parser, ParamDependency) => expr => {

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 143 				`${module.moduleArgument}.hot.decline`,

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 204 				.for("module.hot.decline")

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 207 					createDeclineHandler(parser, ModuleHotDeclineDependency)

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 232 				.for("import.meta.webpackHot.decline")

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 235 					createDeclineHandler(parser, ImportMetaHotDeclineDependency)

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 259 					ModuleHotDeclineDependency,

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 263 					ModuleHotDeclineDependency,

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 264 					new ModuleHotDeclineDependency.Template()

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 278 					ImportMetaHotDeclineDependency,

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 282 					ImportMetaHotDeclineDependency,

./node_modules/webpack/lib/HotModuleReplacementPlugin.js 283 					new ImportMetaHotDeclineDependency.Template()

./node_modules/webpack/lib/EvalDevToolModulePlugin.js 86 			hooks.inlineInRuntimeBailout.tap(

./node_modules/webpack/lib/ErrorHelpers.js 28 exports.cutOffMultilineMessage = (stack, message) => {

./node_modules/webpack/lib/ErrorHelpers.js 34 	stack.forEach((line, idx) => {

./node_modules/webpack/lib/ErrorHelpers.js 35 		if (!line.includes(message[idx])) result.push(line);

./node_modules/webpack/lib/ErrorHelpers.js 59 	stack = exports.cutOffMultilineMessage(stack, message);

./node_modules/webpack/lib/WebpackOptionsApply.js 192 				const inline = options.devtool.includes("inline");

./node_modules/webpack/lib/WebpackOptionsApply.js 201 					filename: inline ? null : options.output.sourceMapFilename,

./node_modules/webpack/lib/buildChunkGraph.js 146 					// linear cost access, which allows to maintain O(n) complexity

./node_modules/webpack/lib/AsyncDependenciesBlock.js 23 	 * @param {DependencyLocation=} loc the line of code

./node_modules/webpack/lib/dependencies/ImportMetaHotDeclineDependency.js 12 class ImportMetaHotDeclineDependency extends ModuleDependency {

./node_modules/webpack/lib/dependencies/ImportMetaHotDeclineDependency.js 21 		return "import.meta.webpackHot.decline";

./node_modules/webpack/lib/dependencies/ImportMetaHotDeclineDependency.js 30 	ImportMetaHotDeclineDependency,

./node_modules/webpack/lib/dependencies/ImportMetaHotDeclineDependency.js 31 	"webpack/lib/dependencies/ImportMetaHotDeclineDependency"

./node_modules/webpack/lib/dependencies/ImportMetaHotDeclineDependency.js 34 ImportMetaHotDeclineDependency.Template = ModuleDependencyTemplateAsId;

./node_modules/webpack/lib/dependencies/ImportMetaHotDeclineDependency.js 36 module.exports = ImportMetaHotDeclineDependency;

./node_modules/webpack/lib/dependencies/AMDRequireDependenciesBlockParserPlugin.js 229 								"Cannot statically analyse 'require(…, …)' in line " +

./node_modules/webpack/lib/dependencies/AMDRequireDependenciesBlockParserPlugin.js 230 									expr.loc.start.line,

./node_modules/webpack/lib/dependencies/ModuleHotDeclineDependency.js 12 class ModuleHotDeclineDependency extends ModuleDependency {

./node_modules/webpack/lib/dependencies/ModuleHotDeclineDependency.js 21 		return "module.hot.decline";

./node_modules/webpack/lib/dependencies/ModuleHotDeclineDependency.js 30 	ModuleHotDeclineDependency,

./node_modules/webpack/lib/dependencies/ModuleHotDeclineDependency.js 31 	"webpack/lib/dependencies/ModuleHotDeclineDependency"

./node_modules/webpack/lib/dependencies/ModuleHotDeclineDependency.js 34 ModuleHotDeclineDependency.Template = ModuleDependencyTemplateAsId;

./node_modules/webpack/lib/dependencies/ModuleHotDeclineDependency.js 36 module.exports = ModuleHotDeclineDependency;

./node_modules/webpack/lib/dependencies/HarmonyDetectionParserPlugin.js 35 						line: -1,

./node_modules/webpack/lib/dependencies/HarmonyDetectionParserPlugin.js 39 						line: -1,

./node_modules/webpack/lib/asset/AssetModulesPlugin.js 41 	"asset/inline": createSchemaValidation(

./node_modules/webpack/lib/asset/AssetModulesPlugin.js 42 		require("../../schemas/plugins/asset/AssetInlineGeneratorOptions.check.js"),

./node_modules/webpack/lib/asset/AssetModulesPlugin.js 43 		() => getSchema("AssetInlineGeneratorOptions"),

./node_modules/webpack/lib/asset/AssetModulesPlugin.js 99 					.for("asset/inline")

./node_modules/webpack/lib/asset/AssetModulesPlugin.js 120 				for (const type of ["asset", "asset/inline", "asset/resource"]) {

./node_modules/webpack/lib/asset/AssetModulesPlugin.js 140 							if (type !== "asset/inline") {

./node_modules/webpack/lib/wasm-sync/WebAssemblyUtils.js 42 			// TODO add the following 3 lines when removing of ModuleExport is possible

./node_modules/webpack/lib/stats/DefaultStatsPrinterPlugin.js 568 		filteredEntries > 0 ? `+ ${filteredEntries} hidden lines` : undefined,

./node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js 1611 	// Each item takes 1 line

./node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js 1613 	// + 1 extra line when it has children and filteredChildren

./node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js 1643 	// After collapse each child must take exactly one line

./node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js 1666 	// This are the groups, which take 1+ lines each

./node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js 1670 	// This are the items, which take 1 line each

./node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js 1682 		// If each group would take 1 line the total would be below the maximum

./node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js 1730 		// If we have only enough space to show one line per group and one line for the filtered items

./node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js 2195  * @param {function(string, Function): void} fn handler function called for every active line in config

./node_modules/webpack/lib/stats/DefaultStatsPresetPlugin.js 233 				// eslint-disable-next-line no-useless-escape

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 57 	const lines = code.split("\n");

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 58 	const n = `${lines.length}`.length;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 59 	return `\n\nGenerated code for ${module.identifier()}\n${lines

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 60 		.map((line, i, lines) => {

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 62 			return `${" ".repeat(n - iStr.length)}${iStr} | ${line}`;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 111 /** @typedef {RenderContext & { inlined: boolean }} StartupRenderContext */

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 124  * @property {SyncBailHook<[Module, RenderBootstrapContext], string>} inlineInRuntimeBailout

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 173 				inlineInRuntimeBailout: new SyncBailHook(["module", "renderContext"]),

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 428 								lineOffset: -1

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 456 								lineOffset: -1

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 691 		let inlinedModules;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 692 		if (bootstrap.allowInlineStartup && hasEntryModules) {

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 693 			inlinedModules = new Set(chunkGraph.getChunkEntryModulesIterable(chunk));

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 731 			inlinedModules

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 732 				? allModules.filter(m => !inlinedModules.has(m))

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 784 		if (inlinedModules) {

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 796 			const lastInlinedModule = last(inlinedModules);

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 799 			for (const m of inlinedModules) {

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 817 						: inlinedModules.size > 1

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 844 						if (m !== lastInlinedModule)

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 861 				hooks.renderStartup.call(startupSource, lastInlinedModule, {

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 863 					inlined: true

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 896 								inlined: false

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 962 				for (const line of bootstrap[key]) {

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 963 					hash.update(line);

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 974 	 * @returns {{ header: string[], beforeStartup: string[], startup: string[], afterStartup: string[], allowInlineStartup: boolean }} the generated source of the bootstrap code

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1002 			allowInlineStartup: true

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1007 		if (result.allowInlineStartup && moduleFactories) {

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1011 			result.allowInlineStartup = false;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1013 		if (result.allowInlineStartup && moduleCache) {

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1015 			result.allowInlineStartup = false;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1017 		if (result.allowInlineStartup && interceptModuleExecution) {

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1021 			result.allowInlineStartup = false;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1076 					if (result.allowInlineStartup && chunks.length > 0) {

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1080 						result.allowInlineStartup = false;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1083 						result.allowInlineStartup &&

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1097 							"// This entry module is referenced by other modules so it can't be inlined"

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1099 						result.allowInlineStartup = false;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1102 						result.allowInlineStartup &&

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1107 							"// This entry module doesn't tell about it's top-level declarations so it can't be inlined"

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1109 						result.allowInlineStartup = false;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1111 					if (result.allowInlineStartup) {

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1112 						const bailout = hooks.inlineInRuntimeBailout.call(

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1118 								`// This entry module can't be inlined because ${bailout}`

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1120 							result.allowInlineStartup = false;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1132 						result.allowInlineStartup &&

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1135 						result.allowInlineStartup = false;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1137 							"// This entry module used 'module' so it can't be inlined"

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1185 					result.allowInlineStartup = false;

./node_modules/webpack/lib/javascript/JavascriptModulesPlugin.js 1237 			result.allowInlineStartup = false;

./node_modules/webpack/lib/javascript/JavascriptParser.js 616 									// eslint-disable-next-line eqeqeq

./node_modules/webpack/lib/javascript/CommonJsChunkFormatPlugin.js 145 										inlined: false

./node_modules/webpack/lib/javascript/ArrayPushCallbackChunkFormatPlugin.js 115 												inlined: false

./node_modules/webpack/lib/optimize/LimitChunkCountPlugin.js 146 					// eslint-disable-next-line no-constant-condition

./node_modules/webpack/lib/optimize/ConcatenatedModule.js 170 		"alert,all,anchor,anchors,area,assign,blur,button,checkbox,clearInterval,clearTimeout",

./node_modules/webpack/lib/optimize/ConcatenatedModule.js 1675 						typeof err.loc.line === "number"

./node_modules/webpack/lib/optimize/ConcatenatedModule.js 1677 						const lineNumber = err.loc.line;

./node_modules/webpack/lib/optimize/ConcatenatedModule.js 1678 						const lines = code.split("\n");

./node_modules/webpack/lib/optimize/ConcatenatedModule.js 1681 							lines

./node_modules/webpack/lib/optimize/ConcatenatedModule.js 1682 								.slice(Math.max(0, lineNumber - 3), lineNumber + 2)

./node_modules/webpack/lib/schemes/HttpUriPlugin.js 716 Remove this line from the lockfile to force upgrading.`

./node_modules/webpack/lib/schemes/HttpUriPlugin.js 822 													const explainer = `Incorrect end of line sequence was detected in the lockfile cache.

./node_modules/webpack/lib/schemes/HttpUriPlugin.js 826 This will avoid that the end of line sequence is changed by git on Windows.`;

./node_modules/webpack/lib/schemes/HttpUriPlugin.js 838 													// "fix" the end of line sequence of the lockfile content

./node_modules/webpack/lib/schemes/HttpUriPlugin.js 840 														`${filePath} fixed end of line sequence (\\r\\n instead of \\n).`

./node_modules/webpack/lib/schemes/HttpUriPlugin.js 863 																? "end of line sequence was unexpectedly changed"

./node_modules/webpack/lib/config/browserslistTargetHandler.js 158 			// Prior to Firefox 39, a line terminator (<code>\\n</code>) was incorrectly allowed after arrow function arguments. This has been fixed to conform to the ES2015 specification and code like <code>() \\n => {}</code> will now throw a <code>SyntaxError</code> in this and later versions.

./node_modules/webpack/lib/config/defaults.js 303 						// eslint-disable-next-line no-empty

./node_modules/webpack/lib/config/defaults.js 365 				// eslint-disable-next-line node/no-extraneous-require

./node_modules/webpack/lib/config/defaults.js 566 						type: "asset/inline"

./node_modules/webpack/lib/esm/ModuleChunkFormatPlugin.js 150 											inlined: false

./node_modules/webpack/lib/logging/createConsoleLogger.js 49 				// eslint-disable-next-line no-useless-escape

./node_modules/webpack/lib/logging/createConsoleLogger.js 117 				// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 119 					// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 148 					// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 150 						// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 160 				// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 162 					// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 170 				// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 172 					// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 188 				// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 190 					// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 195 				// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 197 					// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 203 				// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/logging/createConsoleLogger.js 205 					// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/util/comparators.js 366 		// eslint-disable-next-line no-constant-condition

./node_modules/webpack/lib/util/comparators.js 440 			if (ap.line < bp.line) return -1;

./node_modules/webpack/lib/util/comparators.js 441 			if (ap.line > bp.line) return 1;

./node_modules/webpack/lib/util/binarySearchBounds.js 8 /* cspell:disable-next-line */

./node_modules/webpack/lib/util/semver.js 17 			// eslint-disable-next-line eqeqeq

./node_modules/webpack/lib/util/semver.js 163 				// eslint-disable-next-line no-sparse-arrays

./node_modules/webpack/lib/util/semver.js 168 				// eslint-disable-next-line no-sparse-arrays

./node_modules/webpack/lib/util/semver.js 173 				// eslint-disable-next-line no-sparse-arrays

./node_modules/webpack/lib/util/semver.js 190 		// eslint-disable-next-line no-sparse-arrays

./node_modules/webpack/lib/util/semver.js 204 		// eslint-disable-next-line no-sparse-arrays

./node_modules/webpack/lib/util/semver.js 236 		// eslint-disable-next-line no-redeclare

./node_modules/webpack/lib/util/semver.js 251 		// eslint-disable-next-line no-redeclare

./node_modules/webpack/lib/util/semver.js 253 			// eslint-disable-next-line no-redeclare

./node_modules/webpack/lib/util/semver.js 404 	// eslint-disable-next-line no-redeclare

./node_modules/webpack/lib/util/IterableHelpers.js 39 	// eslint-disable-next-line no-unused-vars

./node_modules/webpack/lib/util/internalSerializables.js 113 	"dependencies/ModuleHotDeclineDependency": () =>

./node_modules/webpack/lib/util/internalSerializables.js 114 		require("../dependencies/ModuleHotDeclineDependency"),

./node_modules/webpack/lib/util/internalSerializables.js 117 	"dependencies/ImportMetaHotDeclineDependency": () =>

./node_modules/webpack/lib/util/internalSerializables.js 118 		require("../dependencies/ImportMetaHotDeclineDependency"),

./node_modules/webpack/lib/util/registerExternalSerializer.js 230 			write(loc.start.line);

./node_modules/webpack/lib/util/registerExternalSerializer.js 232 			write(loc.end.line);

./node_modules/webpack/lib/util/registerExternalSerializer.js 243 					line: read(),

./node_modules/webpack/lib/util/registerExternalSerializer.js 247 					line: read(),

./node_modules/webpack/lib/util/registerExternalSerializer.js 266 			write(pos.line);

./node_modules/webpack/lib/util/registerExternalSerializer.js 276 				line: read(),

./node_modules/webpack/lib/debug/ProfilingPlugin.js 25 	// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/debug/ProfilingPlugin.js 144 		cat: ["disabled-by-default-devtools.timeline"],

./node_modules/webpack/lib/debug/ProfilingPlugin.js 163 		cat: ["disabled-by-default-devtools.timeline"],

./node_modules/webpack/lib/debug/ProfilingPlugin.js 268 						cat: ["devtools.timeline"],

./node_modules/webpack/lib/debug/ProfilingPlugin.js 274 								lineNumber: 1,

./node_modules/webpack/lib/debug/ProfilingPlugin.js 284 						cat: ["disabled-by-default-devtools.timeline"],

./node_modules/webpack/lib/hmr/HotModuleReplacement.runtime.js 10 // eslint-disable-next-line no-unused-vars

./node_modules/webpack/lib/hmr/HotModuleReplacement.runtime.js 37 	// eslint-disable-next-line no-unused-vars

./node_modules/webpack/lib/hmr/HotModuleReplacement.runtime.js 110 			_declinedDependencies: {},

./node_modules/webpack/lib/hmr/HotModuleReplacement.runtime.js 112 			_selfDeclined: false,

./node_modules/webpack/lib/hmr/HotModuleReplacement.runtime.js 137 			decline: function (dep) {

./node_modules/webpack/lib/hmr/HotModuleReplacement.runtime.js 138 				if (dep === undefined) hot._selfDeclined = true;

./node_modules/webpack/lib/hmr/HotModuleReplacement.runtime.js 141 						hot._declinedDependencies[dep[i]] = true;

./node_modules/webpack/lib/hmr/HotModuleReplacement.runtime.js 142 				else hot._declinedDependencies[dep] = true;

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 47 				if (module.hot._selfDeclined) {

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 49 						type: "self-declined",

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 65 					if (parent.hot._declinedDependencies[moduleId]) {

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 67 							type: "declined",

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 138 					case "self-declined":

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 139 						if (options.onDeclined) options.onDeclined(result);

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 140 						if (!options.ignoreDeclined)

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 142 								"Aborted because of self decline: " +

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 147 					case "declined":

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 148 						if (options.onDeclined) options.onDeclined(result);

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 149 						if (!options.ignoreDeclined)

./node_modules/webpack/lib/hmr/JavascriptHotModuleReplacement.runtime.js 151 								"Aborted because of declined dependency: " +

./node_modules/webpack/lib/hmr/LazyCompilationPlugin.js 37 	"import.meta.webpackHot.decline",

./node_modules/webpack/lib/hmr/LazyCompilationPlugin.js 39 	"module.hot.decline"

./node_modules/webpack/lib/serialization/FileMiddleware.js 8 const { pipeline } = require("stream");

./node_modules/webpack/lib/serialization/FileMiddleware.js 452 							pipeline(compression, stream, reject);

./node_modules/webpack/lib/node/nodeConsole.js 107 		// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/node/nodeConsole.js 109 		// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/node/nodeConsole.js 113 			// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/node/nodeConsole.js 117 				// eslint-disable-next-line node/no-unsupported-features/node-builtins

./node_modules/webpack/lib/node/NodeTargetPlugin.js 41 	"readline",

./node_modules/webpack/hot/lazy-compilation-web.js 31 							event.lineno +

./node_modules/webpack/hot/only-dev-server.js 28 						ignoreDeclined: true,

./node_modules/webpack/hot/only-dev-server.js 37 						onDeclined: function (data) {

./node_modules/webpack/hot/only-dev-server.js 40 								"Ignored an update to declined module " +

./node_modules/regenerate-unicode-properties/index.js 49 		'Balinese',

./node_modules/regenerate-unicode-properties/index.js 212 		'Balinese',

./node_modules/babel-plugin-polyfill-corejs3/esm/index.mjs 246   anchor: define(null, ["es.string.anchor"]),

./node_modules/babel-plugin-polyfill-corejs3/lib/built-in-definitions.js 252   anchor: define(null, ["es.string.anchor"]),

./node_modules/colorette/index.js 56   underline: init(4, 24),

./node_modules/colorette/index.js 110   underline,

./node_modules/colorette/index.cjs 80   underline: init(4, 24),

./node_modules/colorette/index.cjs 134   underline,

./node_modules/colorette/index.cjs 211 exports.underline = underline;

./node_modules/supports-color/package.json 41 		"command-line",

./node_modules/p-retry/index.js 7 	'The Internet connection appears to be offline.', // Safari

./node_modules/es-module-lexer/lexer.js 80           lineComment();

./node_modules/es-module-lexer/lexer.js 163           lineComment();

./node_modules/es-module-lexer/lexer.js 498         // Unicode new line characters after \ get removed from output in both

./node_modules/es-module-lexer/lexer.js 647         lineComment();

./node_modules/es-module-lexer/lexer.js 690 function lineComment () {

./node_modules/help-me/help-me.js 4 const { PassThrough, pipeline } = require('readable-stream')

./node_modules/help-me/help-me.js 77       pipeline(fs.createReadStream(files[0].path), out, () => {})

./node_modules/@babel/code-frame/lib/index.js 26     line: -1

./node_modules/@babel/code-frame/lib/index.js 30     linesAbove = 2,

./node_modules/@babel/code-frame/lib/index.js 31     linesBelow = 3

./node_modules/@babel/code-frame/lib/index.js 33   const startLine = startLoc.line;

./node_modules/@babel/code-frame/lib/index.js 35   const endLine = endLoc.line;

./node_modules/@babel/code-frame/lib/index.js 37   let start = Math.max(startLine - (linesAbove + 1), 0);

./node_modules/@babel/code-frame/lib/index.js 38   let end = Math.min(source.length, endLine + linesBelow);

./node_modules/@babel/code-frame/lib/index.js 48   const lineDiff = endLine - startLine;

./node_modules/@babel/code-frame/lib/index.js 51   if (lineDiff) {

./node_modules/@babel/code-frame/lib/index.js 52     for (let i = 0; i <= lineDiff; i++) {

./node_modules/@babel/code-frame/lib/index.js 53       const lineNumber = i + startLine;

./node_modules/@babel/code-frame/lib/index.js 56         markerLines[lineNumber] = true;

./node_modules/@babel/code-frame/lib/index.js 58         const sourceLength = source[lineNumber - 1].length;

./node_modules/@babel/code-frame/lib/index.js 59         markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];

./node_modules/@babel/code-frame/lib/index.js 60       } else if (i === lineDiff) {

./node_modules/@babel/code-frame/lib/index.js 61         markerLines[lineNumber] = [0, endColumn];

./node_modules/@babel/code-frame/lib/index.js 63         const sourceLength = source[lineNumber - i].length;

./node_modules/@babel/code-frame/lib/index.js 64         markerLines[lineNumber] = [0, sourceLength];

./node_modules/@babel/code-frame/lib/index.js 95   const lines = rawLines.split(NEWLINE);

./node_modules/@babel/code-frame/lib/index.js 100   } = getMarkerLines(loc, lines, opts);

./node_modules/@babel/code-frame/lib/index.js 104   let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {

./node_modules/@babel/code-frame/lib/index.js 115         const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");

./node_modules/@babel/code-frame/lib/index.js 124       return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : "", markerLine].join("");

./node_modules/@babel/code-frame/lib/index.js 126       return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : ""}`;

./node_modules/@babel/code-frame/lib/index.js 141 function _default(rawLines, lineNumber, colNumber, opts = {}) {

./node_modules/@babel/code-frame/lib/index.js 144     const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";

./node_modules/@babel/code-frame/lib/index.js 159       line: lineNumber

./node_modules/@babel/helpers/scripts/generate-helpers.js 40       // Remove multiple newlines

./node_modules/@babel/helpers/lib/helpers.js 1536           // (inlined) RemoveElementPlacement

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 121 	          line: mapping.generatedLine,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 133 	          line: mapping.originalLine,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 154 	 * Add a single mapping from original source line and column to the generated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 155 	 * source's line and column for this source map being created. The mapping

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 158 	 *   - generated: An object with the generated line and column positions.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 159 	 *   - original: An object with the original line and column positions.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 189 	      generatedLine: generated.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 191 	      originalLine: original != null && original.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 269 	          line: mapping.originalLine,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 281 	          mapping.originalLine = original.line;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 332 	    // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 336 	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 338 	            'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 344 	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 345 	        && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 350 	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 351 	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 352 	             && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 353 	             && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 416 	        // lines are stored 0-based in SourceMap spec version 3

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1011 	 * mappings with the same original source/line/column, but different generated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1012 	 * line and column the same. Useful when searching for a mapping with a

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1050 	 * mappings with the same generated line and column, but different

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1051 	 * source/name/original line and column the same. Useful when searching for a

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1277 	  var lineA = mappingA.generatedLine;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1278 	  var lineB = mappingB.generatedLine;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1281 	  return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1391 	//       generatedLine: The line number in the generated code,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1395 	//       originalLine: The line number in the original source that

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1455 	 * Iterate over each mapping between an original source/line/column and a

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1456 	 * generated line/column in this source map.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1466 	 *        iterate over the mappings sorted by the generated file's line/column

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1467 	 *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1505 	 * Returns all generated line and column information for the original source,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1506 	 * line, and column provided. If no column is provided, returns all mappings

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1507 	 * corresponding to a either the line we are searching for or the next

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1508 	 * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1509 	 * corresponding to the given line and either the column we are searching for

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1515 	 *   - line: The line number in the original source.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1520 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1525 	    var line = util.getArg(aArgs, 'line');

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1530 	    // the given line, provided such a mapping exists.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1533 	      originalLine: line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1560 	        // a mapping for a different line than the one we found. Since

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1562 	        // the line we found.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1565 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1576 	        // a mapping for a different line than the one we were searching for.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1578 	        // the line we are searching for.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1580 	               mapping.originalLine === line &&

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1583 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1822 	            throw new Error('Found a source, but no line and column');

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1826 	            throw new Error('Found a source and line, but no column');

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1841 	          // Original line.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1918 	      // The last mapping for each line spans the entire line.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1924 	 * Returns the original source, line, and column information for the generated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1925 	 * source's line and column positions provided. The only argument is an object

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1928 	 *   - line: The line number in the generated source.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1939 	 *   - line: The line number in the original source, or null.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1946 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1976 	          line: util.getArg(mapping, 'originalLine', null),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 1985 	      line: null,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2055 	 * Returns the generated line and column information for the original source,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2056 	 * line, and column positions provided. The only argument is an object with

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2060 	 *   - line: The line number in the original source.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2070 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2081 	        line: null,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2090 	      originalLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2108 	          line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2116 	      line: null,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2140 	 *       begins to apply, defined as an object with a "line" and "column"

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2156 	 *      offset: {line:100, column:10},

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2186 	    line: -1,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2196 	    var offsetLine = util.getArg(offset, 'line');

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2199 	    if (offsetLine < lastOffset.line ||

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2200 	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2241 	 * Returns the original source, line, and column information for the generated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2242 	 * source's line and column positions provided. The only argument is an object

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2245 	 *   - line: The line number in the generated source.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2251 	 *   - line: The line number in the original source, or null.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2258 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2279 	        line: null,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2286 	      line: needle.generatedLine -

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2331 	 * Returns the generated line and column information for the original source,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2332 	 * line, and column positions provided. The only argument is an object with

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2336 	 *   - line: The line number in the original source.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2341 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2357 	          line: generatedPosition.line +

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2360 	            (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2369 	      line: null,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2508 	 * mappings between original and generated line/col pairs are single points,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2682 	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2686 	// Newline character code for charCodeAt() comparisons

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2696 	 * snippets of generated JavaScript source code while maintaining the line and

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2699 	 * @param aLine The original line number.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2709 	  this.line = aLine == null ? null : aLine;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2731 	    // All even indices of this array are one line of the generated code,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2732 	    // while all odd indices are the newlines between two adjacent lines

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2738 	      var lineContents = getNextLine();

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2739 	      // The last line of a file might not have a newline.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2741 	      return lineContents + newLine;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2760 	        // First check if there is a new line in between.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2762 	          // Associate first line with "lastMapping"

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2768 	          // There is no new line in between.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2785 	      // Each line is added as separate string.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2801 	        // Associate the remaining code in the current line with "lastMapping"

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2804 	      // and add the remaining lines without any mapping

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2888 	 * snippet and the its original associated source's line/column location.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 2902 	                     line: this.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 3004 	    line: 1,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 3016 	        && original.line !== null

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 3019 	         || lastOriginalLine !== original.line

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 3025 	            line: original.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 3029 	            line: generated.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 3036 	      lastOriginalLine = original.line;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 3043 	          line: generated.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 3052 	        generated.line++;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 3062 	              line: original.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.js 3066 	              line: generated.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 121 	          line: mapping.generatedLine,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 133 	          line: mapping.originalLine,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 154 	 * Add a single mapping from original source line and column to the generated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 155 	 * source's line and column for this source map being created. The mapping

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 158 	 *   - generated: An object with the generated line and column positions.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 159 	 *   - original: An object with the original line and column positions.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 189 	      generatedLine: generated.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 191 	      originalLine: original != null && original.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 269 	          line: mapping.originalLine,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 281 	          mapping.originalLine = original.line;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 332 	    // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 336 	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 338 	            'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 344 	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 345 	        && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 350 	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 351 	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 352 	             && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 353 	             && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 416 	        // lines are stored 0-based in SourceMap spec version 3

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1011 	 * mappings with the same original source/line/column, but different generated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1012 	 * line and column the same. Useful when searching for a mapping with a

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1050 	 * mappings with the same generated line and column, but different

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1051 	 * source/name/original line and column the same. Useful when searching for a

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1277 	  var lineA = mappingA.generatedLine;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1278 	  var lineB = mappingB.generatedLine;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1281 	  return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1391 	//       generatedLine: The line number in the generated code,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1395 	//       originalLine: The line number in the original source that

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1455 	 * Iterate over each mapping between an original source/line/column and a

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1456 	 * generated line/column in this source map.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1466 	 *        iterate over the mappings sorted by the generated file's line/column

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1467 	 *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1505 	 * Returns all generated line and column information for the original source,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1506 	 * line, and column provided. If no column is provided, returns all mappings

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1507 	 * corresponding to a either the line we are searching for or the next

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1508 	 * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1509 	 * corresponding to the given line and either the column we are searching for

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1515 	 *   - line: The line number in the original source.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1520 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1525 	    var line = util.getArg(aArgs, 'line');

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1530 	    // the given line, provided such a mapping exists.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1533 	      originalLine: line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1560 	        // a mapping for a different line than the one we found. Since

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1562 	        // the line we found.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1565 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1576 	        // a mapping for a different line than the one we were searching for.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1578 	        // the line we are searching for.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1580 	               mapping.originalLine === line &&

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1583 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1822 	            throw new Error('Found a source, but no line and column');

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1826 	            throw new Error('Found a source and line, but no column');

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1841 	          // Original line.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1918 	      // The last mapping for each line spans the entire line.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1924 	 * Returns the original source, line, and column information for the generated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1925 	 * source's line and column positions provided. The only argument is an object

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1928 	 *   - line: The line number in the generated source.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1939 	 *   - line: The line number in the original source, or null.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1946 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1976 	          line: util.getArg(mapping, 'originalLine', null),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 1985 	      line: null,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2055 	 * Returns the generated line and column information for the original source,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2056 	 * line, and column positions provided. The only argument is an object with

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2060 	 *   - line: The line number in the original source.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2070 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2081 	        line: null,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2090 	      originalLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2108 	          line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2116 	      line: null,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2140 	 *       begins to apply, defined as an object with a "line" and "column"

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2156 	 *      offset: {line:100, column:10},

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2186 	    line: -1,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2196 	    var offsetLine = util.getArg(offset, 'line');

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2199 	    if (offsetLine < lastOffset.line ||

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2200 	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2241 	 * Returns the original source, line, and column information for the generated

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2242 	 * source's line and column positions provided. The only argument is an object

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2245 	 *   - line: The line number in the generated source.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2251 	 *   - line: The line number in the original source, or null.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2258 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2279 	        line: null,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2286 	      line: needle.generatedLine -

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2331 	 * Returns the generated line and column information for the original source,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2332 	 * line, and column positions provided. The only argument is an object with

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2336 	 *   - line: The line number in the original source.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2341 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2357 	          line: generatedPosition.line +

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2360 	            (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2369 	      line: null,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2508 	 * mappings between original and generated line/col pairs are single points,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2682 	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2686 	// Newline character code for charCodeAt() comparisons

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2696 	 * snippets of generated JavaScript source code while maintaining the line and

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2699 	 * @param aLine The original line number.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2709 	  this.line = aLine == null ? null : aLine;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2731 	    // All even indices of this array are one line of the generated code,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2732 	    // while all odd indices are the newlines between two adjacent lines

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2738 	      var lineContents = getNextLine();

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2739 	      // The last line of a file might not have a newline.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2741 	      return lineContents + newLine;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2760 	        // First check if there is a new line in between.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2762 	          // Associate first line with "lastMapping"

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2768 	          // There is no new line in between.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2785 	      // Each line is added as separate string.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2801 	        // Associate the remaining code in the current line with "lastMapping"

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2804 	      // and add the remaining lines without any mapping

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2888 	 * snippet and the its original associated source's line/column location.

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 2902 	                     line: this.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 3004 	    line: 1,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 3016 	        && original.line !== null

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 3019 	         || lastOriginalLine !== original.line

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 3025 	            line: original.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 3029 	            line: generated.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 3036 	      lastOriginalLine = original.line;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 3043 	          line: generated.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 3052 	        generated.line++;

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 3062 	              line: original.line,

./node_modules/@babel/generator/node_modules/source-map/dist/source-map.debug.js 3066 	              line: generated.line,

./node_modules/@babel/generator/node_modules/source-map/lib/mapping-list.js 16   var lineA = mappingA.generatedLine;

./node_modules/@babel/generator/node_modules/source-map/lib/mapping-list.js 17   var lineB = mappingB.generatedLine;

./node_modules/@babel/generator/node_modules/source-map/lib/mapping-list.js 20   return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 45 //       generatedLine: The line number in the generated code,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 49 //       originalLine: The line number in the original source that

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 109  * Iterate over each mapping between an original source/line/column and a

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 110  * generated line/column in this source map.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 120  *        iterate over the mappings sorted by the generated file's line/column

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 121  *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 159  * Returns all generated line and column information for the original source,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 160  * line, and column provided. If no column is provided, returns all mappings

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 161  * corresponding to a either the line we are searching for or the next

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 162  * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 163  * corresponding to the given line and either the column we are searching for

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 169  *   - line: The line number in the original source.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 174  *   - line: The line number in the generated source, or null.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 179     var line = util.getArg(aArgs, 'line');

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 184     // the given line, provided such a mapping exists.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 187       originalLine: line,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 214         // a mapping for a different line than the one we found. Since

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 216         // the line we found.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 219             line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 230         // a mapping for a different line than the one we were searching for.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 232         // the line we are searching for.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 234                mapping.originalLine === line &&

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 237             line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 476             throw new Error('Found a source, but no line and column');

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 480             throw new Error('Found a source and line, but no column');

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 495           // Original line.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 572       // The last mapping for each line spans the entire line.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 578  * Returns the original source, line, and column information for the generated

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 579  * source's line and column positions provided. The only argument is an object

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 582  *   - line: The line number in the generated source.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 593  *   - line: The line number in the original source, or null.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 600       generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 630           line: util.getArg(mapping, 'originalLine', null),

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 639       line: null,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 709  * Returns the generated line and column information for the original source,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 710  * line, and column positions provided. The only argument is an object with

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 714  *   - line: The line number in the original source.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 724  *   - line: The line number in the generated source, or null.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 735         line: null,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 744       originalLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 762           line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 770       line: null,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 794  *       begins to apply, defined as an object with a "line" and "column"

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 810  *      offset: {line:100, column:10},

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 840     line: -1,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 850     var offsetLine = util.getArg(offset, 'line');

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 853     if (offsetLine < lastOffset.line ||

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 854         (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 895  * Returns the original source, line, and column information for the generated

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 896  * source's line and column positions provided. The only argument is an object

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 899  *   - line: The line number in the generated source.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 905  *   - line: The line number in the original source, or null.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 912       generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 933         line: null,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 940       line: needle.generatedLine -

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 985  * Returns the generated line and column information for the original source,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 986  * line, and column positions provided. The only argument is an object with

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 990  *   - line: The line number in the original source.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 995  *   - line: The line number in the generated source, or null.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 1011           line: generatedPosition.line +

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 1014             (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-consumer.js 1023       line: null,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 51           line: mapping.generatedLine,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 63           line: mapping.originalLine,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 84  * Add a single mapping from original source line and column to the generated

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 85  * source's line and column for this source map being created. The mapping

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 88  *   - generated: An object with the generated line and column positions.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 89  *   - original: An object with the original line and column positions.

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 119       generatedLine: generated.line,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 121       originalLine: original != null && original.line,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 199           line: mapping.originalLine,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 211           mapping.originalLine = original.line;

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 262     // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 266     if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 268             'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 274     if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 275         && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 280     else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 281              && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 282              && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 283              && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/@babel/generator/node_modules/source-map/lib/source-map-generator.js 346         // lines are stored 0-based in SourceMap spec version 3

./node_modules/@babel/generator/node_modules/source-map/lib/binary-search.js 74  * mappings between original and generated line/col pairs are single points,

./node_modules/@babel/generator/node_modules/source-map/lib/util.js 300  * mappings with the same original source/line/column, but different generated

./node_modules/@babel/generator/node_modules/source-map/lib/util.js 301  * line and column the same. Useful when searching for a mapping with a

./node_modules/@babel/generator/node_modules/source-map/lib/util.js 339  * mappings with the same generated line and column, but different

./node_modules/@babel/generator/node_modules/source-map/lib/util.js 340  * source/name/original line and column the same. Useful when searching for a

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 11 // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 15 // Newline character code for charCodeAt() comparisons

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 25  * snippets of generated JavaScript source code while maintaining the line and

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 28  * @param aLine The original line number.

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 38   this.line = aLine == null ? null : aLine;

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 60     // All even indices of this array are one line of the generated code,

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 61     // while all odd indices are the newlines between two adjacent lines

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 67       var lineContents = getNextLine();

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 68       // The last line of a file might not have a newline.

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 70       return lineContents + newLine;

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 89         // First check if there is a new line in between.

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 91           // Associate first line with "lastMapping"

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 97           // There is no new line in between.

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 114       // Each line is added as separate string.

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 130         // Associate the remaining code in the current line with "lastMapping"

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 133       // and add the remaining lines without any mapping

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 217  * snippet and the its original associated source's line/column location.

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 231                      line: this.line,

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 333     line: 1,

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 345         && original.line !== null

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 348          || lastOriginalLine !== original.line

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 354             line: original.line,

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 358             line: generated.line,

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 365       lastOriginalLine = original.line;

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 372           line: generated.line,

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 381         generated.line++;

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 391               line: original.line,

./node_modules/@babel/generator/node_modules/source-map/lib/source-node.js 395               line: generated.line,

./node_modules/@babel/generator/lib/index.js 40       adjustMultilineComment: true,

./node_modules/@babel/generator/lib/index.js 74     format.indent.adjustMultilineComment = false;

./node_modules/@babel/generator/lib/buffer.js 16       line: 1,

./node_modules/@babel/generator/lib/buffer.js 21       line: null,

./node_modules/@babel/generator/lib/buffer.js 65       line,

./node_modules/@babel/generator/lib/buffer.js 72     this._append(str, line, column, identifierName, filename, force);

./node_modules/@babel/generator/lib/buffer.js 83       line,

./node_modules/@babel/generator/lib/buffer.js 90     this._queue.unshift([str, line, column, identifierName, filename, force]);

./node_modules/@babel/generator/lib/buffer.js 101   _append(str, line, column, identifierName, filename, force) {

./node_modules/@babel/generator/lib/buffer.js 108       this._mark(line, column, identifierName, filename, force);

./node_modules/@babel/generator/lib/buffer.js 112       this._position.line++;

./node_modules/@babel/generator/lib/buffer.js 117         this._mark(++line, 0, identifierName, filename, force);

./node_modules/@babel/generator/lib/buffer.js 126   _mark(line, column, identifierName, filename, force) {

./node_modules/@babel/generator/lib/buffer.js 129     (_this$_map = this._map) == null ? void 0 : _this$_map.mark(this._position.line, this._position.column, line, column, identifierName, filename, force);

./node_modules/@babel/generator/lib/buffer.js 132   removeTrailingNewline() {

./node_modules/@babel/generator/lib/buffer.js 157   endsWithCharAndNewline() {

./node_modules/@babel/generator/lib/buffer.js 194     const originalLine = this._sourcePosition.line;

./node_modules/@babel/generator/lib/buffer.js 201     if ((!this._sourcePosition.force || this._sourcePosition.line !== originalLine || this._sourcePosition.column !== originalColumn || this._sourcePosition.filename !== originalFilename) && (!this._disallowedPop || this._disallowedPop.line !== originalLine || this._disallowedPop.column !== originalColumn || this._disallowedPop.filename !== originalFilename)) {

./node_modules/@babel/generator/lib/buffer.js 202       this._sourcePosition.line = originalLine;

./node_modules/@babel/generator/lib/buffer.js 222         line: null,

./node_modules/@babel/generator/lib/buffer.js 229     const origLine = targetObj.line;

./node_modules/@babel/generator/lib/buffer.js 233     targetObj.line = pos == null ? void 0 : pos.line;

./node_modules/@babel/generator/lib/buffer.js 237     if (force || targetObj.line !== origLine || targetObj.column !== origColumn || targetObj.filename !== origFilename) {

./node_modules/@babel/generator/lib/buffer.js 260     return this._position.line + count;

./node_modules/@babel/generator/lib/printer.js 37     this._parenPushNewlineState = null;

./node_modules/@babel/generator/lib/printer.js 123   newline(i = 1) {

./node_modules/@babel/generator/lib/printer.js 131     const charBeforeNewline = this.endsWithCharAndNewline();

./node_modules/@babel/generator/lib/printer.js 132     if (charBeforeNewline === 10) return;

./node_modules/@babel/generator/lib/printer.js 134     if (charBeforeNewline === 123 || charBeforeNewline === 58) {

./node_modules/@babel/generator/lib/printer.js 141       this._newline();

./node_modules/@babel/generator/lib/printer.js 153   endsWithCharAndNewline() {

./node_modules/@babel/generator/lib/printer.js 154     return this._buf.endsWithCharAndNewline();

./node_modules/@babel/generator/lib/printer.js 157   removeTrailingNewline() {

./node_modules/@babel/generator/lib/printer.js 158     this._buf.removeTrailingNewline();

./node_modules/@babel/generator/lib/printer.js 183   _newline() {

./node_modules/@babel/generator/lib/printer.js 204     const parenPushNewlineState = this._parenPushNewlineState;

./node_modules/@babel/generator/lib/printer.js 205     if (!parenPushNewlineState) return;

./node_modules/@babel/generator/lib/printer.js 218         this._parenPushNewlineState = null;

./node_modules/@babel/generator/lib/printer.js 229         this._parenPushNewlineState = null;

./node_modules/@babel/generator/lib/printer.js 236     parenPushNewlineState.printed = true;

./node_modules/@babel/generator/lib/printer.js 243     if ((pos == null ? void 0 : pos.line) != null) {

./node_modules/@babel/generator/lib/printer.js 244       const count = pos.line - this._buf.getCurrentLine();

./node_modules/@babel/generator/lib/printer.js 247         this._newline();

./node_modules/@babel/generator/lib/printer.js 261       return this._parenPushNewlineState = {

./node_modules/@babel/generator/lib/printer.js 272       this.newline();

./node_modules/@babel/generator/lib/printer.js 365     const newlineOpts = {

./node_modules/@babel/generator/lib/printer.js 366       addNewlines: opts.addNewlines

./node_modules/@babel/generator/lib/printer.js 372       if (opts.statement) this._printNewline(true, node, parent, newlineOpts);

./node_modules/@babel/generator/lib/printer.js 383       if (opts.statement) this._printNewline(false, node, parent, newlineOpts);

./node_modules/@babel/generator/lib/printer.js 438   _printNewline(leading, node, parent, opts) {

./node_modules/@babel/generator/lib/printer.js 446     let lines = 0;

./node_modules/@babel/generator/lib/printer.js 449       if (!leading) lines++;

./node_modules/@babel/generator/lib/printer.js 450       if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;

./node_modules/@babel/generator/lib/printer.js 452       if (needs(node, parent)) lines++;

./node_modules/@babel/generator/lib/printer.js 455     this.newline(Math.min(2, lines));

./node_modules/@babel/generator/lib/printer.js 471     if (printNewLines && this._buf.hasContent()) this.newline(1);

./node_modules/@babel/generator/lib/printer.js 480     if (isBlockComment && this.format.indent.adjustMultilineComment) {

./node_modules/@babel/generator/lib/printer.js 486         const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");

./node_modules/@babel/generator/lib/printer.js 487         val = val.replace(newlineRegex, "\n");

./node_modules/@babel/generator/lib/printer.js 498     if (printNewLines) this.newline(1);

./node_modules/@babel/generator/lib/printer.js 501   _printComments(comments, inlinePureAnnotation) {

./node_modules/@babel/generator/lib/printer.js 504     if (inlinePureAnnotation && comments.length === 1 && PURE_ANNOTATION_RE.test(comments[0].value)) {

./node_modules/@babel/generator/lib/source-map.js 50   mark(generatedLine, generatedColumn, line, column, identifierName, filename, force) {

./node_modules/@babel/generator/lib/source-map.js 51     if (this._lastGenLine !== generatedLine && line === null) return;

./node_modules/@babel/generator/lib/source-map.js 53     if (!force && this._lastGenLine === generatedLine && this._lastSourceLine === line && this._lastSourceColumn === column) {

./node_modules/@babel/generator/lib/source-map.js 59     this._lastSourceLine = line;

./node_modules/@babel/generator/lib/source-map.js 65         line: generatedLine,

./node_modules/@babel/generator/lib/source-map.js 68       source: line == null ? undefined : (filename || this._opts.sourceFileName).replace(/\\/g, "/"),

./node_modules/@babel/generator/lib/source-map.js 69       original: line == null ? undefined : {

./node_modules/@babel/generator/lib/source-map.js 70         line: line,

./node_modules/@babel/generator/lib/generators/flow.js 260   context.newline();

./node_modules/@babel/generator/lib/generators/flow.js 264     context.newline();

./node_modules/@babel/generator/lib/generators/flow.js 269     context.newline();

./node_modules/@babel/generator/lib/generators/flow.js 616       addNewlines(leading) {

./node_modules/@babel/generator/lib/generators/flow.js 637       this.newline();

./node_modules/@babel/generator/lib/generators/classes.js 73     this.newline();

./node_modules/@babel/generator/lib/generators/classes.js 77     if (!this.endsWith(10)) this.newline();

./node_modules/@babel/generator/lib/generators/classes.js 168     this.newline();

./node_modules/@babel/generator/lib/generators/types.js 23 exports.PipelineTopicExpression = PipelineTopicExpression;

./node_modules/@babel/generator/lib/generators/types.js 24 exports.PipelineBareFunction = PipelineBareFunction;

./node_modules/@babel/generator/lib/generators/types.js 25 exports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;

./node_modules/@babel/generator/lib/generators/types.js 269 function PipelineTopicExpression(node) {

./node_modules/@babel/generator/lib/generators/types.js 273 function PipelineBareFunction(node) {

./node_modules/@babel/generator/lib/generators/types.js 277 function PipelinePrimaryTopicReference() {

./node_modules/@babel/generator/lib/generators/typescript.js 364     this.newline();

./node_modules/@babel/generator/lib/generators/typescript.js 368       this.newline();

./node_modules/@babel/generator/lib/generators/expressions.js 133   this.newline();

./node_modules/@babel/generator/lib/generators/expressions.js 311     this.newline();

./node_modules/@babel/generator/lib/generators/base.js 25   if (node.directives && node.directives.length) this.newline();

./node_modules/@babel/generator/lib/generators/base.js 37     this.newline();

./node_modules/@babel/generator/lib/generators/base.js 41     if (hasDirectives) this.newline();

./node_modules/@babel/generator/lib/generators/base.js 45     this.removeTrailingNewline();

./node_modules/@babel/generator/lib/generators/base.js 47     if (!this.endsWith(10)) this.newline();

./node_modules/@babel/generator/lib/generators/statements.js 50     this.newline();

./node_modules/@babel/generator/lib/generators/statements.js 58     this.newline();

./node_modules/@babel/generator/lib/generators/statements.js 227     addNewlines(leading, cas) {

./node_modules/@babel/generator/lib/generators/statements.js 247     this.newline();

./node_modules/@babel/generator/lib/generators/statements.js 261   this.newline();

./node_modules/@babel/generator/lib/generators/statements.js 270   this.newline();

./node_modules/@babel/generator/lib/node/index.js 75   let linesInfo = find(expandedWhitespaceNodes, node, parent);

./node_modules/@babel/generator/lib/node/index.js 77   if (!linesInfo) {

./node_modules/@babel/generator/lib/node/index.js 82         linesInfo = needsWhitespace(items[i], node, type);

./node_modules/@babel/generator/lib/node/index.js 83         if (linesInfo) break;

./node_modules/@babel/generator/lib/node/index.js 88   if (typeof linesInfo === "object" && linesInfo !== null) {

./node_modules/@babel/generator/lib/node/index.js 89     return linesInfo[type] || 0;

./node_modules/@babel/parser/lib/index.js 5 const lineBreak = /\r\n?|[\n\u2028\u2029]/;

./node_modules/@babel/parser/lib/index.js 6 const lineBreakG = new RegExp(lineBreak.source, "g");

./node_modules/@babel/parser/lib/index.js 53   constructor(line, col) {

./node_modules/@babel/parser/lib/index.js 54     this.line = void 0;

./node_modules/@babel/parser/lib/index.js 56     this.line = line;

./node_modules/@babel/parser/lib/index.js 73   let line = 1;

./node_modules/@babel/parser/lib/index.js 74   let lineStart = 0;

./node_modules/@babel/parser/lib/index.js 76   lineBreakG.lastIndex = 0;

./node_modules/@babel/parser/lib/index.js 78   while ((match = lineBreakG.exec(input)) && match.index < offset) {

./node_modules/@babel/parser/lib/index.js 79     line++;

./node_modules/@babel/parser/lib/index.js 80     lineStart = lineBreakG.lastIndex;

./node_modules/@babel/parser/lib/index.js 83   return new Position(line, offset - lineStart);

./node_modules/@babel/parser/lib/index.js 369   LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",

./node_modules/@babel/parser/lib/index.js 382   NewlineAfterThrow: "Illegal newline after throw.",

./node_modules/@babel/parser/lib/index.js 393   PipeBodyIsTighter: "Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",

./node_modules/@babel/parser/lib/index.js 394   PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',

./node_modules/@babel/parser/lib/index.js 396   PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "%0" }.',

./node_modules/@babel/parser/lib/index.js 399   PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',

./node_modules/@babel/parser/lib/index.js 400   PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",

./node_modules/@babel/parser/lib/index.js 401   PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",

./node_modules/@babel/parser/lib/index.js 402   PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",

./node_modules/@babel/parser/lib/index.js 404   PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',

./node_modules/@babel/parser/lib/index.js 428   UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',

./node_modules/@babel/parser/lib/index.js 506     const message = template.replace(/%(\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;

./node_modules/@babel/parser/lib/index.js 533     const message = errorTemplate.replace(/%(\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;

./node_modules/@babel/parser/lib/index.js 1104   pipeline: createBinop("|>", 0),

./node_modules/@babel/parser/lib/index.js 1808     this.inFSharpPipelineDirectBody = false;

./node_modules/@babel/parser/lib/index.js 1814     this.lineStart = 0;

./node_modules/@babel/parser/lib/index.js 1837     return new Position(this.curLine, this.pos - this.lineStart);

./node_modules/@babel/parser/lib/index.js 2017     lineBreakG.lastIndex = start + 2;

./node_modules/@babel/parser/lib/index.js 2019     while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {

./node_modules/@babel/parser/lib/index.js 2021       this.state.lineStart = lineBreakG.lastIndex;

./node_modules/@babel/parser/lib/index.js 2086           this.state.lineStart = this.state.pos;

./node_modules/@babel/parser/lib/index.js 2127             if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {

./node_modules/@babel/parser/lib/index.js 2895         this.state.lineStart = this.state.pos;

./node_modules/@babel/parser/lib/index.js 2968         this.state.lineStart = this.state.pos;

./node_modules/@babel/parser/lib/index.js 3026         this.state.lineStart = this.state.pos;

./node_modules/@babel/parser/lib/index.js 3503     return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));

./node_modules/@babel/parser/lib/index.js 6964   oline: "\u203E",

./node_modules/@babel/parser/lib/index.js 7131     this.state.lineStart = this.state.pos;

./node_modules/@babel/parser/lib/index.js 10506   if (hasPlugin(plugins, "pipelineOperator")) {

./node_modules/@babel/parser/lib/index.js 10507     const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");

./node_modules/@babel/parser/lib/index.js 10511       throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);

./node_modules/@babel/parser/lib/index.js 10525       const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");

./node_modules/@babel/parser/lib/index.js 10529         throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);

./node_modules/@babel/parser/lib/index.js 10533         throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');

./node_modules/@babel/parser/lib/index.js 10536       throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');

./node_modules/@babel/parser/lib/index.js 11217           this.expectPlugin("pipelineOperator");

./node_modules/@babel/parser/lib/index.js 11219           if (this.state.inFSharpPipelineDirectBody) {

./node_modules/@babel/parser/lib/index.js 11223           this.checkPipelineAtInfixOperator(left, leftStartPos);

./node_modules/@babel/parser/lib/index.js 11238         if (op === 34 && this.getPluginOption("pipelineOperator", "proposal") === "minimal") {

./node_modules/@babel/parser/lib/index.js 11240             throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);

./node_modules/@babel/parser/lib/index.js 11265         switch (this.getPluginOption("pipelineOperator", "proposal")) {

./node_modules/@babel/parser/lib/index.js 11277               return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);

./node_modules/@babel/parser/lib/index.js 11282               return this.parseFSharpPipelineBody(prec);

./node_modules/@babel/parser/lib/index.js 11595     const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;

./node_modules/@babel/parser/lib/index.js 11596     this.state.inFSharpPipelineDirectBody = false;

./node_modules/@babel/parser/lib/index.js 11621     this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;

./node_modules/@babel/parser/lib/index.js 11781         if (this.getPluginOption("pipelineOperator", "proposal") === "hack" && this.getPluginOption("pipelineOperator", "topicToken") === "%") {

./node_modules/@babel/parser/lib/index.js 11794           const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");

./node_modules/@babel/parser/lib/index.js 11865         nodeType = "PipelinePrimaryTopicReference";

./node_modules/@babel/parser/lib/index.js 11889           const pluginTopicToken = this.getPluginOption("pipelineOperator", "topicToken");

./node_modules/@babel/parser/lib/index.js 11972     const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));

./node_modules/@babel/parser/lib/index.js 12082     const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;

./node_modules/@babel/parser/lib/index.js 12084     this.state.inFSharpPipelineDirectBody = false;

./node_modules/@babel/parser/lib/index.js 12121     this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;

./node_modules/@babel/parser/lib/index.js 12267     const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;

./node_modules/@babel/parser/lib/index.js 12268     this.state.inFSharpPipelineDirectBody = false;

./node_modules/@babel/parser/lib/index.js 12305     this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;

./node_modules/@babel/parser/lib/index.js 12524     const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;

./node_modules/@babel/parser/lib/index.js 12525     this.state.inFSharpPipelineDirectBody = false;

./node_modules/@babel/parser/lib/index.js 12529     this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;

./node_modules/@babel/parser/lib/index.js 12818   checkPipelineAtInfixOperator(left, leftStartPos) {

./node_modules/@babel/parser/lib/index.js 12819     if (this.getPluginOption("pipelineOperator", "proposal") === "smart") {

./node_modules/@babel/parser/lib/index.js 12821         this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);

./node_modules/@babel/parser/lib/index.js 12832   parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {

./node_modules/@babel/parser/lib/index.js 12837       return this.finishNode(bodyNode, "PipelineBareFunction");

./node_modules/@babel/parser/lib/index.js 12841       return this.finishNode(bodyNode, "PipelineTopicExpression");

./node_modules/@babel/parser/lib/index.js 12860       throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);

./node_modules/@babel/parser/lib/index.js 12862       this.raise(startPos, ErrorMessages.PipelineTopicUnused);

./node_modules/@babel/parser/lib/index.js 12881     const proposal = this.getPluginOption("pipelineOperator", "proposal");

./node_modules/@babel/parser/lib/index.js 12957   parseFSharpPipelineBody(prec) {

./node_modules/@babel/parser/lib/index.js 12961     const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;

./node_modules/@babel/parser/lib/index.js 12962     this.state.inFSharpPipelineDirectBody = true;

./node_modules/@babel/parser/lib/index.js 12964     this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;

./node_modules/@babel/parser/lib/index.js 13018         const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);

./node_modules/@babel/parser/lib/index.js 13570       this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);

./node_modules/@babel/parser/lib/index.js 14323     return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, "function");

./node_modules/@babel/helper-define-polyfill-provider/esm/index.browser.mjs 191   storeAnonymous(programPath, url, // eslint-disable-next-line no-undef

./node_modules/@babel/helper-define-polyfill-provider/esm/index.browser.mjs 283 function stringifyTargetsMultiline(targets) {

./node_modules/@babel/helper-define-polyfill-provider/esm/index.browser.mjs 475 } // eslint-disable-next-line no-unused-vars

./node_modules/@babel/helper-define-polyfill-provider/esm/index.browser.mjs 479 } // eslint-disable-next-line no-unused-vars

./node_modules/@babel/helper-define-polyfill-provider/esm/index.browser.mjs 481 function logMissing(missingDeps) {} // eslint-disable-next-line no-unused-vars

./node_modules/@babel/helper-define-polyfill-provider/esm/index.browser.mjs 606   const getUtils = createUtilsGetter(new ImportsCache(moduleName => resolve(dirname, moduleName, absoluteImports))); // eslint-disable-next-line prefer-const

./node_modules/@babel/helper-define-polyfill-provider/esm/index.browser.mjs 729       console.log(`\nUsing targets: ${stringifyTargetsMultiline(targets)}`);

./node_modules/@babel/helper-define-polyfill-provider/esm/index.node.mjs 194   storeAnonymous(programPath, url, // eslint-disable-next-line no-undef

./node_modules/@babel/helper-define-polyfill-provider/esm/index.node.mjs 286 function stringifyTargetsMultiline(targets) {

./node_modules/@babel/helper-define-polyfill-provider/esm/index.node.mjs 680   const getUtils = createUtilsGetter(new ImportsCache(moduleName => resolve(dirname, moduleName, absoluteImports))); // eslint-disable-next-line prefer-const

./node_modules/@babel/helper-define-polyfill-provider/esm/index.node.mjs 803       console.log(`\nUsing targets: ${stringifyTargetsMultiline(targets)}`);

./node_modules/@babel/helper-define-polyfill-provider/lib/index.js 102   const getUtils = (0, _utils.createUtilsGetter)(new _importsCache.default(moduleName => deps.resolve(dirname, moduleName, absoluteImports))); // eslint-disable-next-line prefer-const

./node_modules/@babel/helper-define-polyfill-provider/lib/index.js 225       console.log(`\nUsing targets: ${(0, _debugUtils.stringifyTargetsMultiline)(targets)}`);

./node_modules/@babel/helper-define-polyfill-provider/lib/debug-utils.js 4 exports.stringifyTargetsMultiline = stringifyTargetsMultiline;

./node_modules/@babel/helper-define-polyfill-provider/lib/debug-utils.js 13 function stringifyTargetsMultiline(targets) {

./node_modules/@babel/helper-define-polyfill-provider/lib/imports-cache.js 24   storeAnonymous(programPath, url, // eslint-disable-next-line no-undef

./node_modules/@babel/helper-define-polyfill-provider/lib/browser/dependencies.js 12 } // eslint-disable-next-line no-unused-vars

./node_modules/@babel/helper-define-polyfill-provider/lib/browser/dependencies.js 17 } // eslint-disable-next-line no-unused-vars

./node_modules/@babel/helper-define-polyfill-provider/lib/browser/dependencies.js 20 function logMissing(missingDeps) {} // eslint-disable-next-line no-unused-vars

./node_modules/@babel/helper-define-polyfill-provider/src/browser/dependencies.js 15 // eslint-disable-next-line no-unused-vars

./node_modules/@babel/helper-define-polyfill-provider/src/browser/dependencies.js 20 // eslint-disable-next-line no-unused-vars

./node_modules/@babel/helper-define-polyfill-provider/src/browser/dependencies.js 23 // eslint-disable-next-line no-unused-vars

./node_modules/@babel/preset-modules/lib/plugins/transform-tagged-template-caching/index.js 58       processed.set(template, true); // Install an inline cache at the callsite using the global variable:

./node_modules/@babel/preset-modules/lib/plugins/transform-tagged-template-caching/index.js 63       const inlineCache = t.logicalExpression("||", ident, t.assignmentExpression("=", ident, template)); // The original tag function becomes a plain function call.

./node_modules/@babel/preset-modules/lib/plugins/transform-tagged-template-caching/index.js 67       const node = t.callExpression(path.node.tag, [inlineCache, ...expressions]);

./node_modules/@babel/preset-modules/src/plugins/transform-tagged-template-caching/index.js 66       // Install an inline cache at the callsite using the global variable:

./node_modules/@babel/preset-modules/src/plugins/transform-tagged-template-caching/index.js 72       const inlineCache = t.logicalExpression(

./node_modules/@babel/preset-modules/src/plugins/transform-tagged-template-caching/index.js 82         inlineCache,

./node_modules/@babel/plugin-transform-classes/lib/transformClass.js 18 var _inlineCreateSuperHelpers = require("./inline-createSuper-helpers");

./node_modules/@babel/plugin-transform-classes/lib/transformClass.js 477       classState.body.unshift(_core.types.variableDeclaration("var", [_core.types.variableDeclarator(superFnId, _core.types.callExpression((0, _inlineCreateSuperHelpers.default)(classState.file), [_core.types.cloneNode(classState.classRef)]))]));

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 121 	          line: mapping.generatedLine,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 133 	          line: mapping.originalLine,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 154 	 * Add a single mapping from original source line and column to the generated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 155 	 * source's line and column for this source map being created. The mapping

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 158 	 *   - generated: An object with the generated line and column positions.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 159 	 *   - original: An object with the original line and column positions.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 189 	      generatedLine: generated.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 191 	      originalLine: original != null && original.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 269 	          line: mapping.originalLine,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 281 	          mapping.originalLine = original.line;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 332 	    // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 336 	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 338 	            'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 344 	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 345 	        && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 350 	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 351 	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 352 	             && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 353 	             && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 416 	        // lines are stored 0-based in SourceMap spec version 3

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1011 	 * mappings with the same original source/line/column, but different generated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1012 	 * line and column the same. Useful when searching for a mapping with a

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1050 	 * mappings with the same generated line and column, but different

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1051 	 * source/name/original line and column the same. Useful when searching for a

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1277 	  var lineA = mappingA.generatedLine;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1278 	  var lineB = mappingB.generatedLine;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1281 	  return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1391 	//       generatedLine: The line number in the generated code,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1395 	//       originalLine: The line number in the original source that

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1455 	 * Iterate over each mapping between an original source/line/column and a

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1456 	 * generated line/column in this source map.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1466 	 *        iterate over the mappings sorted by the generated file's line/column

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1467 	 *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1505 	 * Returns all generated line and column information for the original source,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1506 	 * line, and column provided. If no column is provided, returns all mappings

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1507 	 * corresponding to a either the line we are searching for or the next

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1508 	 * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1509 	 * corresponding to the given line and either the column we are searching for

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1515 	 *   - line: The line number in the original source.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1520 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1525 	    var line = util.getArg(aArgs, 'line');

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1530 	    // the given line, provided such a mapping exists.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1533 	      originalLine: line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1560 	        // a mapping for a different line than the one we found. Since

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1562 	        // the line we found.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1565 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1576 	        // a mapping for a different line than the one we were searching for.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1578 	        // the line we are searching for.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1580 	               mapping.originalLine === line &&

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1583 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1822 	            throw new Error('Found a source, but no line and column');

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1826 	            throw new Error('Found a source and line, but no column');

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1841 	          // Original line.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1918 	      // The last mapping for each line spans the entire line.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1924 	 * Returns the original source, line, and column information for the generated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1925 	 * source's line and column positions provided. The only argument is an object

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1928 	 *   - line: The line number in the generated source.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1939 	 *   - line: The line number in the original source, or null.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1946 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1976 	          line: util.getArg(mapping, 'originalLine', null),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 1985 	      line: null,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2055 	 * Returns the generated line and column information for the original source,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2056 	 * line, and column positions provided. The only argument is an object with

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2060 	 *   - line: The line number in the original source.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2070 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2081 	        line: null,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2090 	      originalLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2108 	          line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2116 	      line: null,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2140 	 *       begins to apply, defined as an object with a "line" and "column"

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2156 	 *      offset: {line:100, column:10},

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2186 	    line: -1,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2196 	    var offsetLine = util.getArg(offset, 'line');

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2199 	    if (offsetLine < lastOffset.line ||

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2200 	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2241 	 * Returns the original source, line, and column information for the generated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2242 	 * source's line and column positions provided. The only argument is an object

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2245 	 *   - line: The line number in the generated source.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2251 	 *   - line: The line number in the original source, or null.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2258 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2279 	        line: null,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2286 	      line: needle.generatedLine -

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2331 	 * Returns the generated line and column information for the original source,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2332 	 * line, and column positions provided. The only argument is an object with

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2336 	 *   - line: The line number in the original source.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2341 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2357 	          line: generatedPosition.line +

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2360 	            (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2369 	      line: null,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2508 	 * mappings between original and generated line/col pairs are single points,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2682 	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2686 	// Newline character code for charCodeAt() comparisons

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2696 	 * snippets of generated JavaScript source code while maintaining the line and

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2699 	 * @param aLine The original line number.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2709 	  this.line = aLine == null ? null : aLine;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2731 	    // All even indices of this array are one line of the generated code,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2732 	    // while all odd indices are the newlines between two adjacent lines

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2738 	      var lineContents = getNextLine();

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2739 	      // The last line of a file might not have a newline.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2741 	      return lineContents + newLine;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2760 	        // First check if there is a new line in between.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2762 	          // Associate first line with "lastMapping"

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2768 	          // There is no new line in between.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2785 	      // Each line is added as separate string.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2801 	        // Associate the remaining code in the current line with "lastMapping"

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2804 	      // and add the remaining lines without any mapping

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2888 	 * snippet and the its original associated source's line/column location.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 2902 	                     line: this.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 3004 	    line: 1,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 3016 	        && original.line !== null

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 3019 	         || lastOriginalLine !== original.line

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 3025 	            line: original.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 3029 	            line: generated.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 3036 	      lastOriginalLine = original.line;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 3043 	          line: generated.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 3052 	        generated.line++;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 3062 	              line: original.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.js 3066 	              line: generated.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 121 	          line: mapping.generatedLine,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 133 	          line: mapping.originalLine,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 154 	 * Add a single mapping from original source line and column to the generated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 155 	 * source's line and column for this source map being created. The mapping

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 158 	 *   - generated: An object with the generated line and column positions.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 159 	 *   - original: An object with the original line and column positions.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 189 	      generatedLine: generated.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 191 	      originalLine: original != null && original.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 269 	          line: mapping.originalLine,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 281 	          mapping.originalLine = original.line;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 332 	    // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 336 	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 338 	            'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 344 	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 345 	        && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 350 	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 351 	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 352 	             && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 353 	             && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 416 	        // lines are stored 0-based in SourceMap spec version 3

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1011 	 * mappings with the same original source/line/column, but different generated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1012 	 * line and column the same. Useful when searching for a mapping with a

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1050 	 * mappings with the same generated line and column, but different

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1051 	 * source/name/original line and column the same. Useful when searching for a

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1277 	  var lineA = mappingA.generatedLine;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1278 	  var lineB = mappingB.generatedLine;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1281 	  return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1391 	//       generatedLine: The line number in the generated code,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1395 	//       originalLine: The line number in the original source that

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1455 	 * Iterate over each mapping between an original source/line/column and a

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1456 	 * generated line/column in this source map.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1466 	 *        iterate over the mappings sorted by the generated file's line/column

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1467 	 *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1505 	 * Returns all generated line and column information for the original source,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1506 	 * line, and column provided. If no column is provided, returns all mappings

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1507 	 * corresponding to a either the line we are searching for or the next

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1508 	 * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1509 	 * corresponding to the given line and either the column we are searching for

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1515 	 *   - line: The line number in the original source.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1520 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1525 	    var line = util.getArg(aArgs, 'line');

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1530 	    // the given line, provided such a mapping exists.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1533 	      originalLine: line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1560 	        // a mapping for a different line than the one we found. Since

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1562 	        // the line we found.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1565 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1576 	        // a mapping for a different line than the one we were searching for.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1578 	        // the line we are searching for.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1580 	               mapping.originalLine === line &&

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1583 	            line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1822 	            throw new Error('Found a source, but no line and column');

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1826 	            throw new Error('Found a source and line, but no column');

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1841 	          // Original line.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1918 	      // The last mapping for each line spans the entire line.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1924 	 * Returns the original source, line, and column information for the generated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1925 	 * source's line and column positions provided. The only argument is an object

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1928 	 *   - line: The line number in the generated source.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1939 	 *   - line: The line number in the original source, or null.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1946 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1976 	          line: util.getArg(mapping, 'originalLine', null),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 1985 	      line: null,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2055 	 * Returns the generated line and column information for the original source,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2056 	 * line, and column positions provided. The only argument is an object with

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2060 	 *   - line: The line number in the original source.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2070 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2081 	        line: null,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2090 	      originalLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2108 	          line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2116 	      line: null,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2140 	 *       begins to apply, defined as an object with a "line" and "column"

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2156 	 *      offset: {line:100, column:10},

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2186 	    line: -1,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2196 	    var offsetLine = util.getArg(offset, 'line');

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2199 	    if (offsetLine < lastOffset.line ||

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2200 	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2241 	 * Returns the original source, line, and column information for the generated

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2242 	 * source's line and column positions provided. The only argument is an object

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2245 	 *   - line: The line number in the generated source.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2251 	 *   - line: The line number in the original source, or null.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2258 	      generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2279 	        line: null,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2286 	      line: needle.generatedLine -

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2331 	 * Returns the generated line and column information for the original source,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2332 	 * line, and column positions provided. The only argument is an object with

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2336 	 *   - line: The line number in the original source.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2341 	 *   - line: The line number in the generated source, or null.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2357 	          line: generatedPosition.line +

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2360 	            (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2369 	      line: null,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2508 	 * mappings between original and generated line/col pairs are single points,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2682 	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2686 	// Newline character code for charCodeAt() comparisons

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2696 	 * snippets of generated JavaScript source code while maintaining the line and

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2699 	 * @param aLine The original line number.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2709 	  this.line = aLine == null ? null : aLine;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2731 	    // All even indices of this array are one line of the generated code,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2732 	    // while all odd indices are the newlines between two adjacent lines

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2738 	      var lineContents = getNextLine();

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2739 	      // The last line of a file might not have a newline.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2741 	      return lineContents + newLine;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2760 	        // First check if there is a new line in between.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2762 	          // Associate first line with "lastMapping"

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2768 	          // There is no new line in between.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2785 	      // Each line is added as separate string.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2801 	        // Associate the remaining code in the current line with "lastMapping"

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2804 	      // and add the remaining lines without any mapping

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2888 	 * snippet and the its original associated source's line/column location.

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 2902 	                     line: this.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 3004 	    line: 1,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 3016 	        && original.line !== null

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 3019 	         || lastOriginalLine !== original.line

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 3025 	            line: original.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 3029 	            line: generated.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 3036 	      lastOriginalLine = original.line;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 3043 	          line: generated.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 3052 	        generated.line++;

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 3062 	              line: original.line,

./node_modules/@babel/core/node_modules/source-map/dist/source-map.debug.js 3066 	              line: generated.line,

./node_modules/@babel/core/node_modules/source-map/lib/mapping-list.js 16   var lineA = mappingA.generatedLine;

./node_modules/@babel/core/node_modules/source-map/lib/mapping-list.js 17   var lineB = mappingB.generatedLine;

./node_modules/@babel/core/node_modules/source-map/lib/mapping-list.js 20   return lineB > lineA || lineB == lineA && columnB >= columnA ||

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 45 //       generatedLine: The line number in the generated code,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 49 //       originalLine: The line number in the original source that

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 109  * Iterate over each mapping between an original source/line/column and a

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 110  * generated line/column in this source map.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 120  *        iterate over the mappings sorted by the generated file's line/column

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 121  *        order or the original's source/line/column order, respectively. Defaults to

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 159  * Returns all generated line and column information for the original source,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 160  * line, and column provided. If no column is provided, returns all mappings

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 161  * corresponding to a either the line we are searching for or the next

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 162  * closest line that has any mappings. Otherwise, returns all mappings

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 163  * corresponding to the given line and either the column we are searching for

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 169  *   - line: The line number in the original source.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 174  *   - line: The line number in the generated source, or null.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 179     var line = util.getArg(aArgs, 'line');

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 184     // the given line, provided such a mapping exists.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 187       originalLine: line,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 214         // a mapping for a different line than the one we found. Since

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 216         // the line we found.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 219             line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 230         // a mapping for a different line than the one we were searching for.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 232         // the line we are searching for.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 234                mapping.originalLine === line &&

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 237             line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 476             throw new Error('Found a source, but no line and column');

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 480             throw new Error('Found a source and line, but no column');

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 495           // Original line.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 572       // The last mapping for each line spans the entire line.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 578  * Returns the original source, line, and column information for the generated

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 579  * source's line and column positions provided. The only argument is an object

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 582  *   - line: The line number in the generated source.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 593  *   - line: The line number in the original source, or null.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 600       generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 630           line: util.getArg(mapping, 'originalLine', null),

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 639       line: null,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 709  * Returns the generated line and column information for the original source,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 710  * line, and column positions provided. The only argument is an object with

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 714  *   - line: The line number in the original source.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 724  *   - line: The line number in the generated source, or null.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 735         line: null,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 744       originalLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 762           line: util.getArg(mapping, 'generatedLine', null),

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 770       line: null,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 794  *       begins to apply, defined as an object with a "line" and "column"

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 810  *      offset: {line:100, column:10},

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 840     line: -1,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 850     var offsetLine = util.getArg(offset, 'line');

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 853     if (offsetLine < lastOffset.line ||

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 854         (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 895  * Returns the original source, line, and column information for the generated

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 896  * source's line and column positions provided. The only argument is an object

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 899  *   - line: The line number in the generated source.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 905  *   - line: The line number in the original source, or null.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 912       generatedLine: util.getArg(aArgs, 'line'),

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 933         line: null,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 940       line: needle.generatedLine -

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 985  * Returns the generated line and column information for the original source,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 986  * line, and column positions provided. The only argument is an object with

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 990  *   - line: The line number in the original source.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 995  *   - line: The line number in the generated source, or null.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 1011           line: generatedPosition.line +

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 1014             (section.generatedOffset.generatedLine === generatedPosition.line

./node_modules/@babel/core/node_modules/source-map/lib/source-map-consumer.js 1023       line: null,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 51           line: mapping.generatedLine,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 63           line: mapping.originalLine,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 84  * Add a single mapping from original source line and column to the generated

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 85  * source's line and column for this source map being created. The mapping

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 88  *   - generated: An object with the generated line and column positions.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 89  *   - original: An object with the original line and column positions.

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 119       generatedLine: generated.line,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 121       originalLine: original != null && original.line,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 199           line: mapping.originalLine,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 211           mapping.originalLine = original.line;

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 262     // When aOriginal is truthy but has empty values for .line and .column,

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 266     if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 268             'original.line and original.column are not numbers -- you probably meant to omit ' +

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 274     if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 275         && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 280     else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 281              && aOriginal && 'line' in aOriginal && 'column' in aOriginal

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 282              && aGenerated.line > 0 && aGenerated.column >= 0

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 283              && aOriginal.line > 0 && aOriginal.column >= 0

./node_modules/@babel/core/node_modules/source-map/lib/source-map-generator.js 346         // lines are stored 0-based in SourceMap spec version 3

./node_modules/@babel/core/node_modules/source-map/lib/binary-search.js 74  * mappings between original and generated line/col pairs are single points,

./node_modules/@babel/core/node_modules/source-map/lib/util.js 300  * mappings with the same original source/line/column, but different generated

./node_modules/@babel/core/node_modules/source-map/lib/util.js 301  * line and column the same. Useful when searching for a mapping with a

./node_modules/@babel/core/node_modules/source-map/lib/util.js 339  * mappings with the same generated line and column, but different

./node_modules/@babel/core/node_modules/source-map/lib/util.js 340  * source/name/original line and column the same. Useful when searching for a

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 11 // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 15 // Newline character code for charCodeAt() comparisons

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 25  * snippets of generated JavaScript source code while maintaining the line and

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 28  * @param aLine The original line number.

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 38   this.line = aLine == null ? null : aLine;

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 60     // All even indices of this array are one line of the generated code,

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 61     // while all odd indices are the newlines between two adjacent lines

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 67       var lineContents = getNextLine();

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 68       // The last line of a file might not have a newline.

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 70       return lineContents + newLine;

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 89         // First check if there is a new line in between.

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 91           // Associate first line with "lastMapping"

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 97           // There is no new line in between.

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 114       // Each line is added as separate string.

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 130         // Associate the remaining code in the current line with "lastMapping"

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 133       // and add the remaining lines without any mapping

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 217  * snippet and the its original associated source's line/column location.

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 231                      line: this.line,

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 333     line: 1,

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 345         && original.line !== null

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 348          || lastOriginalLine !== original.line

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 354             line: original.line,

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 358             line: generated.line,

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 365       lastOriginalLine = original.line;

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 372           line: generated.line,

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 381         generated.line++;

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 391               line: original.line,

./node_modules/@babel/core/node_modules/source-map/lib/source-node.js 395               line: generated.line,

./node_modules/@babel/core/lib/parser/index.js 77           line: loc.line,

./node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js 184   pipelineOperator: {

./node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js 186       name: "@babel/plugin-syntax-pipeline-operator",

./node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js 190       name: "@babel/plugin-proposal-pipeline-operator",

./node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js 289   let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled ` + `(${loc.line}:${loc.column + 1}):\n\n` + codeFrame;

./node_modules/@babel/core/lib/transformation/normalize-file.js 104           debug("discarding unknown inline input sourcemap", err);

./node_modules/@babel/core/lib/transformation/file/merge-map.js 42             line: original.line,

./node_modules/@babel/core/lib/transformation/file/merge-map.js 46             line: item.line,

./node_modules/@babel/core/lib/transformation/file/merge-map.js 60         line: item.line,

./node_modules/@babel/core/lib/transformation/file/merge-map.js 71           line: clearItem.line,

./node_modules/@babel/core/lib/transformation/file/merge-map.js 88   return `${item.line}/${item.columnStart}`;

./node_modules/@babel/core/lib/transformation/file/merge-map.js 106   line,

./node_modules/@babel/core/lib/transformation/file/merge-map.js 113     if (line > outOriginal.line) return -1;

./node_modules/@babel/core/lib/transformation/file/merge-map.js 114     if (line < outOriginal.line) return 1;

./node_modules/@babel/core/lib/transformation/file/merge-map.js 168       line: m.originalLine,

./node_modules/@babel/core/lib/transformation/file/merge-map.js 174     if (last && last.source === source && last.mapping.line === m.originalLine) {

./node_modules/@babel/core/lib/transformation/file/merge-map.js 186         line: m.originalLine,

./node_modules/@babel/core/lib/transformation/file/merge-map.js 189         line: item.line,

./node_modules/@babel/core/lib/transformation/file/file.js 237           line: loc.start.line,

./node_modules/@babel/core/lib/transformation/file/file.js 240         end: loc.end && loc.start.line === loc.end.line ? {

./node_modules/@babel/core/lib/transformation/file/file.js 241           line: loc.end.line,

./node_modules/@babel/core/lib/transformation/file/generate.js 75   if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {

./node_modules/@babel/core/lib/transformation/file/generate.js 79   if (opts.sourceMaps === "inline") {

./node_modules/@babel/core/lib/config/validation/option-assertions.js 78   if (value !== undefined && typeof value !== "boolean" && value !== "inline" && value !== "both") {

./node_modules/@babel/core/lib/config/validation/option-assertions.js 79     throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);

./node_modules/@babel/core/lib/config/files/configuration.js 289   const ignorePatterns = content.split("\n").map(line => line.replace(/#(.*?)$/, "").trim()).filter(line => !!line);

./node_modules/@babel/core/lib/config/files/configuration.js 344   // .cache(fn) will perform a linear search though instances to find the matching plugin based

./node_modules/@babel/traverse/lib/path/comments.js 36 function addComment(type, content, line) {

./node_modules/@babel/traverse/lib/path/comments.js 37   _addComment(this.node, type, content, line);

./node_modules/@babel/traverse/lib/path/replacement.js 11 exports.replaceInline = replaceInline;

./node_modules/@babel/traverse/lib/path/replacement.js 82           line: loc.line,

./node_modules/@babel/traverse/lib/path/replacement.js 243 function replaceInline(nodes) {

./node_modules/@babel/plugin-transform-react-jsx/lib/create-plugin.js 607   return makeTrace(_core.types.cloneNode(state.fileNameIdentifier), location.start.line, location.start.column);

./node_modules/@babel/plugin-transform-react-jsx/lib/create-plugin.js 610 function makeTrace(fileNameIdentifier, lineNumber, column0Based) {

./node_modules/@babel/plugin-transform-react-jsx/lib/create-plugin.js 611   const fileLineLiteral = lineNumber != null ? _core.types.numericLiteral(lineNumber) : _core.types.nullLiteral();

./node_modules/@babel/plugin-transform-react-jsx/lib/create-plugin.js 616   const lineNumberProperty = _core.types.objectProperty(_core.types.identifier("lineNumber"), fileLineLiteral);

./node_modules/@babel/plugin-transform-react-jsx/lib/create-plugin.js 620   return _core.types.objectExpression([fileNameProperty, lineNumberProperty, columnNumberProperty]);

./node_modules/@babel/compat-data/data/corejs2-built-ins.json 1296   "es6.string.anchor": {

./node_modules/@babel/types/scripts/generators/flow.js 27     line: number;

./node_modules/@babel/types/scripts/generators/flow.js 32     line: number;

./node_modules/@babel/types/scripts/generators/flow.js 49 const lines = [];

./node_modules/@babel/types/scripts/generators/flow.js 98     lines.push(

./node_modules/@babel/types/scripts/generators/flow.js 105     lines.push(

./node_modules/@babel/types/scripts/generators/flow.js 122   lines.push(decl);

./node_modules/@babel/types/scripts/generators/flow.js 124   lines.push(

./node_modules/@babel/types/scripts/generators/flow.js 129 lines.push(

./node_modules/@babel/types/scripts/generators/flow.js 136   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 138   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 140   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 143   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 155   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 156   `declare export function addComment<T: BabelNode>(node: T, type: CommentTypeShorthand, content: string, line?: boolean): T`,

./node_modules/@babel/types/scripts/generators/flow.js 157   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 168   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 170   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 172   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 175   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 178   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 183   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 185   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 187   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 189   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 195   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 200   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 214   // eslint-disable-next-line

./node_modules/@babel/types/scripts/generators/flow.js 224   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 242   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/flow.js 255   ${lines.join("\n").replace(/\n/g, "\n  ").trim()}

./node_modules/@babel/types/scripts/generators/ast-types.js 28     line: number;

./node_modules/@babel/types/scripts/generators/ast-types.js 33     line: number;

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 28     line: number;

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 33     line: number;

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 53 const lines = [];

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 109     lines.push(

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 114     lines.push(

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 131     lines.push(`/** @deprecated Use \`is${realName}\` */`);

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 133   lines.push(

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 138     lines.push(`/** @deprecated Use \`assert${realName}\` */`);

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 140   lines.push(

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 145 lines.push(

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 150   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 159   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 171   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 172   `export function addComment<T extends Node>(node: T, type: CommentTypeShorthand, content: string, line?: boolean): T`,

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 173   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 182   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 185   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 192   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 201   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 209   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 211   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 213   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 221   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 226   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 230   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 232   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 234   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 236   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 248   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 250   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 252   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 254   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 257   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 273   // eslint-disable-next-line

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 283   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 285   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 287   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 289   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 293   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 310   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 312   // eslint-disable-next-line max-len

./node_modules/@babel/types/scripts/generators/typescript-legacy.js 339 code += lines.join("\n") + "\n";

./node_modules/@babel/types/scripts/generators/docs.js 53   const lines = historyItems.map(

./node_modules/@babel/types/scripts/generators/docs.js 61     ...lines,

./node_modules/@babel/types/scripts/generators/docs.js 243     "A cover of AST nodes whose semantic will change when a line terminator is inserted between the operator and the operand.",

./node_modules/@babel/types/lib/index.js.flow 21     line: number;

./node_modules/@babel/types/lib/index.js.flow 26     line: number;

./node_modules/@babel/types/lib/index.js.flow 1185 declare class BabelNodePipelineTopicExpression extends BabelNode {

./node_modules/@babel/types/lib/index.js.flow 1186   type: "PipelineTopicExpression";

./node_modules/@babel/types/lib/index.js.flow 1190 declare class BabelNodePipelineBareFunction extends BabelNode {

./node_modules/@babel/types/lib/index.js.flow 1191   type: "PipelineBareFunction";

./node_modules/@babel/types/lib/index.js.flow 1195 declare class BabelNodePipelinePrimaryTopicReference extends BabelNode {

./node_modules/@babel/types/lib/index.js.flow 1196   type: "PipelinePrimaryTopicReference";

./node_modules/@babel/types/lib/index.js.flow 1809   declare export function pipelineTopicExpression(expression: BabelNodeExpression): BabelNodePipelineTopicExpression;

./node_modules/@babel/types/lib/index.js.flow 1810   declare export function pipelineBareFunction(callee: BabelNodeExpression): BabelNodePipelineBareFunction;

./node_modules/@babel/types/lib/index.js.flow 1811   declare export function pipelinePrimaryTopicReference(): BabelNodePipelinePrimaryTopicReference;

./node_modules/@babel/types/lib/index.js.flow 2235   declare export function isPipelineTopicExpression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodePipelineTopicExpression)

./node_modules/@babel/types/lib/index.js.flow 2236   declare export function assertPipelineTopicExpression(node: ?Object, opts?: ?Object): void

./node_modules/@babel/types/lib/index.js.flow 2237   declare export function isPipelineBareFunction(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodePipelineBareFunction)

./node_modules/@babel/types/lib/index.js.flow 2238   declare export function assertPipelineBareFunction(node: ?Object, opts?: ?Object): void

./node_modules/@babel/types/lib/index.js.flow 2239   declare export function isPipelinePrimaryTopicReference(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodePipelinePrimaryTopicReference)

./node_modules/@babel/types/lib/index.js.flow 2240   declare export function assertPipelinePrimaryTopicReference(node: ?Object, opts?: ?Object): void

./node_modules/@babel/types/lib/index.js.flow 2477   declare export function addComment<T: BabelNode>(node: T, type: CommentTypeShorthand, content: string, line?: boolean): T

./node_modules/@babel/types/lib/comments/addComment.js 10 function addComment(node, type, content, line) {

./node_modules/@babel/types/lib/comments/addComment.js 12     type: line ? "CommentLine" : "CommentBlock",

./node_modules/@babel/types/lib/builders/generated/index.js 186 exports.pipelineTopicExpression = pipelineTopicExpression;

./node_modules/@babel/types/lib/builders/generated/index.js 187 exports.pipelineBareFunction = pipelineBareFunction;

./node_modules/@babel/types/lib/builders/generated/index.js 188 exports.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;

./node_modules/@babel/types/lib/builders/generated/index.js 979 function pipelineTopicExpression(expression) {

./node_modules/@babel/types/lib/builders/generated/index.js 980   return (0, _builder.default)("PipelineTopicExpression", ...arguments);

./node_modules/@babel/types/lib/builders/generated/index.js 983 function pipelineBareFunction(callee) {

./node_modules/@babel/types/lib/builders/generated/index.js 984   return (0, _builder.default)("PipelineBareFunction", ...arguments);

./node_modules/@babel/types/lib/builders/generated/index.js 987 function pipelinePrimaryTopicReference() {

./node_modules/@babel/types/lib/builders/generated/index.js 988   return (0, _builder.default)("PipelinePrimaryTopicReference", ...arguments);

./node_modules/@babel/types/lib/builders/generated/uppercase.js 1086 Object.defineProperty(exports, "PipelineTopicExpression", {

./node_modules/@babel/types/lib/builders/generated/uppercase.js 1089     return _index.pipelineTopicExpression;

./node_modules/@babel/types/lib/builders/generated/uppercase.js 1092 Object.defineProperty(exports, "PipelineBareFunction", {

./node_modules/@babel/types/lib/builders/generated/uppercase.js 1095     return _index.pipelineBareFunction;

./node_modules/@babel/types/lib/builders/generated/uppercase.js 1098 Object.defineProperty(exports, "PipelinePrimaryTopicReference", {

./node_modules/@babel/types/lib/builders/generated/uppercase.js 1101     return _index.pipelinePrimaryTopicReference;

./node_modules/@babel/types/lib/definitions/experimental.js 120 (0, _utils.default)("PipelineTopicExpression", {

./node_modules/@babel/types/lib/definitions/experimental.js 130 (0, _utils.default)("PipelineBareFunction", {

./node_modules/@babel/types/lib/definitions/experimental.js 140 (0, _utils.default)("PipelinePrimaryTopicReference", {

./node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js 11   const lines = child.value.split(/\r\n|\n|\r/);

./node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js 14   for (let i = 0; i < lines.length; i++) {

./node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js 15     if (lines[i].match(/[^ \t]/)) {

./node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js 22   for (let i = 0; i < lines.length; i++) {

./node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js 23     const line = lines[i];

./node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js 25     const isLastLine = i === lines.length - 1;

./node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js 27     let trimmedLine = line.replace(/\t/g, " ");

./node_modules/@babel/types/lib/asserts/generated/index.js 186 exports.assertPipelineTopicExpression = assertPipelineTopicExpression;

./node_modules/@babel/types/lib/asserts/generated/index.js 187 exports.assertPipelineBareFunction = assertPipelineBareFunction;

./node_modules/@babel/types/lib/asserts/generated/index.js 188 exports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;

./node_modules/@babel/types/lib/asserts/generated/index.js 1030 function assertPipelineTopicExpression(node, opts) {

./node_modules/@babel/types/lib/asserts/generated/index.js 1031   assert("PipelineTopicExpression", node, opts);

./node_modules/@babel/types/lib/asserts/generated/index.js 1034 function assertPipelineBareFunction(node, opts) {

./node_modules/@babel/types/lib/asserts/generated/index.js 1035   assert("PipelineBareFunction", node, opts);

./node_modules/@babel/types/lib/asserts/generated/index.js 1038 function assertPipelinePrimaryTopicReference(node, opts) {

./node_modules/@babel/types/lib/asserts/generated/index.js 1039   assert("PipelinePrimaryTopicReference", node, opts);

./node_modules/@babel/types/lib/validators/generated/index.js 186 exports.isPipelineTopicExpression = isPipelineTopicExpression;

./node_modules/@babel/types/lib/validators/generated/index.js 187 exports.isPipelineBareFunction = isPipelineBareFunction;

./node_modules/@babel/types/lib/validators/generated/index.js 188 exports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;

./node_modules/@babel/types/lib/validators/generated/index.js 3004 function isPipelineTopicExpression(node, opts) {

./node_modules/@babel/types/lib/validators/generated/index.js 3008   if (nodeType === "PipelineTopicExpression") {

./node_modules/@babel/types/lib/validators/generated/index.js 3019 function isPipelineBareFunction(node, opts) {

./node_modules/@babel/types/lib/validators/generated/index.js 3023   if (nodeType === "PipelineBareFunction") {

./node_modules/@babel/types/lib/validators/generated/index.js 3034 function isPipelinePrimaryTopicReference(node, opts) {

./node_modules/@babel/types/lib/validators/generated/index.js 3038   if (nodeType === "PipelinePrimaryTopicReference") {

./node_modules/postcss-modules-extract-imports/package.json 4   "description": "A CSS Modules transform to extract local aliases for inline imports",

./node_modules/postcss-modules-extract-imports/src/index.js 141               // eslint-disable-next-line no-prototype-builtins

./node_modules/csstype/index.js.flow 55   borderInlineColor?: Property$BorderInlineColor,

./node_modules/csstype/index.js.flow 56   borderInlineEndColor?: Property$BorderInlineEndColor,

./node_modules/csstype/index.js.flow 57   borderInlineEndStyle?: Property$BorderInlineEndStyle,

./node_modules/csstype/index.js.flow 58   borderInlineEndWidth?: Property$BorderInlineEndWidth<TLength>,

./node_modules/csstype/index.js.flow 59   borderInlineStartColor?: Property$BorderInlineStartColor,

./node_modules/csstype/index.js.flow 60   borderInlineStartStyle?: Property$BorderInlineStartStyle,

./node_modules/csstype/index.js.flow 61   borderInlineStartWidth?: Property$BorderInlineStartWidth<TLength>,

./node_modules/csstype/index.js.flow 62   borderInlineStyle?: Property$BorderInlineStyle,

./node_modules/csstype/index.js.flow 63   borderInlineWidth?: Property$BorderInlineWidth<TLength>,

./node_modules/csstype/index.js.flow 154   inlineSize?: Property$InlineSize<TLength>,

./node_modules/csstype/index.js.flow 159   insetInline?: Property$InsetInline<TLength>,

./node_modules/csstype/index.js.flow 160   insetInlineEnd?: Property$InsetInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 161   insetInlineStart?: Property$InsetInlineStart<TLength>,

./node_modules/csstype/index.js.flow 169   lineBreak?: Property$LineBreak,

./node_modules/csstype/index.js.flow 170   lineHeight?: Property$LineHeight<TLength>,

./node_modules/csstype/index.js.flow 171   lineHeightStep?: Property$LineHeightStep<TLength>,

./node_modules/csstype/index.js.flow 179   marginInline?: Property$MarginInline<TLength>,

./node_modules/csstype/index.js.flow 180   marginInlineEnd?: Property$MarginInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 181   marginInlineStart?: Property$MarginInlineStart<TLength>,

./node_modules/csstype/index.js.flow 203   maxInlineSize?: Property$MaxInlineSize<TLength>,

./node_modules/csstype/index.js.flow 208   minInlineSize?: Property$MinInlineSize<TLength>,

./node_modules/csstype/index.js.flow 224   outlineColor?: Property$OutlineColor,

./node_modules/csstype/index.js.flow 225   outlineOffset?: Property$OutlineOffset<TLength>,

./node_modules/csstype/index.js.flow 226   outlineStyle?: Property$OutlineStyle,

./node_modules/csstype/index.js.flow 227   outlineWidth?: Property$OutlineWidth<TLength>,

./node_modules/csstype/index.js.flow 232   overflowInline?: Property$OverflowInline,

./node_modules/csstype/index.js.flow 237   overscrollBehaviorInline?: Property$OverscrollBehaviorInline,

./node_modules/csstype/index.js.flow 244   paddingInline?: Property$PaddingInline<TLength>,

./node_modules/csstype/index.js.flow 245   paddingInlineEnd?: Property$PaddingInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 246   paddingInlineStart?: Property$PaddingInlineStart<TLength>,

./node_modules/csstype/index.js.flow 274   scrollMarginInline?: Property$ScrollMarginInline<TLength>,

./node_modules/csstype/index.js.flow 275   scrollMarginInlineEnd?: Property$ScrollMarginInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 276   scrollMarginInlineStart?: Property$ScrollMarginInlineStart<TLength>,

./node_modules/csstype/index.js.flow 285   scrollPaddingInline?: Property$ScrollPaddingInline<TLength>,

./node_modules/csstype/index.js.flow 286   scrollPaddingInlineEnd?: Property$ScrollPaddingInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 287   scrollPaddingInlineStart?: Property$ScrollPaddingInlineStart<TLength>,

./node_modules/csstype/index.js.flow 328   textUnderlineOffset?: Property$TextUnderlineOffset<TLength>,

./node_modules/csstype/index.js.flow 329   textUnderlinePosition?: Property$TextUnderlinePosition,

./node_modules/csstype/index.js.flow 369   borderInline?: Property$BorderInline<TLength>,

./node_modules/csstype/index.js.flow 370   borderInlineEnd?: Property$BorderInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 371   borderInlineStart?: Property$BorderInlineStart<TLength>,

./node_modules/csstype/index.js.flow 389   lineClamp?: Property$LineClamp,

./node_modules/csstype/index.js.flow 396   outline?: Property$Outline<TLength>,

./node_modules/csstype/index.js.flow 421   MozBorderEndColor?: Property$BorderInlineEndColor,

./node_modules/csstype/index.js.flow 422   MozBorderEndStyle?: Property$BorderInlineEndStyle,

./node_modules/csstype/index.js.flow 423   MozBorderEndWidth?: Property$BorderInlineEndWidth<TLength>,

./node_modules/csstype/index.js.flow 426   MozBorderStartColor?: Property$BorderInlineStartColor,

./node_modules/csstype/index.js.flow 427   MozBorderStartStyle?: Property$BorderInlineStartStyle,

./node_modules/csstype/index.js.flow 442   MozMarginEnd?: Property$MarginInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 443   MozMarginStart?: Property$MarginInlineStart<TLength>,

./node_modules/csstype/index.js.flow 446   MozPaddingEnd?: Property$PaddingInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 447   MozPaddingStart?: Property$PaddingInlineStart<TLength>,

./node_modules/csstype/index.js.flow 579   WebkitMarginEnd?: Property$MarginInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 580   WebkitMarginStart?: Property$MarginInlineStart<TLength>,

./node_modules/csstype/index.js.flow 598   WebkitMaxInlineSize?: Property$MaxInlineSize<TLength>,

./node_modules/csstype/index.js.flow 601   WebkitPaddingEnd?: Property$PaddingInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 602   WebkitPaddingStart?: Property$PaddingInlineStart<TLength>,

./node_modules/csstype/index.js.flow 623   WebkitTextUnderlinePosition?: Property$TextUnderlinePosition,

./node_modules/csstype/index.js.flow 686   offsetInline?: Property$InsetInline<TLength>,

./node_modules/csstype/index.js.flow 687   offsetInlineEnd?: Property$InsetInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 688   offsetInlineStart?: Property$InsetInlineStart<TLength>,

./node_modules/csstype/index.js.flow 708   MozBackgroundInlinePolicy?: Property$BoxDecorationBreak,

./node_modules/csstype/index.js.flow 727   MozOutline?: Property$Outline<TLength>,

./node_modules/csstype/index.js.flow 728   MozOutlineColor?: Property$OutlineColor,

./node_modules/csstype/index.js.flow 729   MozOutlineRadius?: Property$MozOutlineRadius<TLength>,

./node_modules/csstype/index.js.flow 730   MozOutlineRadiusBottomleft?: Property$MozOutlineRadiusBottomleft<TLength>,

./node_modules/csstype/index.js.flow 731   MozOutlineRadiusBottomright?: Property$MozOutlineRadiusBottomright<TLength>,

./node_modules/csstype/index.js.flow 732   MozOutlineRadiusTopleft?: Property$MozOutlineRadiusTopleft<TLength>,

./node_modules/csstype/index.js.flow 733   MozOutlineRadiusTopright?: Property$MozOutlineRadiusTopright<TLength>,

./node_modules/csstype/index.js.flow 734   MozOutlineStyle?: Property$OutlineStyle,

./node_modules/csstype/index.js.flow 735   MozOutlineWidth?: Property$OutlineWidth<TLength>,

./node_modules/csstype/index.js.flow 778   alignmentBaseline?: Property$AlignmentBaseline,

./node_modules/csstype/index.js.flow 779   baselineShift?: Property$BaselineShift<TLength>,

./node_modules/csstype/index.js.flow 789   dominantBaseline?: Property$DominantBaseline,

./node_modules/csstype/index.js.flow 808   lineHeight?: Property$LineHeight<TLength>,

./node_modules/csstype/index.js.flow 899   "border-inline-color"?: Property$BorderInlineColor,

./node_modules/csstype/index.js.flow 900   "border-inline-end-color"?: Property$BorderInlineEndColor,

./node_modules/csstype/index.js.flow 901   "border-inline-end-style"?: Property$BorderInlineEndStyle,

./node_modules/csstype/index.js.flow 902   "border-inline-end-width"?: Property$BorderInlineEndWidth<TLength>,

./node_modules/csstype/index.js.flow 903   "border-inline-start-color"?: Property$BorderInlineStartColor,

./node_modules/csstype/index.js.flow 904   "border-inline-start-style"?: Property$BorderInlineStartStyle,

./node_modules/csstype/index.js.flow 905   "border-inline-start-width"?: Property$BorderInlineStartWidth<TLength>,

./node_modules/csstype/index.js.flow 906   "border-inline-style"?: Property$BorderInlineStyle,

./node_modules/csstype/index.js.flow 907   "border-inline-width"?: Property$BorderInlineWidth<TLength>,

./node_modules/csstype/index.js.flow 998   "inline-size"?: Property$InlineSize<TLength>,

./node_modules/csstype/index.js.flow 1003   "inset-inline"?: Property$InsetInline<TLength>,

./node_modules/csstype/index.js.flow 1004   "inset-inline-end"?: Property$InsetInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 1005   "inset-inline-start"?: Property$InsetInlineStart<TLength>,

./node_modules/csstype/index.js.flow 1013   "line-break"?: Property$LineBreak,

./node_modules/csstype/index.js.flow 1014   "line-height"?: Property$LineHeight<TLength>,

./node_modules/csstype/index.js.flow 1015   "line-height-step"?: Property$LineHeightStep<TLength>,

./node_modules/csstype/index.js.flow 1023   "margin-inline"?: Property$MarginInline<TLength>,

./node_modules/csstype/index.js.flow 1024   "margin-inline-end"?: Property$MarginInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 1025   "margin-inline-start"?: Property$MarginInlineStart<TLength>,

./node_modules/csstype/index.js.flow 1047   "max-inline-size"?: Property$MaxInlineSize<TLength>,

./node_modules/csstype/index.js.flow 1048   "max-lines"?: Property$MaxLines,

./node_modules/csstype/index.js.flow 1052   "min-inline-size"?: Property$MinInlineSize<TLength>,

./node_modules/csstype/index.js.flow 1060   "offset-anchor"?: Property$OffsetAnchor<TLength>,

./node_modules/csstype/index.js.flow 1068   "outline-color"?: Property$OutlineColor,

./node_modules/csstype/index.js.flow 1069   "outline-offset"?: Property$OutlineOffset<TLength>,

./node_modules/csstype/index.js.flow 1070   "outline-style"?: Property$OutlineStyle,

./node_modules/csstype/index.js.flow 1071   "outline-width"?: Property$OutlineWidth<TLength>,

./node_modules/csstype/index.js.flow 1072   "overflow-anchor"?: Property$OverflowAnchor,

./node_modules/csstype/index.js.flow 1076   "overflow-inline"?: Property$OverflowInline,

./node_modules/csstype/index.js.flow 1081   "overscroll-behavior-inline"?: Property$OverscrollBehaviorInline,

./node_modules/csstype/index.js.flow 1088   "padding-inline"?: Property$PaddingInline<TLength>,

./node_modules/csstype/index.js.flow 1089   "padding-inline-end"?: Property$PaddingInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 1090   "padding-inline-start"?: Property$PaddingInlineStart<TLength>,

./node_modules/csstype/index.js.flow 1118   "scroll-margin-inline"?: Property$ScrollMarginInline<TLength>,

./node_modules/csstype/index.js.flow 1119   "scroll-margin-inline-end"?: Property$ScrollMarginInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 1120   "scroll-margin-inline-start"?: Property$ScrollMarginInlineStart<TLength>,

./node_modules/csstype/index.js.flow 1129   "scroll-padding-inline"?: Property$ScrollPaddingInline<TLength>,

./node_modules/csstype/index.js.flow 1130   "scroll-padding-inline-end"?: Property$ScrollPaddingInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 1131   "scroll-padding-inline-start"?: Property$ScrollPaddingInlineStart<TLength>,

./node_modules/csstype/index.js.flow 1155   "text-decoration-line"?: Property$TextDecorationLine,

./node_modules/csstype/index.js.flow 1172   "text-underline-offset"?: Property$TextUnderlineOffset<TLength>,

./node_modules/csstype/index.js.flow 1173   "text-underline-position"?: Property$TextUnderlinePosition,

./node_modules/csstype/index.js.flow 1213   "border-inline"?: Property$BorderInline<TLength>,

./node_modules/csstype/index.js.flow 1214   "border-inline-end"?: Property$BorderInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 1215   "border-inline-start"?: Property$BorderInlineStart<TLength>,

./node_modules/csstype/index.js.flow 1233   "line-clamp"?: Property$LineClamp,

./node_modules/csstype/index.js.flow 1240   outline?: Property$Outline<TLength>,

./node_modules/csstype/index.js.flow 1268   "-moz-border-end-color"?: Property$BorderInlineEndColor,

./node_modules/csstype/index.js.flow 1269   "-moz-border-end-style"?: Property$BorderInlineEndStyle,

./node_modules/csstype/index.js.flow 1270   "-moz-border-end-width"?: Property$BorderInlineEndWidth<TLength>,

./node_modules/csstype/index.js.flow 1273   "-moz-border-start-color"?: Property$BorderInlineStartColor,

./node_modules/csstype/index.js.flow 1274   "-moz-border-start-style"?: Property$BorderInlineStartStyle,

./node_modules/csstype/index.js.flow 1289   "-moz-margin-end"?: Property$MarginInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 1290   "-moz-margin-start"?: Property$MarginInlineStart<TLength>,

./node_modules/csstype/index.js.flow 1293   "-moz-padding-end"?: Property$PaddingInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 1294   "-moz-padding-start"?: Property$PaddingInlineStart<TLength>,

./node_modules/csstype/index.js.flow 1330   "-ms-hyphenate-limit-lines"?: Property$MsHyphenateLimitLines,

./node_modules/csstype/index.js.flow 1335   "-ms-line-break"?: Property$LineBreak,

./node_modules/csstype/index.js.flow 1424   "-webkit-line-break"?: Property$LineBreak,

./node_modules/csstype/index.js.flow 1425   "-webkit-line-clamp"?: Property$WebkitLineClamp,

./node_modules/csstype/index.js.flow 1426   "-webkit-margin-end"?: Property$MarginInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 1427   "-webkit-margin-start"?: Property$MarginInlineStart<TLength>,

./node_modules/csstype/index.js.flow 1445   "-webkit-max-inline-size"?: Property$MaxInlineSize<TLength>,

./node_modules/csstype/index.js.flow 1448   "-webkit-padding-end"?: Property$PaddingInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 1449   "-webkit-padding-start"?: Property$PaddingInlineStart<TLength>,

./node_modules/csstype/index.js.flow 1459   "-webkit-text-decoration-line"?: Property$TextDecorationLine,

./node_modules/csstype/index.js.flow 1470   "-webkit-text-underline-position"?: Property$TextUnderlinePosition,

./node_modules/csstype/index.js.flow 1523   "box-lines"?: Property$BoxLines,

./node_modules/csstype/index.js.flow 1536   "offset-inline"?: Property$InsetInline<TLength>,

./node_modules/csstype/index.js.flow 1537   "offset-inline-end"?: Property$InsetInlineEnd<TLength>,

./node_modules/csstype/index.js.flow 1538   "offset-inline-start"?: Property$InsetInlineStart<TLength>,

./node_modules/csstype/index.js.flow 1550   "-khtml-box-lines"?: Property$BoxLines,

./node_modules/csstype/index.js.flow 1554   "-khtml-line-break"?: Property$LineBreak,

./node_modules/csstype/index.js.flow 1558   "-moz-background-inline-policy"?: Property$BoxDecorationBreak,

./node_modules/csstype/index.js.flow 1577   "-moz-outline"?: Property$Outline<TLength>,

./node_modules/csstype/index.js.flow 1578   "-moz-outline-color"?: Property$OutlineColor,

./node_modules/csstype/index.js.flow 1579   "-moz-outline-radius"?: Property$MozOutlineRadius<TLength>,

./node_modules/csstype/index.js.flow 1580   "-moz-outline-radius-bottomleft"?: Property$MozOutlineRadiusBottomleft<TLength>,

./node_modules/csstype/index.js.flow 1581   "-moz-outline-radius-bottomright"?: Property$MozOutlineRadiusBottomright<TLength>,

./node_modules/csstype/index.js.flow 1582   "-moz-outline-radius-topleft"?: Property$MozOutlineRadiusTopleft<TLength>,

./node_modules/csstype/index.js.flow 1583   "-moz-outline-radius-topright"?: Property$MozOutlineRadiusTopright<TLength>,

./node_modules/csstype/index.js.flow 1584   "-moz-outline-style"?: Property$OutlineStyle,

./node_modules/csstype/index.js.flow 1585   "-moz-outline-width"?: Property$OutlineWidth<TLength>,

./node_modules/csstype/index.js.flow 1588   "-moz-text-decoration-line"?: Property$TextDecorationLine,

./node_modules/csstype/index.js.flow 1619   "-webkit-box-lines"?: Property$BoxLines,

./node_modules/csstype/index.js.flow 1628   "alignment-baseline"?: Property$AlignmentBaseline,

./node_modules/csstype/index.js.flow 1629   "baseline-shift"?: Property$BaselineShift<TLength>,

./node_modules/csstype/index.js.flow 1639   "dominant-baseline"?: Property$DominantBaseline,

./node_modules/csstype/index.js.flow 1658   "line-height"?: Property$LineHeight<TLength>,

./node_modules/csstype/index.js.flow 1674   "stroke-linecap"?: Property$StrokeLinecap,

./node_modules/csstype/index.js.flow 1675   "stroke-linejoin"?: Property$StrokeLinejoin,

./node_modules/csstype/index.js.flow 1679   "text-anchor"?: Property$TextAnchor,

./node_modules/csstype/index.js.flow 1749   borderInlineColor?: Property$BorderInlineColor | Array<Property$BorderInlineColor>,

./node_modules/csstype/index.js.flow 1750   borderInlineEndColor?: Property$BorderInlineEndColor | Array<Property$BorderInlineEndColor>,

./node_modules/csstype/index.js.flow 1751   borderInlineEndStyle?: Property$BorderInlineEndStyle | Array<Property$BorderInlineEndStyle>,

./node_modules/csstype/index.js.flow 1752   borderInlineEndWidth?: Property$BorderInlineEndWidth<TLength> | Array<Property$BorderInlineEndWidth<TLength>>,

./node_modules/csstype/index.js.flow 1753   borderInlineStartColor?: Property$BorderInlineStartColor | Array<Property$BorderInlineStartColor>,

./node_modules/csstype/index.js.flow 1754   borderInlineStartStyle?: Property$BorderInlineStartStyle | Array<Property$BorderInlineStartStyle>,

./node_modules/csstype/index.js.flow 1755   borderInlineStartWidth?: Property$BorderInlineStartWidth<TLength> | Array<Property$BorderInlineStartWidth<TLength>>,

./node_modules/csstype/index.js.flow 1756   borderInlineStyle?: Property$BorderInlineStyle | Array<Property$BorderInlineStyle>,

./node_modules/csstype/index.js.flow 1757   borderInlineWidth?: Property$BorderInlineWidth<TLength> | Array<Property$BorderInlineWidth<TLength>>,

./node_modules/csstype/index.js.flow 1848   inlineSize?: Property$InlineSize<TLength> | Array<Property$InlineSize<TLength>>,

./node_modules/csstype/index.js.flow 1853   insetInline?: Property$InsetInline<TLength> | Array<Property$InsetInline<TLength>>,

./node_modules/csstype/index.js.flow 1854   insetInlineEnd?: Property$InsetInlineEnd<TLength> | Array<Property$InsetInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 1855   insetInlineStart?: Property$InsetInlineStart<TLength> | Array<Property$InsetInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 1863   lineBreak?: Property$LineBreak | Array<Property$LineBreak>,

./node_modules/csstype/index.js.flow 1864   lineHeight?: Property$LineHeight<TLength> | Array<Property$LineHeight<TLength>>,

./node_modules/csstype/index.js.flow 1865   lineHeightStep?: Property$LineHeightStep<TLength> | Array<Property$LineHeightStep<TLength>>,

./node_modules/csstype/index.js.flow 1873   marginInline?: Property$MarginInline<TLength> | Array<Property$MarginInline<TLength>>,

./node_modules/csstype/index.js.flow 1874   marginInlineEnd?: Property$MarginInlineEnd<TLength> | Array<Property$MarginInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 1875   marginInlineStart?: Property$MarginInlineStart<TLength> | Array<Property$MarginInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 1897   maxInlineSize?: Property$MaxInlineSize<TLength> | Array<Property$MaxInlineSize<TLength>>,

./node_modules/csstype/index.js.flow 1902   minInlineSize?: Property$MinInlineSize<TLength> | Array<Property$MinInlineSize<TLength>>,

./node_modules/csstype/index.js.flow 1918   outlineColor?: Property$OutlineColor | Array<Property$OutlineColor>,

./node_modules/csstype/index.js.flow 1919   outlineOffset?: Property$OutlineOffset<TLength> | Array<Property$OutlineOffset<TLength>>,

./node_modules/csstype/index.js.flow 1920   outlineStyle?: Property$OutlineStyle | Array<Property$OutlineStyle>,

./node_modules/csstype/index.js.flow 1921   outlineWidth?: Property$OutlineWidth<TLength> | Array<Property$OutlineWidth<TLength>>,

./node_modules/csstype/index.js.flow 1926   overflowInline?: Property$OverflowInline | Array<Property$OverflowInline>,

./node_modules/csstype/index.js.flow 1931   overscrollBehaviorInline?: Property$OverscrollBehaviorInline | Array<Property$OverscrollBehaviorInline>,

./node_modules/csstype/index.js.flow 1938   paddingInline?: Property$PaddingInline<TLength> | Array<Property$PaddingInline<TLength>>,

./node_modules/csstype/index.js.flow 1939   paddingInlineEnd?: Property$PaddingInlineEnd<TLength> | Array<Property$PaddingInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 1940   paddingInlineStart?: Property$PaddingInlineStart<TLength> | Array<Property$PaddingInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 1968   scrollMarginInline?: Property$ScrollMarginInline<TLength> | Array<Property$ScrollMarginInline<TLength>>,

./node_modules/csstype/index.js.flow 1969   scrollMarginInlineEnd?: Property$ScrollMarginInlineEnd<TLength> | Array<Property$ScrollMarginInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 1970   scrollMarginInlineStart?: Property$ScrollMarginInlineStart<TLength> | Array<Property$ScrollMarginInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 1979   scrollPaddingInline?: Property$ScrollPaddingInline<TLength> | Array<Property$ScrollPaddingInline<TLength>>,

./node_modules/csstype/index.js.flow 1980   scrollPaddingInlineEnd?: Property$ScrollPaddingInlineEnd<TLength> | Array<Property$ScrollPaddingInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 1981   scrollPaddingInlineStart?: Property$ScrollPaddingInlineStart<TLength> | Array<Property$ScrollPaddingInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2022   textUnderlineOffset?: Property$TextUnderlineOffset<TLength> | Array<Property$TextUnderlineOffset<TLength>>,

./node_modules/csstype/index.js.flow 2023   textUnderlinePosition?: Property$TextUnderlinePosition | Array<Property$TextUnderlinePosition>,

./node_modules/csstype/index.js.flow 2063   borderInline?: Property$BorderInline<TLength> | Array<Property$BorderInline<TLength>>,

./node_modules/csstype/index.js.flow 2064   borderInlineEnd?: Property$BorderInlineEnd<TLength> | Array<Property$BorderInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2065   borderInlineStart?: Property$BorderInlineStart<TLength> | Array<Property$BorderInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2083   lineClamp?: Property$LineClamp | Array<Property$LineClamp>,

./node_modules/csstype/index.js.flow 2090   outline?: Property$Outline<TLength> | Array<Property$Outline<TLength>>,

./node_modules/csstype/index.js.flow 2118   MozBorderEndColor?: Property$BorderInlineEndColor | Array<Property$BorderInlineEndColor>,

./node_modules/csstype/index.js.flow 2119   MozBorderEndStyle?: Property$BorderInlineEndStyle | Array<Property$BorderInlineEndStyle>,

./node_modules/csstype/index.js.flow 2120   MozBorderEndWidth?: Property$BorderInlineEndWidth<TLength> | Array<Property$BorderInlineEndWidth<TLength>>,

./node_modules/csstype/index.js.flow 2123   MozBorderStartColor?: Property$BorderInlineStartColor | Array<Property$BorderInlineStartColor>,

./node_modules/csstype/index.js.flow 2124   MozBorderStartStyle?: Property$BorderInlineStartStyle | Array<Property$BorderInlineStartStyle>,

./node_modules/csstype/index.js.flow 2139   MozMarginEnd?: Property$MarginInlineEnd<TLength> | Array<Property$MarginInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2140   MozMarginStart?: Property$MarginInlineStart<TLength> | Array<Property$MarginInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2143   MozPaddingEnd?: Property$PaddingInlineEnd<TLength> | Array<Property$PaddingInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2144   MozPaddingStart?: Property$PaddingInlineStart<TLength> | Array<Property$PaddingInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2276   WebkitMarginEnd?: Property$MarginInlineEnd<TLength> | Array<Property$MarginInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2277   WebkitMarginStart?: Property$MarginInlineStart<TLength> | Array<Property$MarginInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2295   WebkitMaxInlineSize?: Property$MaxInlineSize<TLength> | Array<Property$MaxInlineSize<TLength>>,

./node_modules/csstype/index.js.flow 2298   WebkitPaddingEnd?: Property$PaddingInlineEnd<TLength> | Array<Property$PaddingInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2299   WebkitPaddingStart?: Property$PaddingInlineStart<TLength> | Array<Property$PaddingInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2320   WebkitTextUnderlinePosition?: Property$TextUnderlinePosition | Array<Property$TextUnderlinePosition>,

./node_modules/csstype/index.js.flow 2386   offsetInline?: Property$InsetInline<TLength> | Array<Property$InsetInline<TLength>>,

./node_modules/csstype/index.js.flow 2387   offsetInlineEnd?: Property$InsetInlineEnd<TLength> | Array<Property$InsetInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2388   offsetInlineStart?: Property$InsetInlineStart<TLength> | Array<Property$InsetInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2408   MozBackgroundInlinePolicy?: Property$BoxDecorationBreak | Array<Property$BoxDecorationBreak>,

./node_modules/csstype/index.js.flow 2427   MozOutline?: Property$Outline<TLength> | Array<Property$Outline<TLength>>,

./node_modules/csstype/index.js.flow 2428   MozOutlineColor?: Property$OutlineColor | Array<Property$OutlineColor>,

./node_modules/csstype/index.js.flow 2429   MozOutlineRadius?: Property$MozOutlineRadius<TLength> | Array<Property$MozOutlineRadius<TLength>>,

./node_modules/csstype/index.js.flow 2430   MozOutlineRadiusBottomleft?: Property$MozOutlineRadiusBottomleft<TLength> | Array<Property$MozOutlineRadiusBottomleft<TLength>>,

./node_modules/csstype/index.js.flow 2431   MozOutlineRadiusBottomright?: Property$MozOutlineRadiusBottomright<TLength> | Array<Property$MozOutlineRadiusBottomright<TLength>>,

./node_modules/csstype/index.js.flow 2432   MozOutlineRadiusTopleft?: Property$MozOutlineRadiusTopleft<TLength> | Array<Property$MozOutlineRadiusTopleft<TLength>>,

./node_modules/csstype/index.js.flow 2433   MozOutlineRadiusTopright?: Property$MozOutlineRadiusTopright<TLength> | Array<Property$MozOutlineRadiusTopright<TLength>>,

./node_modules/csstype/index.js.flow 2434   MozOutlineStyle?: Property$OutlineStyle | Array<Property$OutlineStyle>,

./node_modules/csstype/index.js.flow 2435   MozOutlineWidth?: Property$OutlineWidth<TLength> | Array<Property$OutlineWidth<TLength>>,

./node_modules/csstype/index.js.flow 2478   alignmentBaseline?: Property$AlignmentBaseline | Array<Property$AlignmentBaseline>,

./node_modules/csstype/index.js.flow 2479   baselineShift?: Property$BaselineShift<TLength> | Array<Property$BaselineShift<TLength>>,

./node_modules/csstype/index.js.flow 2489   dominantBaseline?: Property$DominantBaseline | Array<Property$DominantBaseline>,

./node_modules/csstype/index.js.flow 2508   lineHeight?: Property$LineHeight<TLength> | Array<Property$LineHeight<TLength>>,

./node_modules/csstype/index.js.flow 2599   "border-inline-color"?: Property$BorderInlineColor | Array<Property$BorderInlineColor>,

./node_modules/csstype/index.js.flow 2600   "border-inline-end-color"?: Property$BorderInlineEndColor | Array<Property$BorderInlineEndColor>,

./node_modules/csstype/index.js.flow 2601   "border-inline-end-style"?: Property$BorderInlineEndStyle | Array<Property$BorderInlineEndStyle>,

./node_modules/csstype/index.js.flow 2602   "border-inline-end-width"?: Property$BorderInlineEndWidth<TLength> | Array<Property$BorderInlineEndWidth<TLength>>,

./node_modules/csstype/index.js.flow 2603   "border-inline-start-color"?: Property$BorderInlineStartColor | Array<Property$BorderInlineStartColor>,

./node_modules/csstype/index.js.flow 2604   "border-inline-start-style"?: Property$BorderInlineStartStyle | Array<Property$BorderInlineStartStyle>,

./node_modules/csstype/index.js.flow 2605   "border-inline-start-width"?: Property$BorderInlineStartWidth<TLength> | Array<Property$BorderInlineStartWidth<TLength>>,

./node_modules/csstype/index.js.flow 2606   "border-inline-style"?: Property$BorderInlineStyle | Array<Property$BorderInlineStyle>,

./node_modules/csstype/index.js.flow 2607   "border-inline-width"?: Property$BorderInlineWidth<TLength> | Array<Property$BorderInlineWidth<TLength>>,

./node_modules/csstype/index.js.flow 2698   "inline-size"?: Property$InlineSize<TLength> | Array<Property$InlineSize<TLength>>,

./node_modules/csstype/index.js.flow 2703   "inset-inline"?: Property$InsetInline<TLength> | Array<Property$InsetInline<TLength>>,

./node_modules/csstype/index.js.flow 2704   "inset-inline-end"?: Property$InsetInlineEnd<TLength> | Array<Property$InsetInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2705   "inset-inline-start"?: Property$InsetInlineStart<TLength> | Array<Property$InsetInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2713   "line-break"?: Property$LineBreak | Array<Property$LineBreak>,

./node_modules/csstype/index.js.flow 2714   "line-height"?: Property$LineHeight<TLength> | Array<Property$LineHeight<TLength>>,

./node_modules/csstype/index.js.flow 2715   "line-height-step"?: Property$LineHeightStep<TLength> | Array<Property$LineHeightStep<TLength>>,

./node_modules/csstype/index.js.flow 2723   "margin-inline"?: Property$MarginInline<TLength> | Array<Property$MarginInline<TLength>>,

./node_modules/csstype/index.js.flow 2724   "margin-inline-end"?: Property$MarginInlineEnd<TLength> | Array<Property$MarginInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2725   "margin-inline-start"?: Property$MarginInlineStart<TLength> | Array<Property$MarginInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2747   "max-inline-size"?: Property$MaxInlineSize<TLength> | Array<Property$MaxInlineSize<TLength>>,

./node_modules/csstype/index.js.flow 2748   "max-lines"?: Property$MaxLines | Array<Property$MaxLines>,

./node_modules/csstype/index.js.flow 2752   "min-inline-size"?: Property$MinInlineSize<TLength> | Array<Property$MinInlineSize<TLength>>,

./node_modules/csstype/index.js.flow 2760   "offset-anchor"?: Property$OffsetAnchor<TLength> | Array<Property$OffsetAnchor<TLength>>,

./node_modules/csstype/index.js.flow 2768   "outline-color"?: Property$OutlineColor | Array<Property$OutlineColor>,

./node_modules/csstype/index.js.flow 2769   "outline-offset"?: Property$OutlineOffset<TLength> | Array<Property$OutlineOffset<TLength>>,

./node_modules/csstype/index.js.flow 2770   "outline-style"?: Property$OutlineStyle | Array<Property$OutlineStyle>,

./node_modules/csstype/index.js.flow 2771   "outline-width"?: Property$OutlineWidth<TLength> | Array<Property$OutlineWidth<TLength>>,

./node_modules/csstype/index.js.flow 2772   "overflow-anchor"?: Property$OverflowAnchor | Array<Property$OverflowAnchor>,

./node_modules/csstype/index.js.flow 2776   "overflow-inline"?: Property$OverflowInline | Array<Property$OverflowInline>,

./node_modules/csstype/index.js.flow 2781   "overscroll-behavior-inline"?: Property$OverscrollBehaviorInline | Array<Property$OverscrollBehaviorInline>,

./node_modules/csstype/index.js.flow 2788   "padding-inline"?: Property$PaddingInline<TLength> | Array<Property$PaddingInline<TLength>>,

./node_modules/csstype/index.js.flow 2789   "padding-inline-end"?: Property$PaddingInlineEnd<TLength> | Array<Property$PaddingInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2790   "padding-inline-start"?: Property$PaddingInlineStart<TLength> | Array<Property$PaddingInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2818   "scroll-margin-inline"?: Property$ScrollMarginInline<TLength> | Array<Property$ScrollMarginInline<TLength>>,

./node_modules/csstype/index.js.flow 2819   "scroll-margin-inline-end"?: Property$ScrollMarginInlineEnd<TLength> | Array<Property$ScrollMarginInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2820   "scroll-margin-inline-start"?: Property$ScrollMarginInlineStart<TLength> | Array<Property$ScrollMarginInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2829   "scroll-padding-inline"?: Property$ScrollPaddingInline<TLength> | Array<Property$ScrollPaddingInline<TLength>>,

./node_modules/csstype/index.js.flow 2830   "scroll-padding-inline-end"?: Property$ScrollPaddingInlineEnd<TLength> | Array<Property$ScrollPaddingInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2831   "scroll-padding-inline-start"?: Property$ScrollPaddingInlineStart<TLength> | Array<Property$ScrollPaddingInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2855   "text-decoration-line"?: Property$TextDecorationLine | Array<Property$TextDecorationLine>,

./node_modules/csstype/index.js.flow 2872   "text-underline-offset"?: Property$TextUnderlineOffset<TLength> | Array<Property$TextUnderlineOffset<TLength>>,

./node_modules/csstype/index.js.flow 2873   "text-underline-position"?: Property$TextUnderlinePosition | Array<Property$TextUnderlinePosition>,

./node_modules/csstype/index.js.flow 2913   "border-inline"?: Property$BorderInline<TLength> | Array<Property$BorderInline<TLength>>,

./node_modules/csstype/index.js.flow 2914   "border-inline-end"?: Property$BorderInlineEnd<TLength> | Array<Property$BorderInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2915   "border-inline-start"?: Property$BorderInlineStart<TLength> | Array<Property$BorderInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2933   "line-clamp"?: Property$LineClamp | Array<Property$LineClamp>,

./node_modules/csstype/index.js.flow 2940   outline?: Property$Outline<TLength> | Array<Property$Outline<TLength>>,

./node_modules/csstype/index.js.flow 2968   "-moz-border-end-color"?: Property$BorderInlineEndColor | Array<Property$BorderInlineEndColor>,

./node_modules/csstype/index.js.flow 2969   "-moz-border-end-style"?: Property$BorderInlineEndStyle | Array<Property$BorderInlineEndStyle>,

./node_modules/csstype/index.js.flow 2970   "-moz-border-end-width"?: Property$BorderInlineEndWidth<TLength> | Array<Property$BorderInlineEndWidth<TLength>>,

./node_modules/csstype/index.js.flow 2973   "-moz-border-start-color"?: Property$BorderInlineStartColor | Array<Property$BorderInlineStartColor>,

./node_modules/csstype/index.js.flow 2974   "-moz-border-start-style"?: Property$BorderInlineStartStyle | Array<Property$BorderInlineStartStyle>,

./node_modules/csstype/index.js.flow 2989   "-moz-margin-end"?: Property$MarginInlineEnd<TLength> | Array<Property$MarginInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2990   "-moz-margin-start"?: Property$MarginInlineStart<TLength> | Array<Property$MarginInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 2993   "-moz-padding-end"?: Property$PaddingInlineEnd<TLength> | Array<Property$PaddingInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 2994   "-moz-padding-start"?: Property$PaddingInlineStart<TLength> | Array<Property$PaddingInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 3030   "-ms-hyphenate-limit-lines"?: Property$MsHyphenateLimitLines | Array<Property$MsHyphenateLimitLines>,

./node_modules/csstype/index.js.flow 3035   "-ms-line-break"?: Property$LineBreak | Array<Property$LineBreak>,

./node_modules/csstype/index.js.flow 3124   "-webkit-line-break"?: Property$LineBreak | Array<Property$LineBreak>,

./node_modules/csstype/index.js.flow 3125   "-webkit-line-clamp"?: Property$WebkitLineClamp | Array<Property$WebkitLineClamp>,

./node_modules/csstype/index.js.flow 3126   "-webkit-margin-end"?: Property$MarginInlineEnd<TLength> | Array<Property$MarginInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 3127   "-webkit-margin-start"?: Property$MarginInlineStart<TLength> | Array<Property$MarginInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 3145   "-webkit-max-inline-size"?: Property$MaxInlineSize<TLength> | Array<Property$MaxInlineSize<TLength>>,

./node_modules/csstype/index.js.flow 3148   "-webkit-padding-end"?: Property$PaddingInlineEnd<TLength> | Array<Property$PaddingInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 3149   "-webkit-padding-start"?: Property$PaddingInlineStart<TLength> | Array<Property$PaddingInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 3159   "-webkit-text-decoration-line"?: Property$TextDecorationLine | Array<Property$TextDecorationLine>,

./node_modules/csstype/index.js.flow 3170   "-webkit-text-underline-position"?: Property$TextUnderlinePosition | Array<Property$TextUnderlinePosition>,

./node_modules/csstype/index.js.flow 3223   "box-lines"?: Property$BoxLines | Array<Property$BoxLines>,

./node_modules/csstype/index.js.flow 3236   "offset-inline"?: Property$InsetInline<TLength> | Array<Property$InsetInline<TLength>>,

./node_modules/csstype/index.js.flow 3237   "offset-inline-end"?: Property$InsetInlineEnd<TLength> | Array<Property$InsetInlineEnd<TLength>>,

./node_modules/csstype/index.js.flow 3238   "offset-inline-start"?: Property$InsetInlineStart<TLength> | Array<Property$InsetInlineStart<TLength>>,

./node_modules/csstype/index.js.flow 3250   "-khtml-box-lines"?: Property$BoxLines | Array<Property$BoxLines>,

./node_modules/csstype/index.js.flow 3254   "-khtml-line-break"?: Property$LineBreak | Array<Property$LineBreak>,

./node_modules/csstype/index.js.flow 3258   "-moz-background-inline-policy"?: Property$BoxDecorationBreak | Array<Property$BoxDecorationBreak>,

./node_modules/csstype/index.js.flow 3277   "-moz-outline"?: Property$Outline<TLength> | Array<Property$Outline<TLength>>,

./node_modules/csstype/index.js.flow 3278   "-moz-outline-color"?: Property$OutlineColor | Array<Property$OutlineColor>,

./node_modules/csstype/index.js.flow 3279   "-moz-outline-radius"?: Property$MozOutlineRadius<TLength> | Array<Property$MozOutlineRadius<TLength>>,

./node_modules/csstype/index.js.flow 3280   "-moz-outline-radius-bottomleft"?: Property$MozOutlineRadiusBottomleft<TLength> | Array<Property$MozOutlineRadiusBottomleft<TLength>>,

./node_modules/csstype/index.js.flow 3281   "-moz-outline-radius-bottomright"?: Property$MozOutlineRadiusBottomright<TLength> | Array<Property$MozOutlineRadiusBottomright<TLength>>,

./node_modules/csstype/index.js.flow 3282   "-moz-outline-radius-topleft"?: Property$MozOutlineRadiusTopleft<TLength> | Array<Property$MozOutlineRadiusTopleft<TLength>>,

./node_modules/csstype/index.js.flow 3283   "-moz-outline-radius-topright"?: Property$MozOutlineRadiusTopright<TLength> | Array<Property$MozOutlineRadiusTopright<TLength>>,

./node_modules/csstype/index.js.flow 3284   "-moz-outline-style"?: Property$OutlineStyle | Array<Property$OutlineStyle>,

./node_modules/csstype/index.js.flow 3285   "-moz-outline-width"?: Property$OutlineWidth<TLength> | Array<Property$OutlineWidth<TLength>>,

./node_modules/csstype/index.js.flow 3288   "-moz-text-decoration-line"?: Property$TextDecorationLine | Array<Property$TextDecorationLine>,

./node_modules/csstype/index.js.flow 3319   "-webkit-box-lines"?: Property$BoxLines | Array<Property$BoxLines>,

./node_modules/csstype/index.js.flow 3328   "alignment-baseline"?: Property$AlignmentBaseline | Array<Property$AlignmentBaseline>,

./node_modules/csstype/index.js.flow 3329   "baseline-shift"?: Property$BaselineShift<TLength> | Array<Property$BaselineShift<TLength>>,

./node_modules/csstype/index.js.flow 3339   "dominant-baseline"?: Property$DominantBaseline | Array<Property$DominantBaseline>,

./node_modules/csstype/index.js.flow 3358   "line-height"?: Property$LineHeight<TLength> | Array<Property$LineHeight<TLength>>,

./node_modules/csstype/index.js.flow 3374   "stroke-linecap"?: Property$StrokeLinecap | Array<Property$StrokeLinecap>,

./node_modules/csstype/index.js.flow 3375   "stroke-linejoin"?: Property$StrokeLinejoin | Array<Property$StrokeLinejoin>,

./node_modules/csstype/index.js.flow 3379   "text-anchor"?: Property$TextAnchor | Array<Property$TextAnchor>,

./node_modules/csstype/index.js.flow 3482   | "::first-line"

./node_modules/csstype/index.js.flow 3504   | ":first-line"

./node_modules/csstype/index.js.flow 3690   | "[onoffline]"

./node_modules/csstype/index.js.flow 3691   | "[ononline]"

./node_modules/csstype/index.js.flow 3771   | "[alignment-baseline]"

./node_modules/csstype/index.js.flow 3782   | "[baseline-shift]"

./node_modules/csstype/index.js.flow 3810   | "[dominant-baseline]"

./node_modules/csstype/index.js.flow 3898   | "[overline-position]"

./node_modules/csstype/index.js.flow 3899   | "[overline-thickness]"

./node_modules/csstype/index.js.flow 3951   | "[stroke-linecap]"

./node_modules/csstype/index.js.flow 3952   | "[stroke-linejoin]"

./node_modules/csstype/index.js.flow 3964   | "[text-anchor]"

./node_modules/csstype/index.js.flow 3976   | "[underline-position]"

./node_modules/csstype/index.js.flow 3977   | "[underline-thickness]"

./node_modules/csstype/index.js.flow 4016 export type Property$AlignContent = Globals | DataType$ContentDistribution | DataType$ContentPosition | "baseline" | "normal" | string;

./node_modules/csstype/index.js.flow 4018 export type Property$AlignItems = Globals | DataType$SelfPosition | "baseline" | "normal" | "stretch" | string;

./node_modules/csstype/index.js.flow 4020 export type Property$AlignSelf = Globals | DataType$SelfPosition | "auto" | "baseline" | "normal" | "stretch" | string;

./node_modules/csstype/index.js.flow 4022 export type Property$AlignTracks = Globals | DataType$ContentDistribution | DataType$ContentPosition | "baseline" | "normal" | string;

./node_modules/csstype/index.js.flow 4165 export type Property$BorderInline<TLength = string | 0> = Globals | DataType$LineWidth<TLength> | DataType$LineStyle | DataType$Color | string;

./node_modules/csstype/index.js.flow 4167 export type Property$BorderInlineColor = Globals | DataType$Color | string;

./node_modules/csstype/index.js.flow 4169 export type Property$BorderInlineEnd<TLength = string | 0> = Globals | DataType$LineWidth<TLength> | DataType$LineStyle | DataType$Color | string;

./node_modules/csstype/index.js.flow 4171 export type Property$BorderInlineEndColor = Globals | DataType$Color;

./node_modules/csstype/index.js.flow 4173 export type Property$BorderInlineEndStyle = Globals | DataType$LineStyle;

./node_modules/csstype/index.js.flow 4175 export type Property$BorderInlineEndWidth<TLength = string | 0> = Globals | DataType$LineWidth<TLength>;

./node_modules/csstype/index.js.flow 4177 export type Property$BorderInlineStart<TLength = string | 0> = Globals | DataType$LineWidth<TLength> | DataType$LineStyle | DataType$Color | string;

./node_modules/csstype/index.js.flow 4179 export type Property$BorderInlineStartColor = Globals | DataType$Color;

./node_modules/csstype/index.js.flow 4181 export type Property$BorderInlineStartStyle = Globals | DataType$LineStyle;

./node_modules/csstype/index.js.flow 4183 export type Property$BorderInlineStartWidth<TLength = string | 0> = Globals | DataType$LineWidth<TLength>;

./node_modules/csstype/index.js.flow 4185 export type Property$BorderInlineStyle = Globals | DataType$LineStyle;

./node_modules/csstype/index.js.flow 4187 export type Property$BorderInlineWidth<TLength = string | 0> = Globals | DataType$LineWidth<TLength>;

./node_modules/csstype/index.js.flow 4231 export type Property$BoxAlign = Globals | "baseline" | "center" | "end" | "start" | "stretch";

./node_modules/csstype/index.js.flow 4245 export type Property$BoxOrient = Globals | "block-axis" | "horizontal" | "inherit" | "inline-axis" | "vertical";

./node_modules/csstype/index.js.flow 4289 export type Property$CaptionSide = Globals | "block-end" | "block-start" | "bottom" | "inline-end" | "inline-start" | "top";

./node_modules/csstype/index.js.flow 4293 export type Property$Clear = Globals | "both" | "inline-end" | "inline-start" | "left" | "none" | "right";

./node_modules/csstype/index.js.flow 4421 export type Property$Float = Globals | "inline-end" | "inline-start" | "left" | "none" | "right";

./node_modules/csstype/index.js.flow 4585 export type Property$InlineSize<TLength = string | 0> =

./node_modules/csstype/index.js.flow 4606 export type Property$InsetInline<TLength = string | 0> = Globals | TLength | "auto" | string;

./node_modules/csstype/index.js.flow 4608 export type Property$InsetInlineEnd<TLength = string | 0> = Globals | TLength | "auto" | string;

./node_modules/csstype/index.js.flow 4610 export type Property$InsetInlineStart<TLength = string | 0> = Globals | TLength | "auto" | string;

./node_modules/csstype/index.js.flow 4616 export type Property$JustifyItems = Globals | DataType$SelfPosition | "baseline" | "left" | "legacy" | "normal" | "right" | "stretch" | string;

./node_modules/csstype/index.js.flow 4618 export type Property$JustifySelf = Globals | DataType$SelfPosition | "auto" | "baseline" | "left" | "normal" | "right" | "stretch" | string;

./node_modules/csstype/index.js.flow 4652 export type Property$MarginInline<TLength = string | 0> = Globals | TLength | "auto" | string;

./node_modules/csstype/index.js.flow 4654 export type Property$MarginInlineEnd<TLength = string | 0> = Globals | TLength | "auto" | string;

./node_modules/csstype/index.js.flow 4656 export type Property$MarginInlineStart<TLength = string | 0> = Globals | TLength | "auto" | string;

./node_modules/csstype/index.js.flow 4728 export type Property$MaxInlineSize<TLength = string | 0> =

./node_modules/csstype/index.js.flow 4787 export type Property$MinInlineSize<TLength = string | 0> =

./node_modules/csstype/index.js.flow 4840 export type Property$Outline<TLength = string | 0> = Globals | DataType$Color | DataType$LineStyle | DataType$LineWidth<TLength> | "auto" | "invert" | string;

./node_modules/csstype/index.js.flow 4842 export type Property$OutlineColor = Globals | DataType$Color | "invert";

./node_modules/csstype/index.js.flow 4844 export type Property$OutlineOffset<TLength = string | 0> = Globals | TLength;

./node_modules/csstype/index.js.flow 4846 export type Property$OutlineStyle = Globals | DataType$LineStyle | "auto" | string;

./node_modules/csstype/index.js.flow 4848 export type Property$OutlineWidth<TLength = string | 0> = Globals | DataType$LineWidth<TLength>;

./node_modules/csstype/index.js.flow 4860 export type Property$OverflowInline = Globals | "auto" | "clip" | "hidden" | "scroll" | "visible";

./node_modules/csstype/index.js.flow 4872 export type Property$OverscrollBehaviorInline = Globals | "auto" | "contain" | "none";

./node_modules/csstype/index.js.flow 4888 export type Property$PaddingInline<TLength = string | 0> = Globals | TLength | string;

./node_modules/csstype/index.js.flow 4890 export type Property$PaddingInlineEnd<TLength = string | 0> = Globals | TLength | string;

./node_modules/csstype/index.js.flow 4892 export type Property$PaddingInlineStart<TLength = string | 0> = Globals | TLength | string;

./node_modules/csstype/index.js.flow 4912 export type Property$PlaceContent = Globals | DataType$ContentDistribution | DataType$ContentPosition | "baseline" | "normal" | string;

./node_modules/csstype/index.js.flow 4914 export type Property$PlaceItems = Globals | DataType$SelfPosition | "baseline" | "normal" | "stretch" | string;

./node_modules/csstype/index.js.flow 4916 export type Property$PlaceSelf = Globals | DataType$SelfPosition | "auto" | "baseline" | "normal" | "stretch" | string;

./node_modules/csstype/index.js.flow 4924 export type Property$Resize = Globals | "block" | "both" | "horizontal" | "inline" | "none" | "vertical";

./node_modules/csstype/index.js.flow 4952 export type Property$ScrollMarginInline<TLength = string | 0> = Globals | TLength | string;

./node_modules/csstype/index.js.flow 4954 export type Property$ScrollMarginInlineEnd<TLength = string | 0> = Globals | TLength;

./node_modules/csstype/index.js.flow 4956 export type Property$ScrollMarginInlineStart<TLength = string | 0> = Globals | TLength;

./node_modules/csstype/index.js.flow 4974 export type Property$ScrollPaddingInline<TLength = string | 0> = Globals | TLength | "auto" | string;

./node_modules/csstype/index.js.flow 4976 export type Property$ScrollPaddingInlineEnd<TLength = string | 0> = Globals | TLength | "auto" | string;

./node_modules/csstype/index.js.flow 4978 export type Property$ScrollPaddingInlineStart<TLength = string | 0> = Globals | TLength | "auto" | string;

./node_modules/csstype/index.js.flow 4998 export type Property$ScrollSnapType = Globals | "block" | "both" | "inline" | "none" | "x" | "y" | string;

./node_modules/csstype/index.js.flow 5039   | "line-through"

./node_modules/csstype/index.js.flow 5041   | "overline"

./node_modules/csstype/index.js.flow 5044   | "underline"

./node_modules/csstype/index.js.flow 5050 export type Property$TextDecorationLine = Globals | "blink" | "grammar-error" | "line-through" | "none" | "overline" | "spelling-error" | "underline" | string;

./node_modules/csstype/index.js.flow 5084 export type Property$TextUnderlineOffset<TLength = string | 0> = Globals | TLength | "auto" | string;

./node_modules/csstype/index.js.flow 5086 export type Property$TextUnderlinePosition = Globals | "auto" | "from-font" | "left" | "right" | "under" | string;

./node_modules/csstype/index.js.flow 5144 export type Property$VerticalAlign<TLength = string | 0> = Globals | TLength | "baseline" | "bottom" | "middle" | "sub" | "super" | "text-bottom" | "text-top" | "top" | string;

./node_modules/csstype/index.js.flow 5148 export type Property$WhiteSpace = Globals | "-moz-pre-wrap" | "break-spaces" | "normal" | "nowrap" | "pre" | "pre-line" | "pre-wrap";

./node_modules/csstype/index.js.flow 5279   | "textfield-multiline"

./node_modules/csstype/index.js.flow 5290   | "treeline"

./node_modules/csstype/index.js.flow 5313 export type Property$MozOrient = Globals | "block" | "horizontal" | "inline" | "vertical";

./node_modules/csstype/index.js.flow 5315 export type Property$MozOutlineRadius<TLength = string | 0> = Globals | TLength | string;

./node_modules/csstype/index.js.flow 5317 export type Property$MozOutlineRadiusBottomleft<TLength = string | 0> = Globals | TLength | string;

./node_modules/csstype/index.js.flow 5319 export type Property$MozOutlineRadiusBottomright<TLength = string | 0> = Globals | TLength | string;

./node_modules/csstype/index.js.flow 5321 export type Property$MozOutlineRadiusTopleft<TLength = string | 0> = Globals | TLength | string;

./node_modules/csstype/index.js.flow 5323 export type Property$MozOutlineRadiusTopright<TLength = string | 0> = Globals | TLength | string;

./node_modules/csstype/index.js.flow 5549 export type Property$AlignmentBaseline =

./node_modules/csstype/index.js.flow 5554   | "baseline"

./node_modules/csstype/index.js.flow 5564 export type Property$BaselineShift<TLength = string | 0> = Globals | TLength | "baseline" | "sub" | "super" | string;

./node_modules/csstype/index.js.flow 5568 export type Property$ColorInterpolation = Globals | "auto" | "linearRGB" | "sRGB";

./node_modules/csstype/index.js.flow 5572 export type Property$DominantBaseline =

./node_modules/csstype/index.js.flow 5699   lineGapOverride?: AtRule$LineGapOverride,

./node_modules/csstype/index.js.flow 5717   "line-gap-override"?: AtRule$LineGapOverride,

./node_modules/csstype/index.js.flow 5735   lineGapOverride?: AtRule$LineGapOverride | Array<AtRule$LineGapOverride>,

./node_modules/csstype/index.js.flow 5753   "line-gap-override"?: AtRule$LineGapOverride | Array<AtRule$LineGapOverride>,

./node_modules/csstype/index.js.flow 6073   | "-ms-inline-flexbox"

./node_modules/csstype/index.js.flow 6074   | "-ms-inline-grid"

./node_modules/csstype/index.js.flow 6075   | "-webkit-inline-flex"

./node_modules/csstype/index.js.flow 6076   | "inline-block"

./node_modules/csstype/index.js.flow 6077   | "inline-flex"

./node_modules/csstype/index.js.flow 6078   | "inline-grid"

./node_modules/csstype/index.js.flow 6079   | "inline-list-item"

./node_modules/csstype/index.js.flow 6080   | "inline-table";

./node_modules/csstype/index.js.flow 6082 type DataType$DisplayOutside = "block" | "inline" | "run-in";

./node_modules/csstype/index.js.flow 6084 type DataType$EasingFunction = DataType$CubicBezierTimingFunction | DataType$StepTimingFunction | "linear";

./node_modules/csstype/index.js.flow 6211   | "linen"

./node_modules/is-regex/index.js 33 	// eslint-disable-next-line consistent-return

./node_modules/websocket-extensions/lib/websocket_extensions.js 4     Pipeline = require('./pipeline');

./node_modules/websocket-extensions/lib/websocket_extensions.js 88     this._pipeline = new Pipeline(sessions);

./node_modules/websocket-extensions/lib/websocket_extensions.js 109     this._pipeline = new Pipeline(sessions);

./node_modules/websocket-extensions/lib/websocket_extensions.js 133     this._pipeline.processIncomingMessage(message, callback, context);

./node_modules/websocket-extensions/lib/websocket_extensions.js 137     this._pipeline.processOutgoingMessage(message, callback, context);

./node_modules/websocket-extensions/lib/websocket_extensions.js 141     if (!this._pipeline) return callback.call(context);

./node_modules/websocket-extensions/lib/websocket_extensions.js 142     this._pipeline.close(callback, context);

./node_modules/websocket-extensions/lib/pipeline/index.js 6 var Pipeline = function(sessions) {

./node_modules/websocket-extensions/lib/pipeline/index.js 11 Pipeline.prototype.processIncomingMessage = function(message, callback, context) {

./node_modules/websocket-extensions/lib/pipeline/index.js 16 Pipeline.prototype.processOutgoingMessage = function(message, callback, context) {

./node_modules/websocket-extensions/lib/pipeline/index.js 21 Pipeline.prototype.close = function(callback, context) {

./node_modules/websocket-extensions/lib/pipeline/index.js 29 Pipeline.prototype._loop = function(direction, start, end, step, message, callback, context) {

./node_modules/websocket-extensions/lib/pipeline/index.js 47 module.exports = Pipeline;

./node_modules/ansi-html-community/index.js 66       if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast

./node_modules/minimist/test/parse.js 69 test('newlines in params' , function (t) {

./node_modules/minimist/test/parse.js 75     // line"

./node_modules/object-assign/index.js 30 		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers

./node_modules/core-js-pure/postinstall.js 55   // eslint-disable-next-line no-console, regexp/no-control-character -- output

./node_modules/core-js-pure/modules/es.object.freeze.js 7 // eslint-disable-next-line es/no-object-freeze -- safe

./node_modules/core-js-pure/modules/es.aggregate-error.js 17     // eslint-disable-next-line unicorn/error-message -- expected

./node_modules/core-js-pure/modules/es.string.from-code-point.js 5 // eslint-disable-next-line es/no-string-fromcodepoint -- required for testing

./node_modules/core-js-pure/modules/es.string.from-code-point.js 14   // eslint-disable-next-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/modules/es.object.get-own-property-names.js 5 // eslint-disable-next-line es/no-object-getownpropertynames -- required for testing

./node_modules/core-js-pure/modules/es.object.is-extensible.js 5 // eslint-disable-next-line es/no-object-isextensible -- safe

./node_modules/core-js-pure/modules/es.object.is-frozen.js 5 // eslint-disable-next-line es/no-object-isfrozen -- safe

./node_modules/core-js-pure/modules/es.math.imul.js 4 // eslint-disable-next-line es/no-math-imul -- required for testing

./node_modules/core-js-pure/modules/es.reflect.set.js 42   // eslint-disable-next-line es/no-reflect -- required for testing

./node_modules/core-js-pure/modules/web.timers.js 14       // eslint-disable-next-line no-new-func -- spec requirement

./node_modules/core-js-pure/modules/es.json.stringify.js 28     // eslint-disable-next-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/modules/es.string.starts-with.js 11 // eslint-disable-next-line es/no-string-prototype-startswith -- safe

./node_modules/core-js-pure/modules/es.reflect.define-property.js 10   // eslint-disable-next-line es/no-reflect -- required for testing

./node_modules/core-js-pure/modules/es.object.seal.js 7 // eslint-disable-next-line es/no-object-seal -- safe

./node_modules/core-js-pure/modules/es.date.to-json.js 17   // eslint-disable-next-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/modules/es.array.last-index-of.js 6 // eslint-disable-next-line es/no-array-prototype-lastindexof -- required for testing

./node_modules/core-js-pure/modules/web.url.js 35 // eslint-disable-next-line regexp/no-obscure-range -- safe

./node_modules/core-js-pure/modules/web.url.js 113 // eslint-disable-next-line max-statements -- TODO

./node_modules/core-js-pure/modules/web.url.js 335 // eslint-disable-next-line max-statements -- TODO

./node_modules/core-js-pure/modules/web.url.js 991   // eslint-disable-next-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/modules/web.url.js 997   // eslint-disable-next-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/modules/es.object.assign.js 6 // eslint-disable-next-line es/no-object-assign -- required for testing

./node_modules/core-js-pure/modules/es.promise.js 246   // eslint-disable-next-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/modules/es.string.ends-with.js 11 // eslint-disable-next-line es/no-string-prototype-endswith -- safe

./node_modules/core-js-pure/modules/es.symbol.js 280     // eslint-disable-next-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/modules/es.array.for-each.js 7 // eslint-disable-next-line es/no-array-prototype-foreach -- safe

./node_modules/core-js-pure/modules/es.string.anchor.js 6 // `String.prototype.anchor` method

./node_modules/core-js-pure/modules/es.string.anchor.js 7 // https://tc39.es/ecma262/#sec-string.prototype.anchor

./node_modules/core-js-pure/modules/es.string.anchor.js 8 $({ target: 'String', proto: true, forced: forcedStringHTMLMethod('anchor') }, {

./node_modules/core-js-pure/modules/es.string.anchor.js 9   anchor: function anchor(name) {

./node_modules/core-js-pure/modules/es.math.sinh.js 10   // eslint-disable-next-line es/no-math-sinh -- required for testing

./node_modules/core-js-pure/modules/es.array.slice.js 28     // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

./node_modules/core-js-pure/modules/es.string.substr.js 11 // eslint-disable-next-line unicorn/prefer-string-slice -- required for testing

./node_modules/core-js-pure/modules/es.weak-map.js 12 // eslint-disable-next-line es/no-object-isextensible -- safe

./node_modules/core-js-pure/modules/esnext.map.merge.js 11   // eslint-disable-next-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/modules/es.array.concat.js 41   // eslint-disable-next-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/modules/es.math.asinh.js 3 // eslint-disable-next-line es/no-math-asinh -- required for testing

./node_modules/core-js-pure/modules/es.array.reverse.js 14     // eslint-disable-next-line no-self-assign -- dirty hack

./node_modules/core-js-pure/modules/es.string.trim-end.js 10 // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe

./node_modules/core-js-pure/modules/es.math.hypot.js 3 // eslint-disable-next-line es/no-math-hypot -- required for testing

./node_modules/core-js-pure/modules/es.math.hypot.js 15   // eslint-disable-next-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/modules/es.array.of.js 9   // eslint-disable-next-line es/no-array-of -- required for testing

./node_modules/core-js-pure/modules/es.array.from.js 6   // eslint-disable-next-line es/no-array-from -- required for testing

./node_modules/core-js-pure/modules/es.math.cosh.js 4 // eslint-disable-next-line es/no-math-cosh -- required for testing

./node_modules/core-js-pure/modules/es.number.is-nan.js 7     // eslint-disable-next-line no-self-compare -- NaN check

./node_modules/core-js-pure/modules/es.reflect.is-extensible.js 4 // eslint-disable-next-line es/no-object-isextensible -- safe

./node_modules/core-js-pure/modules/es.math.acosh.js 4 // eslint-disable-next-line es/no-math-acosh -- required for testing

./node_modules/core-js-pure/modules/es.math.atanh.js 3 // eslint-disable-next-line es/no-math-atanh -- required for testing

./node_modules/core-js-pure/modules/es.number.parse-float.js 6 // eslint-disable-next-line es/no-number-parsefloat -- required for testing

./node_modules/core-js-pure/modules/esnext.array.is-template-object.js 4 // eslint-disable-next-line es/no-object-isfrozen -- safe

./node_modules/core-js-pure/modules/es.number.to-fixed.js 81     // eslint-disable-next-line no-self-compare -- NaN check

./node_modules/core-js-pure/modules/es.math.expm1.js 6 // eslint-disable-next-line es/no-math-expm1 -- required for testing

./node_modules/core-js-pure/modules/es.string.trim-start.js 10 // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe

./node_modules/core-js-pure/modules/es.string.match-all.js 34 // eslint-disable-next-line max-len -- ignore

./node_modules/core-js-pure/modules/es.object.prevent-extensions.js 7 // eslint-disable-next-line es/no-object-preventextensions -- safe

./node_modules/core-js-pure/modules/es.number.parse-int.js 6 // eslint-disable-next-line es/no-number-parseint -- required for testing

./node_modules/core-js-pure/modules/es.object.is-sealed.js 5 // eslint-disable-next-line es/no-object-issealed -- safe

./node_modules/core-js-pure/features/index.js 172 require('../modules/es.string.anchor');

./node_modules/core-js-pure/features/string/anchor.js 1 var parent = require('../../stable/string/anchor');

./node_modules/core-js-pure/features/string/virtual/anchor.js 1 var parent = require('../../../stable/string/virtual/anchor');

./node_modules/core-js-pure/es/index.js 172 require('../modules/es.string.anchor');

./node_modules/core-js-pure/es/json/index.js 5 // eslint-disable-next-line es/no-json -- safe

./node_modules/core-js-pure/es/json/stringify.js 4 // eslint-disable-next-line es/no-json -- safe

./node_modules/core-js-pure/es/json/stringify.js 7 // eslint-disable-next-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/es/string/index.js 24 require('../../modules/es.string.anchor');

./node_modules/core-js-pure/es/string/anchor.js 1 require('../../modules/es.string.anchor');

./node_modules/core-js-pure/es/string/anchor.js 4 module.exports = entryUnbind('String', 'anchor');

./node_modules/core-js-pure/es/string/virtual/index.js 22 require('../../../modules/es.string.anchor');

./node_modules/core-js-pure/es/string/virtual/anchor.js 1 require('../../../modules/es.string.anchor');

./node_modules/core-js-pure/es/string/virtual/anchor.js 4 module.exports = entryVirtual('String').anchor;

./node_modules/core-js-pure/internals/object-set-prototype-of.js 8 // eslint-disable-next-line es/no-object-setprototypeof -- safe

./node_modules/core-js-pure/internals/object-set-prototype-of.js 14     // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

./node_modules/core-js-pure/internals/native-symbol.js 5 // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing

./node_modules/core-js-pure/internals/async-iterator-prototype.js 22     // eslint-disable-next-line no-new-func -- we have no alternatives without usage of modern syntax

./node_modules/core-js-pure/internals/correct-prototype-getter.js 6   // eslint-disable-next-line es/no-object-getprototypeof -- required for testing

./node_modules/core-js-pure/internals/math-fround.js 16 // eslint-disable-next-line es/no-math-fround -- safe

./node_modules/core-js-pure/internals/math-fround.js 24   // eslint-disable-next-line no-self-compare -- NaN check

./node_modules/core-js-pure/internals/object-assign.js 10 // eslint-disable-next-line es/no-object-assign -- safe

./node_modules/core-js-pure/internals/object-assign.js 12 // eslint-disable-next-line es/no-object-defineproperty -- required for testing

./node_modules/core-js-pure/internals/object-assign.js 31   // eslint-disable-next-line es/no-symbol -- safe

./node_modules/core-js-pure/internals/object-assign.js 37 }) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`

./node_modules/core-js-pure/internals/string-punycode-to-ascii.js 77 // eslint-disable-next-line max-statements -- TODO

./node_modules/core-js-pure/internals/freezing.js 4   // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing

./node_modules/core-js-pure/internals/regexp-flags.js 11   if (that.multiline) result += 'm';

./node_modules/core-js-pure/internals/math-sign.js 3 // eslint-disable-next-line es/no-math-sign -- safe

./node_modules/core-js-pure/internals/math-sign.js 5   // eslint-disable-next-line no-self-compare -- NaN check

./node_modules/core-js-pure/internals/object-prototype-accessors-forced.js 14   // eslint-disable-next-line no-undef, no-useless-call -- required for testing

./node_modules/core-js-pure/internals/ieee754.js 18   // eslint-disable-next-line no-self-compare -- NaN check

./node_modules/core-js-pure/internals/ieee754.js 20     // eslint-disable-next-line no-self-compare -- NaN check

./node_modules/core-js-pure/internals/numeric-range-iterator.js 43   // eslint-disable-next-line no-self-compare -- NaN check

./node_modules/core-js-pure/internals/array-buffer-native.js 1 // eslint-disable-next-line es/no-typed-arrays -- safe

./node_modules/core-js-pure/internals/internal-metadata.js 15 // eslint-disable-next-line es/no-object-isextensible -- safe

./node_modules/core-js-pure/internals/is-integral-number.js 7 // eslint-disable-next-line es/no-number-isinteger -- safe

./node_modules/core-js-pure/internals/same-value.js 3 // eslint-disable-next-line es/no-object-is -- safe

./node_modules/core-js-pure/internals/same-value.js 5   // eslint-disable-next-line no-self-compare -- NaN check

./node_modules/core-js-pure/internals/object-keys.js 6 // eslint-disable-next-line es/no-object-keys -- safe

./node_modules/core-js-pure/internals/indexed-object.js 9   // eslint-disable-next-line no-prototype-builtins -- safe

./node_modules/core-js-pure/internals/object-get-prototype-of.js 12 // eslint-disable-next-line es/no-object-getprototypeof -- safe

./node_modules/core-js-pure/internals/object-get-own-property-names.js 8 // eslint-disable-next-line es/no-object-getownpropertynames -- safe

./node_modules/core-js-pure/internals/object-get-own-property-symbols.js 1 // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe

./node_modules/core-js-pure/internals/array-copy-within.js 10 // eslint-disable-next-line es/no-array-prototype-copywithin -- safe

./node_modules/core-js-pure/internals/array-includes.js 13     // eslint-disable-next-line no-self-compare -- NaN check

./node_modules/core-js-pure/internals/array-includes.js 16       // eslint-disable-next-line no-self-compare -- NaN check

./node_modules/core-js-pure/internals/object-property-is-enumerable.js 3 // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

./node_modules/core-js-pure/internals/to-integer-or-infinity.js 8   // eslint-disable-next-line no-self-compare -- safe

./node_modules/core-js-pure/internals/number-is-finite.js 7 // eslint-disable-next-line es/no-number-isfinite -- safe

./node_modules/core-js-pure/internals/function-name.js 5 // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

./node_modules/core-js-pure/internals/descriptors.js 5   // eslint-disable-next-line es/no-object-defineproperty -- required for testing

./node_modules/core-js-pure/internals/function-bind.js 11     // eslint-disable-next-line no-new-func -- we have no proper alternatives, IE8- only

./node_modules/core-js-pure/internals/is-array.js 5 // eslint-disable-next-line es/no-array-isarray -- safe

./node_modules/core-js-pure/internals/global.js 7   // eslint-disable-next-line es/no-global-this -- safe

./node_modules/core-js-pure/internals/global.js 10   // eslint-disable-next-line no-restricted-globals -- safe

./node_modules/core-js-pure/internals/global.js 13   // eslint-disable-next-line no-new-func -- fallback

./node_modules/core-js-pure/internals/array-for-each.js 11 // eslint-disable-next-line es/no-array-prototype-foreach -- safe

./node_modules/core-js-pure/internals/same-value-zero.js 4   // eslint-disable-next-line no-self-compare -- NaN check

./node_modules/core-js-pure/internals/math-log1p.js 5 // eslint-disable-next-line es/no-math-log1p -- safe

./node_modules/core-js-pure/internals/ie8-dom-define.js 7   // eslint-disable-next-line es/no-object-defineproperty -- requied for testing

./node_modules/core-js-pure/internals/task.js 26   // eslint-disable-next-line no-prototype-builtins -- safe

./node_modules/core-js-pure/internals/task.js 57       // eslint-disable-next-line no-new-func -- spec requirement

./node_modules/core-js-pure/internals/check-correctness-of-iteration.js 19   // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing

./node_modules/core-js-pure/internals/array-method-is-strict.js 7     // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing

./node_modules/core-js-pure/internals/set-global.js 5     // eslint-disable-next-line es/no-object-defineproperty -- safe

./node_modules/core-js-pure/internals/object-define-property.js 6 // eslint-disable-next-line es/no-object-defineproperty -- safe

./node_modules/core-js-pure/internals/object-define-properties.js 8 // eslint-disable-next-line es/no-object-defineproperties -- safe

./node_modules/core-js-pure/internals/object-get-own-property-descriptor.js 9 // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

./node_modules/core-js-pure/internals/math-expm1.js 1 // eslint-disable-next-line es/no-math-expm1 -- safe

./node_modules/core-js-pure/internals/is-iterable.js 11     // eslint-disable-next-line no-prototype-builtins -- safe

./node_modules/core-js-pure/stable/index.js 172 require('../modules/es.string.anchor');

./node_modules/core-js-pure/stable/instance/values.js 14     // eslint-disable-next-line no-prototype-builtins -- safe

./node_modules/core-js-pure/stable/instance/keys.js 14     // eslint-disable-next-line no-prototype-builtins -- safe

./node_modules/core-js-pure/stable/instance/for-each.js 14     // eslint-disable-next-line no-prototype-builtins -- safe

./node_modules/core-js-pure/stable/instance/entries.js 14     // eslint-disable-next-line no-prototype-builtins -- safe

./node_modules/core-js-pure/stable/string/anchor.js 1 var parent = require('../../es/string/anchor');

./node_modules/core-js-pure/stable/string/virtual/anchor.js 1 var parent = require('../../../es/string/virtual/anchor');

./node_modules/p-event/index.js 108 	const promise = arrayPromise.then(array => array[0]); // eslint-disable-line promise/prefer-await-to-then

./node_modules/commander/index.js 435  * Allow unknown options on the command line.

./node_modules/commander/package.json 4   "description": "the complete solution for node.js command-line programs",

./node_modules/http-proxy/lib/http-proxy/passes/ws-incoming.js 81     var createHttpHeader = function(line, headers) {

./node_modules/http-proxy/lib/http-proxy/passes/ws-incoming.js 94       }, [line])

./node_modules/npm-run-path/package.json 32 		"command-line",

./node_modules/@meta2d/core/src/core.js 672     Meta2d.prototype.drawLine = function (lineName) {

./node_modules/@meta2d/core/src/core.js 673         lineName && lockedError(this.store);

./node_modules/@meta2d/core/src/core.js 674         this.canvas.drawingLineName = lineName;

./node_modules/@meta2d/core/src/core.js 701                     case 0: return [4 /*yield*/, this.canvas.finishDrawline(end)];

./node_modules/@meta2d/core/src/core.js 721     Meta2d.prototype.updateLineType = function (pen, lineName) {

./node_modules/@meta2d/core/src/core.js 722         if (!pen || pen.name != 'line' || !lineName || !this.canvas[lineName]) {

./node_modules/@meta2d/core/src/core.js 725         pen.lineName = lineName;

./node_modules/@meta2d/core/src/core.js 734         this.canvas[lineName](this.store, pen, to);

./node_modules/@meta2d/core/src/core.js 735         if (pen.lineName === 'curve') {

./node_modules/@meta2d/core/src/core.js 2040         var lines = [];

./node_modules/@meta2d/core/src/core.js 2042             var lineId = _a.lineId;

./node_modules/@meta2d/core/src/core.js 2043             var line = _this.store.pens[lineId];

./node_modules/@meta2d/core/src/core.js 2044             if (!line) {

./node_modules/@meta2d/core/src/core.js 2050                     lines.push(line);

./node_modules/@meta2d/core/src/core.js 2054                     getToAnchor(line).connectTo === node.id && lines.push(line);

./node_modules/@meta2d/core/src/core.js 2058                     getFromAnchor(line).connectTo === node.id && lines.push(line);

./node_modules/@meta2d/core/src/core.js 2062         return lines;

./node_modules/@meta2d/core/src/core.js 2077             var lines = this.getLines(pen, 'out');

./node_modules/@meta2d/core/src/core.js 2080             lines.forEach(function (line) {

./node_modules/@meta2d/core/src/core.js 2082                 var lineNextNode = _this.nextNode(line);

./node_modules/@meta2d/core/src/core.js 2089                     for (var lineNextNode_1 = __values(lineNextNode), lineNextNode_1_1 = lineNextNode_1.next(); !lineNextNode_1_1.done; lineNextNode_1_1 = lineNextNode_1.next()) {

./node_modules/@meta2d/core/src/core.js 2090                         var node = lineNextNode_1_1.value;

./node_modules/@meta2d/core/src/core.js 2097                         if (lineNextNode_1_1 && !lineNextNode_1_1.done && (_a = lineNextNode_1.return)) _a.call(lineNextNode_1);

./node_modules/@meta2d/core/src/core.js 2118             var lines = this.getLines(pen, 'in');

./node_modules/@meta2d/core/src/core.js 2121             lines.forEach(function (line) {

./node_modules/@meta2d/core/src/core.js 2123                 var linePreNode = _this.previousNode(line);

./node_modules/@meta2d/core/src/core.js 2130                     for (var linePreNode_1 = __values(linePreNode), linePreNode_1_1 = linePreNode_1.next(); !linePreNode_1_1.done; linePreNode_1_1 = linePreNode_1.next()) {

./node_modules/@meta2d/core/src/core.js 2131                         var node = linePreNode_1_1.value;

./node_modules/@meta2d/core/src/core.js 2138                         if (linePreNode_1_1 && !linePreNode_1_1.done && (_a = linePreNode_1.return)) _a.call(linePreNode_1);

./node_modules/@meta2d/core/src/core.js 2161             var lineId = _a.lineId, anchor = _a.anchor;

./node_modules/@meta2d/core/src/core.js 2162             var fromAnchor = (_b = pen.anchors) === null || _b === void 0 ? void 0 : _b.filter(function (_anchor) { return _anchor.id === anchor; })[0];

./node_modules/@meta2d/core/src/core.js 2163             var line = _this.findOne(lineId);

./node_modules/@meta2d/core/src/core.js 2164             if (line.anchors[0].connectTo == pen.id) {

./node_modules/@meta2d/core/src/core.js 2166                 var connectTo = line.anchors[line.anchors.length - 1].connectTo;

./node_modules/@meta2d/core/src/core.js 2169                     var connectedLine_1 = (_c = _next.connectedLines) === null || _c === void 0 ? void 0 : _c.filter(function (item) { return item.lineId === line.id; })[0];

./node_modules/@meta2d/core/src/core.js 2170                     var penAnchor = _next.anchors.filter(function (_anchor) { return _anchor.id === connectedLine_1.anchor; })[0];

./node_modules/@meta2d/core/src/core.js 2174                         line: line,

./node_modules/@meta2d/core/src/core.js 2186      * @param anchor 待添加锚点

./node_modules/@meta2d/core/src/core.js 2189     Meta2d.prototype.addAnchor = function (pen, anchor, index) {

./node_modules/@meta2d/core/src/core.js 2193         if (!pen.anchors) {

./node_modules/@meta2d/core/src/core.js 2194             pen.anchors = [];

./node_modules/@meta2d/core/src/core.js 2201                 index = pen.anchors.length + 1 + index;

./node_modules/@meta2d/core/src/core.js 2203             if (index > pen.anchors.length) {

./node_modules/@meta2d/core/src/core.js 2204                 index = pen.anchors.length;

./node_modules/@meta2d/core/src/core.js 2209             if ((index == 0 && pen.anchors[0].connectTo) ||

./node_modules/@meta2d/core/src/core.js 2210                 (index == pen.anchors.length && pen.anchors[index - 1].connectTo)) {

./node_modules/@meta2d/core/src/core.js 2215         var _anchor = null;

./node_modules/@meta2d/core/src/core.js 2217         if (anchor.x <= 1 && anchor.x >= 0 && anchor.y <= 1 && anchor.y >= 0) {

./node_modules/@meta2d/core/src/core.js 2220                 id: anchor.id || s8(),

./node_modules/@meta2d/core/src/core.js 2223                     pen.calculative.worldRect.width * anchor.x,

./node_modules/@meta2d/core/src/core.js 2225                     pen.calculative.worldRect.height * anchor.y,

./node_modules/@meta2d/core/src/core.js 2232             _anchor = {

./node_modules/@meta2d/core/src/core.js 2235                 x: anchor.x,

./node_modules/@meta2d/core/src/core.js 2236                 y: anchor.y,

./node_modules/@meta2d/core/src/core.js 2242                 id: anchor.id || s8(),

./node_modules/@meta2d/core/src/core.js 2244                 x: anchor.x,

./node_modules/@meta2d/core/src/core.js 2245                 y: anchor.y,

./node_modules/@meta2d/core/src/core.js 2249                     rotatePoint(anchor, -pen.rotate, pen.calculative.worldRect.center);

./node_modules/@meta2d/core/src/core.js 2251                 _anchor = {

./node_modules/@meta2d/core/src/core.js 2254                     x: (anchor.x - pen.calculative.worldRect.x) /

./node_modules/@meta2d/core/src/core.js 2256                     y: (anchor.y - pen.calculative.worldRect.y) /

./node_modules/@meta2d/core/src/core.js 2264             pen.anchors.splice(index, 0, _anchor);

./node_modules/@meta2d/core/src/core.js 2272             pen.anchors.push(_anchor);

./node_modules/@meta2d/core/src/core.js 2300         var line = {

./node_modules/@meta2d/core/src/core.js 2302             lineName: 'line',

./node_modules/@meta2d/core/src/core.js 2303             lineWidth: 1,

./node_modules/@meta2d/core/src/core.js 2304             name: 'line',

./node_modules/@meta2d/core/src/core.js 2309             anchors: [

./node_modules/@meta2d/core/src/core.js 2322         this.addPens([line]);

./node_modules/@meta2d/core/src/core.js 2323         connectLine(from, fromAnchor, line, line.calculative.worldAnchors[0]);

./node_modules/@meta2d/core/src/core.js 2324         connectLine(to, toAnchor, line, line.calculative.worldAnchors[1]);

./node_modules/@meta2d/core/src/core.js 2325         line.calculative.active = false;

./node_modules/@meta2d/core/src/core.js 2326         this.canvas.updateLines(line);

./node_modules/@meta2d/core/src/core.js 2329         this.canvas.initLineRect(line);

./node_modules/@meta2d/core/src/core.js 2333         return line;

./node_modules/@meta2d/core/src/core.js 2339      * @param anchor 是否产生默认的锚点

./node_modules/@meta2d/core/src/core.js 2342     Meta2d.prototype.toComponent = function (pens, showChild, anchor) {

./node_modules/@meta2d/core/src/core.js 2353         if (anchor) {

./node_modules/@meta2d/core/src/core.js 2354             parent.anchors = [

./node_modules/@meta2d/core/src/core.js 2459             globalStore.anchors = {};

./node_modules/@meta2d/core/src/options.js 10     lineHeight: 1.5,

./node_modules/@meta2d/core/src/options.js 12     textBaseline: 'middle',

./node_modules/@meta2d/core/src/options.js 16     anchorColor: '#278DF8',

./node_modules/@meta2d/core/src/options.js 18     anchorRadius: 4,

./node_modules/@meta2d/core/src/options.js 19     anchorBackground: '#fff',

./node_modules/@meta2d/core/src/options.js 31     drawingLineName: 'curve',

./node_modules/@meta2d/core/src/options.js 34     autoPolyline: true,

./node_modules/@meta2d/core/src/data.js 47 export var defaultDrawLineFns = ['curve', 'polyline', 'line'];

./node_modules/@meta2d/core/src/data.js 50     'lineWidth',

./node_modules/@meta2d/core/src/data.js 51     'lineCap',

./node_modules/@meta2d/core/src/data.js 52     'lineJoin',

./node_modules/@meta2d/core/src/data.js 55     'lineGradientFromColor',

./node_modules/@meta2d/core/src/data.js 56     'lineGradientToColor',

./node_modules/@meta2d/core/src/data.js 57     'lineGradientAngle',

./node_modules/@meta2d/core/src/data.js 74     'textBaseline',

./node_modules/@meta2d/core/src/data.js 75     'lineHeight',

./node_modules/@meta2d/core/src/data.js 81     'lineDash',

./node_modules/@meta2d/core/src/canvas/canvas.js 92 import { curve, mind, getLineLength, getLineRect, pointInLine, simplify, smoothLine, lineSegment, getLineR, lineInRect, } from '../diagrams';

./node_modules/@meta2d/core/src/canvas/canvas.js 93 import { polyline, translatePolylineAnchor } from '../diagrams/line/polyline';

./node_modules/@meta2d/core/src/canvas/canvas.js 134         this.curve = curve;

./node_modules/@meta2d/core/src/canvas/canvas.js 135         this.polyline = polyline;

./node_modules/@meta2d/core/src/canvas/canvas.js 137         this.line = lineSegment;

./node_modules/@meta2d/core/src/canvas/canvas.js 299                         _this.drawingLine.calculative.drawlineH =

./node_modules/@meta2d/core/src/canvas/canvas.js 300                             !_this.drawingLine.calculative.drawlineH;

./node_modules/@meta2d/core/src/canvas/canvas.js 336                         _this.drawingLine.lineName = _this.drawingLineName;

./node_modules/@meta2d/core/src/canvas/canvas.js 337                         _this.drawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 463                             _this.finishDrawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 495                         _this.finishDrawline(true);

./node_modules/@meta2d/core/src/canvas/canvas.js 496                         if (_this.store.active[0].anchors[0].connectTo) {

./node_modules/@meta2d/core/src/canvas/canvas.js 507                                 _this.store.path2dMap.set(pen, globalStore.path2dDraws.line(pen));

./node_modules/@meta2d/core/src/canvas/canvas.js 516                         _this.finishDrawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 775             // Set anchor of pen.

./node_modules/@meta2d/core/src/canvas/canvas.js 785                     var anchor = _this.store.activeAnchor;

./node_modules/@meta2d/core/src/canvas/canvas.js 788                         x: anchor.x,

./node_modules/@meta2d/core/src/canvas/canvas.js 789                         y: anchor.y,

./node_modules/@meta2d/core/src/canvas/canvas.js 794                     connectLine(_this.store.hover, anchor, _this.drawingLine, pt);

./node_modules/@meta2d/core/src/canvas/canvas.js 795                     _this.drawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 813                     _this.drawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 814                     _this.finishDrawline(true);

./node_modules/@meta2d/core/src/canvas/canvas.js 822                         var anchor = _this.store.activeAnchor;

./node_modules/@meta2d/core/src/canvas/canvas.js 823                         to_2.x = anchor.x;

./node_modules/@meta2d/core/src/canvas/canvas.js 824                         to_2.y = anchor.y;

./node_modules/@meta2d/core/src/canvas/canvas.js 825                         connectLine(_this.store.hover, anchor, _this.drawingLine, to_2);

./node_modules/@meta2d/core/src/canvas/canvas.js 826                         _this.drawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 827                         _this.finishDrawline(true);

./node_modules/@meta2d/core/src/canvas/canvas.js 838                     _this.finishDrawline(true);

./node_modules/@meta2d/core/src/canvas/canvas.js 839                     if ((_c = _this.store.active[0]) === null || _c === void 0 ? void 0 : _c.anchors[0].connectTo) {

./node_modules/@meta2d/core/src/canvas/canvas.js 850                     var anchor = nearestAnchor(_this.store.hover, e);

./node_modules/@meta2d/core/src/canvas/canvas.js 851                     to_3.x = anchor.x;

./node_modules/@meta2d/core/src/canvas/canvas.js 852                     to_3.y = anchor.y;

./node_modules/@meta2d/core/src/canvas/canvas.js 854                     connectLine(_this.store.hover, anchor, _this.drawingLine, to_3);

./node_modules/@meta2d/core/src/canvas/canvas.js 855                     _this.drawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 856                     _this.finishDrawline(true);

./node_modules/@meta2d/core/src/canvas/canvas.js 874                 _this.drawingLine.calculative.drawlineH = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 875                 _this.drawingLineName !== 'polyline' && _this.drawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 882                         var anchor = nearestAnchor(_this.store.hover, e);

./node_modules/@meta2d/core/src/canvas/canvas.js 883                         _this.store.hoverAnchor = anchor;

./node_modules/@meta2d/core/src/canvas/canvas.js 884                         var pt = { id: s8(), x: anchor.x, y: anchor.y };

./node_modules/@meta2d/core/src/canvas/canvas.js 887                         connectLine(_this.store.hover, anchor, _this.drawingLine, pt);

./node_modules/@meta2d/core/src/canvas/canvas.js 894                 else if (!_this.drawingLine && _this.drawingLineName !== 'curve') {

./node_modules/@meta2d/core/src/canvas/canvas.js 1042                             _this.drawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 1051                         _this.drawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 1077                         // Move line anchor

./node_modules/@meta2d/core/src/canvas/canvas.js 1090                         // Move line anchor prev

./node_modules/@meta2d/core/src/canvas/canvas.js 1095                         // Move line anchor next

./node_modules/@meta2d/core/src/canvas/canvas.js 1154                     _this.drawingLineName === 'curve' &&

./node_modules/@meta2d/core/src/canvas/canvas.js 1156                     _this.drawline(pt);

./node_modules/@meta2d/core/src/canvas/canvas.js 1182                         if (_this.drawingLineName === 'polyline') {

./node_modules/@meta2d/core/src/canvas/canvas.js 1186                     if (_this.drawingLineName === 'line') {

./node_modules/@meta2d/core/src/canvas/canvas.js 1250                     _this.drawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 1292                     _this.drawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 1293                     _this.finishDrawline(true);

./node_modules/@meta2d/core/src/canvas/canvas.js 1299                     var anchor = nearestAnchor(_this.store.hover, e);

./node_modules/@meta2d/core/src/canvas/canvas.js 1300                     to.x = anchor.x;

./node_modules/@meta2d/core/src/canvas/canvas.js 1301                     to.y = anchor.y;

./node_modules/@meta2d/core/src/canvas/canvas.js 1303                     connectLine(_this.store.hover, anchor, _this.drawingLine, to);

./node_modules/@meta2d/core/src/canvas/canvas.js 1304                     _this.drawline();

./node_modules/@meta2d/core/src/canvas/canvas.js 1305                     _this.finishDrawline(true);

./node_modules/@meta2d/core/src/canvas/canvas.js 1313                 _this.store.active[0].name === 'line' &&

./node_modules/@meta2d/core/src/canvas/canvas.js 1315                 var line_1 = _this.store.active[0];

./node_modules/@meta2d/core/src/canvas/canvas.js 1316                 var from = getFromAnchor(line_1);

./node_modules/@meta2d/core/src/canvas/canvas.js 1317                 var to = getToAnchor(line_1);

./node_modules/@meta2d/core/src/canvas/canvas.js 1329                         var hoverAnchors = hover.calculative.worldAnchors.map(function (anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1330                             return __assign(__assign({}, anchor), { penId: line_1.id });

./node_modules/@meta2d/core/src/canvas/canvas.js 1342                             line_1.calculative.worldAnchors[0].connectTo = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 1343                             (_a = line_1.calculative.worldAnchors).unshift.apply(_a, __spreadArray([], __read(hoverAnchors), false));

./node_modules/@meta2d/core/src/canvas/canvas.js 1346                             line_1.calculative.worldAnchors[line_1.calculative.worldAnchors.length - 1].connectTo = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 1347                             (_b = line_1.calculative.worldAnchors).push.apply(_b, __spreadArray([], __read(hoverAnchors), false));

./node_modules/@meta2d/core/src/canvas/canvas.js 1358                             connectLine(_this.store.hover, _this.store.hoverAnchor, line_1, _this.store.activeAnchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 1361                     if (_this[line_1.lineName] && line_1.lineName !== 'polyline') {

./node_modules/@meta2d/core/src/canvas/canvas.js 1362                         _this[line_1.lineName](_this.store, line_1);

./node_modules/@meta2d/core/src/canvas/canvas.js 1364                     _this.store.path2dMap.set(line_1, globalStore.path2dDraws.line(line_1));

./node_modules/@meta2d/core/src/canvas/canvas.js 1365                     _this.initLineRect(line_1);

./node_modules/@meta2d/core/src/canvas/canvas.js 1369                     if (from === _this.store.activeAnchor && line_1.autoFrom) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1370                         _this.calcAutoAnchor(line_1, from, _this.store.hover);

./node_modules/@meta2d/core/src/canvas/canvas.js 1372                     else if (to === _this.store.activeAnchor && line_1.autoTo) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1373                         _this.calcAutoAnchor(line_1, to, _this.store.hover);

./node_modules/@meta2d/core/src/canvas/canvas.js 1407                             return lineInRect(pen, _this.dragRect);

./node_modules/@meta2d/core/src/canvas/canvas.js 1616                                 var anchor = _d.value;

./node_modules/@meta2d/core/src/canvas/canvas.js 1617                                 hoverType = _this.inAnchor(pt, pen, anchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 1666                     if (pen.name === 'line') {

./node_modules/@meta2d/core/src/canvas/canvas.js 1667                         isIn = pointInSimpleRect(pt, pen.calculative.worldRect, pen.lineWidth);

./node_modules/@meta2d/core/src/canvas/canvas.js 1763                 r += 2 * _this.store.options.anchorRadius;

./node_modules/@meta2d/core/src/canvas/canvas.js 1773                                 var anchor = _e.value;

./node_modules/@meta2d/core/src/canvas/canvas.js 1774                                 if (anchor.twoWay === TwoWay.In) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1780                                 if (anchor.twoWay === TwoWay.Out) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1786                                 if (anchor.twoWay === TwoWay.DisableConnected ||

./node_modules/@meta2d/core/src/canvas/canvas.js 1787                                     anchor.twoWay === TwoWay.Disable ||

./node_modules/@meta2d/core/src/canvas/canvas.js 1792                                 if (_this.inAnchor(pt, pen, anchor)) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1917                     // Draw rotate control line.

./node_modules/@meta2d/core/src/canvas/canvas.js 1920                     ctx.lineTo(_this.activeRect.center.x, _this.activeRect.y - 30);

./node_modules/@meta2d/core/src/canvas/canvas.js 1946                 var anchors = __spreadArray([], __read(_this.store.hover.calculative.worldAnchors), false);

./node_modules/@meta2d/core/src/canvas/canvas.js 1948                     anchors.push(_this.store.pointAt);

./node_modules/@meta2d/core/src/canvas/canvas.js 1950                 if (anchors) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1952                         _this.store.hover.anchorColor || _this.store.options.anchorColor;

./node_modules/@meta2d/core/src/canvas/canvas.js 1954                         _this.store.hover.anchorBackground ||

./node_modules/@meta2d/core/src/canvas/canvas.js 1955                             _this.store.options.anchorBackground;

./node_modules/@meta2d/core/src/canvas/canvas.js 1956                     anchors.forEach(function (anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1957                         if (anchor.hidden && anchor.locked > LockState.DisableEdit) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1960                         if (anchor === _this.store.hoverAnchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1968                         var size = anchor.radius ||

./node_modules/@meta2d/core/src/canvas/canvas.js 1969                             _this.store.hover.anchorRadius ||

./node_modules/@meta2d/core/src/canvas/canvas.js 1970                             _this.store.options.anchorRadius;

./node_modules/@meta2d/core/src/canvas/canvas.js 1973                             if (_this.store.hover.calculative.lineWidth > 3) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1974                                 size = _this.store.hover.calculative.lineWidth;

./node_modules/@meta2d/core/src/canvas/canvas.js 1977                         ctx.arc(anchor.x, anchor.y, size, 0, Math.PI * 2);

./node_modules/@meta2d/core/src/canvas/canvas.js 1978                         if (_this.store.hover.type && _this.store.hoverAnchor === anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1984                         else if (anchor.color || anchor.background) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1986                             ctx.strokeStyle = anchor.color;

./node_modules/@meta2d/core/src/canvas/canvas.js 1987                             ctx.fillStyle = anchor.background;

./node_modules/@meta2d/core/src/canvas/canvas.js 1991                         if (anchor === _this.store.hoverAnchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1994                         if (_this.store.hover.type && _this.store.hoverAnchor === anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 1997                         else if (anchor.color || anchor.background) {

./node_modules/@meta2d/core/src/canvas/canvas.js 2004                             if (anchor === _this.store.hoverAnchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 2007                                 ctx.lineWidth = 3;

./node_modules/@meta2d/core/src/canvas/canvas.js 2013                                 ctx.arc(anchor.x, anchor.y, size + 1.5, 0, Math.PI * 2);

./node_modules/@meta2d/core/src/canvas/canvas.js 2063                     ctx.lineTo(_this.dock.xDock.x, _this.dock.xDock.prev.y);

./node_modules/@meta2d/core/src/canvas/canvas.js 2069                     ctx.lineTo(_this.dock.yDock.prev.x, _this.dock.yDock.y);

./node_modules/@meta2d/core/src/canvas/canvas.js 2246             if (pen.textAlign && pen.whiteSpace === 'pre-line') {

./node_modules/@meta2d/core/src/canvas/canvas.js 2254             if (pen.textBaseline) {

./node_modules/@meta2d/core/src/canvas/canvas.js 2260                 style += "justify-content: " + baseLine[pen.textBaseline] + ";";

./node_modules/@meta2d/core/src/canvas/canvas.js 2299             if (pen.lineHeight) {

./node_modules/@meta2d/core/src/canvas/canvas.js 2300                 style += "line-height:" + (scale > 1

./node_modules/@meta2d/core/src/canvas/canvas.js 2301                     ? pen.fontSize * pen.lineHeight * scale

./node_modules/@meta2d/core/src/canvas/canvas.js 2302                     : pen.fontSize * pen.lineHeight * font_scale) + "px;";

./node_modules/@meta2d/core/src/canvas/canvas.js 2317                 if (pen.whiteSpace !== 'pre-line') {

./node_modules/@meta2d/core/src/canvas/canvas.js 2336                 // if (pen.whiteSpace === 'pre-line') {

./node_modules/@meta2d/core/src/canvas/canvas.js 2342                 if (pen.whiteSpace === 'pre-line') {

./node_modules/@meta2d/core/src/canvas/canvas.js 2358                     Math.floor(pen.height / scale / (pen.lineHeight * pen.fontSize));

./node_modules/@meta2d/core/src/canvas/canvas.js 2365             sheet.insertRule(".meta2d-input\n      .input-div{\n        resize:none;border:none;outline:none;background:transparent;position:absolute;flex-grow:1;height:100%;width: 100%;position:absolute;left:0;top:0;display:flex;flex-direction: column;cursor: text;" + style + "}");

./node_modules/@meta2d/core/src/canvas/canvas.js 2512         this.externalElements.style.outline = 'none';

./node_modules/@meta2d/core/src/canvas/canvas.js 2628      * @param line 连线

./node_modules/@meta2d/core/src/canvas/canvas.js 2629      * @param anchor 锚点，连线的某个锚点，引用相同

./node_modules/@meta2d/core/src/canvas/canvas.js 2631     Canvas.prototype.splitLine = function (line, anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 2632         var worldAnchors = line.calculative.worldAnchors;

./node_modules/@meta2d/core/src/canvas/canvas.js 2633         var index = worldAnchors.findIndex(function (a) { return a === anchor; });

./node_modules/@meta2d/core/src/canvas/canvas.js 2638         var initLine = deepClone(line, true);

./node_modules/@meta2d/core/src/canvas/canvas.js 2639         var newLine = deepClone(line, true);

./node_modules/@meta2d/core/src/canvas/canvas.js 2651         line.calculative.worldAnchors = preAnchors;

./node_modules/@meta2d/core/src/canvas/canvas.js 2653         this.initLineRect(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 2665             pens: [deepClone(line, true)],

./node_modules/@meta2d/core/src/canvas/canvas.js 2690             var anchor = calcRelativePoint(this.movingAnchor, rect);

./node_modules/@meta2d/core/src/canvas/canvas.js 2691             // 更改 pen 的 anchors 属性

./node_modules/@meta2d/core/src/canvas/canvas.js 2692             var index = pen.anchors.findIndex(function (anchor) { return anchor.id === _this.movingAnchor.id; });

./node_modules/@meta2d/core/src/canvas/canvas.js 2693             pen.anchors[index] = anchor;

./node_modules/@meta2d/core/src/canvas/canvas.js 2893         var lineWidth = data.lineWidth || 1;

./node_modules/@meta2d/core/src/canvas/canvas.js 2896             name: 'line',

./node_modules/@meta2d/core/src/canvas/canvas.js 2905                 lineWidth: lineWidth * scale,

./node_modules/@meta2d/core/src/canvas/canvas.js 2909             lineWidth: lineWidth,

./node_modules/@meta2d/core/src/canvas/canvas.js 2920         var lineWidth = data.lineWidth || 1;

./node_modules/@meta2d/core/src/canvas/canvas.js 2924             name: 'line',

./node_modules/@meta2d/core/src/canvas/canvas.js 2925             lineName: this.drawingLineName,

./node_modules/@meta2d/core/src/canvas/canvas.js 2933                 lineWidth: lineWidth * scale,

./node_modules/@meta2d/core/src/canvas/canvas.js 2937             lineWidth: lineWidth,

./node_modules/@meta2d/core/src/canvas/canvas.js 2945         var lineX = e.x;

./node_modules/@meta2d/core/src/canvas/canvas.js 2946         var lineY = e.y;

./node_modules/@meta2d/core/src/canvas/canvas.js 2953             lineX = -offsetX;

./node_modules/@meta2d/core/src/canvas/canvas.js 2959             lineY = -offsetY;

./node_modules/@meta2d/core/src/canvas/canvas.js 2970             name: 'line',

./node_modules/@meta2d/core/src/canvas/canvas.js 2971             lineName: 'line',

./node_modules/@meta2d/core/src/canvas/canvas.js 2972             x: lineX,

./node_modules/@meta2d/core/src/canvas/canvas.js 2973             y: lineY,

./node_modules/@meta2d/core/src/canvas/canvas.js 2977             anchors: [

./node_modules/@meta2d/core/src/canvas/canvas.js 3040             ((xDock === null || xDock === void 0 ? void 0 : xDock.anchorId) || (yDock === null || yDock === void 0 ? void 0 : yDock.anchorId))) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3043             if (xDock === null || xDock === void 0 ? void 0 : xDock.anchorId) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3044                 var anchor = this.store.pens[this.store.active[0].id + movingSuffix].calculative.worldAnchors.find(function (item) { return item.id === xDock.anchorId; });

./node_modules/@meta2d/core/src/canvas/canvas.js 3045                 if (anchor.x === from.x && anchor.y === from.y) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3047                     connectLine(this.store.active[0], anchor, dockPen, from);

./node_modules/@meta2d/core/src/canvas/canvas.js 3050                 else if (anchor.x === to.x && anchor.y === to.y) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3052                     connectLine(this.store.active[0], anchor, dockPen, to);

./node_modules/@meta2d/core/src/canvas/canvas.js 3056             else if (yDock === null || yDock === void 0 ? void 0 : yDock.anchorId) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3057                 var anchor = this.store.pens[this.store.active[0].id + movingSuffix].calculative.worldAnchors.find(function (item) { return item.id === yDock.anchorId; });

./node_modules/@meta2d/core/src/canvas/canvas.js 3058                 if (anchor.x === from.x && anchor.y === from.y) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3060                     connectLine(this.store.active[0], anchor, dockPen, from);

./node_modules/@meta2d/core/src/canvas/canvas.js 3063                 else if (anchor.x === to.x && anchor.y === to.y) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3065                     connectLine(this.store.active[0], anchor, dockPen, to);

./node_modules/@meta2d/core/src/canvas/canvas.js 3086             // 若需要更改 anchors ，注意 anchors connectTo 问题

./node_modules/@meta2d/core/src/canvas/canvas.js 3087             // const { x, y, width, height, anchors } = this.movingPens[i];

./node_modules/@meta2d/core/src/canvas/canvas.js 3089              * TODO: line 类型无法取到移动后的 x，y 值

./node_modules/@meta2d/core/src/canvas/canvas.js 3192     Canvas.prototype.inAnchor = function (pt, pen, anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3196         if (!anchor || anchor.locked > LockState.DisableEdit) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3203             pen.name === 'line' &&

./node_modules/@meta2d/core/src/canvas/canvas.js 3204             anchor.connectTo) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3205             var connectPen = this.findOne(anchor.connectTo);

./node_modules/@meta2d/core/src/canvas/canvas.js 3208                 var connectAnchor = connectPen.calculative.worldAnchors.find(function (item) { return item.id === anchor.anchorId; });

./node_modules/@meta2d/core/src/canvas/canvas.js 3209                 connectAnchor && (anchor = connectAnchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 3212         if (anchor.twoWay === TwoWay.Disable && pen.name !== 'line') {

./node_modules/@meta2d/core/src/canvas/canvas.js 3215         if (pen.name === 'line' && anchor.connectTo) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3216             var _anchor = (_a = this.findOne(anchor.connectTo)) === null || _a === void 0 ? void 0 : _a.anchors.find(function (item) { return item.id === anchor.anchorId; });

./node_modules/@meta2d/core/src/canvas/canvas.js 3217             if (_anchor && _anchor.twoWay) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3222             if (anchor.twoWay === TwoWay.Out) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3229             else if (anchor.twoWay === TwoWay.In) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3233         if (hitPoint(pt, anchor, this.pointSize)) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3234             if (anchor !== this.store.hoverAnchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3237             this.store.hoverAnchor = anchor;

./node_modules/@meta2d/core/src/canvas/canvas.js 3239             // if (pen.name === 'line' && anchor.connectTo) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3240             //   const connectPen = this.findOne(anchor.connectTo);

./node_modules/@meta2d/core/src/canvas/canvas.js 3244             //       (item) => item.id === anchor.anchorId

./node_modules/@meta2d/core/src/canvas/canvas.js 3250             // console.log('hover', pen, anchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 3252                 if (anchor.connectTo && !pen.calculative.active) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3253                     this.store.hover = this.store.pens[anchor.connectTo];

./node_modules/@meta2d/core/src/canvas/canvas.js 3256                             this.store.hover.calculative.worldAnchors.find(function (a) { return a.id === anchor.anchorId; });

./node_modules/@meta2d/core/src/canvas/canvas.js 3279                 anchor.prev &&

./node_modules/@meta2d/core/src/canvas/canvas.js 3280                 hitPoint(pt, anchor.prev, this.pointSize)) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3281                 this.store.hoverAnchor = anchor;

./node_modules/@meta2d/core/src/canvas/canvas.js 3287                 anchor.next &&

./node_modules/@meta2d/core/src/canvas/canvas.js 3288                 hitPoint(pt, anchor.next, this.pointSize)) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3289                 this.store.hoverAnchor = anchor;

./node_modules/@meta2d/core/src/canvas/canvas.js 3330         this.offscreen.getContext('2d').textBaseline = 'middle';

./node_modules/@meta2d/core/src/canvas/canvas.js 3525                             if (typeof pen[k] !== 'object' || k === 'lineDash') {

./node_modules/@meta2d/core/src/canvas/canvas.js 3589         if (pen.lineWidth == undefined) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3590             pen.lineWidth = 1;

./node_modules/@meta2d/core/src/canvas/canvas.js 3592         var _a = this.store.options, fontSize = _a.fontSize, lineHeight = _a.lineHeight;

./node_modules/@meta2d/core/src/canvas/canvas.js 3596         if (!pen.lineHeight) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3597             pen.lineHeight = lineHeight;

./node_modules/@meta2d/core/src/canvas/canvas.js 3606             if (typeof pen[k] !== 'object' || k === 'lineDash') {

./node_modules/@meta2d/core/src/canvas/canvas.js 3613         if (!pen.anchors && globalStore.anchors[pen.name]) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3614             if (!pen.anchors) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3615                 pen.anchors = [];

./node_modules/@meta2d/core/src/canvas/canvas.js 3617             globalStore.anchors[pen.name](pen);

./node_modules/@meta2d/core/src/canvas/canvas.js 3620         if (!pen.anchors && pen.calculative.worldAnchors) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3621             pen.anchors = pen.calculative.worldAnchors.map(function (pt) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3628     Canvas.prototype.drawline = function (mouse) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3634         this.store.path2dMap.set(this.drawingLine, globalStore.path2dDraws.line(this.drawingLine));

./node_modules/@meta2d/core/src/canvas/canvas.js 3656         var _b = this.store.options, fontSize = _b.fontSize, lineHeight = _b.lineHeight;

./node_modules/@meta2d/core/src/canvas/canvas.js 3661         if (!pen.lineHeight) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3662             pen.lineHeight = lineHeight;

./node_modules/@meta2d/core/src/canvas/canvas.js 3663             pen.calculative.lineHeight = pen.lineHeight;

./node_modules/@meta2d/core/src/canvas/canvas.js 3672             pen.anchors = pen.calculative.worldAnchors.map(function (pt) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3687     Canvas.prototype.finishDrawline = function (end) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3689             var from, to, line, rect, allowAdd, _a;

./node_modules/@meta2d/core/src/canvas/canvas.js 3721                                 line = this.store.data.pens.find(function (pen) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3728                                 if (line) {

./node_modules/@meta2d/core/src/canvas/canvas.js 3772             var anchors, p, allowAdd, _a;

./node_modules/@meta2d/core/src/canvas/canvas.js 3777                         anchors = simplify(this.pencilLine.calculative.worldAnchors, 10, 0, this.pencilLine.calculative.worldAnchors.length - 1);

./node_modules/@meta2d/core/src/canvas/canvas.js 3779                         anchors.unshift({ id: p.id, penId: p.penId, x: p.x, y: p.y });

./node_modules/@meta2d/core/src/canvas/canvas.js 3781                         anchors.push({ id: p.id, penId: p.penId, x: p.x, y: p.y });

./node_modules/@meta2d/core/src/canvas/canvas.js 3782                         this.pencilLine.calculative.worldAnchors = smoothLine(anchors);

./node_modules/@meta2d/core/src/canvas/canvas.js 3831             var inlineSVG = result.getElementsByTagName('svg')[0];

./node_modules/@meta2d/core/src/canvas/canvas.js 3834             inlineSVG.setAttribute('width', width + "px");

./node_modules/@meta2d/core/src/canvas/canvas.js 3835             inlineSVG.setAttribute('height', height + "px");

./node_modules/@meta2d/core/src/canvas/canvas.js 3837             var svg64 = btoa(unescape(encodeURIComponent(new XMLSerializer().serializeToString(inlineSVG))));

./node_modules/@meta2d/core/src/canvas/canvas.js 3944         pen.calculative.lineWidth = pen.lineWidth * scale;

./node_modules/@meta2d/core/src/canvas/canvas.js 4087                 var lineScale = s > 1 ? 1 : 1 / s / s;

./node_modules/@meta2d/core/src/canvas/canvas.js 4089                 var lineCenter = pen.calculative.worldRect.center;

./node_modules/@meta2d/core/src/canvas/canvas.js 4092                     scalePen(pen, lineScale, lineCenter);

./node_modules/@meta2d/core/src/canvas/canvas.js 4096                     scalePen(pen, lineScale, lineCenter);

./node_modules/@meta2d/core/src/canvas/canvas.js 4261             (this.store.active[0].anchors[0].connectTo ||

./node_modules/@meta2d/core/src/canvas/canvas.js 4262                 this.store.active[0].anchors[this.store.active[0].anchors.length - 1]

./node_modules/@meta2d/core/src/canvas/canvas.js 4317             pen.connectedLines = pen.connectedLines.map(function (line) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4318                 if (pens.find(function (p) { return p.id === line.lineId; })) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4319                     line.lineId += movingSuffix;

./node_modules/@meta2d/core/src/canvas/canvas.js 4321                 return line;

./node_modules/@meta2d/core/src/canvas/canvas.js 4325             pen.calculative.worldAnchors = pen.calculative.worldAnchors.map(function (anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4326                 if (anchor.connectTo && pens.find(function (p) { return p.id === anchor.connectTo; })) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4327                     anchor.connectTo += movingSuffix;

./node_modules/@meta2d/core/src/canvas/canvas.js 4329                 return anchor;

./node_modules/@meta2d/core/src/canvas/canvas.js 4343                 if (pen.anchors[0].connectTo ||

./node_modules/@meta2d/core/src/canvas/canvas.js 4344                     pen.anchors[pen.anchors.length - 1].connectTo) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4363             pen.lineWidth === 0 && (value.lineWidth = 1);

./node_modules/@meta2d/core/src/canvas/canvas.js 4385             disconnectLine(pen, getAnchor(pen, this.store.activeAnchor.anchorId), this.store.pens[this.store.activeAnchor.penId], this.store.activeAnchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 4387         var line = this.store.active[0];

./node_modules/@meta2d/core/src/canvas/canvas.js 4388         var from = getFromAnchor(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4389         var to = getToAnchor(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4390         if (line.lineName === 'polyline' && !keyOptions.shiftKey) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4391             translatePolylineAnchor(line, this.store.activeAnchor, pt);

./node_modules/@meta2d/core/src/canvas/canvas.js 4405                 if (line.lineName !== 'polyline') {

./node_modules/@meta2d/core/src/canvas/canvas.js 4406                     (_b = this[line.lineName]) === null || _b === void 0 ? void 0 : _b.call(this, this.store, line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4410         this.patchFlagsLines.add(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4411         this.store.path2dMap.set(line, globalStore.path2dDraws[line.name](line));

./node_modules/@meta2d/core/src/canvas/canvas.js 4453         var line = this.store.active[0];

./node_modules/@meta2d/core/src/canvas/canvas.js 4454         this.patchFlagsLines.add(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4455         this.store.path2dMap.set(line, globalStore.path2dDraws[line.name](line));

./node_modules/@meta2d/core/src/canvas/canvas.js 4495         var line = this.store.active[0];

./node_modules/@meta2d/core/src/canvas/canvas.js 4496         this.patchFlagsLines.add(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4497         this.store.path2dMap.set(line, globalStore.path2dDraws[line.name](line));

./node_modules/@meta2d/core/src/canvas/canvas.js 4584      * @param line 连线

./node_modules/@meta2d/core/src/canvas/canvas.js 4587     Canvas.prototype.checkDisconnect = function (line, pens) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4589         if (line.id.indexOf(movingSuffix) > 0) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4590             var id = line.id;

./node_modules/@meta2d/core/src/canvas/canvas.js 4591             line = this.store.pens[id.replace(movingSuffix, '')];

./node_modules/@meta2d/core/src/canvas/canvas.js 4594         line.anchors.forEach(function (anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4595             if (anchor.connectTo &&

./node_modules/@meta2d/core/src/canvas/canvas.js 4597                     return p.id === anchor.connectTo ||

./node_modules/@meta2d/core/src/canvas/canvas.js 4598                         p.id === anchor.connectTo + movingSuffix;

./node_modules/@meta2d/core/src/canvas/canvas.js 4600                 var pen = _this.store.pens[anchor.connectTo];

./node_modules/@meta2d/core/src/canvas/canvas.js 4604                 disconnectLine(pen, getAnchor(pen, anchor.anchorId), line, anchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 4646                         var line = _this.store.pens[item.lineId];

./node_modules/@meta2d/core/src/canvas/canvas.js 4647                         _this.initLineRect(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4683     Canvas.prototype.calcAutoAnchor = function (line, lineAnchor, pen, penConnection) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4684         var from = getFromAnchor(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4685         var to = getToAnchor(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4686         var newAnchor = nearestAnchor(pen, lineAnchor === from ? to : from);

./node_modules/@meta2d/core/src/canvas/canvas.js 4687         lineAnchor.x = newAnchor.x;

./node_modules/@meta2d/core/src/canvas/canvas.js 4688         lineAnchor.y = newAnchor.y;

./node_modules/@meta2d/core/src/canvas/canvas.js 4689         lineAnchor.prev = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 4690         lineAnchor.next = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 4692             penConnection.anchor = newAnchor.id;

./node_modules/@meta2d/core/src/canvas/canvas.js 4695             connectLine(pen, newAnchor, line, lineAnchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 4697         if (this[line.lineName]) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4698             this[line.lineName](this.store, line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4700         this.store.path2dMap.set(line, globalStore.path2dDraws.line(line));

./node_modules/@meta2d/core/src/canvas/canvas.js 4701         this.initLineRect(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4716                         (typeof pen[k] !== 'object' || k === 'lineDash')) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4736                         (typeof pen[k] !== 'object' || k === 'lineDash')) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4774                 // 每个子节点都会更新 line，包括子节点是 type 1 的情况

./node_modules/@meta2d/core/src/canvas/canvas.js 4782             var line = _this.store.pens[item.lineId];

./node_modules/@meta2d/core/src/canvas/canvas.js 4784             if (!line || line.calculative.active) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4787             var lineAnchor = getAnchor(line, item.lineAnchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 4788             if (!lineAnchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4791             if (line.autoFrom) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4792                 var from = getFromAnchor(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4793                 if (from.id === lineAnchor.id) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4794                     _this.calcAutoAnchor(line, from, pen, item);

./node_modules/@meta2d/core/src/canvas/canvas.js 4797             if (line.autoTo) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4798                 var to = getToAnchor(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4799                 if (to.id === lineAnchor.id) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4800                     _this.calcAutoAnchor(line, to, pen, item);

./node_modules/@meta2d/core/src/canvas/canvas.js 4803             var penAnchor = getAnchor(pen, item.anchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 4807             translatePoint(lineAnchor, penAnchor.x - lineAnchor.x, penAnchor.y - lineAnchor.y);

./node_modules/@meta2d/core/src/canvas/canvas.js 4808             if (_this.store.options.autoPolyline &&

./node_modules/@meta2d/core/src/canvas/canvas.js 4809                 line.autoPolyline !== false &&

./node_modules/@meta2d/core/src/canvas/canvas.js 4810                 line.lineName === 'polyline') {

./node_modules/@meta2d/core/src/canvas/canvas.js 4811                 var from = getFromAnchor(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4812                 var to = getToAnchor(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4814                 if (from.id === lineAnchor.id) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4815                     from = lineAnchor;

./node_modules/@meta2d/core/src/canvas/canvas.js 4818                 else if (to.id === lineAnchor.id) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4819                     to = lineAnchor;

./node_modules/@meta2d/core/src/canvas/canvas.js 4823                     line.calculative.worldAnchors = [from, to];

./node_modules/@meta2d/core/src/canvas/canvas.js 4824                     line.calculative.activeAnchor = from;

./node_modules/@meta2d/core/src/canvas/canvas.js 4825                     _this.polyline(_this.store, line, to);

./node_modules/@meta2d/core/src/canvas/canvas.js 4826                     _this.initLineRect(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4829             _this.store.path2dMap.set(line, globalStore.path2dDraws[line.name](line));

./node_modules/@meta2d/core/src/canvas/canvas.js 4830             _this.patchFlagsLines.add(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4831             change && getLineLength(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 4863             pen.calculative.worldAnchors.forEach(function (anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 4864                 rotatePoint(anchor, angle, rect.center);

./node_modules/@meta2d/core/src/canvas/canvas.js 5008                                 if (typeof pen[k] !== 'object' || k === 'lineDash') {

./node_modules/@meta2d/core/src/canvas/canvas.js 5016                                 if (typeof pen[k] !== 'object' || k === 'lineDash') {

./node_modules/@meta2d/core/src/canvas/canvas.js 5219      * 修改对应连线的 anchors

./node_modules/@meta2d/core/src/canvas/canvas.js 5229             var lineId = pen.connectedLines[index].lineId;

./node_modules/@meta2d/core/src/canvas/canvas.js 5230             var line = pastePens.find(function (pen) { return pen.id === lineId; });

./node_modules/@meta2d/core/src/canvas/canvas.js 5231             if (line) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5232                 var from = line.anchors[0];

./node_modules/@meta2d/core/src/canvas/canvas.js 5233                 var to = line.anchors[line.anchors.length - 1];

./node_modules/@meta2d/core/src/canvas/canvas.js 5253      * @param line 线

./node_modules/@meta2d/core/src/canvas/canvas.js 5256     Canvas.prototype.changeNodeConnectedLine = function (oldId, line, pastePens) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5259         var from = line.anchors[0];

./node_modules/@meta2d/core/src/canvas/canvas.js 5260         var to = line.anchors[line.anchors.length - 1];

./node_modules/@meta2d/core/src/canvas/canvas.js 5262         var anchors = [from, to];

./node_modules/@meta2d/core/src/canvas/canvas.js 5263         var _loop_7 = function (anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5264             var nodeId = anchor.connectTo;

./node_modules/@meta2d/core/src/canvas/canvas.js 5269                         if (cl.lineId === oldId) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5270                             cl.lineId = line.id;

./node_modules/@meta2d/core/src/canvas/canvas.js 5271                             cl.lineAnchor = anchor.id;

./node_modules/@meta2d/core/src/canvas/canvas.js 5277                     anchor.connectTo = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 5278                     if (anchor.prev) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5279                         anchor.prev.connectTo = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 5281                     if (anchor.next) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5282                         anchor.next.connectTo = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 5288             for (var anchors_1 = __values(anchors), anchors_1_1 = anchors_1.next(); !anchors_1_1.done; anchors_1_1 = anchors_1.next()) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5289                 var anchor = anchors_1_1.value;

./node_modules/@meta2d/core/src/canvas/canvas.js 5290                 _loop_7(anchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 5296                 if (anchors_1_1 && !anchors_1_1.done && (_a = anchors_1.return)) _a.call(anchors_1);

./node_modules/@meta2d/core/src/canvas/canvas.js 5335                         // TODO: 连线的删除 ，连接的 node 的 connectLines 会变化（删除 node ，line 的 anchors 类似），未记历史记录

./node_modules/@meta2d/core/src/canvas/canvas.js 5436                 var _b = pen.connectedLines[i], lineId = _b.lineId, lineAnchor = _b.lineAnchor;

./node_modules/@meta2d/core/src/canvas/canvas.js 5437                 var line = this_2.store.pens[lineId];

./node_modules/@meta2d/core/src/canvas/canvas.js 5438                 if (line) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5439                     var anchor = line.anchors.find(function (anchor) { return anchor.id === lineAnchor; });

./node_modules/@meta2d/core/src/canvas/canvas.js 5440                     if ((anchor === null || anchor === void 0 ? void 0 : anchor.connectTo) === pen.id) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5441                         anchor.connectTo = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 5442                         anchor.anchorId = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 5443                         anchor.prev && (anchor.prev.connectTo = undefined);

./node_modules/@meta2d/core/src/canvas/canvas.js 5444                         anchor.next && (anchor.next.connectTo = undefined);

./node_modules/@meta2d/core/src/canvas/canvas.js 5446                     anchor = getAnchor(line, lineAnchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 5447                     if (anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5448                         anchor.connectTo = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 5449                         anchor.anchorId = undefined;

./node_modules/@meta2d/core/src/canvas/canvas.js 5450                         anchor.prev && (anchor.prev.connectTo = undefined);

./node_modules/@meta2d/core/src/canvas/canvas.js 5451                         anchor.next && (anchor.next.connectTo = undefined);

./node_modules/@meta2d/core/src/canvas/canvas.js 5463         (_a = pen.calculative.worldAnchors) === null || _a === void 0 ? void 0 : _a.forEach(function (lineAnchor, index) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5465             if (!lineAnchor.connectTo) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5468             var connectTo = _this.store.pens[lineAnchor.connectTo];

./node_modules/@meta2d/core/src/canvas/canvas.js 5470                 (_a = connectTo.calculative.worldAnchors) === null || _a === void 0 ? void 0 : _a.forEach(function (anchor) {

./node_modules/@meta2d/core/src/canvas/canvas.js 5471                     disconnectLine(connectTo, anchor, pen, lineAnchor);

./node_modules/@meta2d/core/src/canvas/canvas.js 5505             sheet.insertRule('.meta2d-input{display:none;position:absolute;outline:none;align-items: center;}');

./node_modules/@meta2d/core/src/canvas/canvas.js 5506             sheet.insertRule('.meta2d-input textarea{resize:none;border:none;outline:none;background:transparent;flex-grow:1;height:100%;left:0;top:0}');

./node_modules/@meta2d/core/src/canvas/canvas.js 5509             sheet.insertRule('.meta2d-input ul li{padding: 5px 12px;line-height: 22px;white-space: nowrap;cursor: pointer;}');

./node_modules/@meta2d/core/src/canvas/canvas.js 5512             sheet.insertRule('.meta2d-input .input-div{resize:none;border:none;outline:none;background:transparent;flex-grow:1;height:100%;width: 100%;left:0;top:0;display:flex;text-align: center;justify-content: center;flex-direction: column;}');

./node_modules/@meta2d/core/src/canvas/canvas.js 5623                 var lineId = _a.lineId;

./node_modules/@meta2d/core/src/canvas/canvas.js 5624                 var line = _this.store.pens[lineId];

./node_modules/@meta2d/core/src/canvas/canvas.js 5625                 calcWorldAnchors(line);

./node_modules/@meta2d/core/src/canvas/canvas.js 5649             if (typeof pen[k] !== 'object' || k === 'lineDash') {

./node_modules/@meta2d/core/src/canvas/canvas.js 5831         ctx.textBaseline = 'middle'; // 默认垂直居中

./node_modules/@meta2d/core/src/canvas/magnifierCanvas.js 30         this.offscreen.getContext('2d').textBaseline = 'middle';

./node_modules/@meta2d/core/src/canvas/magnifierCanvas.js 46         ctx.lineWidth = 5;

./node_modules/@meta2d/core/src/canvas/canvasImage.js 52         this.otherOffsreen.getContext('2d').textBaseline = 'middle';

./node_modules/@meta2d/core/src/canvas/canvasImage.js 56         this.offscreen.getContext('2d').textBaseline = 'middle';

./node_modules/@meta2d/core/src/canvas/canvasImage.js 60         this.animateOffsScreen.getContext('2d').textBaseline = 'middle';

./node_modules/@meta2d/core/src/canvas/canvasImage.js 252         ctx.lineWidth = 1;

./node_modules/@meta2d/core/src/canvas/canvasImage.js 260             ctx.lineTo(i, longSide * 2);

./node_modules/@meta2d/core/src/canvas/canvasImage.js 264             ctx.lineTo(longSide * 2, i);

./node_modules/@meta2d/core/src/canvas/canvasImage.js 285         ctx.lineWidth = 12;

./node_modules/@meta2d/core/src/canvas/canvasImage.js 286         ctx.lineDashOffset = -x % span;

./node_modules/@meta2d/core/src/canvas/canvasImage.js 289         ctx.lineTo(width, 0);

./node_modules/@meta2d/core/src/canvas/canvasImage.js 293         ctx.lineDashOffset = -y % span;

./node_modules/@meta2d/core/src/canvas/canvasImage.js 295         ctx.lineTo(0, height);

./node_modules/@meta2d/core/src/canvas/canvasImage.js 300         ctx.lineWidth = 24;

./node_modules/@meta2d/core/src/canvas/canvasImage.js 301         ctx.lineDashOffset = -x % (span * 10);

./node_modules/@meta2d/core/src/canvas/canvasImage.js 304         ctx.lineTo(width, 0);

./node_modules/@meta2d/core/src/canvas/canvasImage.js 307         ctx.lineDashOffset = -y % (span * 10);

./node_modules/@meta2d/core/src/canvas/canvasImage.js 309         ctx.lineTo(0, height);

./node_modules/@meta2d/core/src/pen/model.js 43     'lineHeight',

./node_modules/@meta2d/core/src/pen/model.js 47     'textBaseline',

./node_modules/@meta2d/core/src/pen/model.js 96     'lineDash',

./node_modules/@meta2d/core/src/pen/model.js 97     'lineCap',

./node_modules/@meta2d/core/src/pen/model.js 98     'lineJoin',

./node_modules/@meta2d/core/src/pen/model.js 100     'lineGradientFromColor',

./node_modules/@meta2d/core/src/pen/model.js 101     'lineGradientToColor',

./node_modules/@meta2d/core/src/pen/model.js 102     'lineGradientAngle',

./node_modules/@meta2d/core/src/pen/model.js 106     'lineWidth',

./node_modules/@meta2d/core/src/pen/model.js 115     'anchorColor',

./node_modules/@meta2d/core/src/pen/model.js 116     'anchorRadius',

./node_modules/@meta2d/core/src/pen/model.js 131     'textBaseline',

./node_modules/@meta2d/core/src/pen/model.js 132     'lineHeight',

./node_modules/@meta2d/core/src/pen/model.js 143     'lineWidth',

./node_modules/@meta2d/core/src/pen/model.js 144     'lineAnimateType',

./node_modules/@meta2d/core/src/pen/render.js 86     return linearGradient(ctx, worldRect, gradientFromColor, gradientToColor, gradientAngle);

./node_modules/@meta2d/core/src/pen/render.js 112     var _a = pen.calculative, worldRect = _a.worldRect, lineGradientFromColor = _a.lineGradientFromColor, lineGradientToColor = _a.lineGradientToColor, lineGradientAngle = _a.lineGradientAngle;

./node_modules/@meta2d/core/src/pen/render.js 113     return linearGradient(ctx, worldRect, lineGradientFromColor, lineGradientToColor, lineGradientAngle);

./node_modules/@meta2d/core/src/pen/render.js 121 function linearGradient(ctx, worldRect, fromColor, toColor, angle) {

./node_modules/@meta2d/core/src/pen/render.js 244     var _a = pen.calculative, fontStyle = _a.fontStyle, fontWeight = _a.fontWeight, fontSize = _a.fontSize, fontFamily = _a.fontFamily, lineHeight = _a.lineHeight, text = _a.text, hiddenText = _a.hiddenText, canvas = _a.canvas, textHasShadow = _a.textHasShadow, textBackground = _a.textBackground;

./node_modules/@meta2d/core/src/pen/render.js 268         lineHeight: lineHeight,

./node_modules/@meta2d/core/src/pen/render.js 280     var oneRowHeight = fontSize * lineHeight;

./node_modules/@meta2d/core/src/pen/render.js 299     var _b = pen.calculative, fontStyle = _b.fontStyle, fontWeight = _b.fontWeight, fontSize = _b.fontSize, fontFamily = _b.fontFamily, lineHeight = _b.lineHeight, canvas = _b.canvas;

./node_modules/@meta2d/core/src/pen/render.js 315         lineHeight: lineHeight,

./node_modules/@meta2d/core/src/pen/render.js 322             var anchor = _d.value;

./node_modules/@meta2d/core/src/pen/render.js 324                 prev = anchor;

./node_modules/@meta2d/core/src/pen/render.js 327             var dis = distance(prev, anchor);

./node_modules/@meta2d/core/src/pen/render.js 333             var angle = calcRotate(prev, anchor) - 270;

./node_modules/@meta2d/core/src/pen/render.js 342             ctx.fillText(t, prev.x, prev.y + lineHeight / 2);

./node_modules/@meta2d/core/src/pen/render.js 344             prev = anchor;

./node_modules/@meta2d/core/src/pen/render.js 364     ctx.textBaseline = 'middle';

./node_modules/@meta2d/core/src/pen/render.js 371             ctx.textBaseline = 'top';

./node_modules/@meta2d/core/src/pen/render.js 375             ctx.textBaseline = 'bottom';

./node_modules/@meta2d/core/src/pen/render.js 389             ctx.textBaseline = 'top';

./node_modules/@meta2d/core/src/pen/render.js 395             ctx.textBaseline = 'top';

./node_modules/@meta2d/core/src/pen/render.js 401             ctx.textBaseline = 'bottom';

./node_modules/@meta2d/core/src/pen/render.js 407             ctx.textBaseline = 'bottom';

./node_modules/@meta2d/core/src/pen/render.js 442     var _b = _a === void 0 ? {} : _a, _c = _b.fontStyle, fontStyle = _c === void 0 ? 'normal' : _c, _d = _b.textDecoration, textDecoration = _d === void 0 ? 'normal' : _d, _e = _b.fontWeight, fontWeight = _e === void 0 ? 'normal' : _e, _f = _b.fontSize, fontSize = _f === void 0 ? 12 : _f, _g = _b.fontFamily, fontFamily = _g === void 0 ? 'Arial' : _g, _h = _b.lineHeight, lineHeight = _h === void 0 ? 1 : _h;

./node_modules/@meta2d/core/src/pen/render.js 443     return fontStyle + " " + textDecoration + " " + fontWeight + " " + fontSize + "px/" + lineHeight + " " + fontFamily;

./node_modules/@meta2d/core/src/pen/render.js 478     if (pen.calculative.rotate && pen.name !== 'line') {

./node_modules/@meta2d/core/src/pen/render.js 481     if (pen.calculative.lineWidth > 1) {

./node_modules/@meta2d/core/src/pen/render.js 482         ctx.lineWidth = pen.calculative.lineWidth;

./node_modules/@meta2d/core/src/pen/render.js 553     if (pen.calculative.lineDash) {

./node_modules/@meta2d/core/src/pen/render.js 554         ctx.setLineDash(pen.calculative.lineDash);

./node_modules/@meta2d/core/src/pen/render.js 556     if (pen.calculative.lineDashOffset) {

./node_modules/@meta2d/core/src/pen/render.js 557         ctx.lineDashOffset = pen.calculative.lineDashOffset;

./node_modules/@meta2d/core/src/pen/render.js 589  * 更改 ctx 的 lineCap 属性

./node_modules/@meta2d/core/src/pen/render.js 592     var lineCap = pen.lineCap || (pen.type ? 'round' : 'square');

./node_modules/@meta2d/core/src/pen/render.js 593     if (lineCap) {

./node_modules/@meta2d/core/src/pen/render.js 594         ctx.lineCap = lineCap;

./node_modules/@meta2d/core/src/pen/render.js 597         ctx.lineCap = 'round';

./node_modules/@meta2d/core/src/pen/render.js 601  * 更改 ctx 的 lineJoin 属性

./node_modules/@meta2d/core/src/pen/render.js 604     var lineJoin = pen.lineJoin;

./node_modules/@meta2d/core/src/pen/render.js 605     if (lineJoin) {

./node_modules/@meta2d/core/src/pen/render.js 606         ctx.lineJoin = lineJoin;

./node_modules/@meta2d/core/src/pen/render.js 609         ctx.lineJoin = 'round';

./node_modules/@meta2d/core/src/pen/render.js 646     if (pen.calculative.rotate && pen.name !== 'line') {

./node_modules/@meta2d/core/src/pen/render.js 649     if (pen.calculative.lineWidth > 1) {

./node_modules/@meta2d/core/src/pen/render.js 650         ctx.lineWidth = pen.calculative.lineWidth;

./node_modules/@meta2d/core/src/pen/render.js 688     if (pen.calculative.lineDash) {

./node_modules/@meta2d/core/src/pen/render.js 689         ctx.setLineDash(pen.calculative.lineDash);

./node_modules/@meta2d/core/src/pen/render.js 691     if (pen.calculative.lineDashOffset) {

./node_modules/@meta2d/core/src/pen/render.js 692         ctx.lineDashOffset = pen.calculative.lineDashOffset;

./node_modules/@meta2d/core/src/pen/render.js 746             var lineWidth = pen.calculative.lineWidth + pen.calculative.borderWidth;

./node_modules/@meta2d/core/src/pen/render.js 747             ctx.lineWidth = lineWidth;

./node_modules/@meta2d/core/src/pen/render.js 751                 lineWidth && ctx.stroke(path);

./node_modules/@meta2d/core/src/pen/render.js 756                 lineWidth && ctx.stroke();

./node_modules/@meta2d/core/src/pen/render.js 792         if (pen.calculative.lineWidth) {

./node_modules/@meta2d/core/src/pen/render.js 823  * 设置线条动画，ctx 的 strokeStyle lineDash 等属性更改

./node_modules/@meta2d/core/src/pen/render.js 828     switch (pen.lineAnimateType) {

./node_modules/@meta2d/core/src/pen/render.js 831                 ctx.lineDashOffset = pen.calculative.animatePos;

./node_modules/@meta2d/core/src/pen/render.js 834                 ctx.lineDashOffset = pen.length - pen.calculative.animatePos;

./node_modules/@meta2d/core/src/pen/render.js 836             len = pen.calculative.lineWidth || 5;

./node_modules/@meta2d/core/src/pen/render.js 846                 ctx.lineDashOffset = pen.calculative.animatePos;

./node_modules/@meta2d/core/src/pen/render.js 849                 ctx.lineDashOffset = pen.length - pen.calculative.animatePos;

./node_modules/@meta2d/core/src/pen/render.js 852                 pen.calculative.animateDotSize || pen.calculative.lineWidth * 2 || 6;

./node_modules/@meta2d/core/src/pen/render.js 856             ctx.lineWidth = len;

./node_modules/@meta2d/core/src/pen/render.js 886     ctx.lineWidth = 1;

./node_modules/@meta2d/core/src/pen/render.js 899     if (pen.calculative.lineWidth > 3) {

./node_modules/@meta2d/core/src/pen/render.js 900         r = pen.calculative.lineWidth;

./node_modules/@meta2d/core/src/pen/render.js 908             ctx.lineTo(pt.x, pt.y);

./node_modules/@meta2d/core/src/pen/render.js 924             ctx.lineTo(pt.next.x, pt.next.y);

./node_modules/@meta2d/core/src/pen/render.js 1021     var anchors = [];

./node_modules/@meta2d/core/src/pen/render.js 1022     if (pen.anchors) {

./node_modules/@meta2d/core/src/pen/render.js 1023         pen.anchors.forEach(function (anchor) {

./node_modules/@meta2d/core/src/pen/render.js 1024             anchors.push(calcWorldPointOfPen(pen, anchor));

./node_modules/@meta2d/core/src/pen/render.js 1027     // Default anchors of node

./node_modules/@meta2d/core/src/pen/render.js 1028     if (!anchors.length &&

./node_modules/@meta2d/core/src/pen/render.js 1032         anchors = store.options.defaultAnchors.map(function (anchor, index) {

./node_modules/@meta2d/core/src/pen/render.js 1036                 x: x_1 + width_1 * anchor.x,

./node_modules/@meta2d/core/src/pen/render.js 1037                 y: y_1 + height_1 * anchor.y,

./node_modules/@meta2d/core/src/pen/render.js 1042         anchors.forEach(function (anchor) {

./node_modules/@meta2d/core/src/pen/render.js 1043             rotatePoint(anchor, pen.calculative.rotate, pen.calculative.worldRect.center);

./node_modules/@meta2d/core/src/pen/render.js 1046     if (!pen.type || pen.anchors) {

./node_modules/@meta2d/core/src/pen/render.js 1047         pen.calculative.worldAnchors = anchors;

./node_modules/@meta2d/core/src/pen/render.js 1049     if (pen.calculative.activeAnchor && anchors.length) {

./node_modules/@meta2d/core/src/pen/render.js 1050         pen.calculative.activeAnchor = anchors.find(function (a) {

./node_modules/@meta2d/core/src/pen/render.js 1129     if (!pen.anchors) {

./node_modules/@meta2d/core/src/pen/render.js 1130         pen.anchors = [];

./node_modules/@meta2d/core/src/pen/render.js 1146         var anchor = {

./node_modules/@meta2d/core/src/pen/render.js 1152         pen.anchors.push(anchor);

./node_modules/@meta2d/core/src/pen/render.js 1157     if (!pen.anchors) {

./node_modules/@meta2d/core/src/pen/render.js 1158         pen.anchors = [];

./node_modules/@meta2d/core/src/pen/render.js 1165     pen.anchors.splice(index + 1, 0, calcRelativePoint(worldAnchor, pen.calculative.worldRect));

./node_modules/@meta2d/core/src/pen/render.js 1169 export function removePenAnchor(pen, anchor) {

./node_modules/@meta2d/core/src/pen/render.js 1173     var i = pen.calculative.worldAnchors.findIndex(function (a) { return a.id === anchor.id; });

./node_modules/@meta2d/core/src/pen/render.js 1177     i = pen.anchors.findIndex(function (a) { return a.id === anchor.id; });

./node_modules/@meta2d/core/src/pen/render.js 1179         pen.anchors.splice(i, 1);

./node_modules/@meta2d/core/src/pen/render.js 1190     var anchor;

./node_modules/@meta2d/core/src/pen/render.js 1195             anchor = a;

./node_modules/@meta2d/core/src/pen/render.js 1198     return anchor;

./node_modules/@meta2d/core/src/pen/render.js 1203     if (pen.anchors) {

./node_modules/@meta2d/core/src/pen/render.js 1204         pen.anchors.forEach(function (a) {

./node_modules/@meta2d/core/src/pen/render.js 1218         if (!pen.anchors || !pen.anchors.length) {

./node_modules/@meta2d/core/src/pen/render.js 1238  * 添加line到pen的connectedLines中，并关联相关属性

./node_modules/@meta2d/core/src/pen/render.js 1241 export function connectLine(pen, anchor, line, lineAnchor) {

./node_modules/@meta2d/core/src/pen/render.js 1243         !anchor ||

./node_modules/@meta2d/core/src/pen/render.js 1244         !line ||

./node_modules/@meta2d/core/src/pen/render.js 1245         !lineAnchor ||

./node_modules/@meta2d/core/src/pen/render.js 1246         anchor.twoWay === TwoWay.DisableConnected ||

./node_modules/@meta2d/core/src/pen/render.js 1247         anchor.twoWay === TwoWay.Disable ||

./node_modules/@meta2d/core/src/pen/render.js 1248         lineAnchor.twoWay === TwoWay.DisableConnectTo ||

./node_modules/@meta2d/core/src/pen/render.js 1249         lineAnchor.twoWay === TwoWay.Disable) {

./node_modules/@meta2d/core/src/pen/render.js 1252     if (anchor.twoWay === TwoWay.In) {

./node_modules/@meta2d/core/src/pen/render.js 1253         if (line.calculative.worldAnchors.length === 1) {

./node_modules/@meta2d/core/src/pen/render.js 1256         var to = getToAnchor(line);

./node_modules/@meta2d/core/src/pen/render.js 1257         if (lineAnchor.id !== to.id) {

./node_modules/@meta2d/core/src/pen/render.js 1261     if (anchor.twoWay === TwoWay.Out) {

./node_modules/@meta2d/core/src/pen/render.js 1262         var from = getFromAnchor(line);

./node_modules/@meta2d/core/src/pen/render.js 1263         if (lineAnchor.id !== from.id) {

./node_modules/@meta2d/core/src/pen/render.js 1267     if (lineAnchor.connectTo === pen.id && lineAnchor.anchorId === anchor.id) {

./node_modules/@meta2d/core/src/pen/render.js 1270     if (lineAnchor.connectTo) {

./node_modules/@meta2d/core/src/pen/render.js 1271         var p = pen.calculative.canvas.store.pens[lineAnchor.connectTo];

./node_modules/@meta2d/core/src/pen/render.js 1272         disconnectLine(p, getAnchor(p, lineAnchor.anchorId), line, lineAnchor);

./node_modules/@meta2d/core/src/pen/render.js 1278         return item.lineId === line.id &&

./node_modules/@meta2d/core/src/pen/render.js 1279             item.lineAnchor === lineAnchor.id &&

./node_modules/@meta2d/core/src/pen/render.js 1280             item.anchor === anchor.id;

./node_modules/@meta2d/core/src/pen/render.js 1284             lineId: line.id,

./node_modules/@meta2d/core/src/pen/render.js 1285             lineAnchor: lineAnchor.id,

./node_modules/@meta2d/core/src/pen/render.js 1286             anchor: anchor.id,

./node_modules/@meta2d/core/src/pen/render.js 1289     lineAnchor.connectTo = pen.id;

./node_modules/@meta2d/core/src/pen/render.js 1290     lineAnchor.anchorId = anchor.id;

./node_modules/@meta2d/core/src/pen/render.js 1293         connectLine(line, lineAnchor, pen, anchor);

./node_modules/@meta2d/core/src/pen/render.js 1296         line: line,

./node_modules/@meta2d/core/src/pen/render.js 1297         lineAnchor: lineAnchor,

./node_modules/@meta2d/core/src/pen/render.js 1299         anchor: anchor,

./node_modules/@meta2d/core/src/pen/render.js 1304  * 从 pen.connectedLines 中删除 lineId 和 lineAnchor

./node_modules/@meta2d/core/src/pen/render.js 1306 export function disconnectLine(pen, anchor, line, lineAnchor) {

./node_modules/@meta2d/core/src/pen/render.js 1307     if (!pen || !anchor || !line || !lineAnchor) {

./node_modules/@meta2d/core/src/pen/render.js 1314         if ((item.lineId === line.id || item.lineId === line.id) &&

./node_modules/@meta2d/core/src/pen/render.js 1315             item.lineAnchor === lineAnchor.id &&

./node_modules/@meta2d/core/src/pen/render.js 1316             item.anchor === anchor.id) {

./node_modules/@meta2d/core/src/pen/render.js 1320     lineAnchor.connectTo = undefined;

./node_modules/@meta2d/core/src/pen/render.js 1321     lineAnchor.anchorId = undefined;

./node_modules/@meta2d/core/src/pen/render.js 1324         anchor.connectTo === line.id &&

./node_modules/@meta2d/core/src/pen/render.js 1325         anchor.anchorId === lineAnchor.id) {

./node_modules/@meta2d/core/src/pen/render.js 1326         disconnectLine(line, lineAnchor, pen, anchor);

./node_modules/@meta2d/core/src/pen/render.js 1329         line: line,

./node_modules/@meta2d/core/src/pen/render.js 1330         lineAnchor: lineAnchor,

./node_modules/@meta2d/core/src/pen/render.js 1332         anchor: anchor,

./node_modules/@meta2d/core/src/pen/render.js 1336 export function getAnchor(pen, anchorId) {

./node_modules/@meta2d/core/src/pen/render.js 1338     if (!pen || !anchorId) {

./node_modules/@meta2d/core/src/pen/render.js 1341     return (_a = pen.calculative.worldAnchors) === null || _a === void 0 ? void 0 : _a.find(function (item) { return item.id === anchorId; });

./node_modules/@meta2d/core/src/pen/render.js 1477         if (typeof pen[k] !== 'object' || k === 'lineDash') {

./node_modules/@meta2d/core/src/pen/render.js 1574  * 值类型为 number , pen.linear 为 false 时，且 key 不属于 noLinear 时，返回 true

./node_modules/@meta2d/core/src/pen/render.js 1584         pen.linear !== false &&

./node_modules/@meta2d/core/src/pen/render.js 1657     elem.style.outline = 'none';

./node_modules/@meta2d/core/src/pen/render.js 1662     elem.style.display = pen.calculative.inView != false ? 'inline' : 'none'; // 是否隐藏元素

./node_modules/@meta2d/core/src/pen/render.js 1714         pen.calculative.worldAnchors.forEach(function (anchor) {

./node_modules/@meta2d/core/src/pen/render.js 1715             rotatePoint(anchor, angle, rect.center);

./node_modules/@meta2d/core/src/pen/render.js 1759     var _b = pen.calculative.canvas.store.options, fontSize = _b.fontSize, lineHeight = _b.lineHeight;

./node_modules/@meta2d/core/src/pen/render.js 1765     if (!pen.lineHeight) {

./node_modules/@meta2d/core/src/pen/render.js 1766         pen.lineHeight = lineHeight;

./node_modules/@meta2d/core/src/pen/render.js 1767         pen.calculative.lineHeight = pen.lineHeight;

./node_modules/@meta2d/core/src/pen/render.js 1774         pen.anchors = pen.calculative.worldAnchors.map(function (pt) {

./node_modules/@meta2d/core/src/pen/arrow.js 68     ctx.lineTo(point.x, point.y);

./node_modules/@meta2d/core/src/pen/arrow.js 69     ctx.lineTo(fromX, point.y + point.step / 4);

./node_modules/@meta2d/core/src/pen/arrow.js 78     if (ctx.lineWidth < 2) {

./node_modules/@meta2d/core/src/pen/arrow.js 79         ctx.lineWidth = 2;

./node_modules/@meta2d/core/src/pen/arrow.js 86     ctx.lineTo(point.x, point.y);

./node_modules/@meta2d/core/src/pen/arrow.js 87     ctx.lineTo(fromX, point.y + point.step / 4);

./node_modules/@meta2d/core/src/pen/arrow.js 126     ctx.lineTo(fromX + r, point.y - r / 2);

./node_modules/@meta2d/core/src/pen/arrow.js 127     ctx.lineTo(point.x, point.y);

./node_modules/@meta2d/core/src/pen/arrow.js 128     ctx.lineTo(fromX + r, point.y + r / 2);

./node_modules/@meta2d/core/src/pen/arrow.js 143     ctx.lineTo(fromX + r, point.y - r / 2);

./node_modules/@meta2d/core/src/pen/arrow.js 144     ctx.lineTo(point.x, point.y);

./node_modules/@meta2d/core/src/pen/arrow.js 145     ctx.lineTo(fromX + r, point.y + r / 2);

./node_modules/@meta2d/core/src/pen/arrow.js 152 arrows.line = function (ctx, pen, store, point) {

./node_modules/@meta2d/core/src/pen/arrow.js 159     ctx.lineTo(point.x, point.y);

./node_modules/@meta2d/core/src/pen/arrow.js 160     ctx.lineTo(fromX, point.y + point.step / 3);

./node_modules/@meta2d/core/src/pen/arrow.js 164 arrows.lineUp = function (ctx, pen, store, point) {

./node_modules/@meta2d/core/src/pen/arrow.js 171     ctx.lineTo(point.x, point.y);

./node_modules/@meta2d/core/src/pen/arrow.js 175 arrows.lineDown = function (ctx, pen, store, point) {

./node_modules/@meta2d/core/src/pen/arrow.js 182     ctx.lineTo(point.x, point.y);

./node_modules/@meta2d/core/src/pen/text.js 65     var textBaseline = pen.textBaseline || canvas.store.options.textBaseline;

./node_modules/@meta2d/core/src/pen/text.js 74     switch (textBaseline) {

./node_modules/@meta2d/core/src/pen/text.js 95     var lineHeight = pen.calculative.fontSize * pen.calculative.lineHeight;

./node_modules/@meta2d/core/src/pen/text.js 96     var h = pen.calculative.textLines.length * lineHeight;

./node_modules/@meta2d/core/src/pen/text.js 111     var textBaseline = pen.textBaseline || options.textBaseline;

./node_modules/@meta2d/core/src/pen/text.js 112     switch (textBaseline) {

./node_modules/@meta2d/core/src/pen/text.js 136     var lines = [];

./node_modules/@meta2d/core/src/pen/text.js 137     var oneRowHeight = pen.calculative.fontSize * pen.calculative.lineHeight;

./node_modules/@meta2d/core/src/pen/text.js 147                     lines.push(allLines[0]);

./node_modules/@meta2d/core/src/pen/text.js 150                         setEllipsisOnLastLine(lines);

./node_modules/@meta2d/core/src/pen/text.js 155                 lines.push(text);

./node_modules/@meta2d/core/src/pen/text.js 158         case 'pre-line':

./node_modules/@meta2d/core/src/pen/text.js 159             lines = text.split(/[\n]/g);

./node_modules/@meta2d/core/src/pen/text.js 160             if (pen.ellipsis !== false && lines.length > maxRows) {

./node_modules/@meta2d/core/src/pen/text.js 161                 lines = lines.slice(0, maxRows);

./node_modules/@meta2d/core/src/pen/text.js 162                 setEllipsisOnLastLine(lines);

./node_modules/@meta2d/core/src/pen/text.js 185                                     setEllipsisOnLastLine(lines);

./node_modules/@meta2d/core/src/pen/text.js 189                                     lines.push(l);

./node_modules/@meta2d/core/src/pen/text.js 202                         lines.push.apply(lines, __spreadArray([], __read(items), false));

./node_modules/@meta2d/core/src/pen/text.js 217         lines.forEach(function (text, i) {

./node_modules/@meta2d/core/src/pen/text.js 220                 lines[i] = textNum.toFixed(keepDecimal);

./node_modules/@meta2d/core/src/pen/text.js 224     pen.calculative.textLines = lines;

./node_modules/@meta2d/core/src/pen/text.js 225     return lines;

./node_modules/@meta2d/core/src/pen/text.js 252     var _a = pen.calculative, fontStyle = _a.fontStyle, fontWeight = _a.fontWeight, fontSize = _a.fontSize, fontFamily = _a.fontFamily, lineHeight = _a.lineHeight;

./node_modules/@meta2d/core/src/pen/text.js 254     var lines = [];

./node_modules/@meta2d/core/src/pen/text.js 266                 lineHeight: lineHeight,

./node_modules/@meta2d/core/src/pen/text.js 284             currentLine.length && lines.push(currentLine);

./node_modules/@meta2d/core/src/pen/text.js 288     currentLine.length && lines.push(currentLine);

./node_modules/@meta2d/core/src/pen/text.js 290     return lines;

./node_modules/@meta2d/core/src/pen/text.js 306  * @param lines

./node_modules/@meta2d/core/src/pen/text.js 308 function setEllipsisOnLastLine(lines) {

./node_modules/@meta2d/core/src/pen/text.js 309     lines[lines.length - 1] = lines[lines.length - 1].slice(0, -3) + '...';

./node_modules/@meta2d/core/src/pen/utils.js 16     if (Array.isArray(pen.anchors)) {

./node_modules/@meta2d/core/src/pen/utils.js 18             for (var _b = __values(pen.anchors), _c = _b.next(); !_c.done; _c = _b.next()) {

./node_modules/@meta2d/core/src/pen/math.js 202                                 anchorId: activePoint.id,

./node_modules/@meta2d/core/src/pen/math.js 217                                 anchorId: activePoint.id,

./node_modules/@meta2d/core/src/pen/math.js 247  * 判断 line 是否是 active 的连接线（并且计算子节点）

./node_modules/@meta2d/core/src/pen/math.js 250  * @param line 连线

./node_modules/@meta2d/core/src/pen/math.js 253 function isConnectLine(store, active, line) {

./node_modules/@meta2d/core/src/pen/math.js 255     if (!line.type) {

./node_modules/@meta2d/core/src/pen/math.js 261                 var cline = _d.value;

./node_modules/@meta2d/core/src/pen/math.js 262                 if (cline.lineId === line.id) {

./node_modules/@meta2d/core/src/pen/math.js 281                 if (isConnectLine(store, child, line)) {

./node_modules/@meta2d/core/src/store/global.js 6     anchors: {},

./node_modules/@meta2d/core/src/store/global.js 15 export function registerAnchors(anchorsFns) {

./node_modules/@meta2d/core/src/store/global.js 16     Object.assign(globalStore.anchors, anchorsFns);

./node_modules/@meta2d/core/src/rect/rect.js 212  * @param line1 线段1

./node_modules/@meta2d/core/src/rect/rect.js 213  * @param line2 线段2

./node_modules/@meta2d/core/src/rect/rect.js 215 function getIntersectPoint(line1, line2) {

./node_modules/@meta2d/core/src/rect/rect.js 216     var k1 = (line1.to.y - line1.from.y) / (line1.to.x - line1.from.x);

./node_modules/@meta2d/core/src/rect/rect.js 217     var k2 = (line2.to.y - line2.from.y) / (line2.to.x - line2.from.x);

./node_modules/@meta2d/core/src/rect/rect.js 220         point: line1.from,

./node_modules/@meta2d/core/src/rect/rect.js 223         point: line2.from,

./node_modules/@meta2d/core/src/rect/rect.js 228  * @param line1 线段1

./node_modules/@meta2d/core/src/rect/rect.js 229  * @param line2 线段2

./node_modules/@meta2d/core/src/rect/rect.js 232 function getIntersectPointByK(line1, line2) {

./node_modules/@meta2d/core/src/rect/rect.js 233     if (isEqual(line1.k, 0)) {

./node_modules/@meta2d/core/src/rect/rect.js 235             x: line2.point.x,

./node_modules/@meta2d/core/src/rect/rect.js 236             y: line1.point.y,

./node_modules/@meta2d/core/src/rect/rect.js 239     else if (isEqual(line2.k, 0)) {

./node_modules/@meta2d/core/src/rect/rect.js 241             x: line1.point.x,

./node_modules/@meta2d/core/src/rect/rect.js 242             y: line2.point.y,

./node_modules/@meta2d/core/src/rect/rect.js 245     var b1 = line1.point.y - line1.k * line1.point.x;

./node_modules/@meta2d/core/src/rect/rect.js 246     var b2 = line2.point.y - line2.k * line2.point.x;

./node_modules/@meta2d/core/src/rect/rect.js 247     var x = (b2 - b1) / (line1.k - line2.k);

./node_modules/@meta2d/core/src/rect/rect.js 248     var y = line1.k * x + b1;

./node_modules/@meta2d/core/src/rect/rect.js 416  * 计算相对点 ，anchors 中的值都是百分比

./node_modules/@meta2d/core/src/rect/triangle.js 4     path.lineTo(pen.calculative.worldRect.x + pen.calculative.worldRect.width, pen.calculative.worldRect.y + pen.calculative.worldRect.height);

./node_modules/@meta2d/core/src/rect/triangle.js 5     path.lineTo(pen.calculative.worldRect.x, pen.calculative.worldRect.y + pen.calculative.worldRect.height);

./node_modules/@meta2d/core/src/rect/triangle.js 6     path.lineTo(pen.calculative.worldRect.x + pen.calculative.worldRect.width / 2, pen.calculative.worldRect.y);

./node_modules/@meta2d/core/src/tooltip/tooltip.js 39             sheet.insertRule('.meta2d-tooltip .text{max-width:320px;min-height:30px;max-height:400px;outline:none;padding:8px 16px;border-radius:4px;background:#777777;color:#ffffff;line-height:1.8;overflow-y:auto;}');

./node_modules/@meta2d/core/src/point/point.js 117     return pt1.anchorId === pt2.anchorId && pt1.connectTo === pt2.connectTo;

./node_modules/@meta2d/core/src/diagrams/index.js 15 export * from './line';

./node_modules/@meta2d/core/src/diagrams/index.js 31 import { line } from './line';

./node_modules/@meta2d/core/src/diagrams/index.js 55         line: line,

./node_modules/@meta2d/core/src/diagrams/pentagon.js 5     path.lineTo(x + width, y + (height * 2) / 5);

./node_modules/@meta2d/core/src/diagrams/pentagon.js 6     path.lineTo(x + (width * 4) / 5, y + height);

./node_modules/@meta2d/core/src/diagrams/pentagon.js 7     path.lineTo(x + width / 5, y + height);

./node_modules/@meta2d/core/src/diagrams/pentagon.js 8     path.lineTo(x, y + (height * 2) / 5);

./node_modules/@meta2d/core/src/diagrams/pentagon.js 36     pen.anchors = points.map(function (_a, index) {

./node_modules/@meta2d/core/src/diagrams/pentagram.js 43         path.lineTo(-(basey - centery) * Math.sin((Math.PI / 180) * 72 * i) + centerx, (basey - centery) * Math.cos((Math.PI / 180) * 72 * i) + centery);

./node_modules/@meta2d/core/src/diagrams/pentagram.js 44         path.lineTo((lx - centerx) * Math.cos((Math.PI / 180) * 72 * (i + 1)) -

./node_modules/@meta2d/core/src/diagrams/pentagram.js 58     var anchors = [];

./node_modules/@meta2d/core/src/diagrams/pentagram.js 60         anchors.push({

./node_modules/@meta2d/core/src/diagrams/pentagram.js 68     pen.anchors = anchors;

./node_modules/@meta2d/core/src/diagrams/pentagram.js 73     var manualPoints = pen.anchors.filter(function (point) { return point.flag !== 1; });

./node_modules/@meta2d/core/src/diagrams/pentagram.js 75     pen.anchors = (_a = pen.anchors).concat.apply(_a, __spreadArray([], __read(manualPoints), false));

./node_modules/@meta2d/core/src/diagrams/mindNode.js 38     var manualPoints = pen.anchors.filter(function (point) { return point.flag !== 1; });

./node_modules/@meta2d/core/src/diagrams/mindNode.js 40     pen.anchors = (_a = pen.anchors).concat.apply(_a, __spreadArray([], __read(manualPoints), false));

./node_modules/@meta2d/core/src/diagrams/mindNode.js 48     var anchors = [];

./node_modules/@meta2d/core/src/diagrams/mindNode.js 67         anchors.push({

./node_modules/@meta2d/core/src/diagrams/mindNode.js 68             id: String(anchors.length),

./node_modules/@meta2d/core/src/diagrams/mindNode.js 88         anchors.push({

./node_modules/@meta2d/core/src/diagrams/mindNode.js 89             id: String(anchors.length),

./node_modules/@meta2d/core/src/diagrams/mindNode.js 112         anchors.push({

./node_modules/@meta2d/core/src/diagrams/mindNode.js 113             id: String(anchors.length),

./node_modules/@meta2d/core/src/diagrams/mindNode.js 133         anchors.push({

./node_modules/@meta2d/core/src/diagrams/mindNode.js 134             id: String(anchors.length),

./node_modules/@meta2d/core/src/diagrams/mindNode.js 141     pen.anchors = anchors;

./node_modules/@meta2d/core/src/diagrams/file.js 6     path.lineTo(ex - offsetX, y);

./node_modules/@meta2d/core/src/diagrams/file.js 7     path.lineTo(ex, y + offsetX);

./node_modules/@meta2d/core/src/diagrams/file.js 8     path.lineTo(ex, ey);

./node_modules/@meta2d/core/src/diagrams/file.js 9     path.lineTo(x, ey);

./node_modules/@meta2d/core/src/diagrams/file.js 12     path.lineTo(ex - offsetX, y + offsetX);

./node_modules/@meta2d/core/src/diagrams/file.js 13     path.lineTo(ex, y + offsetX);

./node_modules/@meta2d/core/src/diagrams/triangle.js 5     path.lineTo(x + width, y + height);

./node_modules/@meta2d/core/src/diagrams/triangle.js 6     path.lineTo(x, y + height);

./node_modules/@meta2d/core/src/diagrams/triangle.js 7     path.lineTo(x + width * 2, y);

./node_modules/@meta2d/core/src/diagrams/triangle.js 31     pen.anchors = points.map(function (_a, index) {

./node_modules/@meta2d/core/src/diagrams/cube.js 59             ctx.lineTo(points[i].x, points[i].y);

./node_modules/@meta2d/core/src/diagrams/mindLine.js 5     path.lineTo(x + width, y + height);

./node_modules/@meta2d/core/src/diagrams/mindLine.js 21     pen.anchors = points.map(function (_a, index) {

./node_modules/@meta2d/core/src/diagrams/arrow.js 5     path.lineTo(x + height / 2, y);

./node_modules/@meta2d/core/src/diagrams/arrow.js 6     path.lineTo(x + height / 2, y + height / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 7     path.lineTo(x + width, y + height / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 8     path.lineTo(x + width, y + (height * 2) / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 9     path.lineTo(x + height / 2, y + (height * 2) / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 10     path.lineTo(x + height / 2, y + (height * 2) / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 11     path.lineTo(x + height / 2, y + height);

./node_modules/@meta2d/core/src/diagrams/arrow.js 20     path.lineTo(x + (width - height / 2), y + height / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 21     path.lineTo(x + (width - height / 2), y);

./node_modules/@meta2d/core/src/diagrams/arrow.js 22     path.lineTo(x + width, y + height / 2);

./node_modules/@meta2d/core/src/diagrams/arrow.js 23     path.lineTo(x + (width - height / 2), y + height);

./node_modules/@meta2d/core/src/diagrams/arrow.js 24     path.lineTo(x + (width - height / 2), y + (height * 2) / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 25     path.lineTo(x, y + (height * 2) / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 34     path.lineTo(x + height / 2, y);

./node_modules/@meta2d/core/src/diagrams/arrow.js 35     path.lineTo(x + height / 2, y + height / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 36     path.lineTo(x + (width - height / 2), y + height / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 37     path.lineTo(x + (width - height / 2), y);

./node_modules/@meta2d/core/src/diagrams/arrow.js 38     path.lineTo(x + width, y + height / 2);

./node_modules/@meta2d/core/src/diagrams/arrow.js 39     path.lineTo(x + (width - height / 2), y + height);

./node_modules/@meta2d/core/src/diagrams/arrow.js 40     path.lineTo(x + (width - height / 2), y + (height * 2) / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 41     path.lineTo(x + height / 2, y + (height * 2) / 3);

./node_modules/@meta2d/core/src/diagrams/arrow.js 42     path.lineTo(x + height / 2, y + height);

./node_modules/@meta2d/core/src/diagrams/diamond.js 5     path.lineTo(x + width, y + height / 2);

./node_modules/@meta2d/core/src/diagrams/diamond.js 6     path.lineTo(x + width / 2, y + height);

./node_modules/@meta2d/core/src/diagrams/diamond.js 7     path.lineTo(x, y + height / 2);

./node_modules/@meta2d/core/src/diagrams/diamond.js 8     path.lineTo(x + width / 2, y);

./node_modules/@meta2d/core/src/diagrams/video.js 18         progress_1.style.outline = 'none';

./node_modules/@meta2d/core/src/diagrams/video.js 44         media_1.style.outline = 'none';

./node_modules/@meta2d/core/src/diagrams/message.js 5     path.lineTo(x + width, y);

./node_modules/@meta2d/core/src/diagrams/message.js 6     path.lineTo(x + width, y + (height * 3) / 4);

./node_modules/@meta2d/core/src/diagrams/message.js 7     path.lineTo(x + (width * 8) / 16, y + (height * 3) / 4);

./node_modules/@meta2d/core/src/diagrams/message.js 8     path.lineTo(x + width / 4, ey);

./node_modules/@meta2d/core/src/diagrams/message.js 9     path.lineTo(x + (width * 5) / 16, y + (height * 3) / 4);

./node_modules/@meta2d/core/src/diagrams/message.js 10     path.lineTo(x, y + (height * 3) / 4);

./node_modules/@meta2d/core/src/diagrams/people.js 8     path.lineTo(ex, y + r * 3);

./node_modules/@meta2d/core/src/diagrams/people.js 10     path.lineTo(middle, y + r * 4);

./node_modules/@meta2d/core/src/diagrams/people.js 12     path.lineTo(x, ey);

./node_modules/@meta2d/core/src/diagrams/people.js 14     path.lineTo(ex, ey);

./node_modules/@meta2d/core/src/diagrams/hexagon.js 5     path.lineTo(x + (width * 3) / 4, y);

./node_modules/@meta2d/core/src/diagrams/hexagon.js 6     path.lineTo(x + width, y + height / 2);

./node_modules/@meta2d/core/src/diagrams/hexagon.js 7     path.lineTo(x + (width * 3) / 4, y + height);

./node_modules/@meta2d/core/src/diagrams/hexagon.js 8     path.lineTo(x + (width * 1) / 4, y + height);

./node_modules/@meta2d/core/src/diagrams/hexagon.js 9     path.lineTo(x, y + height / 2);

./node_modules/@meta2d/core/src/diagrams/hexagon.js 10     path.lineTo(x + width / 4, y);

./node_modules/@meta2d/core/src/diagrams/hexagon.js 16 //   const anchors: Point[] = [];

./node_modules/@meta2d/core/src/diagrams/hexagon.js 17 //   anchors.push({

./node_modules/@meta2d/core/src/diagrams/hexagon.js 23 //   anchors.push({

./node_modules/@meta2d/core/src/diagrams/hexagon.js 29 //   anchors.push({

./node_modules/@meta2d/core/src/diagrams/hexagon.js 35 //   anchors.push({

./node_modules/@meta2d/core/src/diagrams/hexagon.js 41 //   anchors.push({

./node_modules/@meta2d/core/src/diagrams/hexagon.js 47 //   anchors.push({

./node_modules/@meta2d/core/src/diagrams/hexagon.js 53 //   pen.anchors = anchors;

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 16 export function curve(store, pen, mousedwon) {

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 139     var anchor;

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 150         anchor = lerp(p7, p8, t);

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 152         anchor.prev = p7;

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 154         anchor.next = p8;

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 166         anchor = pt;

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 169         anchor.prev = p3;

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 170         anchor.next = p4;

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 176         anchor = pt;

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 178     anchor.penId = pen.id;

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 179     anchor.id = s8();

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 180     anchor.prevNextType = PrevNextType.Bilateral;

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 181     return anchor;

./node_modules/@meta2d/core/src/diagrams/line/curve.jsbak 233 //# sourceMappingURL=curve.js.map
./node_modules/@meta2d/core/src/diagrams/line/index.js 1 export * from './line';

./node_modules/@meta2d/core/src/diagrams/line/index.js 2 export * from './curve';

./node_modules/@meta2d/core/src/diagrams/line/index.js 3 export * from './polyline';

./node_modules/@meta2d/core/src/diagrams/line/index.js.map 1 {"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../packages/core/src/diagrams/line/index.ts"],"names":[],"mappings":"AAAA,cAAc,QAAQ,CAAC;AACvB,cAAc,SAAS,CAAC;AACxB,cAAc,YAAY,CAAC;AAC3B,cAAc,UAAU,CAAC"}
./node_modules/@meta2d/core/src/diagrams/line/curve.js 16 export function curve(store, pen, mousedwon) {

./node_modules/@meta2d/core/src/diagrams/line/curve.js 139     var anchor;

./node_modules/@meta2d/core/src/diagrams/line/curve.js 150         anchor = lerp(p7, p8, t);

./node_modules/@meta2d/core/src/diagrams/line/curve.js 152         anchor.prev = p7;

./node_modules/@meta2d/core/src/diagrams/line/curve.js 154         anchor.next = p8;

./node_modules/@meta2d/core/src/diagrams/line/curve.js 166         anchor = pt;

./node_modules/@meta2d/core/src/diagrams/line/curve.js 169         anchor.prev = p3;

./node_modules/@meta2d/core/src/diagrams/line/curve.js 170         anchor.next = p4;

./node_modules/@meta2d/core/src/diagrams/line/curve.js 176         anchor = pt;

./node_modules/@meta2d/core/src/diagrams/line/curve.js 178     anchor.penId = pen.id;

./node_modules/@meta2d/core/src/diagrams/line/curve.js 179     anchor.id = s8();

./node_modules/@meta2d/core/src/diagrams/line/curve.js 180     anchor.prevNextType = PrevNextType.Bilateral;

./node_modules/@meta2d/core/src/diagrams/line/curve.js 181     return anchor;

./node_modules/@meta2d/core/src/diagrams/line/curve.js 233 //# sourceMappingURL=curve.js.map
./node_modules/@meta2d/core/src/diagrams/line/smooth.js 99     // adds bezier control points at points if lines have angle less than thres

./node_modules/@meta2d/core/src/diagrams/line/smooth.js 135                 // bend it if angle between lines is small

./node_modules/@meta2d/core/src/diagrams/line/smooth.js 140                 // use the two normalized vectors along the lines to create the tangent vector

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 30 export function polyline(store, pen, mousedwon) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 45     if (((_a = pen.anchors) === null || _a === void 0 ? void 0 : _a.length) && from === pen.calculative.activeAnchor) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 50     else if ((!pen.anchors || !pen.anchors.length) &&

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 93     pts.forEach(function (anchor) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 94         anchor.id = s8();

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 95         anchor.penId = pen.id;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 96         pen.calculative.worldAnchors.push(anchor);

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 379     if (pen.calculative.drawlineH == undefined) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 380         pen.calculative.drawlineH =

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 385         if (pen.calculative.drawlineH) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 400 export function anchorInHorizontal(pen, anchor, from) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 403     var anchors = pen.calculative.worldAnchors;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 405         anchors = [];

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 407             anchors.unshift(item);

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 410     for (var i = 0; i < anchors.length; i++) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 411         if (anchors[i].id === anchor.id) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 414         if (anchors[i].y !== anchor.y) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 417         if (anchors[i].x === ((_a = anchors[i + 1]) === null || _a === void 0 ? void 0 : _a.x) &&

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 418             anchors[i].y !== ((_b = anchors[i + 1]) === null || _b === void 0 ? void 0 : _b.y)) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 424 export function anchorInVertical(pen, anchor, from) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 427     var anchors = pen.calculative.worldAnchors;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 429         anchors = [];

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 431             anchors.unshift(item);

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 434     for (var i = 0; i < anchors.length; i++) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 435         if (anchors[i].id === anchor.id) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 438         if (anchors[i].x !== anchor.x) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 441         if (anchors[i].y === ((_a = anchors[i + 1]) === null || _a === void 0 ? void 0 : _a.y) &&

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 442             anchors[i].x !== ((_b = anchors[i + 1]) === null || _b === void 0 ? void 0 : _b.x)) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 448 export function translatePolylineAnchor(pen, anchor, pt) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 452     var i = pen.calculative.worldAnchors.findIndex(function (item) { return item.id === anchor.id; });

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 459             if (anchorInHorizontal(pen, anchor, true)) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 462             else if (anchorInVertical(pen, anchor, true)) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 467             if (anchorInHorizontal(pen, anchor, false)) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 470             else if (anchorInVertical(pen, anchor, false)) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 476                 pen.calculative.h = prev.y === anchor.y;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 479                 pen.calculative.h = next.y === anchor.y;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 485         anchor.x = pt.x;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 486         if (from.connectTo && anchorInHorizontal(pen, anchor, true)) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 487             if (next && next.y !== anchor.y) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 488                 next.x = anchor.x;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 492         if (to.connectTo && anchorInHorizontal(pen, anchor, false)) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 493             if (prev && prev.y !== anchor.y) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 494                 prev.x = anchor.x;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 498         var a = pen.anchors[i];

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 501             prev = pen.anchors[pos];

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 524             next = pen.anchors[pos];

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 550         anchor.y = pt.y;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 554         anchor.y = pt.y;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 555         if (from.connectTo && anchorInVertical(pen, anchor, true)) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 556             if (next && next.x !== anchor.x) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 557                 next.y = anchor.y;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 561         if (to.connectTo && anchorInVertical(pen, anchor, false)) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 562             if (prev && prev.x !== anchor.x) {

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 563                 prev.y = anchor.y;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 567         var a = pen.anchors[i];

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 570             prev = pen.anchors[pos];

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 593             next = pen.anchors[pos];

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 619         anchor.x = pt.x;

./node_modules/@meta2d/core/src/diagrams/line/polyline.js 622 //# sourceMappingURL=polyline.js.map
./node_modules/@meta2d/core/src/diagrams/line/line.js 40 import { getBezierPoint, getQuadraticPoint } from './curve';

./node_modules/@meta2d/core/src/diagrams/line/line.js 41 export function line(pen, ctx) {

./node_modules/@meta2d/core/src/diagrams/line/line.js 62 export function lineSegment(store, pen, mousedwon) {

./node_modules/@meta2d/core/src/diagrams/line/line.js 67     if (pen.calculative.worldAnchors.length < 2 || ((_a = pen.anchors) === null || _a === void 0 ? void 0 : _a.length) > 1) {

./node_modules/@meta2d/core/src/diagrams/line/line.js 98             path.lineTo(to.x, to.y);

./node_modules/@meta2d/core/src/diagrams/line/line.js 123     return (pen === null || pen === void 0 ? void 0 : pen.lineWidth) ? pen.lineWidth / 2 + 4 : 4;

./node_modules/@meta2d/core/src/diagrams/line/line.js 131     if (from.lineLength) {

./node_modules/@meta2d/core/src/diagrams/line/line.js 133         step = r / from.lineLength;

./node_modules/@meta2d/core/src/diagrams/line/line.js 158         from.curvePoints = pts;

./node_modules/@meta2d/core/src/diagrams/line/line.js 170             var anchor = _c.value;

./node_modules/@meta2d/core/src/diagrams/line/line.js 172                 point = pointInLineSegment(pt, from, anchor, r);

./node_modules/@meta2d/core/src/diagrams/line/line.js 181             from = anchor;

./node_modules/@meta2d/core/src/diagrams/line/line.js 218     else if (pt1.curvePoints) {

./node_modules/@meta2d/core/src/diagrams/line/line.js 220             for (var _b = __values(pt1.curvePoints), _c = _b.next(); !_c.done; _c = _b.next()) {

./node_modules/@meta2d/core/src/diagrams/line/line.js 262 function lineLen(from, cp1, cp2, to) {

./node_modules/@meta2d/core/src/diagrams/line/line.js 287             from.lineLength = lineLen(from, from.next, pt.prev, pt);

./node_modules/@meta2d/core/src/diagrams/line/line.js 288             len += from.lineLength;

./node_modules/@meta2d/core/src/diagrams/line/line.js 295         from.lineLength = lineLen(from, from.next, to.prev, to);

./node_modules/@meta2d/core/src/diagrams/line/line.js 296         len += from.lineLength;

./node_modules/@meta2d/core/src/diagrams/line/line.js 304 export function lineInRect(line, rect) {

./node_modules/@meta2d/core/src/diagrams/line/line.js 306     var worldAnchors = line.calculative.worldAnchors;

./node_modules/@meta2d/core/src/diagrams/line/line.js 334     var linePointX1 = pt1.x;

./node_modules/@meta2d/core/src/diagrams/line/line.js 335     var linePointY1 = pt1.y;

./node_modules/@meta2d/core/src/diagrams/line/line.js 336     var linePointX2 = pt2.x;

./node_modules/@meta2d/core/src/diagrams/line/line.js 337     var linePointY2 = pt2.y;

./node_modules/@meta2d/core/src/diagrams/line/line.js 342     var lineHeight = linePointY1 - linePointY2;

./node_modules/@meta2d/core/src/diagrams/line/line.js 343     var lineWidth = linePointX2 - linePointX1; // 计算叉乘

./node_modules/@meta2d/core/src/diagrams/line/line.js 344     var c = linePointX1 * linePointY2 - linePointX2 * linePointY1;

./node_modules/@meta2d/core/src/diagrams/line/line.js 345     if ((lineHeight * rectangleLeftTopX + lineWidth * rectangleLeftTopY + c >= 0 &&

./node_modules/@meta2d/core/src/diagrams/line/line.js 346         lineHeight * rectangleRightBottomX +

./node_modules/@meta2d/core/src/diagrams/line/line.js 347             lineWidth * rectangleRightBottomY +

./node_modules/@meta2d/core/src/diagrams/line/line.js 350         (lineHeight * rectangleLeftTopX + lineWidth * rectangleLeftTopY + c <= 0 &&

./node_modules/@meta2d/core/src/diagrams/line/line.js 351             lineHeight * rectangleRightBottomX +

./node_modules/@meta2d/core/src/diagrams/line/line.js 352                 lineWidth * rectangleRightBottomY +

./node_modules/@meta2d/core/src/diagrams/line/line.js 355         (lineHeight * rectangleLeftTopX + lineWidth * rectangleRightBottomY + c >=

./node_modules/@meta2d/core/src/diagrams/line/line.js 357             lineHeight * rectangleRightBottomX + lineWidth * rectangleLeftTopY + c <=

./node_modules/@meta2d/core/src/diagrams/line/line.js 359         (lineHeight * rectangleLeftTopX + lineWidth * rectangleRightBottomY + c <=

./node_modules/@meta2d/core/src/diagrams/line/line.js 361             lineHeight * rectangleRightBottomX + lineWidth * rectangleLeftTopY + c >=

./node_modules/@meta2d/core/src/diagrams/line/line.js 373         if ((linePointX1 < rectangleLeftTopX && linePointX2 < rectangleLeftTopX) ||

./node_modules/@meta2d/core/src/diagrams/line/line.js 374             (linePointX1 > rectangleRightBottomX &&

./node_modules/@meta2d/core/src/diagrams/line/line.js 375                 linePointX2 > rectangleRightBottomX) ||

./node_modules/@meta2d/core/src/diagrams/line/line.js 376             (linePointY1 > rectangleLeftTopY && linePointY2 > rectangleLeftTopY) ||

./node_modules/@meta2d/core/src/diagrams/line/line.js 377             (linePointY1 < rectangleRightBottomY &&

./node_modules/@meta2d/core/src/diagrams/line/line.js 378                 linePointY2 < rectangleRightBottomY)) {

./node_modules/@meta2d/core/src/diagrams/line/line.js 419 //# sourceMappingURL=line.js.map
./node_modules/scheduler/cjs/scheduler-unstable_mock.development.js 179   // eslint-disable-next-line react-internal/no-production-logging

./node_modules/scheduler/cjs/scheduler-unstable_mock.development.js 193   // eslint-disable-next-line react-internal/no-production-logging

./node_modules/scheduler/cjs/scheduler-unstable_mock.development.js 414       // This currentTask hasn't expired, and we've reached the deadline.

./node_modules/scheduler/cjs/scheduler-unstable_mock.development.js 512     // This is a fork of runWithPriority, inlined for performance.

./node_modules/scheduler/cjs/scheduler-unstable_post_task.development.js 34 var deadline = 0;

./node_modules/scheduler/cjs/scheduler-unstable_post_task.development.js 39   return getCurrentTime() >= deadline;

./node_modules/scheduler/cjs/scheduler-unstable_post_task.development.js 80   deadline = getCurrentTime() + yieldInterval;

./node_modules/scheduler/cjs/scheduler.development.js 119   var deadline = 0; // TODO: Make this configurable

./node_modules/scheduler/cjs/scheduler.development.js 125       return exports.unstable_now() >= deadline;

./node_modules/scheduler/cjs/scheduler.development.js 147   var performWorkUntilDeadline = function () {

./node_modules/scheduler/cjs/scheduler.development.js 153       deadline = currentTime + yieldInterval;

./node_modules/scheduler/cjs/scheduler.development.js 180   channel.port1.onmessage = performWorkUntilDeadline;

./node_modules/scheduler/cjs/scheduler.development.js 406       // This currentTask hasn't expired, and we've reached the deadline.

./node_modules/scheduler/cjs/scheduler.development.js 504     // This is a fork of runWithPriority, inlined for performance.

./node_modules/scheduler/umd/scheduler-tracing.profiling.min.js 13   // eslint-disable-next-line no-unused-expressions

./node_modules/scheduler/umd/scheduler-tracing.profiling.min.js 16     : typeof define === 'function' && define.amd // eslint-disable-line no-undef

./node_modules/scheduler/umd/scheduler-tracing.profiling.min.js 17     ? define(['react'], factory) // eslint-disable-line no-undef

./node_modules/scheduler/umd/scheduler-tracing.profiling.min.js 42     // eslint-disable-next-line max-len

./node_modules/scheduler/umd/scheduler-tracing.profiling.min.js 57     // eslint-disable-next-line max-len

./node_modules/scheduler/umd/scheduler-unstable_mock.development.js 178     // eslint-disable-next-line react-internal/no-production-logging

./node_modules/scheduler/umd/scheduler-unstable_mock.development.js 192     // eslint-disable-next-line react-internal/no-production-logging

./node_modules/scheduler/umd/scheduler-unstable_mock.development.js 413         // This currentTask hasn't expired, and we've reached the deadline.

./node_modules/scheduler/umd/scheduler-unstable_mock.development.js 511       // This is a fork of runWithPriority, inlined for performance.

./node_modules/scheduler/umd/scheduler-tracing.development.js 13   // eslint-disable-next-line no-unused-expressions

./node_modules/scheduler/umd/scheduler-tracing.development.js 16     : typeof define === 'function' && define.amd // eslint-disable-line no-undef

./node_modules/scheduler/umd/scheduler-tracing.development.js 17     ? define(['react'], factory) // eslint-disable-line no-undef

./node_modules/scheduler/umd/scheduler-tracing.development.js 42     // eslint-disable-next-line max-len

./node_modules/scheduler/umd/scheduler-tracing.development.js 57     // eslint-disable-next-line max-len

./node_modules/scheduler/umd/scheduler.profiling.min.js 15   // eslint-disable-next-line no-unused-expressions

./node_modules/scheduler/umd/scheduler.profiling.min.js 18     : typeof define === 'function' && define.amd // eslint-disable-line no-undef

./node_modules/scheduler/umd/scheduler.profiling.min.js 19     ? define(['react'], factory) // eslint-disable-line no-undef

./node_modules/scheduler/umd/scheduler-tracing.production.min.js 13   // eslint-disable-next-line no-unused-expressions

./node_modules/scheduler/umd/scheduler-tracing.production.min.js 16     : typeof define === 'function' && define.amd // eslint-disable-line no-undef

./node_modules/scheduler/umd/scheduler-tracing.production.min.js 17     ? define(['react'], factory) // eslint-disable-line no-undef

./node_modules/scheduler/umd/scheduler-tracing.production.min.js 42     // eslint-disable-next-line max-len

./node_modules/scheduler/umd/scheduler-tracing.production.min.js 57     // eslint-disable-next-line max-len

./node_modules/scheduler/umd/scheduler.development.js 15   // eslint-disable-next-line no-unused-expressions

./node_modules/scheduler/umd/scheduler.development.js 18     : typeof define === 'function' && define.amd // eslint-disable-line no-undef

./node_modules/scheduler/umd/scheduler.development.js 19     ? define(['react'], factory) // eslint-disable-line no-undef

./node_modules/scheduler/umd/scheduler.production.min.js 15   // eslint-disable-next-line no-unused-expressions

./node_modules/scheduler/umd/scheduler.production.min.js 18     : typeof define === 'function' && define.amd // eslint-disable-line no-undef

./node_modules/scheduler/umd/scheduler.production.min.js 19     ? define(['react'], factory) // eslint-disable-line no-undef

./node_modules/mime-db/db.json 1981   "application/vnd.afpc.afplinedata": {

./node_modules/mime-db/db.json 1984   "application/vnd.afpc.afplinedata-pagedef": {

./node_modules/mime-db/db.json 3165   "application/vnd.ibm.afplinedata": {

./node_modules/mime-db/db.json 3871   "application/vnd.nebumind.line": {

./node_modules/mime-db/db.json 7764   "text/prs.lines.tag": {

./node_modules/clean-css/lib/clean.js 16 var inlineFrom = require('./options/inline');

./node_modules/clean-css/lib/clean.js 17 var inlineRequestFrom = require('./options/inline-request');

./node_modules/clean-css/lib/clean.js 18 var inlineTimeoutFrom = require('./options/inline-timeout');

./node_modules/clean-css/lib/clean.js 37     inline: inlineFrom(options.inline),

./node_modules/clean-css/lib/clean.js 38     inlineRequest: inlineRequestFrom(options.inlineRequest),

./node_modules/clean-css/lib/clean.js 39     inlineTimeout: inlineTimeoutFrom(options.inlineTimeout),

./node_modules/clean-css/lib/clean.js 45     sourceMapInlineSources: !!options.sourceMapInlineSources

./node_modules/clean-css/lib/clean.js 100     inlinedStylesheets: [],

./node_modules/clean-css/lib/clean.js 156   output.inlinedStylesheets = context.inlinedStylesheets;

./node_modules/clean-css/lib/reader/input-source-map-tracker.js 23   var line = metadata[0];

./node_modules/clean-css/lib/reader/input-source-map-tracker.js 27     line: line,

./node_modules/clean-css/lib/reader/input-source-map-tracker.js 41   if (originalPosition.line === null && line > 1 && selectorFallbacks > 0) {

./node_modules/clean-css/lib/reader/input-source-map-tracker.js 42     return originalPositionFor(maps, [line - 1, column, source], range, selectorFallbacks - 1);

./node_modules/clean-css/lib/reader/input-source-map-tracker.js 45   return originalPosition.line !== null ?

./node_modules/clean-css/lib/reader/input-source-map-tracker.js 51   return [asHash.line, asHash.column, asHash.source];

./node_modules/clean-css/lib/reader/apply-source-maps.js 21     inline: context.options.inline,

./node_modules/clean-css/lib/reader/apply-source-maps.js 22     inlineRequest: context.options.inlineRequest,

./node_modules/clean-css/lib/reader/apply-source-maps.js 23     inlineTimeout: context.options.inlineTimeout,

./node_modules/clean-css/lib/reader/apply-source-maps.js 140   var isAllowed = isAllowedResource(uri, true, applyContext.inline);

./node_modules/clean-css/lib/reader/apply-source-maps.js 154   applyContext.fetch(uri, applyContext.inlineRequest, applyContext.inlineTimeout, function (error, body) {

./node_modules/clean-css/lib/reader/apply-source-maps.js 165   var isAllowed = isAllowedResource(uri, false, applyContext.inline);

./node_modules/clean-css/lib/reader/load-remote-resource.js 11 function loadRemoteResource(uri, inlineRequest, inlineTimeout, callback) {

./node_modules/clean-css/lib/reader/load-remote-resource.js 12   var proxyProtocol = inlineRequest.protocol || inlineRequest.hostname;

./node_modules/clean-css/lib/reader/load-remote-resource.js 19     inlineRequest || {}

./node_modules/clean-css/lib/reader/load-remote-resource.js 22   if (inlineRequest.hostname !== undefined) {

./node_modules/clean-css/lib/reader/load-remote-resource.js 24     requestOptions.protocol = inlineRequest.protocol || HTTP_PROTOCOL;

./node_modules/clean-css/lib/reader/load-remote-resource.js 44       return loadRemoteResource(movedUri, inlineRequest, inlineTimeout, callback);

./node_modules/clean-css/lib/reader/load-remote-resource.js 71   .setTimeout(inlineTimeout);

./node_modules/clean-css/lib/reader/read-sources.js 48   return fromStyles(input, context, { inline: context.options.inline }, callback);

./node_modules/clean-css/lib/reader/read-sources.js 61   return fromStyles(inputAsImports.join(''), context, { inline: ['all'] }, callback);

./node_modules/clean-css/lib/reader/read-sources.js 66   return fromStyles(inputAsImports.join(''), context, { inline: ['all'] }, callback);

./node_modules/clean-css/lib/reader/read-sources.js 129 function fromStyles(styles, context, parentInlinerContext, callback) {

./node_modules/clean-css/lib/reader/read-sources.js 150   return allowsAnyImports(parentInlinerContext.inline) ?

./node_modules/clean-css/lib/reader/read-sources.js 151     inline(tokens, context, parentInlinerContext, callback) :

./node_modules/clean-css/lib/reader/read-sources.js 155 function allowsAnyImports(inline) {

./node_modules/clean-css/lib/reader/read-sources.js 156   return !(inline.length == 1 && inline[0] == 'none');

./node_modules/clean-css/lib/reader/read-sources.js 159 function inline(tokens, externalContext, parentInlinerContext, callback) {

./node_modules/clean-css/lib/reader/read-sources.js 160   var inlinerContext = {

./node_modules/clean-css/lib/reader/read-sources.js 166     inlinedStylesheets: parentInlinerContext.inlinedStylesheets || externalContext.inlinedStylesheets,

./node_modules/clean-css/lib/reader/read-sources.js 167     inline: parentInlinerContext.inline,

./node_modules/clean-css/lib/reader/read-sources.js 168     inlineRequest: externalContext.options.inlineRequest,

./node_modules/clean-css/lib/reader/read-sources.js 169     inlineTimeout: externalContext.options.inlineTimeout,

./node_modules/clean-css/lib/reader/read-sources.js 170     isRemote: parentInlinerContext.isRemote || false,

./node_modules/clean-css/lib/reader/read-sources.js 178   return doInlineImports(inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 181 function doInlineImports(inlinerContext) {

./node_modules/clean-css/lib/reader/read-sources.js 185   for (i = 0, l = inlinerContext.sourceTokens.length; i < l; i++) {

./node_modules/clean-css/lib/reader/read-sources.js 186     token = inlinerContext.sourceTokens[i];

./node_modules/clean-css/lib/reader/read-sources.js 189       inlinerContext.sourceTokens.splice(0, i);

./node_modules/clean-css/lib/reader/read-sources.js 190       return inlineStylesheet(token, inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 192       inlinerContext.outputTokens.push(token);

./node_modules/clean-css/lib/reader/read-sources.js 194       inlinerContext.outputTokens.push(token);

./node_modules/clean-css/lib/reader/read-sources.js 195       inlinerContext.afterContent = true;

./node_modules/clean-css/lib/reader/read-sources.js 199   inlinerContext.sourceTokens = [];

./node_modules/clean-css/lib/reader/read-sources.js 200   return inlinerContext.callback(inlinerContext.outputTokens);

./node_modules/clean-css/lib/reader/read-sources.js 203 function inlineStylesheet(token, inlinerContext) {

./node_modules/clean-css/lib/reader/read-sources.js 210     inlineRemoteStylesheet(uri, mediaQuery, metadata, inlinerContext) :

./node_modules/clean-css/lib/reader/read-sources.js 211     inlineLocalStylesheet(uri, mediaQuery, metadata, inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 214 function inlineRemoteStylesheet(uri, mediaQuery, metadata, inlinerContext) {

./node_modules/clean-css/lib/reader/read-sources.js 215   var isAllowed = isAllowedResource(uri, true, inlinerContext.inline);

./node_modules/clean-css/lib/reader/read-sources.js 217   var isLoaded = uri in inlinerContext.externalContext.sourcesContent;

./node_modules/clean-css/lib/reader/read-sources.js 220   if (inlinerContext.inlinedStylesheets.indexOf(uri) > -1) {

./node_modules/clean-css/lib/reader/read-sources.js 221     inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as it has already been imported.');

./node_modules/clean-css/lib/reader/read-sources.js 222     inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

./node_modules/clean-css/lib/reader/read-sources.js 223     return doInlineImports(inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 224   } else if (inlinerContext.localOnly && inlinerContext.afterContent) {

./node_modules/clean-css/lib/reader/read-sources.js 225     inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as no callback given and after other content.');

./node_modules/clean-css/lib/reader/read-sources.js 226     inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

./node_modules/clean-css/lib/reader/read-sources.js 227     return doInlineImports(inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 229     inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as no protocol given.');

./node_modules/clean-css/lib/reader/read-sources.js 230     inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));

./node_modules/clean-css/lib/reader/read-sources.js 231     inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

./node_modules/clean-css/lib/reader/read-sources.js 232     return doInlineImports(inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 233   } else if (inlinerContext.localOnly && !isLoaded) {

./node_modules/clean-css/lib/reader/read-sources.js 234     inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as no callback given.');

./node_modules/clean-css/lib/reader/read-sources.js 235     inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));

./node_modules/clean-css/lib/reader/read-sources.js 236     inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

./node_modules/clean-css/lib/reader/read-sources.js 237     return doInlineImports(inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 238   } else if (!isAllowed && inlinerContext.afterContent) {

./node_modules/clean-css/lib/reader/read-sources.js 239     inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as resource is not allowed and after other content.');

./node_modules/clean-css/lib/reader/read-sources.js 240     inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

./node_modules/clean-css/lib/reader/read-sources.js 241     return doInlineImports(inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 243     inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as resource is not allowed.');

./node_modules/clean-css/lib/reader/read-sources.js 244     inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));

./node_modules/clean-css/lib/reader/read-sources.js 245     inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

./node_modules/clean-css/lib/reader/read-sources.js 246     return doInlineImports(inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 249   inlinerContext.inlinedStylesheets.push(uri);

./node_modules/clean-css/lib/reader/read-sources.js 253       inlinerContext.errors.push('Broken @import declaration of "' + uri + '" - ' + error);

./node_modules/clean-css/lib/reader/read-sources.js 256         inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));

./node_modules/clean-css/lib/reader/read-sources.js 257         inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

./node_modules/clean-css/lib/reader/read-sources.js 258         doInlineImports(inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 262     inlinerContext.inline = inlinerContext.externalContext.options.inline;

./node_modules/clean-css/lib/reader/read-sources.js 263     inlinerContext.isRemote = true;

./node_modules/clean-css/lib/reader/read-sources.js 265     inlinerContext.externalContext.source = originalUri;

./node_modules/clean-css/lib/reader/read-sources.js 266     inlinerContext.externalContext.sourcesContent[uri] = importedStyles;

./node_modules/clean-css/lib/reader/read-sources.js 267     inlinerContext.externalContext.stats.originalSize += importedStyles.length;

./node_modules/clean-css/lib/reader/read-sources.js 269     return fromStyles(importedStyles, inlinerContext.externalContext, inlinerContext, function (importedTokens) {

./node_modules/clean-css/lib/reader/read-sources.js 272       inlinerContext.outputTokens = inlinerContext.outputTokens.concat(importedTokens);

./node_modules/clean-css/lib/reader/read-sources.js 273       inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

./node_modules/clean-css/lib/reader/read-sources.js 275       return doInlineImports(inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 280     whenLoaded(null, inlinerContext.externalContext.sourcesContent[uri]) :

./node_modules/clean-css/lib/reader/read-sources.js 281     inlinerContext.fetch(uri, inlinerContext.inlineRequest, inlinerContext.inlineTimeout, whenLoaded);

./node_modules/clean-css/lib/reader/read-sources.js 284 function inlineLocalStylesheet(uri, mediaQuery, metadata, inlinerContext) {

./node_modules/clean-css/lib/reader/read-sources.js 288     path.resolve(inlinerContext.rebaseTo, uri);

./node_modules/clean-css/lib/reader/read-sources.js 291   var isAllowed = isAllowedResource(uri, false, inlinerContext.inline);

./node_modules/clean-css/lib/reader/read-sources.js 293   var isLoaded = normalizedPath in inlinerContext.externalContext.sourcesContent;

./node_modules/clean-css/lib/reader/read-sources.js 295   if (inlinerContext.inlinedStylesheets.indexOf(absoluteUri) > -1) {

./node_modules/clean-css/lib/reader/read-sources.js 296     inlinerContext.warnings.push('Ignoring local @import of "' + uri + '" as it has already been imported.');

./node_modules/clean-css/lib/reader/read-sources.js 298     inlinerContext.errors.push('Ignoring local @import of "' + uri + '" as resource is missing.');

./node_modules/clean-css/lib/reader/read-sources.js 299   } else if (!isAllowed && inlinerContext.afterContent) {

./node_modules/clean-css/lib/reader/read-sources.js 300     inlinerContext.warnings.push('Ignoring local @import of "' + uri + '" as resource is not allowed and after other content.');

./node_modules/clean-css/lib/reader/read-sources.js 301   } else if (inlinerContext.afterContent) {

./node_modules/clean-css/lib/reader/read-sources.js 302     inlinerContext.warnings.push('Ignoring local @import of "' + uri + '" as after other content.');

./node_modules/clean-css/lib/reader/read-sources.js 304     inlinerContext.warnings.push('Skipping local @import of "' + uri + '" as resource is not allowed.');

./node_modules/clean-css/lib/reader/read-sources.js 305     inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));

./node_modules/clean-css/lib/reader/read-sources.js 308       inlinerContext.externalContext.sourcesContent[normalizedPath] :

./node_modules/clean-css/lib/reader/read-sources.js 311     inlinerContext.inlinedStylesheets.push(absoluteUri);

./node_modules/clean-css/lib/reader/read-sources.js 312     inlinerContext.inline = inlinerContext.externalContext.options.inline;

./node_modules/clean-css/lib/reader/read-sources.js 314     inlinerContext.externalContext.source = normalizedPath;

./node_modules/clean-css/lib/reader/read-sources.js 315     inlinerContext.externalContext.sourcesContent[normalizedPath] = importedStyles;

./node_modules/clean-css/lib/reader/read-sources.js 316     inlinerContext.externalContext.stats.originalSize += importedStyles.length;

./node_modules/clean-css/lib/reader/read-sources.js 318     return fromStyles(importedStyles, inlinerContext.externalContext, inlinerContext, function (importedTokens) {

./node_modules/clean-css/lib/reader/read-sources.js 321       inlinerContext.outputTokens = inlinerContext.outputTokens.concat(importedTokens);

./node_modules/clean-css/lib/reader/read-sources.js 322       inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

./node_modules/clean-css/lib/reader/read-sources.js 324       return doInlineImports(inlinerContext);

./node_modules/clean-css/lib/reader/read-sources.js 328   inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

./node_modules/clean-css/lib/reader/read-sources.js 330   return doInlineImports(inlinerContext);

./node_modules/clean-css/lib/reader/load-original-sources.js 14     inline: context.options.inline,

./node_modules/clean-css/lib/reader/load-original-sources.js 15     inlineRequest: context.options.inlineRequest,

./node_modules/clean-css/lib/reader/load-original-sources.js 16     inlineTimeout: context.options.inlineTimeout,

./node_modules/clean-css/lib/reader/load-original-sources.js 24   return context.options.sourceMap && context.options.sourceMapInlineSources ?

./node_modules/clean-css/lib/reader/load-original-sources.js 88   var isAllowed = isAllowedResource(uri, true, loadContext.inline);

./node_modules/clean-css/lib/reader/load-original-sources.js 102   loadContext.fetch(uri, loadContext.inlineRequest, loadContext.inlineTimeout, function (error, content) {

./node_modules/clean-css/lib/reader/load-original-sources.js 112   var isAllowed = isAllowedResource(relativeUri, false, loadContext.inline);

./node_modules/clean-css/lib/tokenizer/tokenize.js 71       line: 1,

./node_modules/clean-css/lib/tokenizer/tokenize.js 128       [position.line, position.column, position.source] :

./node_modules/clean-css/lib/tokenizer/tokenize.js 145       metadata = [position.line, position.column - 1, position.source];

./node_modules/clean-css/lib/tokenizer/tokenize.js 173       metadata = [position.line, position.column - serializedBufferPart.length + 1, position.source];

./node_modules/clean-css/lib/tokenizer/tokenize.js 191       externalContext.warnings.push('Unexpected \'*/\' at ' + formatPosition([position.line, position.column, position.source]) + '.');

./node_modules/clean-css/lib/tokenizer/tokenize.js 419       externalContext.warnings.push('Unexpected \'}\' at ' + formatPosition([position.line, position.column, position.source]) + '.');

./node_modules/clean-css/lib/tokenizer/tokenize.js 444       propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);

./node_modules/clean-css/lib/tokenizer/tokenize.js 449       propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);

./node_modules/clean-css/lib/tokenizer/tokenize.js 456       propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);

./node_modules/clean-css/lib/tokenizer/tokenize.js 461       propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);

./node_modules/clean-css/lib/tokenizer/tokenize.js 471       // space or *nix newline within property, e.g. a{margin:0 <--

./node_modules/clean-css/lib/tokenizer/tokenize.js 477       // win newline within property, e.g. a{margin:0\r\n<--

./node_modules/clean-css/lib/tokenizer/tokenize.js 483       // win newline

./node_modules/clean-css/lib/tokenizer/tokenize.js 486       // ignore windows newline which is composed of two characters

./node_modules/clean-css/lib/tokenizer/tokenize.js 498     position.line = (isNewLineWin || isNewLineNix || isCarriageReturn) ? position.line + 1 : position.line;

./node_modules/clean-css/lib/tokenizer/tokenize.js 503     externalContext.warnings.push('Missing \'}\' at ' + formatPosition([position.line, position.column, position.source]) + '.');

./node_modules/clean-css/lib/optimizer/validator.js 52     'linear',

./node_modules/clean-css/lib/optimizer/validator.js 162     'inline',

./node_modules/clean-css/lib/optimizer/validator.js 163     'inline-block',

./node_modules/clean-css/lib/optimizer/validator.js 164     'inline-table',

./node_modules/clean-css/lib/optimizer/validator.js 240   'line-height': [

./node_modules/clean-css/lib/optimizer/validator.js 288     'line-through',

./node_modules/clean-css/lib/optimizer/validator.js 290     'overline',

./node_modules/clean-css/lib/optimizer/validator.js 291     'underline'

./node_modules/clean-css/lib/optimizer/validator.js 301     'baseline',

./node_modules/clean-css/lib/optimizer/validator.js 512     isLineHeightKeyword: isKeyword('line-height'),

./node_modules/clean-css/lib/optimizer/level-1/tidy-rules.js 77       // swallow escaped new windows lines in comments

./node_modules/clean-css/lib/optimizer/level-1/tidy-rules.js 81       // swallow escaped new *nix lines in comments

./node_modules/clean-css/lib/optimizer/level-1/tidy-rules.js 119       // skip newline

./node_modules/clean-css/lib/optimizer/level-1/optimize.js 210 function optimizeOutline(property) {

./node_modules/clean-css/lib/optimizer/level-1/optimize.js 510     } else if (name == 'outline' && levelOptions.optimizeOutline) {

./node_modules/clean-css/lib/optimizer/level-1/optimize.js 511       optimizeOutline(property);

./node_modules/clean-css/lib/optimizer/level-1/shorten-hex.js 86   linen: '#faf0e6',

./node_modules/clean-css/lib/optimizer/level-2/reorderable.js 32   if (leftName == 'font' && rightName == 'line-height' || rightName == 'font' && leftName == 'line-height')

./node_modules/clean-css/lib/optimizer/level-2/reorderable.js 87   return name == 'font' || name == 'line-height' || name == 'list-style';

./node_modules/clean-css/lib/optimizer/level-2/is-mergeable.js 21   ':first-line',

./node_modules/clean-css/lib/optimizer/level-2/is-mergeable.js 28   '::first-line'

./node_modules/clean-css/lib/optimizer/level-2/restore.js 165   // then may come line-height

./node_modules/clean-css/lib/optimizer/level-2/can-override.js 268     outlineStyle: keywordWithGlobal('*-style'),

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 642       'line-height',

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 683   'line-height': {

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 781   'outline': {

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 784       canOverride.property.outlineStyle,

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 788       'outline-color',

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 789       'outline-style',

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 790       'outline-width'

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 792     breakUp: breakUp.outline,

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 797   'outline-color': {

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 800       'outline'

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 805   'outline-style': {

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 806     canOverride: canOverride.property.outlineStyle,

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 808       'outline'

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 812   'outline-width': {

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 815       'outline'

./node_modules/clean-css/lib/optimizer/level-2/compactable.js 999     defaultValue: 'baseline'

./node_modules/clean-css/lib/optimizer/level-2/break-up.js 270   var height = _wrapDefault('line-height', property, compactable);

./node_modules/clean-css/lib/optimizer/level-2/break-up.js 351   // ... and perhaps line-height

./node_modules/clean-css/lib/optimizer/level-2/break-up.js 642   outline: widthStyleColor,

./node_modules/clean-css/lib/optimizer/level-2/properties/merge-into-shorthands.js 334   var line1 = metadata1[0];

./node_modules/clean-css/lib/optimizer/level-2/properties/merge-into-shorthands.js 335   var line2 = metadata2[0];

./node_modules/clean-css/lib/optimizer/level-2/properties/merge-into-shorthands.js 339   if (line1 < line2) {

./node_modules/clean-css/lib/optimizer/level-2/properties/merge-into-shorthands.js 341   } else if (line1 === line2) {

./node_modules/clean-css/lib/utils/format-position.js 2   var line = metadata[0];

./node_modules/clean-css/lib/utils/format-position.js 7     source + ':' + line + ':' + column :

./node_modules/clean-css/lib/utils/format-position.js 8     line + ':' + column;

./node_modules/clean-css/lib/writer/simple.js 24   serializeContext.line += parts.length - 1;

./node_modules/clean-css/lib/writer/simple.js 34     line: 1,

./node_modules/clean-css/lib/writer/source-maps.js 37   serializeContext.line += parts.length - 1;

./node_modules/clean-css/lib/writer/source-maps.js 48   var line = mapping[0];

./node_modules/clean-css/lib/writer/source-maps.js 60       line: serializeContext.line,

./node_modules/clean-css/lib/writer/source-maps.js 65       line: line,

./node_modules/clean-css/lib/writer/source-maps.js 70   if (serializeContext.inlineSources && (originalSource in serializeContext.sourcesContent)) {

./node_modules/clean-css/lib/writer/source-maps.js 81     inlineSources: context.options.sourceMapInlineSources,

./node_modules/clean-css/lib/writer/source-maps.js 82     line: 1,

./node_modules/clean-css/lib/options/inline-timeout.js 3 function inlineTimeoutFrom(option) {

./node_modules/clean-css/lib/options/inline-timeout.js 7 module.exports = inlineTimeoutFrom;

./node_modules/clean-css/lib/options/inline.js 1 function inlineOptionsFrom(rules) {

./node_modules/clean-css/lib/options/inline.js 15 module.exports = inlineOptionsFrom;

./node_modules/clean-css/lib/options/inline-request.js 5 function inlineRequestFrom(option) {

./node_modules/clean-css/lib/options/inline-request.js 22 module.exports = inlineRequestFrom;

./node_modules/clean-css/lib/options/compatibility.js 35         ':first-line',

./node_modules/clean-css/lib/options/compatibility.js 58         '::first-line'

./node_modules/clean-css/lib/options/optimization-level.js 21   optimizeOutline: true,

./node_modules/ignore/index.js 313 // > A blank line matches no files, so it can serve as a separator for readability.

./node_modules/ignore/index.js 318   // > A line starting with # serves as a comment.

./node_modules/ignore/legacy.js 226 }; // > A blank line matches no files, so it can serve as a separator for readability.

./node_modules/ignore/legacy.js 230   return pattern && isString(pattern) && !REGEX_TEST_BLANK_LINE.test(pattern) // > A line starting with # serves as a comment.

./node_modules/resolve/test/core.js 25             var requireFunc = function () { require(mod); }; // eslint-disable-line no-loop-func

./node_modules/resolve/test/core.js 38         var libs = require('repl')._builtinLibs; // eslint-disable-line no-underscore-dangle

./node_modules/resolve/test/core.js 47                 function () { require(mod); }, // eslint-disable-line no-loop-func

./node_modules/resolve/test/core.js 72                     function () { require(mod); }, // eslint-disable-line no-loop-func

./node_modules/resolve/test/resolver_sync.js 350                 pkg.main = pkg.browser; // eslint-disable-line no-param-reassign

./node_modules/resolve/test/resolver_sync.js 351                 delete pkg.browser; // eslint-disable-line no-param-reassign

./node_modules/resolve/test/resolver.js 437                     pkg.main = pkg.browser; // eslint-disable-line no-param-reassign

./node_modules/resolve/test/resolver.js 438                     delete pkg.browser; // eslint-disable-line no-param-reassign

./node_modules/resolve/test/symlinks.js 111             st.plan('is 1.x' ? 3 : 5); // eslint-disable-line no-constant-condition

./node_modules/resolve/test/symlinks.js 119             /* eslint multiline-comment-style: 0 */

./node_modules/resolve/test/precedence.js 16 test('./ should not load ${dir}.js', function (t) { // eslint-disable-line no-template-curly-in-string

./node_modules/resolve/test/filter.js 12             pkg.main = 'doom'; // eslint-disable-line no-param-reassign

./node_modules/resolve/test/filter_sync.js 11         packageFilter: function (pkg, /*pkgfile,*/ dir) { // eslint-disable-line spaced-comment

./node_modules/resolve/test/filter_sync.js 12             pkg.main = 'doom'; // eslint-disable-line no-param-reassign

./node_modules/resolve/test/filter_sync.js 13             packageFilterArgs = 'is 1.x' ? [pkg, dir] : [pkg, pkgfile, dir]; // eslint-disable-line no-constant-condition, no-undef

./node_modules/resolve/test/filter_sync.js 23     if (!'is 1.x') { // eslint-disable-line no-constant-condition

./node_modules/resolve/test/filter_sync.js 28     var packageDir = packageFilterArgs['is 1.x' ? 1 : 2]; // eslint-disable-line no-constant-condition

./node_modules/resolve/test/filter_sync.js 29     // eslint-disable-next-line no-constant-condition

./node_modules/resolve/lib/core.js 12             continue; // eslint-disable-line no-restricted-syntax, no-continue

./node_modules/resolve/lib/core.js 48 for (var mod in data) { // eslint-disable-line no-restricted-syntax

./node_modules/resolve/lib/core.json 47 	"readline": true,

./node_modules/resolve/lib/sync.js 113                 x = path.resolve(pkg.dir, r); // eslint-disable-line no-param-reassign

./node_modules/resolve/lib/sync.js 146             pkg = opts.packageFilter(pkg, /*pkgfile,*/ dir); // eslint-disable-line spaced-comment

./node_modules/resolve/lib/sync.js 161                 pkg = opts.packageFilter(pkg, /*pkgfile,*/ x); // eslint-disable-line spaced-comment

./node_modules/regexpu-core/rewrite-pattern.js 22 		// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):

./node_modules/regexpu-core/rewrite-pattern.js 289 		case 'anchor':

./src/views/meta2d.jsx 14   path.lineTo(x+width, y);

./src/views/meta2d.jsx 15   path.lineTo(x, y+height);

./src/views/meta2d.jsx 16   path.lineTo(x + width, y + height);

./src/views/meta2d.jsx 24   const anchors = [];

./src/views/meta2d.jsx 25   anchors.push({

./src/views/meta2d.jsx 32   anchors.push({

./src/views/meta2d.jsx 39   anchors.push({

./src/views/meta2d.jsx 45   pen.anchors = anchors;

./src/views/header.jsx 50     // window.meta2d.drawLine('curve'); // wyl 钢笔划线使用curve还是line or polyline

./src/views/header.jsx 51     window.meta2d.drawLine('polyline');

